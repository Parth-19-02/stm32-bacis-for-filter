
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000944  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c0  200009c0  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000149b9  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000389c  00000000  00000000  00034aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001120  00000000  00000000  00038348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d07  00000000  00000000  00039468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023380  00000000  00000000  0003a16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017ae7  00000000  00000000  0005d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb044  00000000  00000000  00074fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a24  00000000  00000000  0014001c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00144a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007d74 	.word	0x08007d74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007d74 	.word	0x08007d74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
uint8_t mode =0;
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	80fb      	strh	r3, [r7, #6]

	mode = mode +1;
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80004d8:	701a      	strb	r2, [r3, #0]
	if (mode>3)
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b03      	cmp	r3, #3
 80004e0:	d902      	bls.n	80004e8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		mode=0;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	}
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	2000018c 	.word	0x2000018c

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc46 	bl	8000d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f842 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f93e 	bl	8000784 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000508:	f000 f8a8 	bl	800065c <MX_I2C1_Init>
  MX_I2S3_Init();
 800050c:	f000 f8d4 	bl	80006b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000510:	f000 f902 	bl	8000718 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000514:	f006 ffda 	bl	80074cc <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (mode == 0){
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <main+0x88>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d104      	bne.n	800052a <main+0x32>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2102      	movs	r1, #2
 8000524:	4817      	ldr	r0, [pc, #92]	; (8000584 <main+0x8c>)
 8000526:	f000 ff75 	bl	8001414 <HAL_GPIO_WritePin>
	  }
	  if(mode == 1){
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0x88>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d104      	bne.n	800053c <main+0x44>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	2102      	movs	r1, #2
 8000536:	4813      	ldr	r0, [pc, #76]	; (8000584 <main+0x8c>)
 8000538:	f000 ff6c 	bl	8001414 <HAL_GPIO_WritePin>
	  }
	  if(mode == 2){
 800053c:	4b10      	ldr	r3, [pc, #64]	; (8000580 <main+0x88>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d111      	bne.n	8000568 <main+0x70>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	480e      	ldr	r0, [pc, #56]	; (8000584 <main+0x8c>)
 800054a:	f000 ff63 	bl	8001414 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 800054e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000552:	f000 fc8d 	bl	8000e70 <HAL_Delay>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	2102      	movs	r1, #2
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x8c>)
 800055c:	f000 ff5a 	bl	8001414 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8000560:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000564:	f000 fc84 	bl	8000e70 <HAL_Delay>
	  }
	  if(mode == 3){
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <main+0x88>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b03      	cmp	r3, #3
 800056e:	d103      	bne.n	8000578 <main+0x80>
		  HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8000570:	2102      	movs	r1, #2
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <main+0x8c>)
 8000574:	f000 ff67 	bl	8001446 <HAL_GPIO_TogglePin>
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000578:	f006 ffce 	bl	8007518 <MX_USB_HOST_Process>
	  if (mode == 0){
 800057c:	e7cc      	b.n	8000518 <main+0x20>
 800057e:	bf00      	nop
 8000580:	2000018c 	.word	0x2000018c
 8000584:	40020800 	.word	0x40020800

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f007 fb5c 	bl	8007c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f8:	2308      	movs	r3, #8
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f93a 	bl	8003888 <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061a:	f000 f9cb 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2105      	movs	r1, #5
 800063c:	4618      	mov	r0, r3
 800063e:	f003 fb9b 	bl	8003d78 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000648:	f000 f9b4 	bl	80009b4 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C1_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_I2C1_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2C1_Init+0x50>)
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x58>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_I2C1_Init+0x50>)
 800067a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_I2C1_Init+0x50>)
 800069a:	f002 fb11 	bl	8002cc0 <HAL_I2C_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 f986 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000098 	.word	0x20000098
 80006b0:	40005400 	.word	0x40005400
 80006b4:	000186a0 	.word	0x000186a0

080006b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_I2S3_Init+0x54>)
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <MX_I2S3_Init+0x58>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2S3_Init+0x54>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_I2S3_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2S3_Init+0x54>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_I2S3_Init+0x54>)
 80006d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_I2S3_Init+0x54>)
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <MX_I2S3_Init+0x5c>)
 80006e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2S3_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_I2S3_Init+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2S3_Init+0x54>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_I2S3_Init+0x54>)
 80006f8:	f002 fc26 	bl	8002f48 <HAL_I2S_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000702:	f000 f957 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000ec 	.word	0x200000ec
 8000710:	40003c00 	.word	0x40003c00
 8000714:	00017700 	.word	0x00017700

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_SPI1_Init+0x64>)
 800071e:	4a18      	ldr	r2, [pc, #96]	; (8000780 <MX_SPI1_Init+0x68>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_SPI1_Init+0x64>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SPI1_Init+0x64>)
 8000744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000748:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SPI1_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_SPI1_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SPI1_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_SPI1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SPI1_Init+0x64>)
 8000764:	220a      	movs	r2, #10
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_SPI1_Init+0x64>)
 800076a:	f003 fe51 	bl	8004410 <HAL_SPI_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000774:	f000 f91e 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000134 	.word	0x20000134
 8000780:	40013000 	.word	0x40013000

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b7f      	ldr	r3, [pc, #508]	; (800099c <MX_GPIO_Init+0x218>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a7e      	ldr	r2, [pc, #504]	; (800099c <MX_GPIO_Init+0x218>)
 80007a4:	f043 0310 	orr.w	r3, r3, #16
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b7c      	ldr	r3, [pc, #496]	; (800099c <MX_GPIO_Init+0x218>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0310 	and.w	r3, r3, #16
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b78      	ldr	r3, [pc, #480]	; (800099c <MX_GPIO_Init+0x218>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a77      	ldr	r2, [pc, #476]	; (800099c <MX_GPIO_Init+0x218>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b75      	ldr	r3, [pc, #468]	; (800099c <MX_GPIO_Init+0x218>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b71      	ldr	r3, [pc, #452]	; (800099c <MX_GPIO_Init+0x218>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a70      	ldr	r2, [pc, #448]	; (800099c <MX_GPIO_Init+0x218>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b6e      	ldr	r3, [pc, #440]	; (800099c <MX_GPIO_Init+0x218>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b6a      	ldr	r3, [pc, #424]	; (800099c <MX_GPIO_Init+0x218>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a69      	ldr	r2, [pc, #420]	; (800099c <MX_GPIO_Init+0x218>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b67      	ldr	r3, [pc, #412]	; (800099c <MX_GPIO_Init+0x218>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <MX_GPIO_Init+0x218>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a62      	ldr	r2, [pc, #392]	; (800099c <MX_GPIO_Init+0x218>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b60      	ldr	r3, [pc, #384]	; (800099c <MX_GPIO_Init+0x218>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b5c      	ldr	r3, [pc, #368]	; (800099c <MX_GPIO_Init+0x218>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a5b      	ldr	r2, [pc, #364]	; (800099c <MX_GPIO_Init+0x218>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b59      	ldr	r3, [pc, #356]	; (800099c <MX_GPIO_Init+0x218>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4856      	ldr	r0, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x21c>)
 8000848:	f000 fde4 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	4854      	ldr	r0, [pc, #336]	; (80009a4 <MX_GPIO_Init+0x220>)
 8000852:	f000 fddf 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2102      	movs	r1, #2
 800085a:	4852      	ldr	r0, [pc, #328]	; (80009a4 <MX_GPIO_Init+0x220>)
 800085c:	f000 fdda 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000860:	2200      	movs	r2, #0
 8000862:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000866:	4850      	ldr	r0, [pc, #320]	; (80009a8 <MX_GPIO_Init+0x224>)
 8000868:	f000 fdd4 	bl	8001414 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086c:	2308      	movs	r3, #8
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4847      	ldr	r0, [pc, #284]	; (80009a0 <MX_GPIO_Init+0x21c>)
 8000884:	f000 fc2a 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Led_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Led_Pin;
 8000888:	2303      	movs	r3, #3
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4841      	ldr	r0, [pc, #260]	; (80009a4 <MX_GPIO_Init+0x220>)
 80008a0:	f000 fc1c 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80008a4:	2304      	movs	r3, #4
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	483a      	ldr	r0, [pc, #232]	; (80009a4 <MX_GPIO_Init+0x220>)
 80008ba:	f000 fc0f 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ce:	2305      	movs	r3, #5
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4832      	ldr	r0, [pc, #200]	; (80009a4 <MX_GPIO_Init+0x220>)
 80008da:	f000 fbff 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008de:	2301      	movs	r3, #1
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	482e      	ldr	r0, [pc, #184]	; (80009ac <MX_GPIO_Init+0x228>)
 80008f4:	f000 fbf2 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008f8:	2304      	movs	r3, #4
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4829      	ldr	r0, [pc, #164]	; (80009b0 <MX_GPIO_Init+0x22c>)
 800090c:	f000 fbe6 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4820      	ldr	r0, [pc, #128]	; (80009b0 <MX_GPIO_Init+0x22c>)
 800092e:	f000 fbd5 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000932:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000936:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4817      	ldr	r0, [pc, #92]	; (80009a8 <MX_GPIO_Init+0x224>)
 800094c:	f000 fbc6 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000950:	2320      	movs	r3, #32
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_GPIO_Init+0x224>)
 8000964:	f000 fbba 	bl	80010dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_GPIO_Init+0x21c>)
 800097e:	f000 fbad 	bl	80010dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2008      	movs	r0, #8
 8000988:	f000 fb71 	bl	800106e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800098c:	2008      	movs	r0, #8
 800098e:	f000 fb8a 	bl	80010a6 <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	; 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fb2a 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_I2C_MspInit+0x84>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d12c      	bne.n	8000a8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a4e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a54:	2312      	movs	r3, #18
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a60:	2304      	movs	r3, #4
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <HAL_I2C_MspInit+0x8c>)
 8000a6c:	f000 fb36 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40005400 	.word	0x40005400
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <HAL_I2S_MspInit+0xf0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d15a      	bne.n	8000b86 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ad4:	23c0      	movs	r3, #192	; 0xc0
 8000ad6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fb55 	bl	8004190 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000aec:	f7ff ff62 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b24      	ldr	r3, [pc, #144]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a18      	ldr	r2, [pc, #96]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 0304 	and.w	r3, r3, #4
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b44:	2310      	movs	r3, #16
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b54:	2306      	movs	r3, #6
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <HAL_I2S_MspInit+0xf8>)
 8000b60:	f000 fabc 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b64:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b76:	2306      	movs	r3, #6
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	; (8000b9c <HAL_I2S_MspInit+0xfc>)
 8000b82:	f000 faab 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40003c00 	.word	0x40003c00
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000
 8000b9c:	40020800 	.word	0x40020800

08000ba0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a19      	ldr	r2, [pc, #100]	; (8000c24 <HAL_SPI_MspInit+0x84>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d12b      	bne.n	8000c1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_SPI_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bfa:	23e0      	movs	r3, #224	; 0xe0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_SPI_MspInit+0x8c>)
 8000c16:	f000 fa61 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40013000 	.word	0x40013000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <NMI_Handler+0x4>

08000c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <MemManage_Handler+0x4>

08000c42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <BusFault_Handler+0x4>

08000c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <UsageFault_Handler+0x4>

08000c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7c:	f000 f8d8 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f000 fbf7 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <OTG_FS_IRQHandler+0x10>)
 8000c9a:	f000 fe71 	bl	8001980 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000574 	.word	0x20000574

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f006 ffd4 	bl	8007c84 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20020000 	.word	0x20020000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	20000190 	.word	0x20000190
 8000d10:	200009c0 	.word	0x200009c0

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d62:	f7ff ffd7 	bl	8000d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f006 ff93 	bl	8007c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fbc5 	bl	80004f8 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d7c:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 8000d80:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000d84:	200009c0 	.word	0x200009c0

08000d88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC_IRQHandler>
	...

08000d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <HAL_Init+0x40>)
 8000d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x40>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_Init+0x40>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a07      	ldr	r2, [pc, #28]	; (8000dcc <HAL_Init+0x40>)
 8000dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db4:	2003      	movs	r0, #3
 8000db6:	f000 f94f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f808 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc0:	f7ff fdfe 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023c00 	.word	0x40023c00

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x54>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x58>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f967 	bl	80010c2 <HAL_SYSTICK_Config>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00e      	b.n	8000e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d80a      	bhi.n	8000e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f000 f92f 	bl	800106e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <HAL_InitTick+0x5c>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	e000      	b.n	8000e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000194 	.word	0x20000194

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000194 	.word	0x20000194

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff ffee 	bl	8000e58 <HAL_GetTick>
 8000e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <HAL_Delay+0x44>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	bf00      	nop
 8000e98:	f7ff ffde 	bl	8000e58 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	; (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	; 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001024:	d301      	bcc.n	800102a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2301      	movs	r3, #1
 8001028:	e00f      	b.n	800104a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <SysTick_Config+0x40>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001032:	210f      	movs	r1, #15
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f7ff ff8e 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <SysTick_Config+0x40>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <SysTick_Config+0x40>)
 8001044:	2207      	movs	r2, #7
 8001046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	e000e010 	.word	0xe000e010

08001058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ff29 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff3e 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff8e 	bl	8000fac <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff31 	bl	8000f1c <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa2 	bl	8001014 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	e16b      	b.n	80013d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 815a 	bne.w	80013ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b01      	cmp	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	2b02      	cmp	r3, #2
 800112c:	d130      	bne.n	8001190 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	f003 0201 	and.w	r2, r3, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b03      	cmp	r3, #3
 800119a:	d017      	beq.n	80011cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d123      	bne.n	8001220 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	08da      	lsrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3208      	adds	r2, #8
 80011e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	08da      	lsrs	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	3208      	adds	r2, #8
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0203 	and.w	r2, r3, #3
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800125c:	2b00      	cmp	r3, #0
 800125e:	f000 80b4 	beq.w	80013ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a5f      	ldr	r2, [pc, #380]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_GPIO_Init+0x30c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127e:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <HAL_GPIO_Init+0x310>)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3302      	adds	r3, #2
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_GPIO_Init+0x314>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d02b      	beq.n	8001302 <HAL_GPIO_Init+0x226>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a51      	ldr	r2, [pc, #324]	; (80013f4 <HAL_GPIO_Init+0x318>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d025      	beq.n	80012fe <HAL_GPIO_Init+0x222>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a50      	ldr	r2, [pc, #320]	; (80013f8 <HAL_GPIO_Init+0x31c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x21e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x320>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x21a>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_GPIO_Init+0x324>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x216>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x328>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x212>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x32c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x20e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x330>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x20a>
 80012e2:	2307      	movs	r3, #7
 80012e4:	e00e      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012e6:	2308      	movs	r3, #8
 80012e8:	e00c      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e00a      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012ee:	2305      	movs	r3, #5
 80012f0:	e008      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012f2:	2304      	movs	r3, #4
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012f6:	2303      	movs	r3, #3
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x228>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x228>
 8001302:	2300      	movs	r3, #0
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	f002 0203 	and.w	r2, r2, #3
 800130a:	0092      	lsls	r2, r2, #2
 800130c:	4093      	lsls	r3, r2
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001314:	4935      	ldr	r1, [pc, #212]	; (80013ec <HAL_GPIO_Init+0x310>)
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001346:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_GPIO_Init+0x334>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001370:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001376:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_GPIO_Init+0x334>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <HAL_GPIO_Init+0x334>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c4:	4a12      	ldr	r2, [pc, #72]	; (8001410 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3301      	adds	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	f67f ae90 	bls.w	80010f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000
 8001404:	40021400 	.word	0x40021400
 8001408:	40021800 	.word	0x40021800
 800140c:	40021c00 	.word	0x40021c00
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43d9      	mvns	r1, r3
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	400b      	ands	r3, r1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f812 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	b08f      	sub	sp, #60	; 0x3c
 80014b0:	af0a      	add	r7, sp, #40	; 0x28
 80014b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e054      	b.n	8001568 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d106      	bne.n	80014de <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f006 f855 	bl	8007588 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2203      	movs	r2, #3
 80014e2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 f882 	bl	8004606 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	687e      	ldr	r6, [r7, #4]
 800150a:	466d      	mov	r5, sp
 800150c:	f106 0410 	add.w	r4, r6, #16
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001516:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001518:	e894 0003 	ldmia.w	r4, {r0, r1}
 800151c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001520:	1d33      	adds	r3, r6, #4
 8001522:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f002 fffc 	bl	8004522 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2101      	movs	r1, #1
 8001530:	4618      	mov	r0, r3
 8001532:	f003 f879 	bl	8004628 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	687e      	ldr	r6, [r7, #4]
 800153e:	466d      	mov	r5, sp
 8001540:	f106 0410 	add.w	r4, r6, #16
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001550:	e885 0003 	stmia.w	r5, {r0, r1}
 8001554:	1d33      	adds	r3, r6, #4
 8001556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f003 fa01 	bl	8004960 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001570 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af04      	add	r7, sp, #16
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4608      	mov	r0, r1
 800157a:	4611      	mov	r1, r2
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	70fb      	strb	r3, [r7, #3]
 8001582:	460b      	mov	r3, r1
 8001584:	70bb      	strb	r3, [r7, #2]
 8001586:	4613      	mov	r3, r2
 8001588:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <HAL_HCD_HC_Init+0x28>
 8001594:	2302      	movs	r3, #2
 8001596:	e076      	b.n	8001686 <HAL_HCD_HC_Init+0x116>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	333d      	adds	r3, #61	; 0x3d
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015b2:	78fb      	ldrb	r3, [r7, #3]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	3338      	adds	r3, #56	; 0x38
 80015c0:	787a      	ldrb	r2, [r7, #1]
 80015c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	212c      	movs	r1, #44	; 0x2c
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	3340      	adds	r3, #64	; 0x40
 80015d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015d4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	212c      	movs	r1, #44	; 0x2c
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	3339      	adds	r3, #57	; 0x39
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015e8:	78fb      	ldrb	r3, [r7, #3]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	212c      	movs	r1, #44	; 0x2c
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	333f      	adds	r3, #63	; 0x3f
 80015f6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	78ba      	ldrb	r2, [r7, #2]
 8001600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001604:	b2d0      	uxtb	r0, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	333a      	adds	r3, #58	; 0x3a
 8001612:	4602      	mov	r2, r0
 8001614:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001616:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da09      	bge.n	8001632 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	212c      	movs	r1, #44	; 0x2c
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	4413      	add	r3, r2
 800162a:	333b      	adds	r3, #59	; 0x3b
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e008      	b.n	8001644 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	333b      	adds	r3, #59	; 0x3b
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	212c      	movs	r1, #44	; 0x2c
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	333c      	adds	r3, #60	; 0x3c
 8001652:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001656:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	787c      	ldrb	r4, [r7, #1]
 800165e:	78ba      	ldrb	r2, [r7, #2]
 8001660:	78f9      	ldrb	r1, [r7, #3]
 8001662:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4623      	mov	r3, r4
 8001674:	f003 fafa 	bl	8004c6c <USB_HC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}

0800168e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_HCD_HC_Halt+0x1e>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e00f      	b.n	80016cc <HAL_HCD_HC_Halt+0x3e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fd4a 	bl	8005156 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	4608      	mov	r0, r1
 80016de:	4611      	mov	r1, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	70fb      	strb	r3, [r7, #3]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70bb      	strb	r3, [r7, #2]
 80016ea:	4613      	mov	r3, r2
 80016ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	333b      	adds	r3, #59	; 0x3b
 80016fc:	78ba      	ldrb	r2, [r7, #2]
 80016fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	212c      	movs	r1, #44	; 0x2c
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	4413      	add	r3, r2
 800170c:	333f      	adds	r3, #63	; 0x3f
 800170e:	787a      	ldrb	r2, [r7, #1]
 8001710:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001712:	7c3b      	ldrb	r3, [r7, #16]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d112      	bne.n	800173e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3342      	adds	r3, #66	; 0x42
 8001726:	2203      	movs	r2, #3
 8001728:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	333d      	adds	r3, #61	; 0x3d
 8001738:	7f3a      	ldrb	r2, [r7, #28]
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e008      	b.n	8001750 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	212c      	movs	r1, #44	; 0x2c
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	4413      	add	r3, r2
 800174a:	3342      	adds	r3, #66	; 0x42
 800174c:	2202      	movs	r2, #2
 800174e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b03      	cmp	r3, #3
 8001754:	f200 80c6 	bhi.w	80018e4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001758:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800175a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175e:	bf00      	nop
 8001760:	08001771 	.word	0x08001771
 8001764:	080018d1 	.word	0x080018d1
 8001768:	080017d5 	.word	0x080017d5
 800176c:	08001853 	.word	0x08001853
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001770:	7c3b      	ldrb	r3, [r7, #16]
 8001772:	2b01      	cmp	r3, #1
 8001774:	f040 80b8 	bne.w	80018e8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 80b4 	bne.w	80018e8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001780:	8b3b      	ldrh	r3, [r7, #24]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d108      	bne.n	8001798 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	3355      	adds	r3, #85	; 0x55
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3355      	adds	r3, #85	; 0x55
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3342      	adds	r3, #66	; 0x42
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017be:	e093      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3342      	adds	r3, #66	; 0x42
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
      break;
 80017d2:	e089      	b.n	80018e8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017d4:	78bb      	ldrb	r3, [r7, #2]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11d      	bne.n	8001816 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	212c      	movs	r1, #44	; 0x2c
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	3355      	adds	r3, #85	; 0x55
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	212c      	movs	r1, #44	; 0x2c
 80017f4:	fb01 f303 	mul.w	r3, r1, r3
 80017f8:	4413      	add	r3, r2
 80017fa:	3342      	adds	r3, #66	; 0x42
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001800:	e073      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001802:	78fb      	ldrb	r3, [r7, #3]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	3342      	adds	r3, #66	; 0x42
 8001810:	2202      	movs	r2, #2
 8001812:	701a      	strb	r2, [r3, #0]
      break;
 8001814:	e069      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3354      	adds	r3, #84	; 0x54
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	212c      	movs	r1, #44	; 0x2c
 8001830:	fb01 f303 	mul.w	r3, r1, r3
 8001834:	4413      	add	r3, r2
 8001836:	3342      	adds	r3, #66	; 0x42
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
      break;
 800183c:	e055      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	3342      	adds	r3, #66	; 0x42
 800184c:	2202      	movs	r2, #2
 800184e:	701a      	strb	r2, [r3, #0]
      break;
 8001850:	e04b      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001852:	78bb      	ldrb	r3, [r7, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11d      	bne.n	8001894 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	212c      	movs	r1, #44	; 0x2c
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	4413      	add	r3, r2
 8001864:	3355      	adds	r3, #85	; 0x55
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d109      	bne.n	8001880 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	212c      	movs	r1, #44	; 0x2c
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	4413      	add	r3, r2
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800187e:	e034      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	212c      	movs	r1, #44	; 0x2c
 8001886:	fb01 f303 	mul.w	r3, r1, r3
 800188a:	4413      	add	r3, r2
 800188c:	3342      	adds	r3, #66	; 0x42
 800188e:	2202      	movs	r2, #2
 8001890:	701a      	strb	r2, [r3, #0]
      break;
 8001892:	e02a      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	212c      	movs	r1, #44	; 0x2c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	3354      	adds	r3, #84	; 0x54
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d109      	bne.n	80018bc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	212c      	movs	r1, #44	; 0x2c
 80018ae:	fb01 f303 	mul.w	r3, r1, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	3342      	adds	r3, #66	; 0x42
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
      break;
 80018ba:	e016      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	212c      	movs	r1, #44	; 0x2c
 80018c2:	fb01 f303 	mul.w	r3, r1, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	3342      	adds	r3, #66	; 0x42
 80018ca:	2202      	movs	r2, #2
 80018cc:	701a      	strb	r2, [r3, #0]
      break;
 80018ce:	e00c      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	212c      	movs	r1, #44	; 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	3342      	adds	r3, #66	; 0x42
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
      break;
 80018e2:	e002      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018e4:	bf00      	nop
 80018e6:	e000      	b.n	80018ea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018e8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018ea:	78fb      	ldrb	r3, [r7, #3]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3344      	adds	r3, #68	; 0x44
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	8b3a      	ldrh	r2, [r7, #24]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	202c      	movs	r0, #44	; 0x2c
 8001904:	fb00 f303 	mul.w	r3, r0, r3
 8001908:	440b      	add	r3, r1
 800190a:	334c      	adds	r3, #76	; 0x4c
 800190c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3360      	adds	r3, #96	; 0x60
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3350      	adds	r3, #80	; 0x50
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3339      	adds	r3, #57	; 0x39
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	212c      	movs	r1, #44	; 0x2c
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	3361      	adds	r3, #97	; 0x61
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	222c      	movs	r2, #44	; 0x2c
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	3338      	adds	r3, #56	; 0x38
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	18d1      	adds	r1, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	f003 fa9e 	bl	8004eb0 <USB_HC_StartXfer>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop

08001980 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f002 ff9f 	bl	80048da <USB_GetMode>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	f040 80f6 	bne.w	8001b90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ff83 	bl	80048b4 <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80ec 	beq.w	8001b8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 ff7a 	bl	80048b4 <USB_ReadInterrupts>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ca:	d104      	bne.n	80019d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 ff6a 	bl	80048b4 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ea:	d104      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 ff5a 	bl	80048b4 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a0a:	d104      	bne.n	8001a16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 ff4a 	bl	80048b4 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d103      	bne.n	8001a32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 ff3c 	bl	80048b4 <USB_ReadInterrupts>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a46:	d11c      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10f      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a62:	2110      	movs	r1, #16
 8001a64:	6938      	ldr	r0, [r7, #16]
 8001a66:	f002 fe2b 	bl	80046c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a6a:	6938      	ldr	r0, [r7, #16]
 8001a6c:	f002 fe5c 	bl	8004728 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 f832 	bl	8004ae0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 fe01 	bl	8007684 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 ff14 	bl	80048b4 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a96:	d102      	bne.n	8001a9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f001 f89e 	bl	8002bda <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 ff06 	bl	80048b4 <USB_ReadInterrupts>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d106      	bne.n	8001ac0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f005 fdca 	bl	800764c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2208      	movs	r2, #8
 8001abe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 fef5 	bl	80048b4 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	2b10      	cmp	r3, #16
 8001ad2:	d101      	bne.n	8001ad8 <HAL_HCD_IRQHandler+0x158>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_HCD_IRQHandler+0x15a>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d012      	beq.n	8001b04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0210 	bic.w	r2, r2, #16
 8001aec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 ffa1 	bl	8002a36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0210 	orr.w	r2, r2, #16
 8001b02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fed3 	bl	80048b4 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b18:	d13a      	bne.n	8001b90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fb08 	bl	8005134 <USB_HC_ReadInterrupt>
 8001b24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e025      	b.n	8001b78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d018      	beq.n	8001b72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b56:	d106      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8ab 	bl	8001cba <HCD_HC_IN_IRQHandler>
 8001b64:	e005      	b.n	8001b72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fbf9 	bl	8002364 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3d4      	bcc.n	8001b2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	e000      	b.n	8001b90 <HAL_HCD_IRQHandler+0x210>
      return;
 8001b8e:	bf00      	nop
    }
  }
}
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_HCD_Start+0x16>
 8001ba8:	2302      	movs	r3, #2
 8001baa:	e013      	b.n	8001bd4 <HAL_HCD_Start+0x3e>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fff4 	bl	8004ba8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 fd0d 	bl	80045e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_HCD_Stop+0x16>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e00d      	b.n	8001c0e <HAL_HCD_Stop+0x32>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 fbe2 	bl	80053c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 ff96 	bl	8004b54 <USB_ResetPort>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3360      	adds	r3, #96	; 0x60
 8001c4c:	781b      	ldrb	r3, [r3, #0]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	460b      	mov	r3, r1
 8001c64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3350      	adds	r3, #80	; 0x50
 8001c74:	681b      	ldr	r3, [r3, #0]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 ffda 	bl	8004c48 <USB_GetCurrentFrame>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 ffb5 	bl	8004c1a <USB_GetHostSpeed>
 8001cb0:	4603      	mov	r3, r0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d11a      	bne.n	8001d20 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3361      	adds	r3, #97	; 0x61
 8001d0a:	2206      	movs	r2, #6
 8001d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fa1c 	bl	8005156 <USB_HC_Halt>
 8001d1e:	e0af      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	015a      	lsls	r2, r3, #5
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4413      	add	r3, r2
 8001d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d36:	d11b      	bne.n	8001d70 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3361      	adds	r3, #97	; 0x61
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f003 f9f4 	bl	8005156 <USB_HC_Halt>
 8001d6e:	e087      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	015a      	lsls	r2, r3, #5
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4413      	add	r3, r2
 8001d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	d109      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	461a      	mov	r2, r3
 8001d94:	2320      	movs	r3, #32
 8001d96:	6093      	str	r3, [r2, #8]
 8001d98:	e072      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d11a      	bne.n	8001de6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3361      	adds	r3, #97	; 0x61
 8001dd0:	2205      	movs	r2, #5
 8001dd2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f003 f9b9 	bl	8005156 <USB_HC_Halt>
 8001de4:	e04c      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfc:	d11b      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	015a      	lsls	r2, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e10:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	212c      	movs	r1, #44	; 0x2c
 8001e18:	fb01 f303 	mul.w	r3, r1, r3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3361      	adds	r3, #97	; 0x61
 8001e20:	2208      	movs	r2, #8
 8001e22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 f991 	bl	8005156 <USB_HC_Halt>
 8001e34:	e024      	b.n	8001e80 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d119      	bne.n	8001e80 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	212c      	movs	r1, #44	; 0x2c
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	4413      	add	r3, r2
 8001e6a:	3361      	adds	r3, #97	; 0x61
 8001e6c:	2206      	movs	r2, #6
 8001e6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	4611      	mov	r1, r2
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 f96b 	bl	8005156 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e96:	d112      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 f957 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ebc:	e24e      	b.n	800235c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 80df 	bne.w	8002094 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	212c      	movs	r1, #44	; 0x2c
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	3348      	adds	r3, #72	; 0x48
 8001eec:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0159      	lsls	r1, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	202c      	movs	r0, #44	; 0x2c
 8001f08:	fb00 f303 	mul.w	r3, r0, r3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3350      	adds	r3, #80	; 0x50
 8001f10:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	212c      	movs	r1, #44	; 0x2c
 8001f18:	fb01 f303 	mul.w	r3, r1, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3361      	adds	r3, #97	; 0x61
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	335c      	adds	r3, #92	; 0x5c
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	461a      	mov	r2, r3
 8001f44:	2301      	movs	r3, #1
 8001f46:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	333f      	adds	r3, #63	; 0x3f
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	212c      	movs	r1, #44	; 0x2c
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	4413      	add	r3, r2
 8001f68:	333f      	adds	r3, #63	; 0x3f
 8001f6a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d111      	bne.n	8001f94 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 f8eb 	bl	8005156 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2310      	movs	r3, #16
 8001f90:	6093      	str	r3, [r2, #8]
 8001f92:	e03a      	b.n	800200a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	333f      	adds	r3, #63	; 0x3f
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d009      	beq.n	8001fbc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	212c      	movs	r1, #44	; 0x2c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	333f      	adds	r3, #63	; 0x3f
 8001fb6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d126      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	0151      	lsls	r1, r2, #5
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	440a      	add	r2, r1
 8001fd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fda:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3360      	adds	r3, #96	; 0x60
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	b2d9      	uxtb	r1, r3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	202c      	movs	r0, #44	; 0x2c
 8001ff8:	fb00 f303 	mul.w	r3, r0, r3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3360      	adds	r3, #96	; 0x60
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f005 fb4b 	bl	80076a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d12b      	bne.n	800206a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	212c      	movs	r1, #44	; 0x2c
 8002018:	fb01 f303 	mul.w	r3, r1, r3
 800201c:	4413      	add	r3, r2
 800201e:	3348      	adds	r3, #72	; 0x48
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	202c      	movs	r0, #44	; 0x2c
 8002028:	fb00 f202 	mul.w	r2, r0, r2
 800202c:	440a      	add	r2, r1
 800202e:	3240      	adds	r2, #64	; 0x40
 8002030:	8812      	ldrh	r2, [r2, #0]
 8002032:	fbb3 f3f2 	udiv	r3, r3, r2
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 818e 	beq.w	800235c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3354      	adds	r3, #84	; 0x54
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2d8      	uxtb	r0, r3
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3354      	adds	r3, #84	; 0x54
 8002064:	4602      	mov	r2, r0
 8002066:	701a      	strb	r2, [r3, #0]
}
 8002068:	e178      	b.n	800235c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3354      	adds	r3, #84	; 0x54
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f083 0301 	eor.w	r3, r3, #1
 800207e:	b2d8      	uxtb	r0, r3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3354      	adds	r3, #84	; 0x54
 800208e:	4602      	mov	r2, r0
 8002090:	701a      	strb	r2, [r3, #0]
}
 8002092:	e163      	b.n	800235c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	015a      	lsls	r2, r3, #5
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4413      	add	r3, r2
 800209c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	f040 80f6 	bne.w	8002298 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3361      	adds	r3, #97	; 0x61
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d109      	bne.n	80020d4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	212c      	movs	r1, #44	; 0x2c
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3360      	adds	r3, #96	; 0x60
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e0c9      	b.n	8002268 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	212c      	movs	r1, #44	; 0x2c
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	4413      	add	r3, r2
 80020e0:	3361      	adds	r3, #97	; 0x61
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d109      	bne.n	80020fc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	212c      	movs	r1, #44	; 0x2c
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	2205      	movs	r2, #5
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e0b5      	b.n	8002268 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3361      	adds	r3, #97	; 0x61
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b06      	cmp	r3, #6
 800210e:	d009      	beq.n	8002124 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3361      	adds	r3, #97	; 0x61
 800211e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002120:	2b08      	cmp	r3, #8
 8002122:	d150      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	335c      	adds	r3, #92	; 0x5c
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	202c      	movs	r0, #44	; 0x2c
 800213c:	fb00 f303 	mul.w	r3, r0, r3
 8002140:	440b      	add	r3, r1
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d912      	bls.n	8002180 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	335c      	adds	r3, #92	; 0x5c
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3360      	adds	r3, #96	; 0x60
 800217a:	2204      	movs	r2, #4
 800217c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800217e:	e073      	b.n	8002268 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3360      	adds	r3, #96	; 0x60
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021a8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021b0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021c4:	e050      	b.n	8002268 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3361      	adds	r3, #97	; 0x61
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d122      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	2202      	movs	r2, #2
 80021ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002202:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800220a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e023      	b.n	8002268 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3361      	adds	r3, #97	; 0x61
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b07      	cmp	r3, #7
 8002232:	d119      	bne.n	8002268 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	335c      	adds	r3, #92	; 0x5c
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	202c      	movs	r0, #44	; 0x2c
 800224c:	fb00 f303 	mul.w	r3, r0, r3
 8002250:	440b      	add	r3, r1
 8002252:	335c      	adds	r3, #92	; 0x5c
 8002254:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3360      	adds	r3, #96	; 0x60
 8002264:	2204      	movs	r2, #4
 8002266:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2302      	movs	r3, #2
 8002278:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	b2d9      	uxtb	r1, r3
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	202c      	movs	r0, #44	; 0x2c
 8002284:	fb00 f303 	mul.w	r3, r0, r3
 8002288:	4413      	add	r3, r2
 800228a:	3360      	adds	r3, #96	; 0x60
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f005 fa05 	bl	80076a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002296:	e061      	b.n	800235c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d156      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	333f      	adds	r3, #63	; 0x3f
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d111      	bne.n	80022e6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	212c      	movs	r1, #44	; 0x2c
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 ff39 	bl	8005156 <USB_HC_Halt>
 80022e4:	e031      	b.n	800234a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	333f      	adds	r3, #63	; 0x3f
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333f      	adds	r3, #63	; 0x3f
 8002308:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800230a:	2b02      	cmp	r3, #2
 800230c:	d11d      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	335c      	adds	r3, #92	; 0x5c
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d110      	bne.n	800234a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	212c      	movs	r1, #44	; 0x2c
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	4413      	add	r3, r2
 8002334:	3361      	adds	r3, #97	; 0x61
 8002336:	2203      	movs	r2, #3
 8002338:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f002 ff06 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	461a      	mov	r2, r3
 8002358:	2310      	movs	r3, #16
 800235a:	6093      	str	r3, [r2, #8]
}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800237a:	78fb      	ldrb	r3, [r7, #3]
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b04      	cmp	r3, #4
 8002392:	d11a      	bne.n	80023ca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	015a      	lsls	r2, r3, #5
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	4413      	add	r3, r2
 800239c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a0:	461a      	mov	r2, r3
 80023a2:	2304      	movs	r3, #4
 80023a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3361      	adds	r3, #97	; 0x61
 80023b4:	2206      	movs	r2, #6
 80023b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 fec7 	bl	8005156 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80023c8:	e331      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	2b20      	cmp	r3, #32
 80023de:	d12e      	bne.n	800243e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	2320      	movs	r3, #32
 80023f0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333d      	adds	r3, #61	; 0x3d
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	f040 8313 	bne.w	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333d      	adds	r3, #61	; 0x3d
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	2202      	movs	r2, #2
 800242a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f002 fe8d 	bl	8005156 <USB_HC_Halt>
}
 800243c:	e2f7      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002454:	d112      	bne.n	800247c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002468:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fe6e 	bl	8005156 <USB_HC_Halt>
}
 800247a:	e2d8      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d140      	bne.n	8002514 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	335c      	adds	r3, #92	; 0x5c
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d111      	bne.n	80024de <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	333d      	adds	r3, #61	; 0x3d
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2340      	movs	r3, #64	; 0x40
 80024dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ea:	461a      	mov	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3361      	adds	r3, #97	; 0x61
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fe22 	bl	8005156 <USB_HC_Halt>
}
 8002512:	e28c      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d12c      	bne.n	8002584 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3361      	adds	r3, #97	; 0x61
 8002538:	2204      	movs	r2, #4
 800253a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	333d      	adds	r3, #61	; 0x3d
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fdf3 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	2340      	movs	r3, #64	; 0x40
 8002580:	6093      	str	r3, [r2, #8]
}
 8002582:	e254      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b08      	cmp	r3, #8
 8002598:	d11a      	bne.n	80025d0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	2308      	movs	r3, #8
 80025aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3361      	adds	r3, #97	; 0x61
 80025ba:	2205      	movs	r2, #5
 80025bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 fdc4 	bl	8005156 <USB_HC_Halt>
}
 80025ce:	e22e      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d140      	bne.n	8002668 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3361      	adds	r3, #97	; 0x61
 8002606:	2203      	movs	r2, #3
 8002608:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	333d      	adds	r3, #61	; 0x3d
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d112      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	333c      	adds	r3, #60	; 0x3c
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	333d      	adds	r3, #61	; 0x3d
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fd81 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	461a      	mov	r2, r3
 8002662:	2310      	movs	r3, #16
 8002664:	6093      	str	r3, [r2, #8]
}
 8002666:	e1e2      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267a:	2b80      	cmp	r3, #128	; 0x80
 800267c:	d164      	bne.n	8002748 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d111      	bne.n	80026aa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3361      	adds	r3, #97	; 0x61
 8002694:	2206      	movs	r2, #6
 8002696:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fd57 	bl	8005156 <USB_HC_Halt>
 80026a8:	e044      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	212c      	movs	r1, #44	; 0x2c
 80026b0:	fb01 f303 	mul.w	r3, r1, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	335c      	adds	r3, #92	; 0x5c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	202c      	movs	r0, #44	; 0x2c
 80026c2:	fb00 f303 	mul.w	r3, r0, r3
 80026c6:	440b      	add	r3, r1
 80026c8:	335c      	adds	r3, #92	; 0x5c
 80026ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	335c      	adds	r3, #92	; 0x5c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d920      	bls.n	8002722 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	335c      	adds	r3, #92	; 0x5c
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	3360      	adds	r3, #96	; 0x60
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	b2d9      	uxtb	r1, r3
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	202c      	movs	r0, #44	; 0x2c
 800270e:	fb00 f303 	mul.w	r3, r0, r3
 8002712:	4413      	add	r3, r2
 8002714:	3360      	adds	r3, #96	; 0x60
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f004 ffc0 	bl	80076a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002720:	e008      	b.n	8002734 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	2202      	movs	r2, #2
 8002732:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	461a      	mov	r2, r3
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	6093      	str	r3, [r2, #8]
}
 8002746:	e172      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275e:	d11b      	bne.n	8002798 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3361      	adds	r3, #97	; 0x61
 800276e:	2208      	movs	r2, #8
 8002770:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f002 fcea 	bl	8005156 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	461a      	mov	r2, r3
 8002790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002794:	6093      	str	r3, [r2, #8]
}
 8002796:	e14a      	b.n	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	f040 813f 	bne.w	8002a2e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3361      	adds	r3, #97	; 0x61
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d17d      	bne.n	80028c0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3360      	adds	r3, #96	; 0x60
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333f      	adds	r3, #63	; 0x3f
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d00a      	beq.n	8002800 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	333f      	adds	r3, #63	; 0x3f
 80027f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	f040 8100 	bne.w	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d113      	bne.n	8002830 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3355      	adds	r3, #85	; 0x55
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	f083 0301 	eor.w	r3, r3, #1
 800281c:	b2d8      	uxtb	r0, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3355      	adds	r3, #85	; 0x55
 800282c:	4602      	mov	r2, r0
 800282e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	2b01      	cmp	r3, #1
 8002836:	f040 80e3 	bne.w	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	334c      	adds	r3, #76	; 0x4c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80d8 	beq.w	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	334c      	adds	r3, #76	; 0x4c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	202c      	movs	r0, #44	; 0x2c
 8002866:	fb00 f202 	mul.w	r2, r0, r2
 800286a:	440a      	add	r2, r1
 800286c:	3240      	adds	r2, #64	; 0x40
 800286e:	8812      	ldrh	r2, [r2, #0]
 8002870:	4413      	add	r3, r2
 8002872:	3b01      	subs	r3, #1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	202c      	movs	r0, #44	; 0x2c
 800287a:	fb00 f202 	mul.w	r2, r0, r2
 800287e:	440a      	add	r2, r1
 8002880:	3240      	adds	r2, #64	; 0x40
 8002882:	8812      	ldrh	r2, [r2, #0]
 8002884:	fbb3 f3f2 	udiv	r3, r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80b5 	beq.w	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3355      	adds	r3, #85	; 0x55
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	f083 0301 	eor.w	r3, r3, #1
 80028aa:	b2d8      	uxtb	r0, r3
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3355      	adds	r3, #85	; 0x55
 80028ba:	4602      	mov	r2, r0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e09f      	b.n	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	3361      	adds	r3, #97	; 0x61
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d109      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	212c      	movs	r1, #44	; 0x2c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	3360      	adds	r3, #96	; 0x60
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e08b      	b.n	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d109      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3360      	adds	r3, #96	; 0x60
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e077      	b.n	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3361      	adds	r3, #97	; 0x61
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d109      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	2205      	movs	r2, #5
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e063      	b.n	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b06      	cmp	r3, #6
 800294a:	d009      	beq.n	8002960 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800295c:	2b08      	cmp	r3, #8
 800295e:	d14f      	bne.n	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	335c      	adds	r3, #92	; 0x5c
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	202c      	movs	r0, #44	; 0x2c
 8002978:	fb00 f303 	mul.w	r3, r0, r3
 800297c:	440b      	add	r3, r1
 800297e:	335c      	adds	r3, #92	; 0x5c
 8002980:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	335c      	adds	r3, #92	; 0x5c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d912      	bls.n	80029bc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	335c      	adds	r3, #92	; 0x5c
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	3360      	adds	r3, #96	; 0x60
 80029b6:	2204      	movs	r2, #4
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e021      	b.n	8002a00 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	3360      	adds	r3, #96	; 0x60
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029e4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029ec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	461a      	mov	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2302      	movs	r3, #2
 8002a10:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	b2d9      	uxtb	r1, r3
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	202c      	movs	r0, #44	; 0x2c
 8002a1c:	fb00 f303 	mul.w	r3, r0, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3360      	adds	r3, #96	; 0x60
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f004 fe39 	bl	80076a0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002a2e:	bf00      	nop
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08a      	sub	sp, #40	; 0x28
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	0c5b      	lsrs	r3, r3, #17
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d004      	beq.n	8002a7c <HCD_RXQLVL_IRQHandler+0x46>
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b05      	cmp	r3, #5
 8002a76:	f000 80a9 	beq.w	8002bcc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002a7a:	e0aa      	b.n	8002bd2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80a6 	beq.w	8002bd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3344      	adds	r3, #68	; 0x44
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 809b 	beq.w	8002bd0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3350      	adds	r3, #80	; 0x50
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	441a      	add	r2, r3
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	202c      	movs	r0, #44	; 0x2c
 8002ab4:	fb00 f303 	mul.w	r3, r0, r3
 8002ab8:	440b      	add	r3, r1
 8002aba:	334c      	adds	r3, #76	; 0x4c
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d87a      	bhi.n	8002bb8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3344      	adds	r3, #68	; 0x44
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	b292      	uxth	r2, r2
 8002ada:	4619      	mov	r1, r3
 8002adc:	f001 fe92 	bl	8004804 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	212c      	movs	r1, #44	; 0x2c
 8002ae6:	fb01 f303 	mul.w	r3, r1, r3
 8002aea:	4413      	add	r3, r2
 8002aec:	3344      	adds	r3, #68	; 0x44
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	441a      	add	r2, r3
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	202c      	movs	r0, #44	; 0x2c
 8002afa:	fb00 f303 	mul.w	r3, r0, r3
 8002afe:	440b      	add	r3, r1
 8002b00:	3344      	adds	r3, #68	; 0x44
 8002b02:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3350      	adds	r3, #80	; 0x50
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	441a      	add	r2, r3
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	202c      	movs	r0, #44	; 0x2c
 8002b1e:	fb00 f303 	mul.w	r3, r0, r3
 8002b22:	440b      	add	r3, r1
 8002b24:	3350      	adds	r3, #80	; 0x50
 8002b26:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	0cdb      	lsrs	r3, r3, #19
 8002b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b3c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3340      	adds	r3, #64	; 0x40
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d13c      	bne.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d039      	beq.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3354      	adds	r3, #84	; 0x54
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	212c      	movs	r1, #44	; 0x2c
 8002baa:	fb01 f303 	mul.w	r3, r1, r3
 8002bae:	4413      	add	r3, r2
 8002bb0:	3354      	adds	r3, #84	; 0x54
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	701a      	strb	r2, [r3, #0]
      break;
 8002bb6:	e00b      	b.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	212c      	movs	r1, #44	; 0x2c
 8002bbe:	fb01 f303 	mul.w	r3, r1, r3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	701a      	strb	r2, [r3, #0]
      break;
 8002bca:	e001      	b.n	8002bd0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002bcc:	bf00      	nop
 8002bce:	e000      	b.n	8002bd2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002bd0:	bf00      	nop
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	3728      	adds	r7, #40	; 0x28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c06:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d10b      	bne.n	8002c2a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f004 fd23 	bl	8007668 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d132      	bne.n	8002c9a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d126      	bne.n	8002c94 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d113      	bne.n	8002c76 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c58:	d106      	bne.n	8002c68 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 ff3d 	bl	8004ae0 <USB_InitFSLSPClkSel>
 8002c66:	e011      	b.n	8002c8c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 ff36 	bl	8004ae0 <USB_InitFSLSPClkSel>
 8002c74:	e00a      	b.n	8002c8c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d106      	bne.n	8002c8c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c84:	461a      	mov	r2, r3
 8002c86:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002c8a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f004 fd15 	bl	80076bc <HAL_HCD_PortEnabled_Callback>
 8002c92:	e002      	b.n	8002c9a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f004 fd1f 	bl	80076d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d103      	bne.n	8002cac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f043 0320 	orr.w	r3, r3, #32
 8002caa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e12b      	b.n	8002f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fe92 	bl	8000a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d24:	f001 fa20 	bl	8004168 <HAL_RCC_GetPCLK1Freq>
 8002d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4a81      	ldr	r2, [pc, #516]	; (8002f34 <HAL_I2C_Init+0x274>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d807      	bhi.n	8002d44 <HAL_I2C_Init+0x84>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a80      	ldr	r2, [pc, #512]	; (8002f38 <HAL_I2C_Init+0x278>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	bf94      	ite	ls
 8002d3c:	2301      	movls	r3, #1
 8002d3e:	2300      	movhi	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e006      	b.n	8002d52 <HAL_I2C_Init+0x92>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4a7d      	ldr	r2, [pc, #500]	; (8002f3c <HAL_I2C_Init+0x27c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	bf94      	ite	ls
 8002d4c:	2301      	movls	r3, #1
 8002d4e:	2300      	movhi	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e0e7      	b.n	8002f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a78      	ldr	r2, [pc, #480]	; (8002f40 <HAL_I2C_Init+0x280>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9b      	lsrs	r3, r3, #18
 8002d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a6a      	ldr	r2, [pc, #424]	; (8002f34 <HAL_I2C_Init+0x274>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d802      	bhi.n	8002d94 <HAL_I2C_Init+0xd4>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	e009      	b.n	8002da8 <HAL_I2C_Init+0xe8>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d9a:	fb02 f303 	mul.w	r3, r2, r3
 8002d9e:	4a69      	ldr	r2, [pc, #420]	; (8002f44 <HAL_I2C_Init+0x284>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	099b      	lsrs	r3, r3, #6
 8002da6:	3301      	adds	r3, #1
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	495c      	ldr	r1, [pc, #368]	; (8002f34 <HAL_I2C_Init+0x274>)
 8002dc4:	428b      	cmp	r3, r1
 8002dc6:	d819      	bhi.n	8002dfc <HAL_I2C_Init+0x13c>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e59      	subs	r1, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ddc:	400b      	ands	r3, r1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_I2C_Init+0x138>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1e59      	subs	r1, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df6:	e051      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002df8:	2304      	movs	r3, #4
 8002dfa:	e04f      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d111      	bne.n	8002e28 <HAL_I2C_Init+0x168>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1e58      	subs	r0, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	440b      	add	r3, r1
 8002e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e012      	b.n	8002e4e <HAL_I2C_Init+0x18e>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1e58      	subs	r0, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	0099      	lsls	r1, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Init+0x196>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e022      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10e      	bne.n	8002e7c <HAL_I2C_Init+0x1bc>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1e58      	subs	r0, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	440b      	add	r3, r1
 8002e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7a:	e00f      	b.n	8002e9c <HAL_I2C_Init+0x1dc>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	0099      	lsls	r1, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	6809      	ldr	r1, [r1, #0]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6911      	ldr	r1, [r2, #16]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2220      	movs	r2, #32
 8002f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	000186a0 	.word	0x000186a0
 8002f38:	001e847f 	.word	0x001e847f
 8002f3c:	003d08ff 	.word	0x003d08ff
 8002f40:	431bde83 	.word	0x431bde83
 8002f44:	10624dd3 	.word	0x10624dd3

08002f48 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e128      	b.n	80031ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a90      	ldr	r2, [pc, #576]	; (80031b4 <HAL_I2S_Init+0x26c>)
 8002f72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd fd93 	bl	8000aa0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d060      	beq.n	8003068 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d102      	bne.n	8002fb4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002fae:	2310      	movs	r3, #16
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e001      	b.n	8002fb8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d802      	bhi.n	8002fc6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f001 f9c4 	bl	8004354 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fcc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd6:	d125      	bne.n	8003024 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffc:	3305      	adds	r3, #5
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	e01f      	b.n	8003042 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	fbb2 f2f3 	udiv	r2, r2, r3
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	461a      	mov	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	3305      	adds	r3, #5
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e00e      	b.n	8003042 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fbb2 f2f3 	udiv	r2, r2, r3
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	461a      	mov	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	3305      	adds	r3, #5
 8003040:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <HAL_I2S_Init+0x270>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e003      	b.n	8003070 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003068:	2302      	movs	r3, #2
 800306a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d902      	bls.n	800307c <HAL_I2S_Init+0x134>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2bff      	cmp	r3, #255	; 0xff
 800307a:	d907      	bls.n	800308c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e08f      	b.n	80031ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	ea42 0103 	orr.w	r1, r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	430a      	orrs	r2, r1
 800309e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030aa:	f023 030f 	bic.w	r3, r3, #15
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6851      	ldr	r1, [r2, #4]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6892      	ldr	r2, [r2, #8]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68d2      	ldr	r2, [r2, #12]
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6992      	ldr	r2, [r2, #24]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d161      	bne.n	800319c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a38      	ldr	r2, [pc, #224]	; (80031bc <HAL_I2S_Init+0x274>)
 80030dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <HAL_I2S_Init+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_I2S_Init+0x1a4>
 80030e8:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_I2S_Init+0x27c>)
 80030ea:	e001      	b.n	80030f0 <HAL_I2S_Init+0x1a8>
 80030ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	4932      	ldr	r1, [pc, #200]	; (80031c0 <HAL_I2S_Init+0x278>)
 80030f8:	428a      	cmp	r2, r1
 80030fa:	d101      	bne.n	8003100 <HAL_I2S_Init+0x1b8>
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_I2S_Init+0x27c>)
 80030fe:	e001      	b.n	8003104 <HAL_I2S_Init+0x1bc>
 8003100:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003104:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003108:	f023 030f 	bic.w	r3, r3, #15
 800310c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <HAL_I2S_Init+0x278>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_I2S_Init+0x1d4>
 8003118:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_I2S_Init+0x27c>)
 800311a:	e001      	b.n	8003120 <HAL_I2S_Init+0x1d8>
 800311c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003120:	2202      	movs	r2, #2
 8003122:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	; (80031c0 <HAL_I2S_Init+0x278>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_I2S_Init+0x1ea>
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HAL_I2S_Init+0x27c>)
 8003130:	e001      	b.n	8003136 <HAL_I2S_Init+0x1ee>
 8003132:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003142:	d003      	beq.n	800314c <HAL_I2S_Init+0x204>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800314c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e001      	b.n	8003158 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003162:	4313      	orrs	r3, r2
 8003164:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800316c:	4313      	orrs	r3, r2
 800316e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003176:	4313      	orrs	r3, r2
 8003178:	b29a      	uxth	r2, r3
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	4313      	orrs	r3, r2
 800317e:	b29b      	uxth	r3, r3
 8003180:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003184:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <HAL_I2S_Init+0x278>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d101      	bne.n	8003194 <HAL_I2S_Init+0x24c>
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_I2S_Init+0x27c>)
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x250>
 8003194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003198:	897a      	ldrh	r2, [r7, #10]
 800319a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	080032bf 	.word	0x080032bf
 80031b8:	cccccccd 	.word	0xcccccccd
 80031bc:	080033d5 	.word	0x080033d5
 80031c0:	40003800 	.word	0x40003800
 80031c4:	40003400 	.word	0x40003400

080031c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	1c9a      	adds	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003226:	b29b      	uxth	r3, r3
 8003228:	3b01      	subs	r3, #1
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10e      	bne.n	8003258 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003248:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffb8 	bl	80031c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	b292      	uxth	r2, r2
 8003274:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	1c9a      	adds	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10e      	bne.n	80032b6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff93 	bl	80031dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d13a      	bne.n	8003350 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d109      	bne.n	80032f8 <I2S_IRQHandler+0x3a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b40      	cmp	r3, #64	; 0x40
 80032f0:	d102      	bne.n	80032f8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffb4 	bl	8003260 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b40      	cmp	r3, #64	; 0x40
 8003300:	d126      	bne.n	8003350 <I2S_IRQHandler+0x92>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b20      	cmp	r3, #32
 800330e:	d11f      	bne.n	8003350 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800331e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f043 0202 	orr.w	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ff50 	bl	80031f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b03      	cmp	r3, #3
 800335a:	d136      	bne.n	80033ca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d109      	bne.n	800337a <I2S_IRQHandler+0xbc>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003370:	2b80      	cmp	r3, #128	; 0x80
 8003372:	d102      	bne.n	800337a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff45 	bl	8003204 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	2b08      	cmp	r3, #8
 8003382:	d122      	bne.n	80033ca <I2S_IRQHandler+0x10c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d11b      	bne.n	80033ca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033a0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ff13 	bl	80031f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033ca:	bf00      	nop
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b088      	sub	sp, #32
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a92      	ldr	r2, [pc, #584]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d101      	bne.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80033ee:	4b92      	ldr	r3, [pc, #584]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033f0:	e001      	b.n	80033f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80033f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a8b      	ldr	r2, [pc, #556]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800340c:	4b8a      	ldr	r3, [pc, #552]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800340e:	e001      	b.n	8003414 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d004      	beq.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f040 8099 	bne.w	800355e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d107      	bne.n	8003446 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f925 	bl	8003690 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9c8 	bl	80037f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b40      	cmp	r3, #64	; 0x40
 8003468:	d13a      	bne.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d035      	beq.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6e      	ldr	r2, [pc, #440]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800347e:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4969      	ldr	r1, [pc, #420]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800348e:	428b      	cmp	r3, r1
 8003490:	d101      	bne.n	8003496 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003492:	4b69      	ldr	r3, [pc, #420]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003494:	e001      	b.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003496:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800349a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800349e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f043 0202 	orr.w	r2, r3, #2
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff fe88 	bl	80031f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	f040 80c3 	bne.w	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80bd 	beq.w	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003506:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a49      	ldr	r2, [pc, #292]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d101      	bne.n	8003516 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003512:	4b49      	ldr	r3, [pc, #292]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003514:	e001      	b.n	800351a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4944      	ldr	r1, [pc, #272]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003522:	428b      	cmp	r3, r1
 8003524:	d101      	bne.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003526:	4b44      	ldr	r3, [pc, #272]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003528:	e001      	b.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800352a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003532:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fe4a 	bl	80031f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800355c:	e089      	b.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b02      	cmp	r3, #2
 8003566:	d107      	bne.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8be 	bl	80036f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d107      	bne.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8fd 	bl	800378c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b40      	cmp	r3, #64	; 0x40
 800359a:	d12f      	bne.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02a      	beq.n	80035fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c2:	e001      	b.n	80035c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4919      	ldr	r1, [pc, #100]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d0:	428b      	cmp	r3, r1
 80035d2:	d101      	bne.n	80035d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035d4:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d6:	e001      	b.n	80035dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f043 0202 	orr.w	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fdfa 	bl	80031f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d136      	bne.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d031      	beq.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800361c:	e001      	b.n	8003622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4902      	ldr	r1, [pc, #8]	; (8003634 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800362a:	428b      	cmp	r3, r1
 800362c:	d106      	bne.n	800363c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800362e:	4b02      	ldr	r3, [pc, #8]	; (8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003630:	e006      	b.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003632:	bf00      	nop
 8003634:	40003800 	.word	0x40003800
 8003638:	40003400 	.word	0x40003400
 800363c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003640:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003644:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003654:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f043 0204 	orr.w	r2, r3, #4
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fdc0 	bl	80031f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003670:	e000      	b.n	8003674 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003672:	bf00      	nop
}
 8003674:	bf00      	nop
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c99      	adds	r1, r3, #2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6251      	str	r1, [r2, #36]	; 0x24
 80036a2:	881a      	ldrh	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d113      	bne.n	80036ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ffc9 	bl	800367c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c99      	adds	r1, r3, #2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6251      	str	r1, [r2, #36]	; 0x24
 8003706:	8819      	ldrh	r1, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <I2SEx_TxISR_I2SExt+0x90>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <I2SEx_TxISR_I2SExt+0x22>
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <I2SEx_TxISR_I2SExt+0x94>)
 8003714:	e001      	b.n	800371a <I2SEx_TxISR_I2SExt+0x26>
 8003716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371a:	460a      	mov	r2, r1
 800371c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	d121      	bne.n	800377a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <I2SEx_TxISR_I2SExt+0x90>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <I2SEx_TxISR_I2SExt+0x50>
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <I2SEx_TxISR_I2SExt+0x94>)
 8003742:	e001      	b.n	8003748 <I2SEx_TxISR_I2SExt+0x54>
 8003744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	490d      	ldr	r1, [pc, #52]	; (8003784 <I2SEx_TxISR_I2SExt+0x90>)
 8003750:	428b      	cmp	r3, r1
 8003752:	d101      	bne.n	8003758 <I2SEx_TxISR_I2SExt+0x64>
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <I2SEx_TxISR_I2SExt+0x94>)
 8003756:	e001      	b.n	800375c <I2SEx_TxISR_I2SExt+0x68>
 8003758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003760:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff81 	bl	800367c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40003800 	.word	0x40003800
 8003788:	40003400 	.word	0x40003400

0800378c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68d8      	ldr	r0, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	1c99      	adds	r1, r3, #2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037a4:	b282      	uxth	r2, r0
 80037a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d113      	bne.n	80037e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ff4a 	bl	800367c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a20      	ldr	r2, [pc, #128]	; (8003880 <I2SEx_RxISR_I2SExt+0x90>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <I2SEx_RxISR_I2SExt+0x16>
 8003802:	4b20      	ldr	r3, [pc, #128]	; (8003884 <I2SEx_RxISR_I2SExt+0x94>)
 8003804:	e001      	b.n	800380a <I2SEx_RxISR_I2SExt+0x1a>
 8003806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380a:	68d8      	ldr	r0, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	1c99      	adds	r1, r3, #2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003816:	b282      	uxth	r2, r0
 8003818:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d121      	bne.n	8003876 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <I2SEx_RxISR_I2SExt+0x90>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <I2SEx_RxISR_I2SExt+0x50>
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <I2SEx_RxISR_I2SExt+0x94>)
 800383e:	e001      	b.n	8003844 <I2SEx_RxISR_I2SExt+0x54>
 8003840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	490d      	ldr	r1, [pc, #52]	; (8003880 <I2SEx_RxISR_I2SExt+0x90>)
 800384c:	428b      	cmp	r3, r1
 800384e:	d101      	bne.n	8003854 <I2SEx_RxISR_I2SExt+0x64>
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <I2SEx_RxISR_I2SExt+0x94>)
 8003852:	e001      	b.n	8003858 <I2SEx_RxISR_I2SExt+0x68>
 8003854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800385c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003862:	b29b      	uxth	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d106      	bne.n	8003876 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f7ff ff03 	bl	800367c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40003800 	.word	0x40003800
 8003884:	40003400 	.word	0x40003400

08003888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e267      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d075      	beq.n	8003992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038a6:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00c      	beq.n	80038cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d112      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038be:	4b82      	ldr	r3, [pc, #520]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ca:	d10b      	bne.n	80038e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038cc:	4b7e      	ldr	r3, [pc, #504]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d05b      	beq.n	8003990 <HAL_RCC_OscConfig+0x108>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d157      	bne.n	8003990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e242      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ec:	d106      	bne.n	80038fc <HAL_RCC_OscConfig+0x74>
 80038ee:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e01d      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x98>
 8003906:	4b70      	ldr	r3, [pc, #448]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6f      	ldr	r2, [pc, #444]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800390c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	4b6d      	ldr	r3, [pc, #436]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a6c      	ldr	r2, [pc, #432]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0xb0>
 8003920:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a68      	ldr	r2, [pc, #416]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b66      	ldr	r3, [pc, #408]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d013      	beq.n	8003968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003940:	f7fd fa8a 	bl	8000e58 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003948:	f7fd fa86 	bl	8000e58 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e207      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0xc0>
 8003966:	e014      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fd fa76 	bl	8000e58 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003970:	f7fd fa72 	bl	8000e58 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	; 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e1f3      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0xe8>
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d063      	beq.n	8003a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b41      	ldr	r3, [pc, #260]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e1c7      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4937      	ldr	r1, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b34      	ldr	r3, [pc, #208]	; (8003acc <HAL_RCC_OscConfig+0x244>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fe:	f7fd fa2b 	bl	8000e58 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fd fa27 	bl	8000e58 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e1a8      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4925      	ldr	r1, [pc, #148]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCC_OscConfig+0x244>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fd fa0a 	bl	8000e58 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fd fa06 	bl	8000e58 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e187      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d036      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_RCC_OscConfig+0x248>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fd f9ea 	bl	8000e58 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a88:	f7fd f9e6 	bl	8000e58 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e167      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0x200>
 8003aa6:	e01b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_OscConfig+0x248>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aae:	f7fd f9d3 	bl	8000e58 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	e00e      	b.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ab6:	f7fd f9cf 	bl	8000e58 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d907      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e150      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470000 	.word	0x42470000
 8003ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ea      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8097 	beq.w	8003c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10f      	bne.n	8003b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	4b7d      	ldr	r3, [pc, #500]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4a7c      	ldr	r2, [pc, #496]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b0e:	4b7a      	ldr	r3, [pc, #488]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b77      	ldr	r3, [pc, #476]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b74      	ldr	r3, [pc, #464]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fd f98f 	bl	8000e58 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fd f98b 	bl	8000e58 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e10c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <HAL_RCC_OscConfig+0x474>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2ea>
 8003b64:	4b64      	ldr	r3, [pc, #400]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b68:	4a63      	ldr	r2, [pc, #396]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b70:	e01c      	b.n	8003bac <HAL_RCC_OscConfig+0x324>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x30c>
 8003b7a:	4b5f      	ldr	r3, [pc, #380]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	4a5e      	ldr	r2, [pc, #376]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	6713      	str	r3, [r2, #112]	; 0x70
 8003b86:	4b5c      	ldr	r3, [pc, #368]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a5b      	ldr	r2, [pc, #364]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0x324>
 8003b94:	4b58      	ldr	r3, [pc, #352]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a57      	ldr	r2, [pc, #348]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba0:	4b55      	ldr	r3, [pc, #340]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	4a54      	ldr	r2, [pc, #336]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f023 0304 	bic.w	r3, r3, #4
 8003baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d015      	beq.n	8003be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fd f950 	bl	8000e58 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f7fd f94c 	bl	8000e58 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e0cb      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd2:	4b49      	ldr	r3, [pc, #292]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0ee      	beq.n	8003bbc <HAL_RCC_OscConfig+0x334>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be0:	f7fd f93a 	bl	8000e58 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e00a      	b.n	8003bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fd f936 	bl	8000e58 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e0b5      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bfe:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ee      	bne.n	8003be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c10:	4b39      	ldr	r3, [pc, #228]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	4a38      	ldr	r2, [pc, #224]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a1 	beq.w	8003d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c26:	4b34      	ldr	r3, [pc, #208]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d05c      	beq.n	8003cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d141      	bne.n	8003cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd f90a 	bl	8000e58 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd f906 	bl	8000e58 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e087      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	4b27      	ldr	r3, [pc, #156]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69da      	ldr	r2, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	431a      	orrs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	085b      	lsrs	r3, r3, #1
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	491b      	ldr	r1, [pc, #108]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c90:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fd f8df 	bl	8000e58 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c9e:	f7fd f8db 	bl	8000e58 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e05c      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x416>
 8003cbc:	e054      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fd f8c8 	bl	8000e58 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fd f8c4 	bl	8000e58 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e045      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x444>
 8003cea:	e03d      	b.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e038      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4ec>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d028      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d121      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11a      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d34:	4013      	ands	r3, r2
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d111      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0cc      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d90c      	bls.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b63      	ldr	r3, [pc, #396]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e0b8      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	4b59      	ldr	r3, [pc, #356]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	4a58      	ldr	r2, [pc, #352]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de4:	4b53      	ldr	r3, [pc, #332]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a52      	ldr	r2, [pc, #328]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df0:	4b50      	ldr	r3, [pc, #320]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	494d      	ldr	r1, [pc, #308]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d044      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e16:	4b47      	ldr	r3, [pc, #284]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d119      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e07f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d107      	bne.n	8003e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e36:	4b3f      	ldr	r3, [pc, #252]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e06f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e067      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e56:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 0203 	bic.w	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4934      	ldr	r1, [pc, #208]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e68:	f7fc fff6 	bl	8000e58 <HAL_GetTick>
 8003e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e70:	f7fc fff2 	bl	8000e58 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e04f      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e86:	4b2b      	ldr	r3, [pc, #172]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 020c 	and.w	r2, r3, #12
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d1eb      	bne.n	8003e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d20c      	bcs.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e032      	b.n	8003f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4916      	ldr	r1, [pc, #88]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efe:	f000 f821 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003f02:	4602      	mov	r2, r0
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	490a      	ldr	r1, [pc, #40]	; (8003f38 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	5ccb      	ldrb	r3, [r1, r3]
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc ff56 	bl	8000dd0 <HAL_InitTick>

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40023c00 	.word	0x40023c00
 8003f34:	40023800 	.word	0x40023800
 8003f38:	08007d90 	.word	0x08007d90
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	20000004 	.word	0x20000004

08003f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f48:	b094      	sub	sp, #80	; 0x50
 8003f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f50:	2300      	movs	r3, #0
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	2300      	movs	r3, #0
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f5c:	4b79      	ldr	r3, [pc, #484]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d00d      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x40>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	f200 80e1 	bhi.w	8004130 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x34>
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d003      	beq.n	8003f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f76:	e0db      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b73      	ldr	r3, [pc, #460]	; (8004148 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f7c:	e0db      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f7e:	4b73      	ldr	r3, [pc, #460]	; (800414c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f82:	e0d8      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d063      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	4b6a      	ldr	r3, [pc, #424]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
 8003fae:	2300      	movs	r3, #0
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003fb6:	4622      	mov	r2, r4
 8003fb8:	462b      	mov	r3, r5
 8003fba:	f04f 0000 	mov.w	r0, #0
 8003fbe:	f04f 0100 	mov.w	r1, #0
 8003fc2:	0159      	lsls	r1, r3, #5
 8003fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc8:	0150      	lsls	r0, r2, #5
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4621      	mov	r1, r4
 8003fd0:	1a51      	subs	r1, r2, r1
 8003fd2:	6139      	str	r1, [r7, #16]
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe8:	4659      	mov	r1, fp
 8003fea:	018b      	lsls	r3, r1, #6
 8003fec:	4651      	mov	r1, sl
 8003fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff2:	4651      	mov	r1, sl
 8003ff4:	018a      	lsls	r2, r1, #6
 8003ff6:	4651      	mov	r1, sl
 8003ff8:	ebb2 0801 	subs.w	r8, r2, r1
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	eb63 0901 	sbc.w	r9, r3, r1
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004016:	4690      	mov	r8, r2
 8004018:	4699      	mov	r9, r3
 800401a:	4623      	mov	r3, r4
 800401c:	eb18 0303 	adds.w	r3, r8, r3
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	462b      	mov	r3, r5
 8004024:	eb49 0303 	adc.w	r3, r9, r3
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004036:	4629      	mov	r1, r5
 8004038:	024b      	lsls	r3, r1, #9
 800403a:	4621      	mov	r1, r4
 800403c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004040:	4621      	mov	r1, r4
 8004042:	024a      	lsls	r2, r1, #9
 8004044:	4610      	mov	r0, r2
 8004046:	4619      	mov	r1, r3
 8004048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800404a:	2200      	movs	r2, #0
 800404c:	62bb      	str	r3, [r7, #40]	; 0x28
 800404e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004054:	f7fc f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4613      	mov	r3, r2
 800405e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004060:	e058      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004062:	4b38      	ldr	r3, [pc, #224]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	2200      	movs	r2, #0
 800406a:	4618      	mov	r0, r3
 800406c:	4611      	mov	r1, r2
 800406e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
 8004078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	f04f 0000 	mov.w	r0, #0
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	0159      	lsls	r1, r3, #5
 800408a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800408e:	0150      	lsls	r0, r2, #5
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4641      	mov	r1, r8
 8004096:	ebb2 0a01 	subs.w	sl, r2, r1
 800409a:	4649      	mov	r1, r9
 800409c:	eb63 0b01 	sbc.w	fp, r3, r1
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	f04f 0300 	mov.w	r3, #0
 80040a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040b4:	ebb2 040a 	subs.w	r4, r2, sl
 80040b8:	eb63 050b 	sbc.w	r5, r3, fp
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	00eb      	lsls	r3, r5, #3
 80040c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ca:	00e2      	lsls	r2, r4, #3
 80040cc:	4614      	mov	r4, r2
 80040ce:	461d      	mov	r5, r3
 80040d0:	4643      	mov	r3, r8
 80040d2:	18e3      	adds	r3, r4, r3
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	464b      	mov	r3, r9
 80040d8:	eb45 0303 	adc.w	r3, r5, r3
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ea:	4629      	mov	r1, r5
 80040ec:	028b      	lsls	r3, r1, #10
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f4:	4621      	mov	r1, r4
 80040f6:	028a      	lsls	r2, r1, #10
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fe:	2200      	movs	r2, #0
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	61fa      	str	r2, [r7, #28]
 8004104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004108:	f7fc f85e 	bl	80001c8 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	3301      	adds	r3, #1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800412e:	e002      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCC_GetSysClockFreq+0x204>)
 8004132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004138:	4618      	mov	r0, r3
 800413a:	3750      	adds	r7, #80	; 0x50
 800413c:	46bd      	mov	sp, r7
 800413e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	007a1200 	.word	0x007a1200

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000

08004168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800416c:	f7ff fff0 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0a9b      	lsrs	r3, r3, #10
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCC_GetPCLK1Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	08007da0 	.word	0x08007da0

08004190 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d035      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041b8:	4b62      	ldr	r3, [pc, #392]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041be:	f7fc fe4b 	bl	8000e58 <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041c6:	f7fc fe47 	bl	8000e58 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0b0      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d8:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	019a      	lsls	r2, r3, #6
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	071b      	lsls	r3, r3, #28
 80041f0:	4955      	ldr	r1, [pc, #340]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041f8:	4b52      	ldr	r3, [pc, #328]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041fe:	f7fc fe2b 	bl	8000e58 <HAL_GetTick>
 8004202:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004206:	f7fc fe27 	bl	8000e58 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e090      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004218:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8083 	beq.w	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b44      	ldr	r3, [pc, #272]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	4a43      	ldr	r2, [pc, #268]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	; 0x40
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800424e:	4b3f      	ldr	r3, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3e      	ldr	r2, [pc, #248]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800425a:	f7fc fdfd 	bl	8000e58 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004260:	e008      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fc fdf9 	bl	8000e58 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e062      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004280:	4b31      	ldr	r3, [pc, #196]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d02f      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	429a      	cmp	r2, r3
 800429c:	d028      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042a8:	4b29      	ldr	r3, [pc, #164]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ae:	4b28      	ldr	r3, [pc, #160]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80042b4:	4a24      	ldr	r2, [pc, #144]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042ba:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d114      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fc fdc7 	bl	8000e58 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fc fdc3 	bl	8000e58 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e02a      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fc:	d10d      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800430e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004312:	490d      	ldr	r1, [pc, #52]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
 8004318:	e005      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800431a:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004320:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004324:	6093      	str	r3, [r2, #8]
 8004326:	4b08      	ldr	r3, [pc, #32]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004332:	4905      	ldr	r1, [pc, #20]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	4313      	orrs	r3, r2
 8004336:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	42470068 	.word	0x42470068
 8004348:	40023800 	.word	0x40023800
 800434c:	40007000 	.word	0x40007000
 8004350:	42470e40 	.word	0x42470e40

08004354 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d13e      	bne.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d12f      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800438a:	617b      	str	r3, [r7, #20]
          break;
 800438c:	e02f      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800438e:	4b1c      	ldr	r3, [pc, #112]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439a:	d108      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800439c:	4b18      	ldr	r3, [pc, #96]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	e007      	b.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b6:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	0f1b      	lsrs	r3, r3, #28
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
          break;
 80043e6:	e002      	b.n	80043ee <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
          break;
 80043ec:	bf00      	nop
        }
      }
      break;
 80043ee:	bf00      	nop
    }
  }
  return frequency;
 80043f0:	697b      	ldr	r3, [r7, #20]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	00bb8000 	.word	0x00bb8000
 8004408:	007a1200 	.word	0x007a1200
 800440c:	00f42400 	.word	0x00f42400

08004410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e07b      	b.n	800451a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004432:	d009      	beq.n	8004448 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
 800443a:	e005      	b.n	8004448 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fc fb9c 	bl	8000ba0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	ea42 0103 	orr.w	r1, r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0104 	and.w	r1, r3, #4
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	f003 0210 	and.w	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69da      	ldr	r2, [r3, #28]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004522:	b084      	sub	sp, #16
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	f107 001c 	add.w	r0, r7, #28
 8004530:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	2b01      	cmp	r3, #1
 8004538:	d122      	bne.n	8004580 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f9bf 	bl	80048f8 <USB_CoreReset>
 800457a:	4603      	mov	r3, r0
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e01a      	b.n	80045b6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9b3 	bl	80048f8 <USB_CoreReset>
 8004592:	4603      	mov	r3, r0
 8004594:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	; 0x38
 80045a8:	e005      	b.n	80045b6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10b      	bne.n	80045d4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f043 0206 	orr.w	r2, r3, #6
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f043 0220 	orr.w	r2, r3, #32
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e0:	b004      	add	sp, #16
 80045e2:	4770      	bx	lr

080045e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f023 0201 	bic.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d115      	bne.n	8004676 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004656:	2001      	movs	r0, #1
 8004658:	f7fc fc0a 	bl	8000e70 <HAL_Delay>
      ms++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f939 	bl	80048da <USB_GetMode>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d01e      	beq.n	80046ac <USB_SetCurrentMode+0x84>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b31      	cmp	r3, #49	; 0x31
 8004672:	d9f0      	bls.n	8004656 <USB_SetCurrentMode+0x2e>
 8004674:	e01a      	b.n	80046ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d115      	bne.n	80046a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004688:	2001      	movs	r0, #1
 800468a:	f7fc fbf1 	bl	8000e70 <HAL_Delay>
      ms++;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f920 	bl	80048da <USB_GetMode>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <USB_SetCurrentMode+0x84>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b31      	cmp	r3, #49	; 0x31
 80046a4:	d9f0      	bls.n	8004688 <USB_SetCurrentMode+0x60>
 80046a6:	e001      	b.n	80046ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e005      	b.n	80046b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b32      	cmp	r3, #50	; 0x32
 80046b0:	d101      	bne.n	80046b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a13      	ldr	r2, [pc, #76]	; (8004724 <USB_FlushTxFifo+0x64>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e01b      	b.n	8004718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	daf2      	bge.n	80046ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	019b      	lsls	r3, r3, #6
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <USB_FlushTxFifo+0x64>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e006      	b.n	8004718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b20      	cmp	r3, #32
 8004714:	d0f0      	beq.n	80046f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	00030d40 	.word	0x00030d40

08004728 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a11      	ldr	r2, [pc, #68]	; (8004784 <USB_FlushRxFifo+0x5c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d901      	bls.n	8004746 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e018      	b.n	8004778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	daf2      	bge.n	8004734 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2210      	movs	r2, #16
 8004756:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	3301      	adds	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4a08      	ldr	r2, [pc, #32]	; (8004784 <USB_FlushRxFifo+0x5c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e006      	b.n	8004778 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b10      	cmp	r3, #16
 8004774:	d0f0      	beq.n	8004758 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	00030d40 	.word	0x00030d40

08004788 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004788:	b480      	push	{r7}
 800478a:	b089      	sub	sp, #36	; 0x24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	4611      	mov	r1, r2
 8004794:	461a      	mov	r2, r3
 8004796:	460b      	mov	r3, r1
 8004798:	71fb      	strb	r3, [r7, #7]
 800479a:	4613      	mov	r3, r2
 800479c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d123      	bne.n	80047f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ae:	88bb      	ldrh	r3, [r7, #4]
 80047b0:	3303      	adds	r3, #3
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e018      	b.n	80047ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047bc:	79fb      	ldrb	r3, [r7, #7]
 80047be:	031a      	lsls	r2, r3, #12
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	461a      	mov	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3301      	adds	r3, #1
 80047e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3e2      	bcc.n	80047bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3724      	adds	r7, #36	; 0x24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004804:	b480      	push	{r7}
 8004806:	b08b      	sub	sp, #44	; 0x2c
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	b29b      	uxth	r3, r3
 8004820:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	e014      	b.n	800485a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	601a      	str	r2, [r3, #0]
    pDest++;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	3301      	adds	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	3301      	adds	r3, #1
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	3301      	adds	r3, #1
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	3301      	adds	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	3301      	adds	r3, #1
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	6a3a      	ldr	r2, [r7, #32]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	429a      	cmp	r2, r3
 8004860:	d3e6      	bcc.n	8004830 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004862:	8bfb      	ldrh	r3, [r7, #30]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01e      	beq.n	80048a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004872:	461a      	mov	r2, r3
 8004874:	f107 0310 	add.w	r3, r7, #16
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	b2da      	uxtb	r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	701a      	strb	r2, [r3, #0]
      i++;
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	3301      	adds	r3, #1
 8004892:	623b      	str	r3, [r7, #32]
      pDest++;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3301      	adds	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800489a:	8bfb      	ldrh	r3, [r7, #30]
 800489c:	3b01      	subs	r3, #1
 800489e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048a0:	8bfb      	ldrh	r3, [r7, #30]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1ea      	bne.n	800487c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	372c      	adds	r7, #44	; 0x2c
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048cc:	68fb      	ldr	r3, [r7, #12]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4a13      	ldr	r2, [pc, #76]	; (800495c <USB_CoreReset+0x64>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e01b      	b.n	800494e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	daf2      	bge.n	8004904 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <USB_CoreReset+0x64>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b01      	cmp	r3, #1
 800494a:	d0f0      	beq.n	800492e <USB_CoreReset+0x36>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	00030d40 	.word	0x00030d40

08004960 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004960:	b084      	sub	sp, #16
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800496e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004980:	461a      	mov	r2, r3
 8004982:	2300      	movs	r3, #0
 8004984:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80049b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10a      	bne.n	80049d2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049ca:	f043 0304 	orr.w	r3, r3, #4
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	e014      	b.n	80049fc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e009      	b.n	80049fc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80049f6:	f023 0304 	bic.w	r3, r3, #4
 80049fa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049fc:	2110      	movs	r1, #16
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff fe5e 	bl	80046c0 <USB_FlushTxFifo>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff fe8a 	bl	8004728 <USB_FlushRxFifo>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e015      	b.n	8004a50 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a30:	461a      	mov	r2, r3
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a44:	461a      	mov	r2, r3
 8004a46:	2300      	movs	r3, #0
 8004a48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d3e5      	bcc.n	8004a24 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <USB_HostInit+0x16c>)
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <USB_HostInit+0x170>)
 8004a84:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a88:	e009      	b.n	8004a9e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a10      	ldr	r2, [pc, #64]	; (8004ad4 <USB_HostInit+0x174>)
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a0f      	ldr	r2, [pc, #60]	; (8004ad8 <USB_HostInit+0x178>)
 8004a9a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	4b09      	ldr	r3, [pc, #36]	; (8004adc <USB_HostInit+0x17c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac8:	b004      	add	sp, #16
 8004aca:	4770      	bx	lr
 8004acc:	01000200 	.word	0x01000200
 8004ad0:	00e00300 	.word	0x00e00300
 8004ad4:	00600080 	.word	0x00600080
 8004ad8:	004000e0 	.word	0x004000e0
 8004adc:	a3200008 	.word	0xa3200008

08004ae0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	78fb      	ldrb	r3, [r7, #3]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004b2e:	6053      	str	r3, [r2, #4]
 8004b30:	e009      	b.n	8004b46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d106      	bne.n	8004b46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f241 7370 	movw	r3, #6000	; 0x1770
 8004b44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b84:	2064      	movs	r0, #100	; 0x64
 8004b86:	f7fc f973 	bl	8000e70 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b98:	200a      	movs	r0, #10
 8004b9a:	f7fc f969 	bl	8000e70 <HAL_Delay>

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bcc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d109      	bne.n	8004bec <USB_DriveVbus+0x44>
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d109      	bne.n	8004c0c <USB_DriveVbus+0x64>
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c5b      	lsrs	r3, r3, #17
 8004c38:	f003 0303 	and.w	r3, r3, #3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	b29b      	uxth	r3, r3
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	70fb      	strb	r3, [r7, #3]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	70bb      	strb	r3, [r7, #2]
 8004c82:	4613      	mov	r3, r2
 8004c84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004ca2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d87e      	bhi.n	8004da8 <USB_HC_Init+0x13c>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <USB_HC_Init+0x44>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004d6b 	.word	0x08004d6b
 8004cb8:	08004cc1 	.word	0x08004cc1
 8004cbc:	08004d2d 	.word	0x08004d2d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f240 439d 	movw	r3, #1181	; 0x49d
 8004cd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da10      	bge.n	8004cfe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004cfc:	e057      	b.n	8004dae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d051      	beq.n	8004dae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d28:	60d3      	str	r3, [r2, #12]
      break;
 8004d2a:	e040      	b.n	8004dae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d38:	461a      	mov	r2, r3
 8004d3a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004d3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	da34      	bge.n	8004db2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d66:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004d68:	e023      	b.n	8004db2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	461a      	mov	r2, r3
 8004d78:	f240 2325 	movw	r3, #549	; 0x225
 8004d7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da17      	bge.n	8004db6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	78fa      	ldrb	r2, [r7, #3]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004da4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004da6:	e006      	b.n	8004db6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	77fb      	strb	r3, [r7, #31]
      break;
 8004dac:	e004      	b.n	8004db8 <USB_HC_Init+0x14c>
      break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <USB_HC_Init+0x14c>
      break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <USB_HC_Init+0x14c>
      break;
 8004db6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	78fa      	ldrb	r2, [r7, #3]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dd2:	f043 0302 	orr.w	r3, r3, #2
 8004dd6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	2101      	movs	r1, #1
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	6939      	ldr	r1, [r7, #16]
 8004dee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004df2:	4313      	orrs	r3, r2
 8004df4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e02:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da03      	bge.n	8004e12 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e001      	b.n	8004e16 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff feff 	bl	8004c1a <USB_GetHostSpeed>
 8004e1c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d106      	bne.n	8004e34 <USB_HC_Init+0x1c8>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d003      	beq.n	8004e34 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e001      	b.n	8004e38 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	059b      	lsls	r3, r3, #22
 8004e3c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e40:	78bb      	ldrb	r3, [r7, #2]
 8004e42:	02db      	lsls	r3, r3, #11
 8004e44:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e48:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e4e:	049b      	lsls	r3, r3, #18
 8004e50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e54:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	0159      	lsls	r1, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	440b      	add	r3, r1
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e74:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004e76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d003      	beq.n	8004e86 <USB_HC_Init+0x21a>
 8004e7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d10f      	bne.n	8004ea6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ea0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ea4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08c      	sub	sp, #48	; 0x30
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	785b      	ldrb	r3, [r3, #1]
 8004ec6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ecc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02d      	beq.n	8004f36 <USB_HC_StartXfer+0x86>
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	791b      	ldrb	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d129      	bne.n	8004f36 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d117      	bne.n	8004f18 <USB_HC_StartXfer+0x68>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	79db      	ldrb	r3, [r3, #7]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <USB_HC_StartXfer+0x48>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	79db      	ldrb	r3, [r3, #7]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d10f      	bne.n	8004f18 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	0151      	lsls	r1, r2, #5
 8004f0a:	6a3a      	ldr	r2, [r7, #32]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <USB_HC_StartXfer+0x86>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	795b      	ldrb	r3, [r3, #5]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d107      	bne.n	8004f36 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa0f 	bl	8005350 <USB_DoPing>
      return HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e0f8      	b.n	8005128 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d018      	beq.n	8004f70 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	8912      	ldrh	r2, [r2, #8]
 8004f46:	4413      	add	r3, r2
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	8912      	ldrh	r2, [r2, #8]
 8004f4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f52:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004f56:	8b7b      	ldrh	r3, [r7, #26]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d90b      	bls.n	8004f74 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004f5c:	8b7b      	ldrh	r3, [r7, #26]
 8004f5e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	8912      	ldrh	r2, [r2, #8]
 8004f66:	fb03 f202 	mul.w	r2, r3, r2
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	611a      	str	r2, [r3, #16]
 8004f6e:	e001      	b.n	8004f74 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004f70:	2301      	movs	r3, #1
 8004f72:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	78db      	ldrb	r3, [r3, #3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d007      	beq.n	8004f8c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	8912      	ldrh	r2, [r2, #8]
 8004f82:	fb03 f202 	mul.w	r2, r3, r2
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	611a      	str	r2, [r3, #16]
 8004f8a:	e003      	b.n	8004f94 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f9e:	04d9      	lsls	r1, r3, #19
 8004fa0:	4b63      	ldr	r3, [pc, #396]	; (8005130 <USB_HC_StartXfer+0x280>)
 8004fa2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fa4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	7a9b      	ldrb	r3, [r3, #10]
 8004faa:	075b      	lsls	r3, r3, #29
 8004fac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fb0:	69f9      	ldr	r1, [r7, #28]
 8004fb2:	0148      	lsls	r0, r1, #5
 8004fb4:	6a39      	ldr	r1, [r7, #32]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004fbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004fbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	68d9      	ldr	r1, [r3, #12]
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd6:	460a      	mov	r2, r1
 8004fd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	bf0c      	ite	eq
 8004fea:	2301      	moveq	r3, #1
 8004fec:	2300      	movne	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	6a3a      	ldr	r2, [r7, #32]
 8005006:	440a      	add	r2, r1
 8005008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800500c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005010:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	7e7b      	ldrb	r3, [r7, #25]
 8005022:	075b      	lsls	r3, r3, #29
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	0148      	lsls	r0, r1, #5
 8005028:	6a39      	ldr	r1, [r7, #32]
 800502a:	4401      	add	r1, r0
 800502c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	4413      	add	r3, r2
 800503c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800504a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d004      	beq.n	800505e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	e003      	b.n	8005066 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005064:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800506c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	461a      	mov	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e04e      	b.n	8005128 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	78db      	ldrb	r3, [r3, #3]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d149      	bne.n	8005126 <USB_HC_StartXfer+0x276>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d045      	beq.n	8005126 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	79db      	ldrb	r3, [r3, #7]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d830      	bhi.n	8005104 <USB_HC_StartXfer+0x254>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <USB_HC_StartXfer+0x1f8>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050dd 	.word	0x080050dd
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	080050dd 	.word	0x080050dd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	3303      	adds	r3, #3
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050c2:	8afa      	ldrh	r2, [r7, #22]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d91c      	bls.n	8005108 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80050da:	e015      	b.n	8005108 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	3303      	adds	r3, #3
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80050e6:	8afa      	ldrh	r2, [r7, #22]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d90a      	bls.n	800510c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	619a      	str	r2, [r3, #24]
        }
        break;
 8005102:	e003      	b.n	800510c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <USB_HC_StartXfer+0x25e>
        break;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <USB_HC_StartXfer+0x25e>
        break;
 800510c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	785a      	ldrb	r2, [r3, #1]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	b29b      	uxth	r3, r3
 800511c:	2000      	movs	r0, #0
 800511e:	9000      	str	r0, [sp, #0]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff fb31 	bl	8004788 <USB_WritePacket>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	1ff80000 	.word	0x1ff80000

08005134 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	b29b      	uxth	r3, r3
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005156:	b480      	push	{r7}
 8005158:	b089      	sub	sp, #36	; 0x24
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0c9b      	lsrs	r3, r3, #18
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0fdb      	lsrs	r3, r3, #31
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d104      	bne.n	80051b0 <USB_HC_Halt+0x5a>
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	e0c8      	b.n	8005342 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <USB_HC_Halt+0x66>
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d163      	bne.n	8005284 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f040 80ab 	bne.w	8005340 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d133      	bne.n	800525e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	0151      	lsls	r1, r2, #5
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	440a      	add	r2, r1
 800520c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005210:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005214:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005234:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005242:	d81d      	bhi.n	8005280 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525a:	d0ec      	beq.n	8005236 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800525c:	e070      	b.n	8005340 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800527c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800527e:	e05f      	b.n	8005340 <USB_HC_Halt+0x1ea>
            break;
 8005280:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005282:	e05d      	b.n	8005340 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d133      	bne.n	800531c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	69fa      	ldr	r2, [r7, #28]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005300:	d81d      	bhi.n	800533e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4413      	add	r3, r2
 800530a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005314:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005318:	d0ec      	beq.n	80052f4 <USB_HC_Halt+0x19e>
 800531a:	e011      	b.n	8005340 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e000      	b.n	8005340 <USB_HC_Halt+0x1ea>
          break;
 800533e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3724      	adds	r7, #36	; 0x24
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005364:	2301      	movs	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	04da      	lsls	r2, r3, #19
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <USB_DoPing+0x74>)
 800536e:	4013      	ands	r3, r2
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	440a      	add	r2, r1
 8005378:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005380:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005398:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	461a      	mov	r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	1ff80000 	.word	0x1ff80000

080053c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff f912 	bl	8004606 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e2:	2110      	movs	r1, #16
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff f96b 	bl	80046c0 <USB_FlushTxFifo>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff f997 	bl	8004728 <USB_FlushRxFifo>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e01f      	b.n	800544a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005420:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005428:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005430:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800543e:	461a      	mov	r2, r3
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	3301      	adds	r3, #1
 8005448:	61bb      	str	r3, [r7, #24]
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d9dc      	bls.n	800540a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
 8005454:	e034      	b.n	80054c0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4413      	add	r3, r2
 800545e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800546c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005474:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800547c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	461a      	mov	r2, r3
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800549c:	d80c      	bhi.n	80054b8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b4:	d0ec      	beq.n	8005490 <USB_StopHost+0xc8>
 80054b6:	e000      	b.n	80054ba <USB_StopHost+0xf2>
        break;
 80054b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	3301      	adds	r3, #1
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d9c7      	bls.n	8005456 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f04f 32ff 	mov.w	r2, #4294967295
 80054da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff f881 	bl	80045e4 <USB_EnableGlobalInt>

  return ret;
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af04      	add	r7, sp, #16
 80054f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80054f4:	2301      	movs	r3, #1
 80054f6:	2202      	movs	r2, #2
 80054f8:	2102      	movs	r1, #2
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fc66 	bl	8005dcc <USBH_FindInterface>
 8005500:	4603      	mov	r3, r0
 8005502:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2bff      	cmp	r3, #255	; 0xff
 8005508:	d002      	beq.n	8005510 <USBH_CDC_InterfaceInit+0x24>
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d901      	bls.n	8005514 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005510:	2302      	movs	r3, #2
 8005512:	e13d      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fc3b 	bl	8005d94 <USBH_SelectInterface>
 800551e:	4603      	mov	r3, r0
 8005520:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005522:	7bbb      	ldrb	r3, [r7, #14]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005528:	2302      	movs	r3, #2
 800552a:	e131      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005532:	2050      	movs	r0, #80	; 0x50
 8005534:	f002 fad2 	bl	8007adc <malloc>
 8005538:	4603      	mov	r3, r0
 800553a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800554c:	2302      	movs	r3, #2
 800554e:	e11f      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005550:	2250      	movs	r2, #80	; 0x50
 8005552:	2100      	movs	r1, #0
 8005554:	68b8      	ldr	r0, [r7, #8]
 8005556:	f002 fb7d 	bl	8007c54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	211a      	movs	r1, #26
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	4413      	add	r3, r2
 8005566:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	b25b      	sxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	da15      	bge.n	800559e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	211a      	movs	r1, #26
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	4413      	add	r3, r2
 800557e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	211a      	movs	r1, #26
 800558e:	fb01 f303 	mul.w	r3, r1, r3
 8005592:	4413      	add	r3, r2
 8005594:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005598:	881a      	ldrh	r2, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f001 ff2e 	bl	8007406 <USBH_AllocPipe>
 80055aa:	4603      	mov	r3, r0
 80055ac:	461a      	mov	r2, r3
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	7819      	ldrb	r1, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	7858      	ldrb	r0, [r3, #1]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	8952      	ldrh	r2, [r2, #10]
 80055ca:	9202      	str	r2, [sp, #8]
 80055cc:	2203      	movs	r2, #3
 80055ce:	9201      	str	r2, [sp, #4]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4623      	mov	r3, r4
 80055d4:	4602      	mov	r2, r0
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 fee6 	bl	80073a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	4619      	mov	r1, r3
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f002 f9f5 	bl	80079d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80055ea:	2300      	movs	r3, #0
 80055ec:	2200      	movs	r2, #0
 80055ee:	210a      	movs	r1, #10
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fbeb 	bl	8005dcc <USBH_FindInterface>
 80055f6:	4603      	mov	r3, r0
 80055f8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	2bff      	cmp	r3, #255	; 0xff
 80055fe:	d002      	beq.n	8005606 <USBH_CDC_InterfaceInit+0x11a>
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d901      	bls.n	800560a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005606:	2302      	movs	r3, #2
 8005608:	e0c2      	b.n	8005790 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800560a:	7bfb      	ldrb	r3, [r7, #15]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	211a      	movs	r1, #26
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	b25b      	sxtb	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	da16      	bge.n	8005650 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	211a      	movs	r1, #26
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	211a      	movs	r1, #26
 800563e:	fb01 f303 	mul.w	r3, r1, r3
 8005642:	4413      	add	r3, r2
 8005644:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	835a      	strh	r2, [r3, #26]
 800564e:	e015      	b.n	800567c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	211a      	movs	r1, #26
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005660:	781a      	ldrb	r2, [r3, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	211a      	movs	r1, #26
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005676:	881a      	ldrh	r2, [r3, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	211a      	movs	r1, #26
 8005682:	fb01 f303 	mul.w	r3, r1, r3
 8005686:	4413      	add	r3, r2
 8005688:	f203 3356 	addw	r3, r3, #854	; 0x356
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	b25b      	sxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	da16      	bge.n	80056c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005694:	7bfb      	ldrb	r3, [r7, #15]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	211a      	movs	r1, #26
 800569a:	fb01 f303 	mul.w	r3, r1, r3
 800569e:	4413      	add	r3, r2
 80056a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056aa:	7bfb      	ldrb	r3, [r7, #15]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	211a      	movs	r1, #26
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056ba:	881a      	ldrh	r2, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	835a      	strh	r2, [r3, #26]
 80056c0:	e015      	b.n	80056ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	211a      	movs	r1, #26
 80056c8:	fb01 f303 	mul.w	r3, r1, r3
 80056cc:	4413      	add	r3, r2
 80056ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	211a      	movs	r1, #26
 80056de:	fb01 f303 	mul.w	r3, r1, r3
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80056e8:	881a      	ldrh	r2, [r3, #0]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	7b9b      	ldrb	r3, [r3, #14]
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fe86 	bl	8007406 <USBH_AllocPipe>
 80056fa:	4603      	mov	r3, r0
 80056fc:	461a      	mov	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	7bdb      	ldrb	r3, [r3, #15]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 fe7c 	bl	8007406 <USBH_AllocPipe>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	7b59      	ldrb	r1, [r3, #13]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	7b98      	ldrb	r0, [r3, #14]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	8b12      	ldrh	r2, [r2, #24]
 800572e:	9202      	str	r2, [sp, #8]
 8005730:	2202      	movs	r2, #2
 8005732:	9201      	str	r2, [sp, #4]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4623      	mov	r3, r4
 8005738:	4602      	mov	r2, r0
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 fe34 	bl	80073a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	7b19      	ldrb	r1, [r3, #12]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	7bd8      	ldrb	r0, [r3, #15]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	8b52      	ldrh	r2, [r2, #26]
 8005758:	9202      	str	r2, [sp, #8]
 800575a:	2202      	movs	r2, #2
 800575c:	9201      	str	r2, [sp, #4]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	4623      	mov	r3, r4
 8005762:	4602      	mov	r2, r0
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 fe1f 	bl	80073a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	7b5b      	ldrb	r3, [r3, #13]
 8005776:	2200      	movs	r2, #0
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f002 f92a 	bl	80079d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f002 f923 	bl	80079d4 <USBH_LL_SetToggle>

  return USBH_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}

08005798 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00e      	beq.n	80057d0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	4619      	mov	r1, r3
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 fe14 	bl	80073e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fe3f 	bl	8007448 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	7b1b      	ldrb	r3, [r3, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	7b1b      	ldrb	r3, [r3, #12]
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 fe01 	bl	80073e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f001 fe2c 	bl	8007448 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7b5b      	ldrb	r3, [r3, #13]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00e      	beq.n	800581c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	7b5b      	ldrb	r3, [r3, #13]
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f001 fdee 	bl	80073e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	7b5b      	ldrb	r3, [r3, #13]
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fe19 	bl	8007448 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	4618      	mov	r0, r3
 8005832:	f002 f95b 	bl	8007aec <free>
    phost->pActiveClass->pData = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800583c:	2200      	movs	r2, #0
 800583e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3340      	adds	r3, #64	; 0x40
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8b1 	bl	80059ca <GetLineCoding>
 8005868:	4603      	mov	r3, r0
 800586a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800586c:	7afb      	ldrb	r3, [r7, #11]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d105      	bne.n	800587e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005878:	2102      	movs	r1, #2
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800587e:	7afb      	ldrb	r3, [r7, #11]
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d877      	bhi.n	800599c <USBH_CDC_Process+0x114>
 80058ac:	a201      	add	r2, pc, #4	; (adr r2, 80058b4 <USBH_CDC_Process+0x2c>)
 80058ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b2:	bf00      	nop
 80058b4:	080058c9 	.word	0x080058c9
 80058b8:	080058cf 	.word	0x080058cf
 80058bc:	080058ff 	.word	0x080058ff
 80058c0:	08005973 	.word	0x08005973
 80058c4:	08005981 	.word	0x08005981
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e06d      	b.n	80059aa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f897 	bl	8005a08 <SetLineCoding>
 80058da:	4603      	mov	r3, r0
 80058dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80058de:	7bbb      	ldrb	r3, [r7, #14]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d104      	bne.n	80058ee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80058ec:	e058      	b.n	80059a0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d055      	beq.n	80059a0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2204      	movs	r2, #4
 80058f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80058fc:	e050      	b.n	80059a0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3340      	adds	r3, #64	; 0x40
 8005902:	4619      	mov	r1, r3
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f860 	bl	80059ca <GetLineCoding>
 800590a:	4603      	mov	r3, r0
 800590c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d126      	bne.n	8005962 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	791b      	ldrb	r3, [r3, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d13b      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005936:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005938:	429a      	cmp	r2, r3
 800593a:	d133      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005948:	429a      	cmp	r2, r3
 800594a:	d12b      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005954:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005956:	429a      	cmp	r2, r3
 8005958:	d124      	bne.n	80059a4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f958 	bl	8005c10 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005960:	e020      	b.n	80059a4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d01d      	beq.n	80059a4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2204      	movs	r2, #4
 800596c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005970:	e018      	b.n	80059a4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f867 	bl	8005a46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f8da 	bl	8005b32 <CDC_ProcessReception>
      break;
 800597e:	e014      	b.n	80059aa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005980:	2100      	movs	r1, #0
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 ffef 	bl	8006966 <USBH_ClrFeature>
 8005988:	4603      	mov	r3, r0
 800598a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800599a:	e005      	b.n	80059a8 <USBH_CDC_Process+0x120>

    default:
      break;
 800599c:	bf00      	nop
 800599e:	e004      	b.n	80059aa <USBH_CDC_Process+0x122>
      break;
 80059a0:	bf00      	nop
 80059a2:	e002      	b.n	80059aa <USBH_CDC_Process+0x122>
      break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <USBH_CDC_Process+0x122>
      break;
 80059a8:	bf00      	nop

  }

  return status;
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	22a1      	movs	r2, #161	; 0xa1
 80059d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2221      	movs	r2, #33	; 0x21
 80059de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2207      	movs	r2, #7
 80059f0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2207      	movs	r2, #7
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 fa83 	bl	8006f04 <USBH_CtlReq>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2221      	movs	r2, #33	; 0x21
 8005a16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2207      	movs	r2, #7
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f001 fa64 	bl	8006f04 <USBH_CtlReq>
 8005a3c:	4603      	mov	r3, r0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af02      	add	r7, sp, #8
 8005a4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d002      	beq.n	8005a6c <CDC_ProcessTransmission+0x26>
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d023      	beq.n	8005ab2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005a6a:	e05e      	b.n	8005b2a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	8b12      	ldrh	r2, [r2, #24]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d90b      	bls.n	8005a90 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	69d9      	ldr	r1, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8b1a      	ldrh	r2, [r3, #24]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	7b5b      	ldrb	r3, [r3, #13]
 8005a84:	2001      	movs	r0, #1
 8005a86:	9000      	str	r0, [sp, #0]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 fc4a 	bl	8007322 <USBH_BulkSendData>
 8005a8e:	e00b      	b.n	8005aa8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	7b5b      	ldrb	r3, [r3, #13]
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	9000      	str	r0, [sp, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f001 fc3d 	bl	8007322 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005ab0:	e03b      	b.n	8005b2a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	7b5b      	ldrb	r3, [r3, #13]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 ff61 	bl	8007980 <USBH_LL_GetURBState>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005ac2:	7afb      	ldrb	r3, [r7, #11]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d128      	bne.n	8005b1a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	8b12      	ldrh	r2, [r2, #24]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d90e      	bls.n	8005af2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	8b12      	ldrh	r2, [r2, #24]
 8005adc:	1a9a      	subs	r2, r3, r2
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	8b12      	ldrh	r2, [r2, #24]
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	61da      	str	r2, [r3, #28]
 8005af0:	e002      	b.n	8005af8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d004      	beq.n	8005b0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b08:	e00e      	b.n	8005b28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f868 	bl	8005be8 <USBH_CDC_TransmitCallback>
      break;
 8005b18:	e006      	b.n	8005b28 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d103      	bne.n	8005b28 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b28:	bf00      	nop
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b086      	sub	sp, #24
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005b44:	2300      	movs	r3, #0
 8005b46:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d002      	beq.n	8005b58 <CDC_ProcessReception+0x26>
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d00e      	beq.n	8005b74 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005b56:	e043      	b.n	8005be0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6a19      	ldr	r1, [r3, #32]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	8b5a      	ldrh	r2, [r3, #26]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	7b1b      	ldrb	r3, [r3, #12]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fc01 	bl	800736c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005b72:	e035      	b.n	8005be0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	7b1b      	ldrb	r3, [r3, #12]
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 ff00 	bl	8007980 <USBH_LL_GetURBState>
 8005b80:	4603      	mov	r3, r0
 8005b82:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005b84:	7cfb      	ldrb	r3, [r7, #19]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d129      	bne.n	8005bde <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	7b1b      	ldrb	r3, [r3, #12]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fe63 	bl	800785c <USBH_LL_GetLastXferSize>
 8005b96:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d016      	beq.n	8005bd0 <CDC_ProcessReception+0x9e>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	8b5b      	ldrh	r3, [r3, #26]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d910      	bls.n	8005bd0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad2      	subs	r2, r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2203      	movs	r2, #3
 8005bca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005bce:	e006      	b.n	8005bde <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f80f 	bl	8005bfc <USBH_CDC_ReceiveCallback>
      break;
 8005bde:	bf00      	nop
  }
}
 8005be0:	bf00      	nop
 8005be2:	3718      	adds	r7, #24
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e029      	b.n	8005c90 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f81f 	bl	8005c98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f001 fd33 	bl	80076f4 <USBH_LL_Init>

  return USBH_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e009      	b.n	8005cbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	33e0      	adds	r3, #224	; 0xe0
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b0f      	cmp	r3, #15
 8005cc2:	d9f2      	bls.n	8005caa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
 8005cc8:	e009      	b.n	8005cde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce4:	d3f1      	bcc.n	8005cca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2240      	movs	r2, #64	; 0x40
 8005d0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d016      	beq.n	8005d82 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	33de      	adds	r3, #222	; 0xde
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
 8005d7a:	e004      	b.n	8005d86 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	73fb      	strb	r3, [r7, #15]
 8005d80:	e001      	b.n	8005d86 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d82:	2302      	movs	r3, #2
 8005d84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d204      	bcs.n	8005dba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005db8:	e001      	b.n	8005dbe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4603      	mov	r3, r0
 8005ddc:	70fb      	strb	r3, [r7, #3]
 8005dde:	460b      	mov	r3, r1
 8005de0:	70bb      	strb	r3, [r7, #2]
 8005de2:	4613      	mov	r3, r2
 8005de4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005df4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005df6:	e025      	b.n	8005e44 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	221a      	movs	r2, #26
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
 8005e00:	3308      	adds	r3, #8
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	3302      	adds	r3, #2
 8005e08:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	795b      	ldrb	r3, [r3, #5]
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d002      	beq.n	8005e1a <USBH_FindInterface+0x4e>
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2bff      	cmp	r3, #255	; 0xff
 8005e18:	d111      	bne.n	8005e3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005e1e:	78ba      	ldrb	r2, [r7, #2]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d002      	beq.n	8005e2a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e24:	78bb      	ldrb	r3, [r7, #2]
 8005e26:	2bff      	cmp	r3, #255	; 0xff
 8005e28:	d109      	bne.n	8005e3e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005e2e:	787a      	ldrb	r2, [r7, #1]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d002      	beq.n	8005e3a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e34:	787b      	ldrb	r3, [r7, #1]
 8005e36:	2bff      	cmp	r3, #255	; 0xff
 8005e38:	d101      	bne.n	8005e3e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	e006      	b.n	8005e4c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	3301      	adds	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d9d6      	bls.n	8005df8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005e4a:	23ff      	movs	r3, #255	; 0xff
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fc83 	bl	800776c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005e66:	2101      	movs	r1, #1
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f001 fd9c 	bl	80079a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e80:	2302      	movs	r3, #2
 8005e82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d102      	bne.n	8005e9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b0b      	cmp	r3, #11
 8005ea2:	f200 81be 	bhi.w	8006222 <USBH_Process+0x3aa>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <USBH_Process+0x34>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005edd 	.word	0x08005edd
 8005eb0:	08005f0f 	.word	0x08005f0f
 8005eb4:	08005f77 	.word	0x08005f77
 8005eb8:	080061bd 	.word	0x080061bd
 8005ebc:	08006223 	.word	0x08006223
 8005ec0:	0800601b 	.word	0x0800601b
 8005ec4:	08006163 	.word	0x08006163
 8005ec8:	08006051 	.word	0x08006051
 8005ecc:	08006071 	.word	0x08006071
 8005ed0:	08006091 	.word	0x08006091
 8005ed4:	080060d5 	.word	0x080060d5
 8005ed8:	080061a5 	.word	0x080061a5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 819e 	beq.w	8006226 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005ef0:	20c8      	movs	r0, #200	; 0xc8
 8005ef2:	f001 fd9f 	bl	8007a34 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fc95 	bl	8007826 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f0c:	e18b      	b.n	8006226 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d107      	bne.n	8005f28 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f26:	e18d      	b.n	8006244 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f32:	d914      	bls.n	8005f5e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d903      	bls.n	8005f56 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	220d      	movs	r2, #13
 8005f52:	701a      	strb	r2, [r3, #0]
      break;
 8005f54:	e176      	b.n	8006244 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
      break;
 8005f5c:	e172      	b.n	8006244 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005f64:	f103 020a 	add.w	r2, r3, #10
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005f6e:	200a      	movs	r0, #10
 8005f70:	f001 fd60 	bl	8007a34 <USBH_Delay>
      break;
 8005f74:	e166      	b.n	8006244 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f86:	2104      	movs	r1, #4
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005f8c:	2064      	movs	r0, #100	; 0x64
 8005f8e:	f001 fd51 	bl	8007a34 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f001 fc20 	bl	80077d8 <USBH_LL_GetSpeed>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2205      	movs	r2, #5
 8005fa6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fa2b 	bl	8007406 <USBH_AllocPipe>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fa23 	bl	8007406 <USBH_AllocPipe>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	7919      	ldrb	r1, [r3, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005fdc:	b292      	uxth	r2, r2
 8005fde:	9202      	str	r2, [sp, #8]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	9201      	str	r2, [sp, #4]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2280      	movs	r2, #128	; 0x80
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 f9dc 	bl	80073a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	7959      	ldrb	r1, [r3, #5]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006004:	b292      	uxth	r2, r2
 8006006:	9202      	str	r2, [sp, #8]
 8006008:	2200      	movs	r2, #0
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	4603      	mov	r3, r0
 8006010:	2200      	movs	r2, #0
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f001 f9c8 	bl	80073a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006018:	e114      	b.n	8006244 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f918 	bl	8006250 <USBH_HandleEnum>
 8006020:	4603      	mov	r3, r0
 8006022:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 80fe 	bne.w	800622a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800603c:	2b01      	cmp	r3, #1
 800603e:	d103      	bne.n	8006048 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2208      	movs	r2, #8
 8006044:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006046:	e0f0      	b.n	800622a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2207      	movs	r2, #7
 800604c:	701a      	strb	r2, [r3, #0]
      break;
 800604e:	e0ec      	b.n	800622a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80e9 	beq.w	800622e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006062:	2101      	movs	r1, #1
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2208      	movs	r2, #8
 800606c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800606e:	e0de      	b.n	800622e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006076:	b29b      	uxth	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fc2c 	bl	80068d8 <USBH_SetCfg>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	f040 80d5 	bne.w	8006232 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2209      	movs	r2, #9
 800608c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800608e:	e0d0      	b.n	8006232 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d016      	beq.n	80060cc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800609e:	2101      	movs	r1, #1
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fc3c 	bl	800691e <USBH_SetFeature>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80060aa:	7bbb      	ldrb	r3, [r7, #14]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	220a      	movs	r2, #10
 80060b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80060b8:	e0bd      	b.n	8006236 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b03      	cmp	r3, #3
 80060c0:	f040 80b9 	bne.w	8006236 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	220a      	movs	r2, #10
 80060c8:	701a      	strb	r2, [r3, #0]
      break;
 80060ca:	e0b4      	b.n	8006236 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	220a      	movs	r2, #10
 80060d0:	701a      	strb	r2, [r3, #0]
      break;
 80060d2:	e0b0      	b.n	8006236 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 80ad 	beq.w	800623a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
 80060ec:	e016      	b.n	800611c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	32de      	adds	r2, #222	; 0xde
 80060f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f8:	791a      	ldrb	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006100:	429a      	cmp	r2, r3
 8006102:	d108      	bne.n	8006116 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006104:	7bfa      	ldrb	r2, [r7, #15]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32de      	adds	r2, #222	; 0xde
 800610a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006114:	e005      	b.n	8006122 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	3301      	adds	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0e5      	beq.n	80060ee <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006128:	2b00      	cmp	r3, #0
 800612a:	d016      	beq.n	800615a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	4798      	blx	r3
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d109      	bne.n	8006152 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2206      	movs	r2, #6
 8006142:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800614a:	2103      	movs	r1, #3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006150:	e073      	b.n	800623a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	220d      	movs	r2, #13
 8006156:	701a      	strb	r2, [r3, #0]
      break;
 8006158:	e06f      	b.n	800623a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	220d      	movs	r2, #13
 800615e:	701a      	strb	r2, [r3, #0]
      break;
 8006160:	e06b      	b.n	800623a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d017      	beq.n	800619c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
 8006178:	4603      	mov	r3, r0
 800617a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	220b      	movs	r2, #11
 8006188:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800618a:	e058      	b.n	800623e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d154      	bne.n	800623e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	220d      	movs	r2, #13
 8006198:	701a      	strb	r2, [r3, #0]
      break;
 800619a:	e050      	b.n	800623e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	220d      	movs	r2, #13
 80061a0:	701a      	strb	r2, [r3, #0]
      break;
 80061a2:	e04c      	b.n	800623e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d049      	beq.n	8006242 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
      }
      break;
 80061ba:	e042      	b.n	8006242 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fd67 	bl	8005c98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061f8:	2105      	movs	r1, #5
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d107      	bne.n	800621a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fe20 	bl	8005e58 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006218:	e014      	b.n	8006244 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 faa6 	bl	800776c <USBH_LL_Start>
      break;
 8006220:	e010      	b.n	8006244 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006222:	bf00      	nop
 8006224:	e00e      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006226:	bf00      	nop
 8006228:	e00c      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 800622a:	bf00      	nop
 800622c:	e00a      	b.n	8006244 <USBH_Process+0x3cc>
    break;
 800622e:	bf00      	nop
 8006230:	e008      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006232:	bf00      	nop
 8006234:	e006      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006236:	bf00      	nop
 8006238:	e004      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 800623a:	bf00      	nop
 800623c:	e002      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 800623e:	bf00      	nop
 8006240:	e000      	b.n	8006244 <USBH_Process+0x3cc>
      break;
 8006242:	bf00      	nop
  }
  return USBH_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af04      	add	r7, sp, #16
 8006256:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006258:	2301      	movs	r3, #1
 800625a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800625c:	2301      	movs	r3, #1
 800625e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b07      	cmp	r3, #7
 8006266:	f200 81c1 	bhi.w	80065ec <USBH_HandleEnum+0x39c>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USBH_HandleEnum+0x20>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	08006291 	.word	0x08006291
 8006274:	0800634f 	.word	0x0800634f
 8006278:	080063b9 	.word	0x080063b9
 800627c:	08006447 	.word	0x08006447
 8006280:	080064b1 	.word	0x080064b1
 8006284:	08006521 	.word	0x08006521
 8006288:	08006567 	.word	0x08006567
 800628c:	080065ad 	.word	0x080065ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006290:	2108      	movs	r1, #8
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa50 	bl	8006738 <USBH_Get_DevDesc>
 8006298:	4603      	mov	r3, r0
 800629a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800629c:	7bbb      	ldrb	r3, [r7, #14]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d130      	bne.n	8006304 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	7919      	ldrb	r1, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80062c6:	b292      	uxth	r2, r2
 80062c8:	9202      	str	r2, [sp, #8]
 80062ca:	2200      	movs	r2, #0
 80062cc:	9201      	str	r2, [sp, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4603      	mov	r3, r0
 80062d2:	2280      	movs	r2, #128	; 0x80
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f867 	bl	80073a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	7959      	ldrb	r1, [r3, #5]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80062ee:	b292      	uxth	r2, r2
 80062f0:	9202      	str	r2, [sp, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	9201      	str	r2, [sp, #4]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	4603      	mov	r3, r0
 80062fa:	2200      	movs	r2, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 f853 	bl	80073a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006302:	e175      	b.n	80065f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b03      	cmp	r3, #3
 8006308:	f040 8172 	bne.w	80065f0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006312:	3301      	adds	r3, #1
 8006314:	b2da      	uxtb	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006322:	2b03      	cmp	r3, #3
 8006324:	d903      	bls.n	800632e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	220d      	movs	r2, #13
 800632a:	701a      	strb	r2, [r3, #0]
      break;
 800632c:	e160      	b.n	80065f0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	795b      	ldrb	r3, [r3, #5]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 f887 	bl	8007448 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	791b      	ldrb	r3, [r3, #4]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 f881 	bl	8007448 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
      break;
 800634c:	e150      	b.n	80065f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800634e:	2112      	movs	r1, #18
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f9f1 	bl	8006738 <USBH_Get_DevDesc>
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006366:	e145      	b.n	80065f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b03      	cmp	r3, #3
 800636c:	f040 8142 	bne.w	80065f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006376:	3301      	adds	r3, #1
 8006378:	b2da      	uxtb	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006386:	2b03      	cmp	r3, #3
 8006388:	d903      	bls.n	8006392 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	220d      	movs	r2, #13
 800638e:	701a      	strb	r2, [r3, #0]
      break;
 8006390:	e130      	b.n	80065f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	795b      	ldrb	r3, [r3, #5]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 f855 	bl	8007448 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f001 f84f 	bl	8007448 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
      break;
 80063b6:	e11d      	b.n	80065f4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80063b8:	2101      	movs	r1, #1
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa68 	bl	8006890 <USBH_SetAddress>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d132      	bne.n	8006430 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80063ca:	2002      	movs	r0, #2
 80063cc:	f001 fb32 	bl	8007a34 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2203      	movs	r2, #3
 80063dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	7919      	ldrb	r1, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80063f2:	b292      	uxth	r2, r2
 80063f4:	9202      	str	r2, [sp, #8]
 80063f6:	2200      	movs	r2, #0
 80063f8:	9201      	str	r2, [sp, #4]
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	4603      	mov	r3, r0
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 ffd1 	bl	80073a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7959      	ldrb	r1, [r3, #5]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800641a:	b292      	uxth	r2, r2
 800641c:	9202      	str	r2, [sp, #8]
 800641e:	2200      	movs	r2, #0
 8006420:	9201      	str	r2, [sp, #4]
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	4603      	mov	r3, r0
 8006426:	2200      	movs	r2, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 ffbd 	bl	80073a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800642e:	e0e3      	b.n	80065f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006430:	7bbb      	ldrb	r3, [r7, #14]
 8006432:	2b03      	cmp	r3, #3
 8006434:	f040 80e0 	bne.w	80065f8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	220d      	movs	r2, #13
 800643c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	705a      	strb	r2, [r3, #1]
      break;
 8006444:	e0d8      	b.n	80065f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006446:	2109      	movs	r1, #9
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f99d 	bl	8006788 <USBH_Get_CfgDesc>
 800644e:	4603      	mov	r3, r0
 8006450:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d103      	bne.n	8006460 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800645e:	e0cd      	b.n	80065fc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	2b03      	cmp	r3, #3
 8006464:	f040 80ca 	bne.w	80065fc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800646e:	3301      	adds	r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800647e:	2b03      	cmp	r3, #3
 8006480:	d903      	bls.n	800648a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220d      	movs	r2, #13
 8006486:	701a      	strb	r2, [r3, #0]
      break;
 8006488:	e0b8      	b.n	80065fc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	795b      	ldrb	r3, [r3, #5]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 ffd9 	bl	8007448 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	791b      	ldrb	r3, [r3, #4]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ffd3 	bl	8007448 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
      break;
 80064ae:	e0a5      	b.n	80065fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f965 	bl	8006788 <USBH_Get_CfgDesc>
 80064be:	4603      	mov	r3, r0
 80064c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064c2:	7bbb      	ldrb	r3, [r7, #14]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2205      	movs	r2, #5
 80064cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ce:	e097      	b.n	8006600 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	f040 8094 	bne.w	8006600 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064de:	3301      	adds	r3, #1
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d903      	bls.n	80064fa <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	220d      	movs	r2, #13
 80064f6:	701a      	strb	r2, [r3, #0]
      break;
 80064f8:	e082      	b.n	8006600 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	795b      	ldrb	r3, [r3, #5]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 ffa1 	bl	8007448 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ff9b 	bl	8007448 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	701a      	strb	r2, [r3, #0]
      break;
 800651e:	e06f      	b.n	8006600 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006526:	2b00      	cmp	r3, #0
 8006528:	d019      	beq.n	800655e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006536:	23ff      	movs	r3, #255	; 0xff
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f949 	bl	80067d0 <USBH_Get_StringDesc>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2206      	movs	r2, #6
 800654c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800654e:	e059      	b.n	8006604 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d156      	bne.n	8006604 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2206      	movs	r2, #6
 800655a:	705a      	strb	r2, [r3, #1]
      break;
 800655c:	e052      	b.n	8006604 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2206      	movs	r2, #6
 8006562:	705a      	strb	r2, [r3, #1]
      break;
 8006564:	e04e      	b.n	8006604 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800656c:	2b00      	cmp	r3, #0
 800656e:	d019      	beq.n	80065a4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800657c:	23ff      	movs	r3, #255	; 0xff
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f926 	bl	80067d0 <USBH_Get_StringDesc>
 8006584:	4603      	mov	r3, r0
 8006586:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d103      	bne.n	8006596 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2207      	movs	r2, #7
 8006592:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006594:	e038      	b.n	8006608 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d135      	bne.n	8006608 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2207      	movs	r2, #7
 80065a0:	705a      	strb	r2, [r3, #1]
      break;
 80065a2:	e031      	b.n	8006608 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2207      	movs	r2, #7
 80065a8:	705a      	strb	r2, [r3, #1]
      break;
 80065aa:	e02d      	b.n	8006608 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d017      	beq.n	80065e6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80065c2:	23ff      	movs	r3, #255	; 0xff
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f903 	bl	80067d0 <USBH_Get_StringDesc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80065d8:	e018      	b.n	800660c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d115      	bne.n	800660c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
      break;
 80065e4:	e012      	b.n	800660c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	73fb      	strb	r3, [r7, #15]
      break;
 80065ea:	e00f      	b.n	800660c <USBH_HandleEnum+0x3bc>

    default:
      break;
 80065ec:	bf00      	nop
 80065ee:	e00e      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065f0:	bf00      	nop
 80065f2:	e00c      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065f4:	bf00      	nop
 80065f6:	e00a      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065f8:	bf00      	nop
 80065fa:	e008      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 80065fc:	bf00      	nop
 80065fe:	e006      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 8006600:	bf00      	nop
 8006602:	e004      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 8006604:	bf00      	nop
 8006606:	e002      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 8006608:	bf00      	nop
 800660a:	e000      	b.n	800660e <USBH_HandleEnum+0x3be>
      break;
 800660c:	bf00      	nop
  }
  return Status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f804 	bl	800665a <USBH_HandleSof>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b0b      	cmp	r3, #11
 800666a:	d10a      	bne.n	8006682 <USBH_HandleSof+0x28>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
  }
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800669a:	bf00      	nop
}
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80066b6:	bf00      	nop
}
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f001 f846 	bl	80077a2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fe93 	bl	8007448 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	795b      	ldrb	r3, [r3, #5]
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fe8d 	bl	8007448 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b086      	sub	sp, #24
 800673c:	af02      	add	r7, sp, #8
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	b29b      	uxth	r3, r3
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4613      	mov	r3, r2
 8006752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006756:	2100      	movs	r1, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f864 	bl	8006826 <USBH_GetDescriptor>
 800675e:	4603      	mov	r3, r0
 8006760:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006762:	7bfb      	ldrb	r3, [r7, #15]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006774:	78fa      	ldrb	r2, [r7, #3]
 8006776:	b292      	uxth	r2, r2
 8006778:	4619      	mov	r1, r3
 800677a:	f000 f919 	bl	80069b0 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	331c      	adds	r3, #28
 8006798:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a4:	2100      	movs	r1, #0
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f83d 	bl	8006826 <USBH_GetDescriptor>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d107      	bne.n	80067c6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80067b6:	887b      	ldrh	r3, [r7, #2]
 80067b8:	461a      	mov	r2, r3
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f989 	bl	8006ad4 <USBH_ParseCfgDesc>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	461a      	mov	r2, r3
 80067dc:	460b      	mov	r3, r1
 80067de:	72fb      	strb	r3, [r7, #11]
 80067e0:	4613      	mov	r3, r2
 80067e2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80067ec:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80067f4:	893b      	ldrh	r3, [r7, #8]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	460b      	mov	r3, r1
 80067fa:	2100      	movs	r1, #0
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f812 	bl	8006826 <USBH_GetDescriptor>
 8006802:	4603      	mov	r3, r0
 8006804:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d107      	bne.n	800681c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006812:	893a      	ldrh	r2, [r7, #8]
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fb26 	bl	8006e68 <USBH_ParseStringDesc>
  }

  return status;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	72fb      	strb	r3, [r7, #11]
 8006834:	4613      	mov	r3, r2
 8006836:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	789b      	ldrb	r3, [r3, #2]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d11c      	bne.n	800687a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006840:	7afb      	ldrb	r3, [r7, #11]
 8006842:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006846:	b2da      	uxtb	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2206      	movs	r2, #6
 8006850:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	893a      	ldrh	r2, [r7, #8]
 8006856:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800685e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006862:	d104      	bne.n	800686e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f240 4209 	movw	r2, #1033	; 0x409
 800686a:	829a      	strh	r2, [r3, #20]
 800686c:	e002      	b.n	8006874 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8b3a      	ldrh	r2, [r7, #24]
 8006878:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800687a:	8b3b      	ldrh	r3, [r7, #24]
 800687c:	461a      	mov	r2, r3
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fb3f 	bl	8006f04 <USBH_CtlReq>
 8006886:	4603      	mov	r3, r0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	789b      	ldrb	r3, [r3, #2]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d10f      	bne.n	80068c4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2205      	movs	r2, #5
 80068ae:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80068c4:	2200      	movs	r2, #0
 80068c6:	2100      	movs	r1, #0
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fb1b 	bl	8006f04 <USBH_CtlReq>
 80068ce:	4603      	mov	r3, r0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	789b      	ldrb	r3, [r3, #2]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10e      	bne.n	800690a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2209      	movs	r2, #9
 80068f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	887a      	ldrh	r2, [r7, #2]
 80068fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 faf8 	bl	8006f04 <USBH_CtlReq>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	460b      	mov	r3, r1
 8006928:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	789b      	ldrb	r3, [r3, #2]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d10f      	bne.n	8006952 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2203      	movs	r2, #3
 800693c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fad4 	bl	8006f04 <USBH_CtlReq>
 800695c:	4603      	mov	r3, r0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	789b      	ldrb	r3, [r3, #2]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d10f      	bne.n	800699a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	b29a      	uxth	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800699a:	2200      	movs	r2, #0
 800699c:	2100      	movs	r1, #0
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fab0 	bl	8006f04 <USBH_CtlReq>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	785a      	ldrb	r2, [r3, #1]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3302      	adds	r3, #2
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3303      	adds	r3, #3
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	021b      	lsls	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	791a      	ldrb	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	795a      	ldrb	r2, [r3, #5]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	799a      	ldrb	r2, [r3, #6]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	79da      	ldrb	r2, [r3, #7]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	79db      	ldrb	r3, [r3, #7]
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	dc0f      	bgt.n	8006a32 <USBH_ParseDevDesc+0x82>
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	db14      	blt.n	8006a40 <USBH_ParseDevDesc+0x90>
 8006a16:	3b08      	subs	r3, #8
 8006a18:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <USBH_ParseDevDesc+0x120>)
 8006a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	bf14      	ite	ne
 8006a26:	2301      	movne	r3, #1
 8006a28:	2300      	moveq	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <USBH_ParseDevDesc+0x86>
 8006a30:	e006      	b.n	8006a40 <USBH_ParseDevDesc+0x90>
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d104      	bne.n	8006a40 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	79da      	ldrb	r2, [r3, #7]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	71da      	strb	r2, [r3, #7]
      break;
 8006a3e:	e003      	b.n	8006a48 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	71da      	strb	r2, [r3, #7]
      break;
 8006a46:	bf00      	nop
  }

  if (length > 8U)
 8006a48:	88fb      	ldrh	r3, [r7, #6]
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d939      	bls.n	8006ac2 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	3308      	adds	r3, #8
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3309      	adds	r3, #9
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	330a      	adds	r3, #10
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	330b      	adds	r3, #11
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	021b      	lsls	r3, r3, #8
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	330d      	adds	r3, #13
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	7b9a      	ldrb	r2, [r3, #14]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	7bda      	ldrb	r2, [r3, #15]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	7c1a      	ldrb	r2, [r3, #16]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	7c5a      	ldrb	r2, [r3, #17]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	745a      	strb	r2, [r3, #17]
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	01000101 	.word	0x01000101

08006ad4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08c      	sub	sp, #48	; 0x30
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ae8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	781a      	ldrb	r2, [r3, #0]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	785a      	ldrb	r2, [r3, #1]
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3302      	adds	r3, #2
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3303      	adds	r3, #3
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b30:	bf28      	it	cs
 8006b32:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	791a      	ldrb	r2, [r3, #4]
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	795a      	ldrb	r2, [r3, #5]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	799a      	ldrb	r2, [r3, #6]
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	79da      	ldrb	r2, [r3, #7]
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	7a1a      	ldrb	r2, [r3, #8]
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b09      	cmp	r3, #9
 8006b6a:	d002      	beq.n	8006b72 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	2209      	movs	r2, #9
 8006b70:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b72:	88fb      	ldrh	r3, [r7, #6]
 8006b74:	2b09      	cmp	r3, #9
 8006b76:	f240 809d 	bls.w	8006cb4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b7a:	2309      	movs	r3, #9
 8006b7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b82:	e081      	b.n	8006c88 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b84:	f107 0316 	add.w	r3, r7, #22
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8c:	f000 f99f 	bl	8006ece <USBH_GetNextDesc>
 8006b90:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d176      	bne.n	8006c88 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	d002      	beq.n	8006ba8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	2209      	movs	r2, #9
 8006ba6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bac:	221a      	movs	r2, #26
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3302      	adds	r3, #2
 8006bba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bbe:	69f8      	ldr	r0, [r7, #28]
 8006bc0:	f000 f87e 	bl	8006cc0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bce:	e043      	b.n	8006c58 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bd0:	f107 0316 	add.w	r3, r7, #22
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bd8:	f000 f979 	bl	8006ece <USBH_GetNextDesc>
 8006bdc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b05      	cmp	r3, #5
 8006be4:	d138      	bne.n	8006c58 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	795b      	ldrb	r3, [r3, #5]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d10f      	bne.n	8006c0e <USBH_ParseCfgDesc+0x13a>
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	799b      	ldrb	r3, [r3, #6]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d10b      	bne.n	8006c0e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	79db      	ldrb	r3, [r3, #7]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10f      	bne.n	8006c1e <USBH_ParseCfgDesc+0x14a>
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b09      	cmp	r3, #9
 8006c04:	d00b      	beq.n	8006c1e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	2209      	movs	r2, #9
 8006c0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c0c:	e007      	b.n	8006c1e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b07      	cmp	r3, #7
 8006c14:	d004      	beq.n	8006c20 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	2207      	movs	r2, #7
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e000      	b.n	8006c20 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006c1e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c28:	3201      	adds	r2, #1
 8006c2a:	00d2      	lsls	r2, r2, #3
 8006c2c:	211a      	movs	r1, #26
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	3308      	adds	r3, #8
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	4413      	add	r3, r2
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c40:	69b9      	ldr	r1, [r7, #24]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f86b 	bl	8006d1e <USBH_ParseEPDesc>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006c4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c52:	3301      	adds	r3, #1
 8006c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	791b      	ldrb	r3, [r3, #4]
 8006c5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d204      	bcs.n	8006c6e <USBH_ParseCfgDesc+0x19a>
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	885a      	ldrh	r2, [r3, #2]
 8006c68:	8afb      	ldrh	r3, [r7, #22]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d8b0      	bhi.n	8006bd0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	791b      	ldrb	r3, [r3, #4]
 8006c72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d201      	bcs.n	8006c7e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e01c      	b.n	8006cb8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c82:	3301      	adds	r3, #1
 8006c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d805      	bhi.n	8006c9c <USBH_ParseCfgDesc+0x1c8>
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	885a      	ldrh	r2, [r3, #2]
 8006c94:	8afb      	ldrh	r3, [r7, #22]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	f63f af74 	bhi.w	8006b84 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	791b      	ldrb	r3, [r3, #4]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	bf28      	it	cs
 8006ca4:	2302      	movcs	r3, #2
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d201      	bcs.n	8006cb4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e001      	b.n	8006cb8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3730      	adds	r7, #48	; 0x30
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	785a      	ldrb	r2, [r3, #1]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	789a      	ldrb	r2, [r3, #2]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	78da      	ldrb	r2, [r3, #3]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	791a      	ldrb	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	795a      	ldrb	r2, [r3, #5]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	799a      	ldrb	r2, [r3, #6]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	79da      	ldrb	r2, [r3, #7]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	7a1a      	ldrb	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	721a      	strb	r2, [r3, #8]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b087      	sub	sp, #28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	781a      	ldrb	r2, [r3, #0]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	785a      	ldrb	r2, [r3, #1]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	789a      	ldrb	r2, [r3, #2]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	78da      	ldrb	r2, [r3, #3]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3304      	adds	r3, #4
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3305      	adds	r3, #5
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	4313      	orrs	r3, r2
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	799a      	ldrb	r2, [r3, #6]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	889b      	ldrh	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	75fb      	strb	r3, [r7, #23]
 8006d7e:	e033      	b.n	8006de8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	889b      	ldrh	r3, [r3, #4]
 8006d84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d88:	f023 0307 	bic.w	r3, r3, #7
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	889b      	ldrh	r3, [r3, #4]
 8006d96:	b21a      	sxth	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b299      	uxth	r1, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3305      	adds	r3, #5
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	430b      	orrs	r3, r1
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d110      	bne.n	8006dda <USBH_ParseEPDesc+0xbc>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b299      	uxth	r1, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3305      	adds	r3, #5
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	021b      	lsls	r3, r3, #8
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	b21b      	sxth	r3, r3
 8006dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dd6:	b21b      	sxth	r3, r3
 8006dd8:	e001      	b.n	8006dde <USBH_ParseEPDesc+0xc0>
 8006dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dde:	4313      	orrs	r3, r2
 8006de0:	b21b      	sxth	r3, r3
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d116      	bne.n	8006e20 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	78db      	ldrb	r3, [r3, #3]
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d005      	beq.n	8006e0a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	78db      	ldrb	r3, [r3, #3]
 8006e02:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d127      	bne.n	8006e5a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	799b      	ldrb	r3, [r3, #6]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <USBH_ParseEPDesc+0xfc>
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	799b      	ldrb	r3, [r3, #6]
 8006e16:	2b10      	cmp	r3, #16
 8006e18:	d91f      	bls.n	8006e5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	75fb      	strb	r3, [r7, #23]
 8006e1e:	e01c      	b.n	8006e5a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	f003 0303 	and.w	r3, r3, #3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d10a      	bne.n	8006e42 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	799b      	ldrb	r3, [r3, #6]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <USBH_ParseEPDesc+0x11e>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	799b      	ldrb	r3, [r3, #6]
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d90e      	bls.n	8006e5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	75fb      	strb	r3, [r7, #23]
 8006e40:	e00b      	b.n	8006e5a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	78db      	ldrb	r3, [r3, #3]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d105      	bne.n	8006e5a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	799b      	ldrb	r3, [r3, #6]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006e56:	2303      	movs	r3, #3
 8006e58:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d120      	bne.n	8006ec2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	1e9a      	subs	r2, r3, #2
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	bf28      	it	cs
 8006e8c:	4613      	movcs	r3, r2
 8006e8e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3302      	adds	r3, #2
 8006e94:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006e96:	2300      	movs	r3, #0
 8006e98:	82fb      	strh	r3, [r7, #22]
 8006e9a:	e00b      	b.n	8006eb4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006e9c:	8afb      	ldrh	r3, [r7, #22]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006eae:	8afb      	ldrh	r3, [r7, #22]
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	82fb      	strh	r3, [r7, #22]
 8006eb4:	8afa      	ldrh	r2, [r7, #22]
 8006eb6:	8abb      	ldrh	r3, [r7, #20]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d3ef      	bcc.n	8006e9c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	371c      	adds	r7, #28
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	881a      	ldrh	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	4413      	add	r3, r2
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006f12:	2301      	movs	r3, #1
 8006f14:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	789b      	ldrb	r3, [r3, #2]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d002      	beq.n	8006f24 <USBH_CtlReq+0x20>
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d00f      	beq.n	8006f42 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006f22:	e027      	b.n	8006f74 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f40:	e018      	b.n	8006f74 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f81c 	bl	8006f80 <USBH_HandleControl>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <USBH_CtlReq+0x54>
 8006f52:	7dfb      	ldrb	r3, [r7, #23]
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d106      	bne.n	8006f66 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	761a      	strb	r2, [r3, #24]
      break;
 8006f64:	e005      	b.n	8006f72 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d102      	bne.n	8006f72 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	709a      	strb	r2, [r3, #2]
      break;
 8006f72:	bf00      	nop
  }
  return status;
 8006f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
	...

08006f80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	7e1b      	ldrb	r3, [r3, #24]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	2b0a      	cmp	r3, #10
 8006f98:	f200 8156 	bhi.w	8007248 <USBH_HandleControl+0x2c8>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <USBH_HandleControl+0x24>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fd1 	.word	0x08006fd1
 8006fa8:	08006feb 	.word	0x08006feb
 8006fac:	08007055 	.word	0x08007055
 8006fb0:	0800707b 	.word	0x0800707b
 8006fb4:	080070b3 	.word	0x080070b3
 8006fb8:	080070dd 	.word	0x080070dd
 8006fbc:	0800712f 	.word	0x0800712f
 8006fc0:	08007151 	.word	0x08007151
 8006fc4:	0800718d 	.word	0x0800718d
 8006fc8:	080071b3 	.word	0x080071b3
 8006fcc:	080071f1 	.word	0x080071f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f103 0110 	add.w	r1, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	795b      	ldrb	r3, [r3, #5]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f943 	bl	8007268 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	761a      	strb	r2, [r3, #24]
      break;
 8006fe8:	e139      	b.n	800725e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	795b      	ldrb	r3, [r3, #5]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fcc5 	bl	8007980 <USBH_LL_GetURBState>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11e      	bne.n	800703e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7c1b      	ldrb	r3, [r3, #16]
 8007004:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007008:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	8adb      	ldrh	r3, [r3, #22]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007012:	7b7b      	ldrb	r3, [r7, #13]
 8007014:	2b80      	cmp	r3, #128	; 0x80
 8007016:	d103      	bne.n	8007020 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2203      	movs	r2, #3
 800701c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800701e:	e115      	b.n	800724c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2205      	movs	r2, #5
 8007024:	761a      	strb	r2, [r3, #24]
      break;
 8007026:	e111      	b.n	800724c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007028:	7b7b      	ldrb	r3, [r7, #13]
 800702a:	2b80      	cmp	r3, #128	; 0x80
 800702c:	d103      	bne.n	8007036 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2209      	movs	r2, #9
 8007032:	761a      	strb	r2, [r3, #24]
      break;
 8007034:	e10a      	b.n	800724c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2207      	movs	r2, #7
 800703a:	761a      	strb	r2, [r3, #24]
      break;
 800703c:	e106      	b.n	800724c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800703e:	7bbb      	ldrb	r3, [r7, #14]
 8007040:	2b04      	cmp	r3, #4
 8007042:	d003      	beq.n	800704c <USBH_HandleControl+0xcc>
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	2b02      	cmp	r3, #2
 8007048:	f040 8100 	bne.w	800724c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	220b      	movs	r2, #11
 8007050:	761a      	strb	r2, [r3, #24]
      break;
 8007052:	e0fb      	b.n	800724c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6899      	ldr	r1, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	899a      	ldrh	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	791b      	ldrb	r3, [r3, #4]
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 f93a 	bl	80072e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2204      	movs	r2, #4
 8007076:	761a      	strb	r2, [r3, #24]
      break;
 8007078:	e0f1      	b.n	800725e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	791b      	ldrb	r3, [r3, #4]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fc7d 	bl	8007980 <USBH_LL_GetURBState>
 8007086:	4603      	mov	r3, r0
 8007088:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d102      	bne.n	8007096 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2209      	movs	r2, #9
 8007094:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007096:	7bbb      	ldrb	r3, [r7, #14]
 8007098:	2b05      	cmp	r3, #5
 800709a:	d102      	bne.n	80070a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800709c:	2303      	movs	r3, #3
 800709e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070a0:	e0d6      	b.n	8007250 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	f040 80d3 	bne.w	8007250 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	220b      	movs	r2, #11
 80070ae:	761a      	strb	r2, [r3, #24]
      break;
 80070b0:	e0ce      	b.n	8007250 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6899      	ldr	r1, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	899a      	ldrh	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	2001      	movs	r0, #1
 80070c0:	9000      	str	r0, [sp, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8ea 	bl	800729c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2206      	movs	r2, #6
 80070d8:	761a      	strb	r2, [r3, #24]
      break;
 80070da:	e0c0      	b.n	800725e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	795b      	ldrb	r3, [r3, #5]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fc4c 	bl	8007980 <USBH_LL_GetURBState>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d103      	bne.n	80070fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2207      	movs	r2, #7
 80070f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070f8:	e0ac      	b.n	8007254 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	2b05      	cmp	r3, #5
 80070fe:	d105      	bne.n	800710c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	220c      	movs	r2, #12
 8007104:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007106:	2303      	movs	r3, #3
 8007108:	73fb      	strb	r3, [r7, #15]
      break;
 800710a:	e0a3      	b.n	8007254 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d103      	bne.n	800711a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2205      	movs	r2, #5
 8007116:	761a      	strb	r2, [r3, #24]
      break;
 8007118:	e09c      	b.n	8007254 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b04      	cmp	r3, #4
 800711e:	f040 8099 	bne.w	8007254 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220b      	movs	r2, #11
 8007126:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007128:	2302      	movs	r3, #2
 800712a:	73fb      	strb	r3, [r7, #15]
      break;
 800712c:	e092      	b.n	8007254 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	791b      	ldrb	r3, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	2100      	movs	r1, #0
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f8d5 	bl	80072e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2208      	movs	r2, #8
 800714c:	761a      	strb	r2, [r3, #24]

      break;
 800714e:	e086      	b.n	800725e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	791b      	ldrb	r3, [r3, #4]
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fc12 	bl	8007980 <USBH_LL_GetURBState>
 800715c:	4603      	mov	r3, r0
 800715e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d105      	bne.n	8007172 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	220d      	movs	r2, #13
 800716a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007170:	e072      	b.n	8007258 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007172:	7bbb      	ldrb	r3, [r7, #14]
 8007174:	2b04      	cmp	r3, #4
 8007176:	d103      	bne.n	8007180 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	220b      	movs	r2, #11
 800717c:	761a      	strb	r2, [r3, #24]
      break;
 800717e:	e06b      	b.n	8007258 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b05      	cmp	r3, #5
 8007184:	d168      	bne.n	8007258 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007186:	2303      	movs	r3, #3
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	e065      	b.n	8007258 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	795b      	ldrb	r3, [r3, #5]
 8007190:	2201      	movs	r2, #1
 8007192:	9200      	str	r2, [sp, #0]
 8007194:	2200      	movs	r2, #0
 8007196:	2100      	movs	r1, #0
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f87f 	bl	800729c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	220a      	movs	r2, #10
 80071ae:	761a      	strb	r2, [r3, #24]
      break;
 80071b0:	e055      	b.n	800725e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	795b      	ldrb	r3, [r3, #5]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fbe1 	bl	8007980 <USBH_LL_GetURBState>
 80071be:	4603      	mov	r3, r0
 80071c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d105      	bne.n	80071d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	220d      	movs	r2, #13
 80071d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80071d2:	e043      	b.n	800725c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d103      	bne.n	80071e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2209      	movs	r2, #9
 80071de:	761a      	strb	r2, [r3, #24]
      break;
 80071e0:	e03c      	b.n	800725c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d139      	bne.n	800725c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	220b      	movs	r2, #11
 80071ec:	761a      	strb	r2, [r3, #24]
      break;
 80071ee:	e035      	b.n	800725c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7e5b      	ldrb	r3, [r3, #25]
 80071f4:	3301      	adds	r3, #1
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	765a      	strb	r2, [r3, #25]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	7e5b      	ldrb	r3, [r3, #25]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d806      	bhi.n	8007212 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007210:	e025      	b.n	800725e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007218:	2106      	movs	r1, #6
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	795b      	ldrb	r3, [r3, #5]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f90c 	bl	8007448 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	791b      	ldrb	r3, [r3, #4]
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f906 	bl	8007448 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007242:	2302      	movs	r3, #2
 8007244:	73fb      	strb	r3, [r7, #15]
      break;
 8007246:	e00a      	b.n	800725e <USBH_HandleControl+0x2de>

    default:
      break;
 8007248:	bf00      	nop
 800724a:	e008      	b.n	800725e <USBH_HandleControl+0x2de>
      break;
 800724c:	bf00      	nop
 800724e:	e006      	b.n	800725e <USBH_HandleControl+0x2de>
      break;
 8007250:	bf00      	nop
 8007252:	e004      	b.n	800725e <USBH_HandleControl+0x2de>
      break;
 8007254:	bf00      	nop
 8007256:	e002      	b.n	800725e <USBH_HandleControl+0x2de>
      break;
 8007258:	bf00      	nop
 800725a:	e000      	b.n	800725e <USBH_HandleControl+0x2de>
      break;
 800725c:	bf00      	nop
  }

  return status;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af04      	add	r7, sp, #16
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007276:	79f9      	ldrb	r1, [r7, #7]
 8007278:	2300      	movs	r3, #0
 800727a:	9303      	str	r3, [sp, #12]
 800727c:	2308      	movs	r3, #8
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	2300      	movs	r3, #0
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fb46 	bl	800791e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af04      	add	r7, sp, #16
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	460b      	mov	r3, r1
 80072ac:	80fb      	strh	r3, [r7, #6]
 80072ae:	4613      	mov	r3, r2
 80072b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072c0:	7979      	ldrb	r1, [r7, #5]
 80072c2:	7e3b      	ldrb	r3, [r7, #24]
 80072c4:	9303      	str	r3, [sp, #12]
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	9302      	str	r3, [sp, #8]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	9301      	str	r3, [sp, #4]
 80072ce:	2301      	movs	r3, #1
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2300      	movs	r3, #0
 80072d4:	2200      	movs	r2, #0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fb21 	bl	800791e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b088      	sub	sp, #32
 80072ea:	af04      	add	r7, sp, #16
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	4611      	mov	r1, r2
 80072f2:	461a      	mov	r2, r3
 80072f4:	460b      	mov	r3, r1
 80072f6:	80fb      	strh	r3, [r7, #6]
 80072f8:	4613      	mov	r3, r2
 80072fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80072fc:	7979      	ldrb	r1, [r7, #5]
 80072fe:	2300      	movs	r3, #0
 8007300:	9303      	str	r3, [sp, #12]
 8007302:	88fb      	ldrh	r3, [r7, #6]
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	2301      	movs	r3, #1
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	2300      	movs	r3, #0
 8007310:	2201      	movs	r2, #1
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fb03 	bl	800791e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007318:	2300      	movs	r3, #0

}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b088      	sub	sp, #32
 8007326:	af04      	add	r7, sp, #16
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	4611      	mov	r1, r2
 800732e:	461a      	mov	r2, r3
 8007330:	460b      	mov	r3, r1
 8007332:	80fb      	strh	r3, [r7, #6]
 8007334:	4613      	mov	r3, r2
 8007336:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007346:	7979      	ldrb	r1, [r7, #5]
 8007348:	7e3b      	ldrb	r3, [r7, #24]
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	2301      	movs	r3, #1
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	2302      	movs	r3, #2
 800735a:	2200      	movs	r2, #0
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fade 	bl	800791e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af04      	add	r7, sp, #16
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4611      	mov	r1, r2
 8007378:	461a      	mov	r2, r3
 800737a:	460b      	mov	r3, r1
 800737c:	80fb      	strh	r3, [r7, #6]
 800737e:	4613      	mov	r3, r2
 8007380:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007382:	7979      	ldrb	r1, [r7, #5]
 8007384:	2300      	movs	r3, #0
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	9302      	str	r3, [sp, #8]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	2301      	movs	r3, #1
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2302      	movs	r3, #2
 8007396:	2201      	movs	r2, #1
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fac0 	bl	800791e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	4608      	mov	r0, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	70fb      	strb	r3, [r7, #3]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70bb      	strb	r3, [r7, #2]
 80073be:	4613      	mov	r3, r2
 80073c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80073c2:	7878      	ldrb	r0, [r7, #1]
 80073c4:	78ba      	ldrb	r2, [r7, #2]
 80073c6:	78f9      	ldrb	r1, [r7, #3]
 80073c8:	8b3b      	ldrh	r3, [r7, #24]
 80073ca:	9302      	str	r3, [sp, #8]
 80073cc:	7d3b      	ldrb	r3, [r7, #20]
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	7c3b      	ldrb	r3, [r7, #16]
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	4603      	mov	r3, r0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fa53 	bl	8007882 <USBH_LL_OpenPipe>

  return USBH_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fa72 	bl	80078e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f836 	bl	8007484 <USBH_GetFreePipe>
 8007418:	4603      	mov	r3, r0
 800741a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007422:	4293      	cmp	r3, r2
 8007424:	d00a      	beq.n	800743c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007426:	78fa      	ldrb	r2, [r7, #3]
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	33e0      	adds	r3, #224	; 0xe0
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800743c:	89fb      	ldrh	r3, [r7, #14]
 800743e:	b2db      	uxtb	r3, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007454:	78fb      	ldrb	r3, [r7, #3]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d80d      	bhi.n	8007476 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	33e0      	adds	r3, #224	; 0xe0
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	33e0      	adds	r3, #224	; 0xe0
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e00f      	b.n	80074b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	33e0      	adds	r3, #224	; 0xe0
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	e007      	b.n	80074c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	3301      	adds	r3, #1
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b0f      	cmp	r3, #15
 80074ba:	d9ec      	bls.n	8007496 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80074bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80074d0:	2201      	movs	r2, #1
 80074d2:	490e      	ldr	r1, [pc, #56]	; (800750c <MX_USB_HOST_Init+0x40>)
 80074d4:	480e      	ldr	r0, [pc, #56]	; (8007510 <MX_USB_HOST_Init+0x44>)
 80074d6:	f7fe fba5 	bl	8005c24 <USBH_Init>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80074e0:	f7f9 fa68 	bl	80009b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80074e4:	490b      	ldr	r1, [pc, #44]	; (8007514 <MX_USB_HOST_Init+0x48>)
 80074e6:	480a      	ldr	r0, [pc, #40]	; (8007510 <MX_USB_HOST_Init+0x44>)
 80074e8:	f7fe fc2a 	bl	8005d40 <USBH_RegisterClass>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80074f2:	f7f9 fa5f 	bl	80009b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80074f6:	4806      	ldr	r0, [pc, #24]	; (8007510 <MX_USB_HOST_Init+0x44>)
 80074f8:	f7fe fcae 	bl	8005e58 <USBH_Start>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007502:	f7f9 fa57 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	0800752d 	.word	0x0800752d
 8007510:	20000198 	.word	0x20000198
 8007514:	2000000c 	.word	0x2000000c

08007518 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800751c:	4802      	ldr	r0, [pc, #8]	; (8007528 <MX_USB_HOST_Process+0x10>)
 800751e:	f7fe fcab 	bl	8005e78 <USBH_Process>
}
 8007522:	bf00      	nop
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20000198 	.word	0x20000198

0800752c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	3b01      	subs	r3, #1
 800753c:	2b04      	cmp	r3, #4
 800753e:	d819      	bhi.n	8007574 <USBH_UserProcess+0x48>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <USBH_UserProcess+0x1c>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	08007575 	.word	0x08007575
 800754c:	08007565 	.word	0x08007565
 8007550:	08007575 	.word	0x08007575
 8007554:	0800756d 	.word	0x0800756d
 8007558:	0800755d 	.word	0x0800755d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800755c:	4b09      	ldr	r3, [pc, #36]	; (8007584 <USBH_UserProcess+0x58>)
 800755e:	2203      	movs	r2, #3
 8007560:	701a      	strb	r2, [r3, #0]
  break;
 8007562:	e008      	b.n	8007576 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007564:	4b07      	ldr	r3, [pc, #28]	; (8007584 <USBH_UserProcess+0x58>)
 8007566:	2202      	movs	r2, #2
 8007568:	701a      	strb	r2, [r3, #0]
  break;
 800756a:	e004      	b.n	8007576 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <USBH_UserProcess+0x58>)
 800756e:	2201      	movs	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]
  break;
 8007572:	e000      	b.n	8007576 <USBH_UserProcess+0x4a>

  default:
  break;
 8007574:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007576:	bf00      	nop
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20000570 	.word	0x20000570

08007588 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b08a      	sub	sp, #40	; 0x28
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007590:	f107 0314 	add.w	r3, r7, #20
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	609a      	str	r2, [r3, #8]
 800759c:	60da      	str	r2, [r3, #12]
 800759e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a8:	d147      	bne.n	800763a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	4b25      	ldr	r3, [pc, #148]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b2:	4a24      	ldr	r2, [pc, #144]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	6313      	str	r3, [r2, #48]	; 0x30
 80075ba:	4b22      	ldr	r3, [pc, #136]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80075c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	4619      	mov	r1, r3
 80075da:	481b      	ldr	r0, [pc, #108]	; (8007648 <HAL_HCD_MspInit+0xc0>)
 80075dc:	f7f9 fd7e 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80075e0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e6:	2302      	movs	r3, #2
 80075e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075ee:	2300      	movs	r3, #0
 80075f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075f2:	230a      	movs	r3, #10
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f6:	f107 0314 	add.w	r3, r7, #20
 80075fa:	4619      	mov	r1, r3
 80075fc:	4812      	ldr	r0, [pc, #72]	; (8007648 <HAL_HCD_MspInit+0xc0>)
 80075fe:	f7f9 fd6d 	bl	80010dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	4a0f      	ldr	r2, [pc, #60]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 8007608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760c:	6353      	str	r3, [r2, #52]	; 0x34
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	4a0b      	ldr	r2, [pc, #44]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 8007618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800761c:	6453      	str	r3, [r2, #68]	; 0x44
 800761e:	4b09      	ldr	r3, [pc, #36]	; (8007644 <HAL_HCD_MspInit+0xbc>)
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007626:	60fb      	str	r3, [r7, #12]
 8007628:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	2043      	movs	r0, #67	; 0x43
 8007630:	f7f9 fd1d 	bl	800106e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007634:	2043      	movs	r0, #67	; 0x43
 8007636:	f7f9 fd36 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800763a:	bf00      	nop
 800763c:	3728      	adds	r7, #40	; 0x28
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	40020000 	.word	0x40020000

0800764c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe ffeb 	bl	8006636 <USBH_LL_IncTimer>
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff f823 	bl	80066c2 <USBH_LL_Connect>
}
 800767c:	bf00      	nop
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff f82c 	bl	80066f0 <USBH_LL_Disconnect>
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
 80076ac:	4613      	mov	r3, r2
 80076ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe ffdd 	bl	800668a <USBH_LL_PortEnabled>
}
 80076d0:	bf00      	nop
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe ffdd 	bl	80066a6 <USBH_LL_PortDisabled>
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007702:	2b01      	cmp	r3, #1
 8007704:	d12a      	bne.n	800775c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <USBH_LL_Init+0x74>)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a15      	ldr	r2, [pc, #84]	; (8007768 <USBH_LL_Init+0x74>)
 8007712:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <USBH_LL_Init+0x74>)
 8007718:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800771c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800771e:	4b12      	ldr	r3, [pc, #72]	; (8007768 <USBH_LL_Init+0x74>)
 8007720:	2208      	movs	r2, #8
 8007722:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007724:	4b10      	ldr	r3, [pc, #64]	; (8007768 <USBH_LL_Init+0x74>)
 8007726:	2201      	movs	r2, #1
 8007728:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800772a:	4b0f      	ldr	r3, [pc, #60]	; (8007768 <USBH_LL_Init+0x74>)
 800772c:	2200      	movs	r2, #0
 800772e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007730:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <USBH_LL_Init+0x74>)
 8007732:	2202      	movs	r2, #2
 8007734:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007736:	4b0c      	ldr	r3, [pc, #48]	; (8007768 <USBH_LL_Init+0x74>)
 8007738:	2200      	movs	r2, #0
 800773a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800773c:	480a      	ldr	r0, [pc, #40]	; (8007768 <USBH_LL_Init+0x74>)
 800773e:	f7f9 feb5 	bl	80014ac <HAL_HCD_Init>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007748:	f7f9 f934 	bl	80009b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800774c:	4806      	ldr	r0, [pc, #24]	; (8007768 <USBH_LL_Init+0x74>)
 800774e:	f7fa fa98 	bl	8001c82 <HAL_HCD_GetCurrentFrame>
 8007752:	4603      	mov	r3, r0
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fe ff5e 	bl	8006618 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000574 	.word	0x20000574

0800776c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007782:	4618      	mov	r0, r3
 8007784:	f7fa fa07 	bl	8001b96 <HAL_HCD_Start>
 8007788:	4603      	mov	r3, r0
 800778a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	4618      	mov	r0, r3
 8007790:	f000 f95c 	bl	8007a4c <USBH_Get_USB_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007798:	7bbb      	ldrb	r3, [r7, #14]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fa fa0f 	bl	8001bdc <HAL_HCD_Stop>
 80077be:	4603      	mov	r3, r0
 80077c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f941 	bl	8007a4c <USBH_Get_USB_Status>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80077e0:	2301      	movs	r3, #1
 80077e2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fa fa57 	bl	8001c9e <HAL_HCD_GetCurrentSpeed>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d00c      	beq.n	8007810 <USBH_LL_GetSpeed+0x38>
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d80d      	bhi.n	8007816 <USBH_LL_GetSpeed+0x3e>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <USBH_LL_GetSpeed+0x2c>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d003      	beq.n	800780a <USBH_LL_GetSpeed+0x32>
 8007802:	e008      	b.n	8007816 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
    break;
 8007808:	e008      	b.n	800781c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800780a:	2301      	movs	r3, #1
 800780c:	73fb      	strb	r3, [r7, #15]
    break;
 800780e:	e005      	b.n	800781c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007810:	2302      	movs	r3, #2
 8007812:	73fb      	strb	r3, [r7, #15]
    break;
 8007814:	e002      	b.n	800781c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007816:	2301      	movs	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]
    break;
 800781a:	bf00      	nop
  }
  return  speed;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800783c:	4618      	mov	r0, r3
 800783e:	f7fa f9ea 	bl	8001c16 <HAL_HCD_ResetPort>
 8007842:	4603      	mov	r3, r0
 8007844:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f8ff 	bl	8007a4c <USBH_Get_USB_Status>
 800784e:	4603      	mov	r3, r0
 8007850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007852:	7bbb      	ldrb	r3, [r7, #14]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	4611      	mov	r1, r2
 8007872:	4618      	mov	r0, r3
 8007874:	f7fa f9f1 	bl	8001c5a <HAL_HCD_HC_GetXferCount>
 8007878:	4603      	mov	r3, r0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007882:	b590      	push	{r4, r7, lr}
 8007884:	b089      	sub	sp, #36	; 0x24
 8007886:	af04      	add	r7, sp, #16
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	4608      	mov	r0, r1
 800788c:	4611      	mov	r1, r2
 800788e:	461a      	mov	r2, r3
 8007890:	4603      	mov	r3, r0
 8007892:	70fb      	strb	r3, [r7, #3]
 8007894:	460b      	mov	r3, r1
 8007896:	70bb      	strb	r3, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80078aa:	787c      	ldrb	r4, [r7, #1]
 80078ac:	78ba      	ldrb	r2, [r7, #2]
 80078ae:	78f9      	ldrb	r1, [r7, #3]
 80078b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80078b2:	9302      	str	r3, [sp, #8]
 80078b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4623      	mov	r3, r4
 80078c2:	f7f9 fe55 	bl	8001570 <HAL_HCD_HC_Init>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 f8bd 	bl	8007a4c <USBH_Get_USB_Status>
 80078d2:	4603      	mov	r3, r0
 80078d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd90      	pop	{r4, r7, pc}

080078e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078fa:	78fa      	ldrb	r2, [r7, #3]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f7f9 fec5 	bl	800168e <HAL_HCD_HC_Halt>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f89e 	bl	8007a4c <USBH_Get_USB_Status>
 8007910:	4603      	mov	r3, r0
 8007912:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007914:	7bbb      	ldrb	r3, [r7, #14]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800791e:	b590      	push	{r4, r7, lr}
 8007920:	b089      	sub	sp, #36	; 0x24
 8007922:	af04      	add	r7, sp, #16
 8007924:	6078      	str	r0, [r7, #4]
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	461a      	mov	r2, r3
 800792c:	4603      	mov	r3, r0
 800792e:	70fb      	strb	r3, [r7, #3]
 8007930:	460b      	mov	r3, r1
 8007932:	70bb      	strb	r3, [r7, #2]
 8007934:	4613      	mov	r3, r2
 8007936:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007946:	787c      	ldrb	r4, [r7, #1]
 8007948:	78ba      	ldrb	r2, [r7, #2]
 800794a:	78f9      	ldrb	r1, [r7, #3]
 800794c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007954:	9302      	str	r3, [sp, #8]
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	4623      	mov	r3, r4
 8007962:	f7f9 feb7 	bl	80016d4 <HAL_HCD_HC_SubmitRequest>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f86d 	bl	8007a4c <USBH_Get_USB_Status>
 8007972:	4603      	mov	r3, r0
 8007974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007976:	7bbb      	ldrb	r3, [r7, #14]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	bd90      	pop	{r4, r7, pc}

08007980 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fa f94b 	bl	8001c32 <HAL_HCD_HC_GetURBState>
 800799c:	4603      	mov	r3, r0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b082      	sub	sp, #8
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d103      	bne.n	80079c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f870 	bl	8007aa4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80079c4:	20c8      	movs	r0, #200	; 0xc8
 80079c6:	f7f9 fa53 	bl	8000e70 <HAL_Delay>
  return USBH_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
 80079e0:	4613      	mov	r3, r2
 80079e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80079ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	212c      	movs	r1, #44	; 0x2c
 80079f2:	fb01 f303 	mul.w	r3, r1, r3
 80079f6:	4413      	add	r3, r2
 80079f8:	333b      	adds	r3, #59	; 0x3b
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	212c      	movs	r1, #44	; 0x2c
 8007a06:	fb01 f303 	mul.w	r3, r1, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	3354      	adds	r3, #84	; 0x54
 8007a0e:	78ba      	ldrb	r2, [r7, #2]
 8007a10:	701a      	strb	r2, [r3, #0]
 8007a12:	e008      	b.n	8007a26 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007a14:	78fb      	ldrb	r3, [r7, #3]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	212c      	movs	r1, #44	; 0x2c
 8007a1a:	fb01 f303 	mul.w	r3, r1, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	3355      	adds	r3, #85	; 0x55
 8007a22:	78ba      	ldrb	r2, [r7, #2]
 8007a24:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f7f9 fa17 	bl	8000e70 <HAL_Delay>
}
 8007a42:	bf00      	nop
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	2b03      	cmp	r3, #3
 8007a5e:	d817      	bhi.n	8007a90 <USBH_Get_USB_Status+0x44>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USBH_Get_USB_Status+0x1c>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a79 	.word	0x08007a79
 8007a6c:	08007a7f 	.word	0x08007a7f
 8007a70:	08007a85 	.word	0x08007a85
 8007a74:	08007a8b 	.word	0x08007a8b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a7c:	e00b      	b.n	8007a96 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007a7e:	2302      	movs	r3, #2
 8007a80:	73fb      	strb	r3, [r7, #15]
    break;
 8007a82:	e008      	b.n	8007a96 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
    break;
 8007a88:	e005      	b.n	8007a96 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a8e:	e002      	b.n	8007a96 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007a90:	2302      	movs	r3, #2
 8007a92:	73fb      	strb	r3, [r7, #15]
    break;
 8007a94:	bf00      	nop
  }
  return usb_status;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d102      	bne.n	8007abe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73fb      	strb	r3, [r7, #15]
 8007abc:	e001      	b.n	8007ac2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	4803      	ldr	r0, [pc, #12]	; (8007ad8 <MX_DriverVbusFS+0x34>)
 8007aca:	f7f9 fca3 	bl	8001414 <HAL_GPIO_WritePin>
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	40020800 	.word	0x40020800

08007adc <malloc>:
 8007adc:	4b02      	ldr	r3, [pc, #8]	; (8007ae8 <malloc+0xc>)
 8007ade:	4601      	mov	r1, r0
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	f000 b82b 	b.w	8007b3c <_malloc_r>
 8007ae6:	bf00      	nop
 8007ae8:	20000078 	.word	0x20000078

08007aec <free>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <free+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b8f3 	b.w	8007cdc <_free_r>
 8007af6:	bf00      	nop
 8007af8:	20000078 	.word	0x20000078

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0e      	ldr	r6, [pc, #56]	; (8007b38 <sbrk_aligned+0x3c>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f000 f8ac 	bl	8007c64 <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 f8a7 	bl	8007c64 <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d00a      	beq.n	8007b30 <sbrk_aligned+0x34>
 8007b1a:	1cc4      	adds	r4, r0, #3
 8007b1c:	f024 0403 	bic.w	r4, r4, #3
 8007b20:	42a0      	cmp	r0, r4
 8007b22:	d007      	beq.n	8007b34 <sbrk_aligned+0x38>
 8007b24:	1a21      	subs	r1, r4, r0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f89c 	bl	8007c64 <_sbrk_r>
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d101      	bne.n	8007b34 <sbrk_aligned+0x38>
 8007b30:	f04f 34ff 	mov.w	r4, #4294967295
 8007b34:	4620      	mov	r0, r4
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	2000087c 	.word	0x2000087c

08007b3c <_malloc_r>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	1ccd      	adds	r5, r1, #3
 8007b42:	f025 0503 	bic.w	r5, r5, #3
 8007b46:	3508      	adds	r5, #8
 8007b48:	2d0c      	cmp	r5, #12
 8007b4a:	bf38      	it	cc
 8007b4c:	250c      	movcc	r5, #12
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	4607      	mov	r7, r0
 8007b52:	db01      	blt.n	8007b58 <_malloc_r+0x1c>
 8007b54:	42a9      	cmp	r1, r5
 8007b56:	d905      	bls.n	8007b64 <_malloc_r+0x28>
 8007b58:	230c      	movs	r3, #12
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	4630      	mov	r0, r6
 8007b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c38 <_malloc_r+0xfc>
 8007b68:	f000 f868 	bl	8007c3c <__malloc_lock>
 8007b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b70:	461c      	mov	r4, r3
 8007b72:	bb5c      	cbnz	r4, 8007bcc <_malloc_r+0x90>
 8007b74:	4629      	mov	r1, r5
 8007b76:	4638      	mov	r0, r7
 8007b78:	f7ff ffc0 	bl	8007afc <sbrk_aligned>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	4604      	mov	r4, r0
 8007b80:	d155      	bne.n	8007c2e <_malloc_r+0xf2>
 8007b82:	f8d8 4000 	ldr.w	r4, [r8]
 8007b86:	4626      	mov	r6, r4
 8007b88:	2e00      	cmp	r6, #0
 8007b8a:	d145      	bne.n	8007c18 <_malloc_r+0xdc>
 8007b8c:	2c00      	cmp	r4, #0
 8007b8e:	d048      	beq.n	8007c22 <_malloc_r+0xe6>
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	4631      	mov	r1, r6
 8007b94:	4638      	mov	r0, r7
 8007b96:	eb04 0903 	add.w	r9, r4, r3
 8007b9a:	f000 f863 	bl	8007c64 <_sbrk_r>
 8007b9e:	4581      	cmp	r9, r0
 8007ba0:	d13f      	bne.n	8007c22 <_malloc_r+0xe6>
 8007ba2:	6821      	ldr	r1, [r4, #0]
 8007ba4:	1a6d      	subs	r5, r5, r1
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7ff ffa7 	bl	8007afc <sbrk_aligned>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d037      	beq.n	8007c22 <_malloc_r+0xe6>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	442b      	add	r3, r5
 8007bb6:	6023      	str	r3, [r4, #0]
 8007bb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d038      	beq.n	8007c32 <_malloc_r+0xf6>
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	42a2      	cmp	r2, r4
 8007bc4:	d12b      	bne.n	8007c1e <_malloc_r+0xe2>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	e00f      	b.n	8007bec <_malloc_r+0xb0>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	1b52      	subs	r2, r2, r5
 8007bd0:	d41f      	bmi.n	8007c12 <_malloc_r+0xd6>
 8007bd2:	2a0b      	cmp	r2, #11
 8007bd4:	d917      	bls.n	8007c06 <_malloc_r+0xca>
 8007bd6:	1961      	adds	r1, r4, r5
 8007bd8:	42a3      	cmp	r3, r4
 8007bda:	6025      	str	r5, [r4, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	6059      	strne	r1, [r3, #4]
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	bf08      	it	eq
 8007be4:	f8c8 1000 	streq.w	r1, [r8]
 8007be8:	5162      	str	r2, [r4, r5]
 8007bea:	604b      	str	r3, [r1, #4]
 8007bec:	4638      	mov	r0, r7
 8007bee:	f104 060b 	add.w	r6, r4, #11
 8007bf2:	f000 f829 	bl	8007c48 <__malloc_unlock>
 8007bf6:	f026 0607 	bic.w	r6, r6, #7
 8007bfa:	1d23      	adds	r3, r4, #4
 8007bfc:	1af2      	subs	r2, r6, r3
 8007bfe:	d0ae      	beq.n	8007b5e <_malloc_r+0x22>
 8007c00:	1b9b      	subs	r3, r3, r6
 8007c02:	50a3      	str	r3, [r4, r2]
 8007c04:	e7ab      	b.n	8007b5e <_malloc_r+0x22>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	d1dd      	bne.n	8007bc8 <_malloc_r+0x8c>
 8007c0c:	f8c8 2000 	str.w	r2, [r8]
 8007c10:	e7ec      	b.n	8007bec <_malloc_r+0xb0>
 8007c12:	4623      	mov	r3, r4
 8007c14:	6864      	ldr	r4, [r4, #4]
 8007c16:	e7ac      	b.n	8007b72 <_malloc_r+0x36>
 8007c18:	4634      	mov	r4, r6
 8007c1a:	6876      	ldr	r6, [r6, #4]
 8007c1c:	e7b4      	b.n	8007b88 <_malloc_r+0x4c>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	e7cc      	b.n	8007bbc <_malloc_r+0x80>
 8007c22:	230c      	movs	r3, #12
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4638      	mov	r0, r7
 8007c28:	f000 f80e 	bl	8007c48 <__malloc_unlock>
 8007c2c:	e797      	b.n	8007b5e <_malloc_r+0x22>
 8007c2e:	6025      	str	r5, [r4, #0]
 8007c30:	e7dc      	b.n	8007bec <_malloc_r+0xb0>
 8007c32:	605b      	str	r3, [r3, #4]
 8007c34:	deff      	udf	#255	; 0xff
 8007c36:	bf00      	nop
 8007c38:	20000878 	.word	0x20000878

08007c3c <__malloc_lock>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__malloc_lock+0x8>)
 8007c3e:	f000 b84b 	b.w	8007cd8 <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	200009bc 	.word	0x200009bc

08007c48 <__malloc_unlock>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__malloc_unlock+0x8>)
 8007c4a:	f000 b846 	b.w	8007cda <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	200009bc 	.word	0x200009bc

08007c54 <memset>:
 8007c54:	4402      	add	r2, r0
 8007c56:	4603      	mov	r3, r0
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d100      	bne.n	8007c5e <memset+0xa>
 8007c5c:	4770      	bx	lr
 8007c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c62:	e7f9      	b.n	8007c58 <memset+0x4>

08007c64 <_sbrk_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_sbrk_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 f81a 	bl	8000ca8 <_sbrk>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_sbrk_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_sbrk_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	200009b8 	.word	0x200009b8

08007c84 <__errno>:
 8007c84:	4b01      	ldr	r3, [pc, #4]	; (8007c8c <__errno+0x8>)
 8007c86:	6818      	ldr	r0, [r3, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000078 	.word	0x20000078

08007c90 <__libc_init_array>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	4d0d      	ldr	r5, [pc, #52]	; (8007cc8 <__libc_init_array+0x38>)
 8007c94:	4c0d      	ldr	r4, [pc, #52]	; (8007ccc <__libc_init_array+0x3c>)
 8007c96:	1b64      	subs	r4, r4, r5
 8007c98:	10a4      	asrs	r4, r4, #2
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	42a6      	cmp	r6, r4
 8007c9e:	d109      	bne.n	8007cb4 <__libc_init_array+0x24>
 8007ca0:	4d0b      	ldr	r5, [pc, #44]	; (8007cd0 <__libc_init_array+0x40>)
 8007ca2:	4c0c      	ldr	r4, [pc, #48]	; (8007cd4 <__libc_init_array+0x44>)
 8007ca4:	f000 f866 	bl	8007d74 <_init>
 8007ca8:	1b64      	subs	r4, r4, r5
 8007caa:	10a4      	asrs	r4, r4, #2
 8007cac:	2600      	movs	r6, #0
 8007cae:	42a6      	cmp	r6, r4
 8007cb0:	d105      	bne.n	8007cbe <__libc_init_array+0x2e>
 8007cb2:	bd70      	pop	{r4, r5, r6, pc}
 8007cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb8:	4798      	blx	r3
 8007cba:	3601      	adds	r6, #1
 8007cbc:	e7ee      	b.n	8007c9c <__libc_init_array+0xc>
 8007cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc2:	4798      	blx	r3
 8007cc4:	3601      	adds	r6, #1
 8007cc6:	e7f2      	b.n	8007cae <__libc_init_array+0x1e>
 8007cc8:	08007db0 	.word	0x08007db0
 8007ccc:	08007db0 	.word	0x08007db0
 8007cd0:	08007db0 	.word	0x08007db0
 8007cd4:	08007db4 	.word	0x08007db4

08007cd8 <__retarget_lock_acquire_recursive>:
 8007cd8:	4770      	bx	lr

08007cda <__retarget_lock_release_recursive>:
 8007cda:	4770      	bx	lr

08007cdc <_free_r>:
 8007cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d044      	beq.n	8007d6c <_free_r+0x90>
 8007ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ce6:	9001      	str	r0, [sp, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f1a1 0404 	sub.w	r4, r1, #4
 8007cee:	bfb8      	it	lt
 8007cf0:	18e4      	addlt	r4, r4, r3
 8007cf2:	f7ff ffa3 	bl	8007c3c <__malloc_lock>
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <_free_r+0x94>)
 8007cf8:	9801      	ldr	r0, [sp, #4]
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x30>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	b003      	add	sp, #12
 8007d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d08:	f7ff bf9e 	b.w	8007c48 <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x46>
 8007d10:	6825      	ldr	r5, [r4, #0]
 8007d12:	1961      	adds	r1, r4, r5
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1949      	addeq	r1, r1, r5
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x22>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x50>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x46>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1855      	adds	r5, r2, r1
 8007d30:	42a5      	cmp	r5, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x70>
 8007d34:	6824      	ldr	r4, [r4, #0]
 8007d36:	4421      	add	r1, r4
 8007d38:	1854      	adds	r4, r2, r1
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x26>
 8007d40:	681c      	ldr	r4, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6053      	str	r3, [r2, #4]
 8007d46:	440c      	add	r4, r1
 8007d48:	6014      	str	r4, [r2, #0]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x26>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x78>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x26>
 8007d54:	6825      	ldr	r5, [r4, #0]
 8007d56:	1961      	adds	r1, r4, r5
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf04      	itt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	bf04      	itt	eq
 8007d64:	1949      	addeq	r1, r1, r5
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6054      	str	r4, [r2, #4]
 8007d6a:	e7ca      	b.n	8007d02 <_free_r+0x26>
 8007d6c:	b003      	add	sp, #12
 8007d6e:	bd30      	pop	{r4, r5, pc}
 8007d70:	20000878 	.word	0x20000878

08007d74 <_init>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	bf00      	nop
 8007d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d7a:	bc08      	pop	{r3}
 8007d7c:	469e      	mov	lr, r3
 8007d7e:	4770      	bx	lr

08007d80 <_fini>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr
