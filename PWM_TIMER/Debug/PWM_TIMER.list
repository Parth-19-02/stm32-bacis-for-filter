
PWM_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009100  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092ac  080092ac  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080092ac  080092ac  000192ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b4  080092b4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b8  080092b8  000192b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080092bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008b0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000940  20000940  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b23b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e87  00000000  00000000  0003b2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003f188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001568  00000000  00000000  00040890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247ed  00000000  00000000  00041df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d784  00000000  00000000  000665e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3e34  00000000  00000000  00083d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157b9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063dc  00000000  00000000  00157bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009270 	.word	0x08009270

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009270 	.word	0x08009270

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fd56 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81c 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f9d8 	bl	800088c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f882 	bl	80005e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8ae 	bl	8000640 <MX_I2S3_Init>
  MX_DMA_Init();
 80004e4:	f000 f9b2 	bl	800084c <MX_DMA_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 fa7a 	bl	80089e0 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004ec:	f000 f90e 	bl	800070c <MX_TIM1_Init>
  MX_SPI1_Init();
 80004f0:	f000 f8d6 	bl	80006a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
TIM1->CCR1 = 50;
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <main+0x3c>)
 80004f6:	2232      	movs	r2, #50	; 0x32
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004fa:	2100      	movs	r1, #0
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <main+0x40>)
 80004fe:	f004 fc6b 	bl	8004dd8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000502:	f008 fa93 	bl	8008a2c <MX_USB_HOST_Process>
 8000506:	e7fc      	b.n	8000502 <main+0x36>
 8000508:	40010000 	.word	0x40010000
 800050c:	200001a0 	.word	0x200001a0

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	; 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0320 	add.w	r3, r7, #32
 800051a:	2230      	movs	r2, #48	; 0x30
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f008 fda0 	bl	8009064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <SystemClock_Config+0xcc>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	; 0x40
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xd0>)
 800055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	2301      	movs	r3, #1
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000580:	2308      	movs	r3, #8
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000584:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000588:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058e:	2307      	movs	r3, #7
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fd28 	bl	8003fec <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005a2:	f000 fa71 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005aa:	2302      	movs	r3, #2
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2105      	movs	r1, #5
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 ff89 	bl	80044dc <HAL_RCC_ClockConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d0:	f000 fa5a 	bl	8000a88 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_I2C1_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_I2C1_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_I2C1_Init+0x58>)
 80005f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_I2C1_Init+0x50>)
 8000602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000606:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_I2C1_Init+0x50>)
 8000622:	f002 feff 	bl	8003424 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 fa2c 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	200000ac 	.word	0x200000ac
 8000638:	40005400 	.word	0x40005400
 800063c:	000186a0 	.word	0x000186a0

08000640 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_I2S3_Init+0x54>)
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <MX_I2S3_Init+0x58>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2S3_Init+0x54>)
 800064c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000650:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_I2S3_Init+0x54>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2S3_Init+0x54>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_I2S3_Init+0x54>)
 8000660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000664:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_I2S3_Init+0x54>)
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <MX_I2S3_Init+0x5c>)
 800066a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_I2S3_Init+0x54>)
 8000680:	f003 f814 	bl	80036ac <HAL_I2S_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800068a:	f000 f9fd 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000100 	.word	0x20000100
 8000698:	40003c00 	.word	0x40003c00
 800069c:	00017700 	.word	0x00017700

080006a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006a4:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_SPI1_Init+0x64>)
 80006a6:	4a18      	ldr	r2, [pc, #96]	; (8000708 <MX_SPI1_Init+0x68>)
 80006a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_SPI1_Init+0x64>)
 80006ec:	220a      	movs	r2, #10
 80006ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_SPI1_Init+0x64>)
 80006f2:	f004 fa3f 	bl	8004b74 <HAL_SPI_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006fc:	f000 f9c4 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000148 	.word	0x20000148
 8000708:	40013000 	.word	0x40013000

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	; 0x58
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2220      	movs	r2, #32
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f008 fc8d 	bl	8009064 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <MX_TIM1_Init+0x138>)
 800074c:	4a3e      	ldr	r2, [pc, #248]	; (8000848 <MX_TIM1_Init+0x13c>)
 800074e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000750:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <MX_TIM1_Init+0x138>)
 8000752:	22a7      	movs	r2, #167	; 0xa7
 8000754:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b3b      	ldr	r3, [pc, #236]	; (8000844 <MX_TIM1_Init+0x138>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800075c:	4b39      	ldr	r3, [pc, #228]	; (8000844 <MX_TIM1_Init+0x138>)
 800075e:	2263      	movs	r2, #99	; 0x63
 8000760:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_TIM1_Init+0x138>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000768:	4b36      	ldr	r3, [pc, #216]	; (8000844 <MX_TIM1_Init+0x138>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_TIM1_Init+0x138>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000774:	4833      	ldr	r0, [pc, #204]	; (8000844 <MX_TIM1_Init+0x138>)
 8000776:	f004 fa86 	bl	8004c86 <HAL_TIM_Base_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000780:	f000 f982 	bl	8000a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800078e:	4619      	mov	r1, r3
 8000790:	482c      	ldr	r0, [pc, #176]	; (8000844 <MX_TIM1_Init+0x138>)
 8000792:	f004 fcab 	bl	80050ec <HAL_TIM_ConfigClockSource>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800079c:	f000 f974 	bl	8000a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a0:	4828      	ldr	r0, [pc, #160]	; (8000844 <MX_TIM1_Init+0x138>)
 80007a2:	f004 fabf 	bl	8004d24 <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007ac:	f000 f96c 	bl	8000a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007bc:	4619      	mov	r1, r3
 80007be:	4821      	ldr	r0, [pc, #132]	; (8000844 <MX_TIM1_Init+0x138>)
 80007c0:	f005 f86c 	bl	800589c <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80007ca:	f000 f95d 	bl	8000a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ce:	2360      	movs	r3, #96	; 0x60
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 300;
 80007d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM1_Init+0x138>)
 80007f6:	f004 fbb7 	bl	8004f68 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000800:	f000 f942 	bl	8000a88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM1_Init+0x138>)
 8000828:	f005 f8b4 	bl	8005994 <HAL_TIMEx_ConfigBreakDeadTime>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000832:	f000 f929 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM1_Init+0x138>)
 8000838:	f000 fab8 	bl	8000dac <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3758      	adds	r7, #88	; 0x58
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001a0 	.word	0x200001a0
 8000848:	40010000 	.word	0x40010000

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_DMA_Init+0x3c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <MX_DMA_Init+0x3c>)
 800085c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_DMA_Init+0x3c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2039      	movs	r0, #57	; 0x39
 8000874:	f000 fcf5 	bl	8001262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000878:	2039      	movs	r0, #57	; 0x39
 800087a:	f000 fd0e 	bl	800129a <HAL_NVIC_EnableIRQ>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
 80008a6:	4b72      	ldr	r3, [pc, #456]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a71      	ldr	r2, [pc, #452]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b6f      	ldr	r3, [pc, #444]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	61bb      	str	r3, [r7, #24]
 80008bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a6a      	ldr	r2, [pc, #424]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b68      	ldr	r3, [pc, #416]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b64      	ldr	r3, [pc, #400]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a63      	ldr	r2, [pc, #396]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b61      	ldr	r3, [pc, #388]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b5d      	ldr	r3, [pc, #372]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a5c      	ldr	r2, [pc, #368]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b5a      	ldr	r3, [pc, #360]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b56      	ldr	r3, [pc, #344]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a55      	ldr	r2, [pc, #340]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b53      	ldr	r3, [pc, #332]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b4f      	ldr	r3, [pc, #316]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4e      	ldr	r2, [pc, #312]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b4c      	ldr	r3, [pc, #304]	; (8000a70 <MX_GPIO_Init+0x1e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	4849      	ldr	r0, [pc, #292]	; (8000a74 <MX_GPIO_Init+0x1e8>)
 8000950:	f001 f944 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2101      	movs	r1, #1
 8000958:	4847      	ldr	r0, [pc, #284]	; (8000a78 <MX_GPIO_Init+0x1ec>)
 800095a:	f001 f93f 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095e:	2200      	movs	r2, #0
 8000960:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000964:	4845      	ldr	r0, [pc, #276]	; (8000a7c <MX_GPIO_Init+0x1f0>)
 8000966:	f001 f939 	bl	8001bdc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800096a:	2308      	movs	r3, #8
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096e:	2301      	movs	r3, #1
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	483c      	ldr	r0, [pc, #240]	; (8000a74 <MX_GPIO_Init+0x1e8>)
 8000982:	f000 ff8f 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000986:	2301      	movs	r3, #1
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	; (8000a78 <MX_GPIO_Init+0x1ec>)
 800099e:	f000 ff81 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a2:	2308      	movs	r3, #8
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b2:	2305      	movs	r3, #5
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	482e      	ldr	r0, [pc, #184]	; (8000a78 <MX_GPIO_Init+0x1ec>)
 80009be:	f000 ff71 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	482a      	ldr	r0, [pc, #168]	; (8000a80 <MX_GPIO_Init+0x1f4>)
 80009d8:	f000 ff64 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009dc:	2304      	movs	r3, #4
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4825      	ldr	r0, [pc, #148]	; (8000a84 <MX_GPIO_Init+0x1f8>)
 80009f0:	f000 ff58 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a06:	2305      	movs	r3, #5
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_GPIO_Init+0x1f8>)
 8000a12:	f000 ff47 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a16:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a1a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <MX_GPIO_Init+0x1f0>)
 8000a30:	f000 ff38 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a34:	2320      	movs	r3, #32
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_GPIO_Init+0x1f0>)
 8000a48:	f000 ff2c 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_GPIO_Init+0x1e8>)
 8000a62:	f000 ff1f 	bl	80018a4 <HAL_GPIO_Init>

}
 8000a66:	bf00      	nop
 8000a68:	3730      	adds	r7, #48	; 0x30
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40020800 	.word	0x40020800
 8000a7c:	40020c00 	.word	0x40020c00
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020400 	.word	0x40020400

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f000 fbba 	bl	800124c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <HAL_I2C_MspInit+0x84>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d12c      	bne.n	8000b60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b34:	2304      	movs	r3, #4
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <HAL_I2C_MspInit+0x8c>)
 8000b40:	f000 feb0 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <HAL_I2C_MspInit+0x88>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400

08000b74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08e      	sub	sp, #56	; 0x38
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a31      	ldr	r2, [pc, #196]	; (8000c64 <HAL_I2S_MspInit+0xf0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d15a      	bne.n	8000c5a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ba8:	23c0      	movs	r3, #192	; 0xc0
 8000baa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f003 fe9d 	bl	80048f4 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000bc0:	f7ff ff62 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a26      	ldr	r2, [pc, #152]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_I2S_MspInit+0xf4>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c18:	2310      	movs	r3, #16
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c28:	2306      	movs	r3, #6
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	480e      	ldr	r0, [pc, #56]	; (8000c6c <HAL_I2S_MspInit+0xf8>)
 8000c34:	f000 fe36 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c38:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <HAL_I2S_MspInit+0xfc>)
 8000c56:	f000 fe25 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3738      	adds	r7, #56	; 0x38
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40003c00 	.word	0x40003c00
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020800 	.word	0x40020800

08000c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_SPI_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a10      	ldr	r2, [pc, #64]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_SPI_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cce:	23e0      	movs	r3, #224	; 0xe0
 8000cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_SPI_MspInit+0x8c>)
 8000cea:	f000 fddb 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40013000 	.word	0x40013000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_TIM_Base_MspInit+0x98>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d13d      	bne.n	8000d92 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <HAL_TIM_Base_MspInit+0x9c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d34:	4a1c      	ldr	r2, [pc, #112]	; (8000da8 <HAL_TIM_Base_MspInit+0xa4>)
 8000d36:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d3a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000d3e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d42:	2240      	movs	r2, #64	; 0x40
 8000d44:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d52:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000d76:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d78:	f000 faaa 	bl	80012d0 <HAL_DMA_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000d82:	f7ff fe81 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
 8000d8c:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_TIM_Base_MspInit+0xa0>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	200001e8 	.word	0x200001e8
 8000da8:	40026428 	.word	0x40026428

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a12      	ldr	r2, [pc, #72]	; (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11e      	bne.n	8000e0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <HAL_TIM_MspPostInit+0x70>)
 8000e08:	f000 fd4c 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40010000 	.word	0x40010000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f8da 	bl	8001024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e78:	4802      	ldr	r0, [pc, #8]	; (8000e84 <DMA2_Stream1_IRQHandler+0x10>)
 8000e7a:	f000 fad7 	bl	800142c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001e8 	.word	0x200001e8

08000e88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <OTG_FS_IRQHandler+0x10>)
 8000e8e:	f001 f929 	bl	80020e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000062c 	.word	0x2000062c

08000e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea4:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <_sbrk+0x5c>)
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <_sbrk+0x60>)
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <_sbrk+0x64>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <_sbrk+0x68>)
 8000ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d207      	bcs.n	8000edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ecc:	f008 f890 	bl	8008ff0 <__errno>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	e009      	b.n	8000ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <_sbrk+0x64>)
 8000eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20020000 	.word	0x20020000
 8000efc:	00000400 	.word	0x00000400
 8000f00:	20000248 	.word	0x20000248
 8000f04:	20000940 	.word	0x20000940

08000f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x20>)
 8000f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <SystemInit+0x20>)
 8000f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f32:	490e      	ldr	r1, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f48:	4c0b      	ldr	r4, [pc, #44]	; (8000f78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f56:	f7ff ffd7 	bl	8000f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f008 f84f 	bl	8008ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fab5 	bl	80004cc <main>
  bx  lr    
 8000f62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f70:	080092bc 	.word	0x080092bc
  ldr r2, =_sbss
 8000f74:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f78:	20000940 	.word	0x20000940

08000f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <HAL_Init+0x40>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_Init+0x40>)
 8000f96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_Init+0x40>)
 8000fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 f94f 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f808 	bl	8000fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fd6e 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x54>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x58>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f967 	bl	80012b6 <HAL_SYSTICK_Config>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00e      	b.n	8001010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b0f      	cmp	r3, #15
 8000ff6:	d80a      	bhi.n	800100e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	f000 f92f 	bl	8001262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <HAL_InitTick+0x5c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	e000      	b.n	8001010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000000 	.word	0x20000000
 800101c:	20000008 	.word	0x20000008
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x20>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x24>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <HAL_IncTick+0x24>)
 8001036:	6013      	str	r3, [r2, #0]
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	2000024c 	.word	0x2000024c

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000024c 	.word	0x2000024c

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d005      	beq.n	800108a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_Delay+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108a:	bf00      	nop
 800108c:	f7ff ffde 	bl	800104c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	429a      	cmp	r2, r3
 800109a:	d8f7      	bhi.n	800108c <HAL_Delay+0x28>
  {
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <__NVIC_EnableIRQ+0x38>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff8e 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff29 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001274:	f7ff ff3e 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	6978      	ldr	r0, [r7, #20]
 8001280:	f7ff ff8e 	bl	80011a0 <NVIC_EncodePriority>
 8001284:	4602      	mov	r2, r0
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff5d 	bl	800114c <__NVIC_SetPriority>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff31 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffa2 	bl	8001208 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff feb6 	bl	800104c <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e099      	b.n	8001420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130c:	e00f      	b.n	800132e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800130e:	f7ff fe9d 	bl	800104c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b05      	cmp	r3, #5
 800131a:	d908      	bls.n	800132e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2220      	movs	r2, #32
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2203      	movs	r2, #3
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e078      	b.n	8001420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1e8      	bne.n	800130e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <HAL_DMA_Init+0x158>)
 8001348:	4013      	ands	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2b04      	cmp	r3, #4
 8001386:	d107      	bne.n	8001398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4313      	orrs	r3, r2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f023 0307 	bic.w	r3, r3, #7
 80013ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d117      	bne.n	80013f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00e      	beq.n	80013f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f9e9 	bl	80017ac <DMA_CheckFifoParam>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013ee:	2301      	movs	r3, #1
 80013f0:	e016      	b.n	8001420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f9a0 	bl	8001740 <DMA_CalcBaseAndBitshift>
 8001400:	4603      	mov	r3, r0
 8001402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	223f      	movs	r2, #63	; 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	f010803f 	.word	0xf010803f

0800142c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001438:	4b8e      	ldr	r3, [pc, #568]	; (8001674 <HAL_DMA_IRQHandler+0x248>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a8e      	ldr	r2, [pc, #568]	; (8001678 <HAL_DMA_IRQHandler+0x24c>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2208      	movs	r2, #8
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01a      	beq.n	8001498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0204 	bic.w	r2, r2, #4
 800147e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	2208      	movs	r2, #8
 8001486:	409a      	lsls	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2201      	movs	r2, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d012      	beq.n	80014ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	2201      	movs	r2, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f043 0202 	orr.w	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	2204      	movs	r2, #4
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d012      	beq.n	8001504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2204      	movs	r2, #4
 80014f2:	409a      	lsls	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f043 0204 	orr.w	r2, r3, #4
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2210      	movs	r2, #16
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d043      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03c      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2210      	movs	r2, #16
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d018      	beq.n	800156e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d024      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
 800155a:	e01f      	b.n	800159c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01b      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
 800156c:	e016      	b.n	800159c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0208 	bic.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2220      	movs	r2, #32
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 808f 	beq.w	80016cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8087 	beq.w	80016cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c2:	2220      	movs	r2, #32
 80015c4:	409a      	lsls	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d136      	bne.n	8001644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0216 	bic.w	r2, r2, #22
 80015e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <HAL_DMA_IRQHandler+0x1da>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0208 	bic.w	r2, r2, #8
 8001614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	223f      	movs	r2, #63	; 0x3f
 800161c:	409a      	lsls	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001636:	2b00      	cmp	r3, #0
 8001638:	d07e      	beq.n	8001738 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
        }
        return;
 8001642:	e079      	b.n	8001738 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01d      	beq.n	800168e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10d      	bne.n	800167c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	2b00      	cmp	r3, #0
 8001666:	d031      	beq.n	80016cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
 8001670:	e02c      	b.n	80016cc <HAL_DMA_IRQHandler+0x2a0>
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000
 8001678:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d023      	beq.n	80016cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
 800168c:	e01e      	b.n	80016cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10f      	bne.n	80016bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0210 	bic.w	r2, r2, #16
 80016aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d032      	beq.n	800173a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d022      	beq.n	8001726 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2205      	movs	r2, #5
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	3301      	adds	r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	d307      	bcc.n	8001714 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f2      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x2cc>
 8001712:	e000      	b.n	8001716 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001714:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	4798      	blx	r3
 8001736:	e000      	b.n	800173a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001738:	bf00      	nop
    }
  }
}
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	3b10      	subs	r3, #16
 8001750:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <DMA_CalcBaseAndBitshift+0x64>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <DMA_CalcBaseAndBitshift+0x68>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d909      	bls.n	8001782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001776:	f023 0303 	bic.w	r3, r3, #3
 800177a:	1d1a      	adds	r2, r3, #4
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	; 0x58
 8001780:	e007      	b.n	8001792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001796:	4618      	mov	r0, r3
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	aaaaaaab 	.word	0xaaaaaaab
 80017a8:	080092a4 	.word	0x080092a4

080017ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b4:	2300      	movs	r3, #0
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d11f      	bne.n	8001806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d856      	bhi.n	800187a <DMA_CheckFifoParam+0xce>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <DMA_CheckFifoParam+0x28>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080017f7 	.word	0x080017f7
 80017dc:	080017e5 	.word	0x080017e5
 80017e0:	0800187b 	.word	0x0800187b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d046      	beq.n	800187e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f4:	e043      	b.n	800187e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017fe:	d140      	bne.n	8001882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001804:	e03d      	b.n	8001882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180e:	d121      	bne.n	8001854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d837      	bhi.n	8001886 <DMA_CheckFifoParam+0xda>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <DMA_CheckFifoParam+0x70>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	0800182d 	.word	0x0800182d
 8001820:	08001833 	.word	0x08001833
 8001824:	0800182d 	.word	0x0800182d
 8001828:	08001845 	.word	0x08001845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
      break;
 8001830:	e030      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d025      	beq.n	800188a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001842:	e022      	b.n	800188a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800184c:	d11f      	bne.n	800188e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001852:	e01c      	b.n	800188e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d903      	bls.n	8001862 <DMA_CheckFifoParam+0xb6>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d003      	beq.n	8001868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001860:	e018      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
      break;
 8001866:	e015      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00e      	beq.n	8001892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	73fb      	strb	r3, [r7, #15]
      break;
 8001878:	e00b      	b.n	8001892 <DMA_CheckFifoParam+0xe6>
      break;
 800187a:	bf00      	nop
 800187c:	e00a      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 800187e:	bf00      	nop
 8001880:	e008      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 8001882:	bf00      	nop
 8001884:	e006      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 8001886:	bf00      	nop
 8001888:	e004      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 800188a:	bf00      	nop
 800188c:	e002      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;   
 800188e:	bf00      	nop
 8001890:	e000      	b.n	8001894 <DMA_CheckFifoParam+0xe8>
      break;
 8001892:	bf00      	nop
    }
  } 
  
  return status; 
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e16b      	b.n	8001b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 815a 	bne.w	8001b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80b4 	beq.w	8001b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b60      	ldr	r3, [pc, #384]	; (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a5f      	ldr	r2, [pc, #380]	; (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a5b      	ldr	r2, [pc, #364]	; (8001bb4 <HAL_GPIO_Init+0x310>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x314>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d02b      	beq.n	8001aca <HAL_GPIO_Init+0x226>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a51      	ldr	r2, [pc, #324]	; (8001bbc <HAL_GPIO_Init+0x318>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d025      	beq.n	8001ac6 <HAL_GPIO_Init+0x222>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	; (8001bc0 <HAL_GPIO_Init+0x31c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01f      	beq.n	8001ac2 <HAL_GPIO_Init+0x21e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x216>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x328>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x32c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x20e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x20a>
 8001aaa:	2307      	movs	r3, #7
 8001aac:	e00e      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	; (8001bb4 <HAL_GPIO_Init+0x310>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f ae90 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40021c00 	.word	0x40021c00
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c10:	b08f      	sub	sp, #60	; 0x3c
 8001c12:	af0a      	add	r7, sp, #40	; 0x28
 8001c14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e054      	b.n	8001cca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f006 ff2e 	bl	8008a9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 ff5c 	bl	8005b1c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	687e      	ldr	r6, [r7, #4]
 8001c6c:	466d      	mov	r5, sp
 8001c6e:	f106 0410 	add.w	r4, r6, #16
 8001c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c82:	1d33      	adds	r3, r6, #4
 8001c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f003 fed6 	bl	8005a38 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2101      	movs	r1, #1
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 ff53 	bl	8005b3e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	687e      	ldr	r6, [r7, #4]
 8001ca0:	466d      	mov	r5, sp
 8001ca2:	f106 0410 	add.w	r4, r6, #16
 8001ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb6:	1d33      	adds	r3, r6, #4
 8001cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f004 f8dc 	bl	8005e78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cd2:	b590      	push	{r4, r7, lr}
 8001cd4:	b089      	sub	sp, #36	; 0x24
 8001cd6:	af04      	add	r7, sp, #16
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	4608      	mov	r0, r1
 8001cdc:	4611      	mov	r1, r2
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	70fb      	strb	r3, [r7, #3]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70bb      	strb	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_HCD_HC_Init+0x28>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e076      	b.n	8001de8 <HAL_HCD_HC_Init+0x116>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	333d      	adds	r3, #61	; 0x3d
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	212c      	movs	r1, #44	; 0x2c
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3338      	adds	r3, #56	; 0x38
 8001d22:	787a      	ldrb	r2, [r7, #1]
 8001d24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3340      	adds	r3, #64	; 0x40
 8001d34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	212c      	movs	r1, #44	; 0x2c
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	3339      	adds	r3, #57	; 0x39
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	333f      	adds	r3, #63	; 0x3f
 8001d58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	78ba      	ldrb	r2, [r7, #2]
 8001d62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d66:	b2d0      	uxtb	r0, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	212c      	movs	r1, #44	; 0x2c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	333a      	adds	r3, #58	; 0x3a
 8001d74:	4602      	mov	r2, r0
 8001d76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da09      	bge.n	8001d94 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	333b      	adds	r3, #59	; 0x3b
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
 8001d92:	e008      	b.n	8001da6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	333b      	adds	r3, #59	; 0x3b
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	212c      	movs	r1, #44	; 0x2c
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001db8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	787c      	ldrb	r4, [r7, #1]
 8001dc0:	78ba      	ldrb	r2, [r7, #2]
 8001dc2:	78f9      	ldrb	r1, [r7, #3]
 8001dc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dc6:	9302      	str	r3, [sp, #8]
 8001dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	f004 f9d5 	bl	8006184 <USB_HC_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd90      	pop	{r4, r7, pc}

08001df0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_HCD_HC_Halt+0x1e>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e00f      	b.n	8001e2e <HAL_HCD_HC_Halt+0x3e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fc25 	bl	800666e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	70fb      	strb	r3, [r7, #3]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70bb      	strb	r3, [r7, #2]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	333b      	adds	r3, #59	; 0x3b
 8001e60:	78ba      	ldrb	r2, [r7, #2]
 8001e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	333f      	adds	r3, #63	; 0x3f
 8001e72:	787a      	ldrb	r2, [r7, #1]
 8001e74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e76:	7c3b      	ldrb	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d112      	bne.n	8001ea2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3342      	adds	r3, #66	; 0x42
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	333d      	adds	r3, #61	; 0x3d
 8001e9c:	7f3a      	ldrb	r2, [r7, #28]
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e008      	b.n	8001eb4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3342      	adds	r3, #66	; 0x42
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	f200 80c6 	bhi.w	8002048 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08002035 	.word	0x08002035
 8001ecc:	08001f39 	.word	0x08001f39
 8001ed0:	08001fb7 	.word	0x08001fb7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ed4:	7c3b      	ldrb	r3, [r7, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f040 80b8 	bne.w	800204c <HAL_HCD_HC_SubmitRequest+0x214>
 8001edc:	78bb      	ldrb	r3, [r7, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80b4 	bne.w	800204c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ee4:	8b3b      	ldrh	r3, [r7, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3355      	adds	r3, #85	; 0x55
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3355      	adds	r3, #85	; 0x55
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3342      	adds	r3, #66	; 0x42
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f22:	e093      	b.n	800204c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3342      	adds	r3, #66	; 0x42
 8001f32:	2202      	movs	r2, #2
 8001f34:	701a      	strb	r2, [r3, #0]
      break;
 8001f36:	e089      	b.n	800204c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f38:	78bb      	ldrb	r3, [r7, #2]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3355      	adds	r3, #85	; 0x55
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3342      	adds	r3, #66	; 0x42
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f64:	e073      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3342      	adds	r3, #66	; 0x42
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]
      break;
 8001f78:	e069      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3354      	adds	r3, #84	; 0x54
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3342      	adds	r3, #66	; 0x42
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
      break;
 8001fa0:	e055      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
      break;
 8001fb4:	e04b      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11d      	bne.n	8001ff8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3355      	adds	r3, #85	; 0x55
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3342      	adds	r3, #66	; 0x42
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fe2:	e034      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	212c      	movs	r1, #44	; 0x2c
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3342      	adds	r3, #66	; 0x42
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
      break;
 8001ff6:	e02a      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3354      	adds	r3, #84	; 0x54
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3342      	adds	r3, #66	; 0x42
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
      break;
 800201e:	e016      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3342      	adds	r3, #66	; 0x42
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
      break;
 8002032:	e00c      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3342      	adds	r3, #66	; 0x42
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
      break;
 8002046:	e002      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800204c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3344      	adds	r3, #68	; 0x44
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	8b3a      	ldrh	r2, [r7, #24]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	202c      	movs	r0, #44	; 0x2c
 8002068:	fb00 f303 	mul.w	r3, r0, r3
 800206c:	440b      	add	r3, r1
 800206e:	334c      	adds	r3, #76	; 0x4c
 8002070:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3350      	adds	r3, #80	; 0x50
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3339      	adds	r3, #57	; 0x39
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3361      	adds	r3, #97	; 0x61
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	222c      	movs	r2, #44	; 0x2c
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	18d1      	adds	r1, r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	f004 f978 	bl	80063c8 <USB_HC_StartXfer>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop

080020e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fe79 	bl	8005df2 <USB_GetMode>
 8002100:	4603      	mov	r3, r0
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 80f6 	bne.w	80022f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fe5d 	bl	8005dcc <USB_ReadInterrupts>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80ec 	beq.w	80022f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fe54 	bl	8005dcc <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800212a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800212e:	d104      	bne.n	800213a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002138:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fe44 	bl	8005dcc <USB_ReadInterrupts>
 8002144:	4603      	mov	r3, r0
 8002146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214e:	d104      	bne.n	800215a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002158:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f003 fe34 	bl	8005dcc <USB_ReadInterrupts>
 8002164:	4603      	mov	r3, r0
 8002166:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800216a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800216e:	d104      	bne.n	800217a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002178:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fe24 	bl	8005dcc <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b02      	cmp	r3, #2
 800218c:	d103      	bne.n	8002196 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2202      	movs	r2, #2
 8002194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 fe16 	bl	8005dcc <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021aa:	d11c      	bne.n	80021e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10f      	bne.n	80021e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021c6:	2110      	movs	r1, #16
 80021c8:	6938      	ldr	r0, [r7, #16]
 80021ca:	f003 fd05 	bl	8005bd8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80021ce:	6938      	ldr	r0, [r7, #16]
 80021d0:	f003 fd36 	bl	8005c40 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 ff0c 	bl	8005ff8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f006 fcd9 	bl	8008b98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fdee 	bl	8005dcc <USB_ReadInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fa:	d102      	bne.n	8002202 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f001 f89e 	bl	800333e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fde0 	bl	8005dcc <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b08      	cmp	r3, #8
 8002214:	d106      	bne.n	8002224 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f006 fca2 	bl	8008b60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2208      	movs	r2, #8
 8002222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fdcf 	bl	8005dcc <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b10      	cmp	r3, #16
 8002236:	d101      	bne.n	800223c <HAL_HCD_IRQHandler+0x158>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_HCD_IRQHandler+0x15a>
 800223c:	2300      	movs	r3, #0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0210 	bic.w	r2, r2, #16
 8002250:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 ffa1 	bl	800319a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0210 	orr.w	r2, r2, #16
 8002266:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fdad 	bl	8005dcc <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227c:	d13a      	bne.n	80022f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f9e2 	bl	800664c <USB_HC_ReadInterrupt>
 8002288:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	e025      	b.n	80022dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d018      	beq.n	80022d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ba:	d106      	bne.n	80022ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8ab 	bl	800241e <HCD_HC_IN_IRQHandler>
 80022c8:	e005      	b.n	80022d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fbf9 	bl	8002ac8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	3301      	adds	r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3d4      	bcc.n	8002290 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ee:	615a      	str	r2, [r3, #20]
 80022f0:	e000      	b.n	80022f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80022f2:	bf00      	nop
    }
  }
}
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_HCD_Start+0x16>
 800230c:	2302      	movs	r3, #2
 800230e:	e013      	b.n	8002338 <HAL_HCD_Start+0x3e>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fece 	bl	80060c0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fbe6 	bl	8005afa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_HCD_Stop+0x16>
 8002352:	2302      	movs	r3, #2
 8002354:	e00d      	b.n	8002372 <HAL_HCD_Stop+0x32>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fabc 	bl	80068e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f003 fe70 	bl	800606c <USB_ResetPort>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	460b      	mov	r3, r1
 80023a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	781b      	ldrb	r3, [r3, #0]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3350      	adds	r3, #80	; 0x50
 80023d8:	681b      	ldr	r3, [r3, #0]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 feb4 	bl	8006160 <USB_GetCurrentFrame>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fe8f 	bl	8006132 <USB_GetHostSpeed>
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d11a      	bne.n	8002484 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	461a      	mov	r2, r3
 800245c:	2304      	movs	r3, #4
 800245e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3361      	adds	r3, #97	; 0x61
 800246e:	2206      	movs	r2, #6
 8002470:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f004 f8f6 	bl	800666e <USB_HC_Halt>
 8002482:	e0af      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249a:	d11b      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a8:	461a      	mov	r2, r3
 80024aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3361      	adds	r3, #97	; 0x61
 80024be:	2207      	movs	r2, #7
 80024c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 f8ce 	bl	800666e <USB_HC_Halt>
 80024d2:	e087      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d109      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	2320      	movs	r3, #32
 80024fa:	6093      	str	r3, [r2, #8]
 80024fc:	e072      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d11a      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2308      	movs	r3, #8
 8002524:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	3361      	adds	r3, #97	; 0x61
 8002534:	2205      	movs	r2, #5
 8002536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f004 f893 	bl	800666e <USB_HC_Halt>
 8002548:	e04c      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002560:	d11b      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	015a      	lsls	r2, r3, #5
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4413      	add	r3, r2
 800256a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256e:	461a      	mov	r2, r3
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	3361      	adds	r3, #97	; 0x61
 8002584:	2208      	movs	r2, #8
 8002586:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f004 f86b 	bl	800666e <USB_HC_Halt>
 8002598:	e024      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	d119      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	461a      	mov	r2, r3
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	3361      	adds	r3, #97	; 0x61
 80025d0:	2206      	movs	r2, #6
 80025d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 f845 	bl	800666e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025fa:	d112      	bne.n	8002622 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f004 f831 	bl	800666e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800261e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002620:	e24e      	b.n	8002ac0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 80df 	bne.w	80027f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d019      	beq.n	8002676 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3348      	adds	r3, #72	; 0x48
 8002650:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0159      	lsls	r1, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	440b      	add	r3, r1
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	202c      	movs	r0, #44	; 0x2c
 800266c:	fb00 f303 	mul.w	r3, r0, r3
 8002670:	440b      	add	r3, r1
 8002672:	3350      	adds	r3, #80	; 0x50
 8002674:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	335c      	adds	r3, #92	; 0x5c
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	461a      	mov	r2, r3
 80026a8:	2301      	movs	r3, #1
 80026aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	212c      	movs	r1, #44	; 0x2c
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	4413      	add	r3, r2
 80026b8:	333f      	adds	r3, #63	; 0x3f
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	333f      	adds	r3, #63	; 0x3f
 80026ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d111      	bne.n	80026f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 ffc5 	bl	800666e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	2310      	movs	r3, #16
 80026f4:	6093      	str	r3, [r2, #8]
 80026f6:	e03a      	b.n	800276e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	333f      	adds	r3, #63	; 0x3f
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b03      	cmp	r3, #3
 800270a:	d009      	beq.n	8002720 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	212c      	movs	r1, #44	; 0x2c
 8002712:	fb01 f303 	mul.w	r3, r1, r3
 8002716:	4413      	add	r3, r2
 8002718:	333f      	adds	r3, #63	; 0x3f
 800271a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800271c:	2b01      	cmp	r3, #1
 800271e:	d126      	bne.n	800276e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	440a      	add	r2, r1
 8002736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800273e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3360      	adds	r3, #96	; 0x60
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	b2d9      	uxtb	r1, r3
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	202c      	movs	r0, #44	; 0x2c
 800275c:	fb00 f303 	mul.w	r3, r0, r3
 8002760:	4413      	add	r3, r2
 8002762:	3360      	adds	r3, #96	; 0x60
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f006 fa23 	bl	8008bb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d12b      	bne.n	80027ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3348      	adds	r3, #72	; 0x48
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	202c      	movs	r0, #44	; 0x2c
 800278c:	fb00 f202 	mul.w	r2, r0, r2
 8002790:	440a      	add	r2, r1
 8002792:	3240      	adds	r2, #64	; 0x40
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	fbb3 f3f2 	udiv	r3, r3, r2
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 818e 	beq.w	8002ac0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3354      	adds	r3, #84	; 0x54
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	f083 0301 	eor.w	r3, r3, #1
 80027b8:	b2d8      	uxtb	r0, r3
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3354      	adds	r3, #84	; 0x54
 80027c8:	4602      	mov	r2, r0
 80027ca:	701a      	strb	r2, [r3, #0]
}
 80027cc:	e178      	b.n	8002ac0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3354      	adds	r3, #84	; 0x54
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f083 0301 	eor.w	r3, r3, #1
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3354      	adds	r3, #84	; 0x54
 80027f2:	4602      	mov	r2, r0
 80027f4:	701a      	strb	r2, [r3, #0]
}
 80027f6:	e163      	b.n	8002ac0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	f040 80f6 	bne.w	80029fc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	3361      	adds	r3, #97	; 0x61
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d109      	bne.n	8002838 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	3360      	adds	r3, #96	; 0x60
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e0c9      	b.n	80029cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	212c      	movs	r1, #44	; 0x2c
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	4413      	add	r3, r2
 8002844:	3361      	adds	r3, #97	; 0x61
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d109      	bne.n	8002860 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	2205      	movs	r2, #5
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e0b5      	b.n	80029cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3361      	adds	r3, #97	; 0x61
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d009      	beq.n	8002888 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3361      	adds	r3, #97	; 0x61
 8002882:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002884:	2b08      	cmp	r3, #8
 8002886:	d150      	bne.n	800292a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	335c      	adds	r3, #92	; 0x5c
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	202c      	movs	r0, #44	; 0x2c
 80028a0:	fb00 f303 	mul.w	r3, r0, r3
 80028a4:	440b      	add	r3, r1
 80028a6:	335c      	adds	r3, #92	; 0x5c
 80028a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	335c      	adds	r3, #92	; 0x5c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d912      	bls.n	80028e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	335c      	adds	r3, #92	; 0x5c
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	212c      	movs	r1, #44	; 0x2c
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	4413      	add	r3, r2
 80028dc:	3360      	adds	r3, #96	; 0x60
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028e2:	e073      	b.n	80029cc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3360      	adds	r3, #96	; 0x60
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800290c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002914:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002928:	e050      	b.n	80029cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	3361      	adds	r3, #97	; 0x61
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b03      	cmp	r3, #3
 800293c:	d122      	bne.n	8002984 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3360      	adds	r3, #96	; 0x60
 800294c:	2202      	movs	r2, #2
 800294e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002966:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800296e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e023      	b.n	80029cc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	212c      	movs	r1, #44	; 0x2c
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	4413      	add	r3, r2
 8002990:	3361      	adds	r3, #97	; 0x61
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b07      	cmp	r3, #7
 8002996:	d119      	bne.n	80029cc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	335c      	adds	r3, #92	; 0x5c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	202c      	movs	r0, #44	; 0x2c
 80029b0:	fb00 f303 	mul.w	r3, r0, r3
 80029b4:	440b      	add	r3, r1
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	2204      	movs	r2, #4
 80029ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	461a      	mov	r2, r3
 80029da:	2302      	movs	r3, #2
 80029dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	b2d9      	uxtb	r1, r3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	202c      	movs	r0, #44	; 0x2c
 80029e8:	fb00 f303 	mul.w	r3, r0, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3360      	adds	r3, #96	; 0x60
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f006 f8dd 	bl	8008bb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029fa:	e061      	b.n	8002ac0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d156      	bne.n	8002ac0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	333f      	adds	r3, #63	; 0x3f
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d111      	bne.n	8002a4a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fe13 	bl	800666e <USB_HC_Halt>
 8002a48:	e031      	b.n	8002aae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	333f      	adds	r3, #63	; 0x3f
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	333f      	adds	r3, #63	; 0x3f
 8002a6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d11d      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	335c      	adds	r3, #92	; 0x5c
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d110      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3361      	adds	r3, #97	; 0x61
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fde0 	bl	800666e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aba:	461a      	mov	r2, r3
 8002abc:	2310      	movs	r3, #16
 8002abe:	6093      	str	r3, [r2, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d11a      	bne.n	8002b2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	461a      	mov	r2, r3
 8002b06:	2304      	movs	r3, #4
 8002b08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	212c      	movs	r1, #44	; 0x2c
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	4413      	add	r3, r2
 8002b16:	3361      	adds	r3, #97	; 0x61
 8002b18:	2206      	movs	r2, #6
 8002b1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	4611      	mov	r1, r2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 fda1 	bl	800666e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002b2c:	e331      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d12e      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2320      	movs	r3, #32
 8002b54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	333d      	adds	r3, #61	; 0x3d
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	f040 8313 	bne.w	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	333d      	adds	r3, #61	; 0x3d
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	212c      	movs	r1, #44	; 0x2c
 8002b84:	fb01 f303 	mul.w	r3, r1, r3
 8002b88:	4413      	add	r3, r2
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fd67 	bl	800666e <USB_HC_Halt>
}
 8002ba0:	e2f7      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d112      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bcc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fd48 	bl	800666e <USB_HC_Halt>
}
 8002bde:	e2d8      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d140      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	335c      	adds	r3, #92	; 0x5c
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d111      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	333d      	adds	r3, #61	; 0x3d
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2340      	movs	r3, #64	; 0x40
 8002c40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2301      	movs	r3, #1
 8002c52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3361      	adds	r3, #97	; 0x61
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fcfc 	bl	800666e <USB_HC_Halt>
}
 8002c76:	e28c      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d12c      	bne.n	8002ce8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3361      	adds	r3, #97	; 0x61
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	333d      	adds	r3, #61	; 0x3d
 8002cae:	2201      	movs	r2, #1
 8002cb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f003 fccd 	bl	800666e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2340      	movs	r3, #64	; 0x40
 8002ce4:	6093      	str	r3, [r2, #8]
}
 8002ce6:	e254      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11a      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3361      	adds	r3, #97	; 0x61
 8002d1e:	2205      	movs	r2, #5
 8002d20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f003 fc9e 	bl	800666e <USB_HC_Halt>
}
 8002d32:	e22e      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d140      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	212c      	movs	r1, #44	; 0x2c
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	3361      	adds	r3, #97	; 0x61
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	333d      	adds	r3, #61	; 0x3d
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d112      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	212c      	movs	r1, #44	; 0x2c
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	333c      	adds	r3, #60	; 0x3c
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d108      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	333d      	adds	r3, #61	; 0x3d
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f003 fc5b 	bl	800666e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	6093      	str	r3, [r2, #8]
}
 8002dca:	e1e2      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d164      	bne.n	8002eac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d111      	bne.n	8002e0e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3361      	adds	r3, #97	; 0x61
 8002df8:	2206      	movs	r2, #6
 8002dfa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fc31 	bl	800666e <USB_HC_Halt>
 8002e0c:	e044      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	212c      	movs	r1, #44	; 0x2c
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	335c      	adds	r3, #92	; 0x5c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	335c      	adds	r3, #92	; 0x5c
 8002e2e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	335c      	adds	r3, #92	; 0x5c
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d920      	bls.n	8002e86 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	335c      	adds	r3, #92	; 0x5c
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	2204      	movs	r2, #4
 8002e66:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	b2d9      	uxtb	r1, r3
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	202c      	movs	r0, #44	; 0x2c
 8002e72:	fb00 f303 	mul.w	r3, r0, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3360      	adds	r3, #96	; 0x60
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f005 fe98 	bl	8008bb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e84:	e008      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3360      	adds	r3, #96	; 0x60
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	6093      	str	r3, [r2, #8]
}
 8002eaa:	e172      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec2:	d11b      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3361      	adds	r3, #97	; 0x61
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fbc4 	bl	800666e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef8:	6093      	str	r3, [r2, #8]
}
 8002efa:	e14a      	b.n	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	f040 813f 	bne.w	8003192 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3361      	adds	r3, #97	; 0x61
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d17d      	bne.n	8003024 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3360      	adds	r3, #96	; 0x60
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	333f      	adds	r3, #63	; 0x3f
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d00a      	beq.n	8002f64 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333f      	adds	r3, #63	; 0x3f
 8002f5c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	f040 8100 	bne.w	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d113      	bne.n	8002f94 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3355      	adds	r3, #85	; 0x55
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f083 0301 	eor.w	r3, r3, #1
 8002f80:	b2d8      	uxtb	r0, r3
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3355      	adds	r3, #85	; 0x55
 8002f90:	4602      	mov	r2, r0
 8002f92:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	f040 80e3 	bne.w	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	334c      	adds	r3, #76	; 0x4c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80d8 	beq.w	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	334c      	adds	r3, #76	; 0x4c
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	202c      	movs	r0, #44	; 0x2c
 8002fca:	fb00 f202 	mul.w	r2, r0, r2
 8002fce:	440a      	add	r2, r1
 8002fd0:	3240      	adds	r2, #64	; 0x40
 8002fd2:	8812      	ldrh	r2, [r2, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	202c      	movs	r0, #44	; 0x2c
 8002fde:	fb00 f202 	mul.w	r2, r0, r2
 8002fe2:	440a      	add	r2, r1
 8002fe4:	3240      	adds	r2, #64	; 0x40
 8002fe6:	8812      	ldrh	r2, [r2, #0]
 8002fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80b5 	beq.w	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	212c      	movs	r1, #44	; 0x2c
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	3355      	adds	r3, #85	; 0x55
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2d8      	uxtb	r0, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3355      	adds	r3, #85	; 0x55
 800301e:	4602      	mov	r2, r0
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e09f      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3361      	adds	r3, #97	; 0x61
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d109      	bne.n	800304c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3360      	adds	r3, #96	; 0x60
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e08b      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	212c      	movs	r1, #44	; 0x2c
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	3361      	adds	r3, #97	; 0x61
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d109      	bne.n	8003074 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3360      	adds	r3, #96	; 0x60
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
 8003072:	e077      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3361      	adds	r3, #97	; 0x61
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b05      	cmp	r3, #5
 8003086:	d109      	bne.n	800309c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3360      	adds	r3, #96	; 0x60
 8003096:	2205      	movs	r2, #5
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e063      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	212c      	movs	r1, #44	; 0x2c
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3361      	adds	r3, #97	; 0x61
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b06      	cmp	r3, #6
 80030ae:	d009      	beq.n	80030c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3361      	adds	r3, #97	; 0x61
 80030be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d14f      	bne.n	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	335c      	adds	r3, #92	; 0x5c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	202c      	movs	r0, #44	; 0x2c
 80030dc:	fb00 f303 	mul.w	r3, r0, r3
 80030e0:	440b      	add	r3, r1
 80030e2:	335c      	adds	r3, #92	; 0x5c
 80030e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	335c      	adds	r3, #92	; 0x5c
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d912      	bls.n	8003120 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	335c      	adds	r3, #92	; 0x5c
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	212c      	movs	r1, #44	; 0x2c
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	4413      	add	r3, r2
 8003118:	3360      	adds	r3, #96	; 0x60
 800311a:	2204      	movs	r2, #4
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e021      	b.n	8003164 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3360      	adds	r3, #96	; 0x60
 800312e:	2202      	movs	r2, #2
 8003130:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	4413      	add	r3, r2
 800313a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003148:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003150:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315e:	461a      	mov	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	461a      	mov	r2, r3
 8003172:	2302      	movs	r3, #2
 8003174:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	b2d9      	uxtb	r1, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	202c      	movs	r0, #44	; 0x2c
 8003180:	fb00 f303 	mul.w	r3, r0, r3
 8003184:	4413      	add	r3, r2
 8003186:	3360      	adds	r3, #96	; 0x60
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f005 fd11 	bl	8008bb4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003192:	bf00      	nop
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b08a      	sub	sp, #40	; 0x28
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	0c5b      	lsrs	r3, r3, #17
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d004      	beq.n	80031e0 <HCD_RXQLVL_IRQHandler+0x46>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	f000 80a9 	beq.w	8003330 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031de:	e0aa      	b.n	8003336 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80a6 	beq.w	8003334 <HCD_RXQLVL_IRQHandler+0x19a>
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3344      	adds	r3, #68	; 0x44
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 809b 	beq.w	8003334 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3350      	adds	r3, #80	; 0x50
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	441a      	add	r2, r3
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	202c      	movs	r0, #44	; 0x2c
 8003218:	fb00 f303 	mul.w	r3, r0, r3
 800321c:	440b      	add	r3, r1
 800321e:	334c      	adds	r3, #76	; 0x4c
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d87a      	bhi.n	800331c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	212c      	movs	r1, #44	; 0x2c
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	4413      	add	r3, r2
 8003236:	3344      	adds	r3, #68	; 0x44
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	b292      	uxth	r2, r2
 800323e:	4619      	mov	r1, r3
 8003240:	f002 fd6c 	bl	8005d1c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3344      	adds	r3, #68	; 0x44
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	441a      	add	r2, r3
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	202c      	movs	r0, #44	; 0x2c
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	440b      	add	r3, r1
 8003264:	3344      	adds	r3, #68	; 0x44
 8003266:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3350      	adds	r3, #80	; 0x50
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	441a      	add	r2, r3
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	202c      	movs	r0, #44	; 0x2c
 8003282:	fb00 f303 	mul.w	r3, r0, r3
 8003286:	440b      	add	r3, r1
 8003288:	3350      	adds	r3, #80	; 0x50
 800328a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	0cdb      	lsrs	r3, r3, #19
 800329c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	3340      	adds	r3, #64	; 0x40
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d13c      	bne.n	8003334 <HCD_RXQLVL_IRQHandler+0x19a>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d039      	beq.n	8003334 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032de:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	212c      	movs	r1, #44	; 0x2c
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	3354      	adds	r3, #84	; 0x54
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	f083 0301 	eor.w	r3, r3, #1
 8003306:	b2d8      	uxtb	r0, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3354      	adds	r3, #84	; 0x54
 8003316:	4602      	mov	r2, r0
 8003318:	701a      	strb	r2, [r3, #0]
      break;
 800331a:	e00b      	b.n	8003334 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	212c      	movs	r1, #44	; 0x2c
 8003322:	fb01 f303 	mul.w	r3, r1, r3
 8003326:	4413      	add	r3, r2
 8003328:	3360      	adds	r3, #96	; 0x60
 800332a:	2204      	movs	r2, #4
 800332c:	701a      	strb	r2, [r3, #0]
      break;
 800332e:	e001      	b.n	8003334 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003330:	bf00      	nop
 8003332:	e000      	b.n	8003336 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003334:	bf00      	nop
  }
}
 8003336:	bf00      	nop
 8003338:	3728      	adds	r7, #40	; 0x28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800336a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b02      	cmp	r3, #2
 8003374:	d10b      	bne.n	800338e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f005 fbfb 	bl	8008b7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b08      	cmp	r3, #8
 8003396:	d132      	bne.n	80033fe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f043 0308 	orr.w	r3, r3, #8
 800339e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d126      	bne.n	80033f8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d113      	bne.n	80033da <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033bc:	d106      	bne.n	80033cc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2102      	movs	r1, #2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fe17 	bl	8005ff8 <USB_InitFSLSPClkSel>
 80033ca:	e011      	b.n	80033f0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fe10 	bl	8005ff8 <USB_InitFSLSPClkSel>
 80033d8:	e00a      	b.n	80033f0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d106      	bne.n	80033f0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e8:	461a      	mov	r2, r3
 80033ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 80033ee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f005 fbed 	bl	8008bd0 <HAL_HCD_PortEnabled_Callback>
 80033f6:	e002      	b.n	80033fe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f005 fbf7 	bl	8008bec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b20      	cmp	r3, #32
 8003406:	d103      	bne.n	8003410 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f043 0320 	orr.w	r3, r3, #32
 800340e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003416:	461a      	mov	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e12b      	b.n	800368e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd fb4a 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	; 0x24
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0201 	bic.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003488:	f001 fa20 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 800348c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4a81      	ldr	r2, [pc, #516]	; (8003698 <HAL_I2C_Init+0x274>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d807      	bhi.n	80034a8 <HAL_I2C_Init+0x84>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a80      	ldr	r2, [pc, #512]	; (800369c <HAL_I2C_Init+0x278>)
 800349c:	4293      	cmp	r3, r2
 800349e:	bf94      	ite	ls
 80034a0:	2301      	movls	r3, #1
 80034a2:	2300      	movhi	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e006      	b.n	80034b6 <HAL_I2C_Init+0x92>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a7d      	ldr	r2, [pc, #500]	; (80036a0 <HAL_I2C_Init+0x27c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bf94      	ite	ls
 80034b0:	2301      	movls	r3, #1
 80034b2:	2300      	movhi	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e0e7      	b.n	800368e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a78      	ldr	r2, [pc, #480]	; (80036a4 <HAL_I2C_Init+0x280>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a6a      	ldr	r2, [pc, #424]	; (8003698 <HAL_I2C_Init+0x274>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d802      	bhi.n	80034f8 <HAL_I2C_Init+0xd4>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	3301      	adds	r3, #1
 80034f6:	e009      	b.n	800350c <HAL_I2C_Init+0xe8>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034fe:	fb02 f303 	mul.w	r3, r2, r3
 8003502:	4a69      	ldr	r2, [pc, #420]	; (80036a8 <HAL_I2C_Init+0x284>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	3301      	adds	r3, #1
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	430b      	orrs	r3, r1
 8003512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800351e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	495c      	ldr	r1, [pc, #368]	; (8003698 <HAL_I2C_Init+0x274>)
 8003528:	428b      	cmp	r3, r1
 800352a:	d819      	bhi.n	8003560 <HAL_I2C_Init+0x13c>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e59      	subs	r1, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fbb1 f3f3 	udiv	r3, r1, r3
 800353a:	1c59      	adds	r1, r3, #1
 800353c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003540:	400b      	ands	r3, r1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_I2C_Init+0x138>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1e59      	subs	r1, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fbb1 f3f3 	udiv	r3, r1, r3
 8003554:	3301      	adds	r3, #1
 8003556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355a:	e051      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 800355c:	2304      	movs	r3, #4
 800355e:	e04f      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d111      	bne.n	800358c <HAL_I2C_Init+0x168>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	1e58      	subs	r0, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	440b      	add	r3, r1
 8003576:	fbb0 f3f3 	udiv	r3, r0, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003580:	2b00      	cmp	r3, #0
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e012      	b.n	80035b2 <HAL_I2C_Init+0x18e>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e58      	subs	r0, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	460b      	mov	r3, r1
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	0099      	lsls	r1, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf0c      	ite	eq
 80035ac:	2301      	moveq	r3, #1
 80035ae:	2300      	movne	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_I2C_Init+0x196>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e022      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10e      	bne.n	80035e0 <HAL_I2C_Init+0x1bc>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1e58      	subs	r0, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	440b      	add	r3, r1
 80035d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80035d4:	3301      	adds	r3, #1
 80035d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035de:	e00f      	b.n	8003600 <HAL_I2C_Init+0x1dc>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e58      	subs	r0, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	0099      	lsls	r1, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	6809      	ldr	r1, [r1, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800362e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6911      	ldr	r1, [r2, #16]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68d2      	ldr	r2, [r2, #12]
 800363a:	4311      	orrs	r1, r2
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	430b      	orrs	r3, r1
 8003642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695a      	ldr	r2, [r3, #20]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	000186a0 	.word	0x000186a0
 800369c:	001e847f 	.word	0x001e847f
 80036a0:	003d08ff 	.word	0x003d08ff
 80036a4:	431bde83 	.word	0x431bde83
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e128      	b.n	8003910 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a90      	ldr	r2, [pc, #576]	; (8003918 <HAL_I2S_Init+0x26c>)
 80036d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fd fa4b 	bl	8000b74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036f4:	f023 030f 	bic.w	r3, r3, #15
 80036f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2202      	movs	r2, #2
 8003700:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d060      	beq.n	80037cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d102      	bne.n	8003718 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003712:	2310      	movs	r3, #16
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e001      	b.n	800371c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b20      	cmp	r3, #32
 8003722:	d802      	bhi.n	800372a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800372a:	2001      	movs	r0, #1
 800372c:	f001 f9c4 	bl	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003730:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800373a:	d125      	bne.n	8003788 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	fbb2 f2f3 	udiv	r2, r2, r3
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	461a      	mov	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	3305      	adds	r3, #5
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e01f      	b.n	80037a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	461a      	mov	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	3305      	adds	r3, #5
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	e00e      	b.n	80037a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003790:	4613      	mov	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a2:	3305      	adds	r3, #5
 80037a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4a5c      	ldr	r2, [pc, #368]	; (800391c <HAL_I2S_Init+0x270>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e003      	b.n	80037d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037cc:	2302      	movs	r3, #2
 80037ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d902      	bls.n	80037e0 <HAL_I2S_Init+0x134>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2bff      	cmp	r3, #255	; 0xff
 80037de:	d907      	bls.n	80037f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e4:	f043 0210 	orr.w	r2, r3, #16
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e08f      	b.n	8003910 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	ea42 0103 	orr.w	r1, r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	430a      	orrs	r2, r1
 8003802:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800380e:	f023 030f 	bic.w	r3, r3, #15
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6851      	ldr	r1, [r2, #4]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6892      	ldr	r2, [r2, #8]
 800381a:	4311      	orrs	r1, r2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68d2      	ldr	r2, [r2, #12]
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6992      	ldr	r2, [r2, #24]
 8003826:	430a      	orrs	r2, r1
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003832:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d161      	bne.n	8003900 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a38      	ldr	r2, [pc, #224]	; (8003920 <HAL_I2S_Init+0x274>)
 8003840:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a37      	ldr	r2, [pc, #220]	; (8003924 <HAL_I2S_Init+0x278>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_I2S_Init+0x1a4>
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_I2S_Init+0x27c>)
 800384e:	e001      	b.n	8003854 <HAL_I2S_Init+0x1a8>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	4932      	ldr	r1, [pc, #200]	; (8003924 <HAL_I2S_Init+0x278>)
 800385c:	428a      	cmp	r2, r1
 800385e:	d101      	bne.n	8003864 <HAL_I2S_Init+0x1b8>
 8003860:	4a31      	ldr	r2, [pc, #196]	; (8003928 <HAL_I2S_Init+0x27c>)
 8003862:	e001      	b.n	8003868 <HAL_I2S_Init+0x1bc>
 8003864:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003868:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800386c:	f023 030f 	bic.w	r3, r3, #15
 8003870:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2b      	ldr	r2, [pc, #172]	; (8003924 <HAL_I2S_Init+0x278>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_I2S_Init+0x1d4>
 800387c:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <HAL_I2S_Init+0x27c>)
 800387e:	e001      	b.n	8003884 <HAL_I2S_Init+0x1d8>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003884:	2202      	movs	r2, #2
 8003886:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_I2S_Init+0x278>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_I2S_Init+0x1ea>
 8003892:	4b25      	ldr	r3, [pc, #148]	; (8003928 <HAL_I2S_Init+0x27c>)
 8003894:	e001      	b.n	800389a <HAL_I2S_Init+0x1ee>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a6:	d003      	beq.n	80038b0 <HAL_I2S_Init+0x204>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80038b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e001      	b.n	80038bc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038b8:	2300      	movs	r3, #0
 80038ba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038da:	4313      	orrs	r3, r2
 80038dc:	b29a      	uxth	r2, r3
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <HAL_I2S_Init+0x278>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_I2S_Init+0x24c>
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <HAL_I2S_Init+0x27c>)
 80038f6:	e001      	b.n	80038fc <HAL_I2S_Init+0x250>
 80038f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fc:	897a      	ldrh	r2, [r7, #10]
 80038fe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	08003a23 	.word	0x08003a23
 800391c:	cccccccd 	.word	0xcccccccd
 8003920:	08003b39 	.word	0x08003b39
 8003924:	40003800 	.word	0x40003800
 8003928:	40003400 	.word	0x40003400

0800392c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10e      	bne.n	80039bc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffb8 	bl	800392c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	b292      	uxth	r2, r2
 80039d8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10e      	bne.n	8003a1a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a0a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff93 	bl	8003940 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d13a      	bne.n	8003ab4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d109      	bne.n	8003a5c <I2S_IRQHandler+0x3a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d102      	bne.n	8003a5c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffb4 	bl	80039c4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d126      	bne.n	8003ab4 <I2S_IRQHandler+0x92>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d11f      	bne.n	8003ab4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f043 0202 	orr.w	r2, r3, #2
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff50 	bl	8003954 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d136      	bne.n	8003b2e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d109      	bne.n	8003ade <I2S_IRQHandler+0xbc>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d102      	bne.n	8003ade <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7ff ff45 	bl	8003968 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d122      	bne.n	8003b2e <I2S_IRQHandler+0x10c>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d11b      	bne.n	8003b2e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b04:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	f043 0204 	orr.w	r2, r3, #4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff13 	bl	8003954 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a92      	ldr	r2, [pc, #584]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003b52:	4b92      	ldr	r3, [pc, #584]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b54:	e001      	b.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a8b      	ldr	r2, [pc, #556]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003b70:	4b8a      	ldr	r3, [pc, #552]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b72:	e001      	b.n	8003b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b84:	d004      	beq.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f040 8099 	bne.w	8003cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d107      	bne.n	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f925 	bl	8003df4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9c8 	bl	8003f54 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bca:	2b40      	cmp	r3, #64	; 0x40
 8003bcc:	d13a      	bne.n	8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d035      	beq.n	8003c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003be2:	4b6e      	ldr	r3, [pc, #440]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003be4:	e001      	b.n	8003bea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4969      	ldr	r1, [pc, #420]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bf2:	428b      	cmp	r3, r1
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003bf6:	4b69      	ldr	r3, [pc, #420]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf8:	e001      	b.n	8003bfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f043 0202 	orr.w	r2, r3, #2
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fe88 	bl	8003954 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	f040 80c3 	bne.w	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80bd 	beq.w	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a49      	ldr	r2, [pc, #292]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d101      	bne.n	8003c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003c76:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c78:	e001      	b.n	8003c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4944      	ldr	r1, [pc, #272]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c86:	428b      	cmp	r3, r1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003c8a:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c8c:	e001      	b.n	8003c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	f043 0204 	orr.w	r2, r3, #4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fe4a 	bl	8003954 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cc0:	e089      	b.n	8003dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d107      	bne.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f8be 	bl	8003e58 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d107      	bne.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f8fd 	bl	8003ef0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d12f      	bne.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02a      	beq.n	8003d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d26:	e001      	b.n	8003d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4919      	ldr	r1, [pc, #100]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d34:	428b      	cmp	r3, r1
 8003d36:	d101      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d3a:	e001      	b.n	8003d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f043 0202 	orr.w	r2, r3, #2
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff fdfa 	bl	8003954 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d136      	bne.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d031      	beq.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d80:	e001      	b.n	8003d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4902      	ldr	r1, [pc, #8]	; (8003d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d8e:	428b      	cmp	r3, r1
 8003d90:	d106      	bne.n	8003da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003d92:	4b02      	ldr	r3, [pc, #8]	; (8003d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d94:	e006      	b.n	8003da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003d96:	bf00      	nop
 8003d98:	40003800 	.word	0x40003800
 8003d9c:	40003400 	.word	0x40003400
 8003da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fdc0 	bl	8003954 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dd4:	e000      	b.n	8003dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003dd6:	bf00      	nop
}
 8003dd8:	bf00      	nop
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	1c99      	adds	r1, r3, #2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6251      	str	r1, [r2, #36]	; 0x24
 8003e06:	881a      	ldrh	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d106      	bne.n	8003e4e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ffc9 	bl	8003de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c99      	adds	r1, r3, #2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6251      	str	r1, [r2, #36]	; 0x24
 8003e6a:	8819      	ldrh	r1, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1d      	ldr	r2, [pc, #116]	; (8003ee8 <I2SEx_TxISR_I2SExt+0x90>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <I2SEx_TxISR_I2SExt+0x22>
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <I2SEx_TxISR_I2SExt+0x94>)
 8003e78:	e001      	b.n	8003e7e <I2SEx_TxISR_I2SExt+0x26>
 8003e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7e:	460a      	mov	r2, r1
 8003e80:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d121      	bne.n	8003ede <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <I2SEx_TxISR_I2SExt+0x90>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d101      	bne.n	8003ea8 <I2SEx_TxISR_I2SExt+0x50>
 8003ea4:	4b11      	ldr	r3, [pc, #68]	; (8003eec <I2SEx_TxISR_I2SExt+0x94>)
 8003ea6:	e001      	b.n	8003eac <I2SEx_TxISR_I2SExt+0x54>
 8003ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	490d      	ldr	r1, [pc, #52]	; (8003ee8 <I2SEx_TxISR_I2SExt+0x90>)
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d101      	bne.n	8003ebc <I2SEx_TxISR_I2SExt+0x64>
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <I2SEx_TxISR_I2SExt+0x94>)
 8003eba:	e001      	b.n	8003ec0 <I2SEx_TxISR_I2SExt+0x68>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff ff81 	bl	8003de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40003800 	.word	0x40003800
 8003eec:	40003400 	.word	0x40003400

08003ef0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68d8      	ldr	r0, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	1c99      	adds	r1, r3, #2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f08:	b282      	uxth	r2, r0
 8003f0a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f32:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff4a 	bl	8003de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <I2SEx_RxISR_I2SExt+0x90>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <I2SEx_RxISR_I2SExt+0x16>
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <I2SEx_RxISR_I2SExt+0x94>)
 8003f68:	e001      	b.n	8003f6e <I2SEx_RxISR_I2SExt+0x1a>
 8003f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6e:	68d8      	ldr	r0, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	1c99      	adds	r1, r3, #2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003f7a:	b282      	uxth	r2, r0
 8003f7c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d121      	bne.n	8003fda <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <I2SEx_RxISR_I2SExt+0x90>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <I2SEx_RxISR_I2SExt+0x50>
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <I2SEx_RxISR_I2SExt+0x94>)
 8003fa2:	e001      	b.n	8003fa8 <I2SEx_RxISR_I2SExt+0x54>
 8003fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <I2SEx_RxISR_I2SExt+0x90>)
 8003fb0:	428b      	cmp	r3, r1
 8003fb2:	d101      	bne.n	8003fb8 <I2SEx_RxISR_I2SExt+0x64>
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <I2SEx_RxISR_I2SExt+0x94>)
 8003fb6:	e001      	b.n	8003fbc <I2SEx_RxISR_I2SExt+0x68>
 8003fb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff ff03 	bl	8003de0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40003800 	.word	0x40003800
 8003fe8:	40003400 	.word	0x40003400

08003fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e267      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d075      	beq.n	80040f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00c      	beq.n	8004030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b85      	ldr	r3, [pc, #532]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800401e:	2b08      	cmp	r3, #8
 8004020:	d112      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b82      	ldr	r3, [pc, #520]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800402e:	d10b      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	4b7e      	ldr	r3, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05b      	beq.n	80040f4 <HAL_RCC_OscConfig+0x108>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d157      	bne.n	80040f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e242      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x74>
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a75      	ldr	r2, [pc, #468]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e01d      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x98>
 800406a:	4b70      	ldr	r3, [pc, #448]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6f      	ldr	r2, [pc, #444]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6c      	ldr	r2, [pc, #432]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004084:	4b69      	ldr	r3, [pc, #420]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a68      	ldr	r2, [pc, #416]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a65      	ldr	r2, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fc ffd2 	bl	800104c <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fc ffce 	bl	800104c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e207      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b5b      	ldr	r3, [pc, #364]	; (800422c <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0xc0>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fc ffbe 	bl	800104c <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fc ffba 	bl	800104c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1f3      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	4b51      	ldr	r3, [pc, #324]	; (800422c <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0xe8>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d063      	beq.n	80041ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004102:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004116:	2b08      	cmp	r3, #8
 8004118:	d11c      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b44      	ldr	r3, [pc, #272]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d116      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1c7      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4937      	ldr	r1, [pc, #220]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	e03a      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800415c:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x244>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fc ff73 	bl	800104c <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416a:	f7fc ff6f 	bl	800104c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1a8      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	4b2b      	ldr	r3, [pc, #172]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4925      	ldr	r1, [pc, #148]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	e015      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCC_OscConfig+0x244>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fc ff52 	bl	800104c <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fc ff4e 	bl	800104c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e187      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	4b1b      	ldr	r3, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d036      	beq.n	8004244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_RCC_OscConfig+0x248>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fc ff32 	bl	800104c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fc ff2e 	bl	800104c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e167      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_OscConfig+0x240>)
 8004200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x200>
 800420a:	e01b      	b.n	8004244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_OscConfig+0x248>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fc ff1b 	bl	800104c <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004218:	e00e      	b.n	8004238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421a:	f7fc ff17 	bl	800104c <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d907      	bls.n	8004238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e150      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800422c:	40023800 	.word	0x40023800
 8004230:	42470000 	.word	0x42470000
 8004234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	4b88      	ldr	r3, [pc, #544]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800423a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ea      	bne.n	800421a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8097 	beq.w	8004380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	4b81      	ldr	r3, [pc, #516]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	4b7d      	ldr	r3, [pc, #500]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a7c      	ldr	r2, [pc, #496]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b7a      	ldr	r3, [pc, #488]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b77      	ldr	r3, [pc, #476]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d118      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428e:	4b74      	ldr	r3, [pc, #464]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a73      	ldr	r2, [pc, #460]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7fc fed7 	bl	800104c <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a2:	f7fc fed3 	bl	800104c <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e10c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	4b6a      	ldr	r3, [pc, #424]	; (8004460 <HAL_RCC_OscConfig+0x474>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x2ea>
 80042c8:	4b64      	ldr	r3, [pc, #400]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a63      	ldr	r2, [pc, #396]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	e01c      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x30c>
 80042de:	4b5f      	ldr	r3, [pc, #380]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a5e      	ldr	r2, [pc, #376]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	4b5c      	ldr	r3, [pc, #368]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a5b      	ldr	r2, [pc, #364]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042f8:	4b58      	ldr	r3, [pc, #352]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a57      	ldr	r2, [pc, #348]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	4b55      	ldr	r3, [pc, #340]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a54      	ldr	r2, [pc, #336]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0304 	bic.w	r3, r3, #4
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fc fe98 	bl	800104c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fc fe94 	bl	800104c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	; 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0cb      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0ee      	beq.n	8004320 <HAL_RCC_OscConfig+0x334>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004344:	f7fc fe82 	bl	800104c <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fc fe7e 	bl	800104c <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	; 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0b5      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004362:	4b3e      	ldr	r3, [pc, #248]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ee      	bne.n	800434c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b39      	ldr	r3, [pc, #228]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	4a38      	ldr	r2, [pc, #224]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a1 	beq.w	80044cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438a:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_RCC_OscConfig+0x470>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b08      	cmp	r3, #8
 8004394:	d05c      	beq.n	8004450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d141      	bne.n	8004422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_RCC_OscConfig+0x478>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fc fe52 	bl	800104c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fc fe4e 	bl	800104c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e087      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	491b      	ldr	r1, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x470>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <HAL_RCC_OscConfig+0x478>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fc fe27 	bl	800104c <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004402:	f7fc fe23 	bl	800104c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e05c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x416>
 8004420:	e054      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_RCC_OscConfig+0x478>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fc fe10 	bl	800104c <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004430:	f7fc fe0c 	bl	800104c <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e045      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_RCC_OscConfig+0x470>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x444>
 800444e:	e03d      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e038      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCC_OscConfig+0x4ec>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d028      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d121      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d11a      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800449e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cc      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b68      	ldr	r3, [pc, #416]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b65      	ldr	r3, [pc, #404]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d119      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b3f      	ldr	r3, [pc, #252]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3b      	ldr	r3, [pc, #236]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e067      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b37      	ldr	r3, [pc, #220]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4934      	ldr	r1, [pc, #208]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fc fd3e 	bl	800104c <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fc fd3a 	bl	800104c <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2b      	ldr	r3, [pc, #172]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d20c      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	; (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	; (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fc9e 	bl	8000fc4 <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	0800928c 	.word	0x0800928c
 80046a0:	20000000 	.word	0x20000000
 80046a4:	20000004 	.word	0x20000004

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b094      	sub	sp, #80	; 0x50
 80046ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	2300      	movs	r3, #0
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b8:	2300      	movs	r3, #0
 80046ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4b79      	ldr	r3, [pc, #484]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x40>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f200 80e1 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046da:	e0db      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b73      	ldr	r3, [pc, #460]	; (80048ac <HAL_RCC_GetSysClockFreq+0x204>)
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80046e0:	e0db      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b73      	ldr	r3, [pc, #460]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80046e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046e6:	e0d8      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e8:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f2:	4b6d      	ldr	r3, [pc, #436]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d063      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b6a      	ldr	r3, [pc, #424]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	2200      	movs	r2, #0
 8004706:	63bb      	str	r3, [r7, #56]	; 0x38
 8004708:	63fa      	str	r2, [r7, #60]	; 0x3c
 800470a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800470c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
 8004716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800471a:	4622      	mov	r2, r4
 800471c:	462b      	mov	r3, r5
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	0159      	lsls	r1, r3, #5
 8004728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800472c:	0150      	lsls	r0, r2, #5
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4621      	mov	r1, r4
 8004734:	1a51      	subs	r1, r2, r1
 8004736:	6139      	str	r1, [r7, #16]
 8004738:	4629      	mov	r1, r5
 800473a:	eb63 0301 	sbc.w	r3, r3, r1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800474c:	4659      	mov	r1, fp
 800474e:	018b      	lsls	r3, r1, #6
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004756:	4651      	mov	r1, sl
 8004758:	018a      	lsls	r2, r1, #6
 800475a:	4651      	mov	r1, sl
 800475c:	ebb2 0801 	subs.w	r8, r2, r1
 8004760:	4659      	mov	r1, fp
 8004762:	eb63 0901 	sbc.w	r9, r3, r1
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800477a:	4690      	mov	r8, r2
 800477c:	4699      	mov	r9, r3
 800477e:	4623      	mov	r3, r4
 8004780:	eb18 0303 	adds.w	r3, r8, r3
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	462b      	mov	r3, r5
 8004788:	eb49 0303 	adc.w	r3, r9, r3
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800479a:	4629      	mov	r1, r5
 800479c:	024b      	lsls	r3, r1, #9
 800479e:	4621      	mov	r1, r4
 80047a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047a4:	4621      	mov	r1, r4
 80047a6:	024a      	lsls	r2, r1, #9
 80047a8:	4610      	mov	r0, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ae:	2200      	movs	r2, #0
 80047b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047b8:	f7fb fd06 	bl	80001c8 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	e058      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	2200      	movs	r2, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	4611      	mov	r1, r2
 80047d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	0159      	lsls	r1, r3, #5
 80047ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f2:	0150      	lsls	r0, r2, #5
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4641      	mov	r1, r8
 80047fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb63 0b01 	sbc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004818:	ebb2 040a 	subs.w	r4, r2, sl
 800481c:	eb63 050b 	sbc.w	r5, r3, fp
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	00eb      	lsls	r3, r5, #3
 800482a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482e:	00e2      	lsls	r2, r4, #3
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	4643      	mov	r3, r8
 8004836:	18e3      	adds	r3, r4, r3
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	464b      	mov	r3, r9
 800483c:	eb45 0303 	adc.w	r3, r5, r3
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484e:	4629      	mov	r1, r5
 8004850:	028b      	lsls	r3, r1, #10
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004858:	4621      	mov	r1, r4
 800485a:	028a      	lsls	r2, r1, #10
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004862:	2200      	movs	r2, #0
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	61fa      	str	r2, [r7, #28]
 8004868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486c:	f7fb fcac 	bl	80001c8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800488a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004896:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800489c:	4618      	mov	r0, r3
 800489e:	3750      	adds	r7, #80	; 0x50
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	0800929c 	.word	0x0800929c

080048f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d105      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004918:	2b00      	cmp	r3, #0
 800491a:	d035      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800491c:	4b62      	ldr	r3, [pc, #392]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004922:	f7fc fb93 	bl	800104c <HAL_GetTick>
 8004926:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800492a:	f7fc fb8f 	bl	800104c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e0b0      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800493c:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	019a      	lsls	r2, r3, #6
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	071b      	lsls	r3, r3, #28
 8004954:	4955      	ldr	r1, [pc, #340]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800495c:	4b52      	ldr	r3, [pc, #328]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004962:	f7fc fb73 	bl	800104c <HAL_GetTick>
 8004966:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800496a:	f7fc fb6f 	bl	800104c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e090      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800497c:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8083 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b44      	ldr	r3, [pc, #272]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	4a43      	ldr	r2, [pc, #268]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a4:	6413      	str	r3, [r2, #64]	; 0x40
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049b2:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3e      	ldr	r2, [pc, #248]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049be:	f7fc fb45 	bl	800104c <HAL_GetTick>
 80049c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049c4:	e008      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049c6:	f7fc fb41 	bl	800104c <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e062      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049d8:	4b35      	ldr	r3, [pc, #212]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0f0      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049e4:	4b31      	ldr	r3, [pc, #196]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d028      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a02:	4b2a      	ldr	r3, [pc, #168]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a12:	4b28      	ldr	r3, [pc, #160]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004a18:	4a24      	ldr	r2, [pc, #144]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a1e:	4b23      	ldr	r3, [pc, #140]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d114      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fc fb0f 	bl	800104c <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a32:	f7fc fb0b 	bl	800104c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e02a      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ee      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a60:	d10d      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a76:	490d      	ldr	r1, [pc, #52]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	608b      	str	r3, [r1, #8]
 8004a7c:	e005      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	4a0a      	ldr	r2, [pc, #40]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a88:	6093      	str	r3, [r2, #8]
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a96:	4905      	ldr	r1, [pc, #20]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	42470068 	.word	0x42470068
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	42470e40 	.word	0x42470e40

08004ab8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d13e      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d12f      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004aec:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004aee:	617b      	str	r3, [r7, #20]
          break;
 8004af0:	e02f      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004af2:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afe:	d108      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b00:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b08:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e007      	b.n	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004b12:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b3c:	0f1b      	lsrs	r3, r3, #28
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
          break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
          break;
 8004b50:	bf00      	nop
        }
      }
      break;
 8004b52:	bf00      	nop
    }
  }
  return frequency;
 8004b54:	697b      	ldr	r3, [r7, #20]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	00bb8000 	.word	0x00bb8000
 8004b6c:	007a1200 	.word	0x007a1200
 8004b70:	00f42400 	.word	0x00f42400

08004b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e07b      	b.n	8004c7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b96:	d009      	beq.n	8004bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	61da      	str	r2, [r3, #28]
 8004b9e:	e005      	b.n	8004bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc f854 	bl	8000c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	ea42 0103 	orr.w	r1, r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	0c1b      	lsrs	r3, r3, #16
 8004c4a:	f003 0104 	and.w	r1, r3, #4
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f003 0210 	and.w	r2, r3, #16
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b082      	sub	sp, #8
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e041      	b.n	8004d1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fc f829 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f000 fad9 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e041      	b.n	8004dba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f839 	bl	8004dc2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 fa8a 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_TIM_PWM_Start+0x24>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	e022      	b.n	8004e42 <HAL_TIM_PWM_Start+0x6a>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d109      	bne.n	8004e16 <HAL_TIM_PWM_Start+0x3e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	bf14      	ite	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	2300      	moveq	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e015      	b.n	8004e42 <HAL_TIM_PWM_Start+0x6a>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d109      	bne.n	8004e30 <HAL_TIM_PWM_Start+0x58>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e008      	b.n	8004e42 <HAL_TIM_PWM_Start+0x6a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e07c      	b.n	8004f44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x82>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e58:	e013      	b.n	8004e82 <HAL_TIM_PWM_Start+0xaa>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d104      	bne.n	8004e6a <HAL_TIM_PWM_Start+0x92>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e68:	e00b      	b.n	8004e82 <HAL_TIM_PWM_Start+0xaa>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0xa2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	e003      	b.n	8004e82 <HAL_TIM_PWM_Start+0xaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2201      	movs	r2, #1
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fce0 	bl	8005850 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2d      	ldr	r2, [pc, #180]	; (8004f4c <HAL_TIM_PWM_Start+0x174>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_PWM_Start+0xcc>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2c      	ldr	r2, [pc, #176]	; (8004f50 <HAL_TIM_PWM_Start+0x178>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <HAL_TIM_PWM_Start+0xd0>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_PWM_Start+0xd2>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <HAL_TIM_PWM_Start+0x174>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d01d      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <HAL_TIM_PWM_Start+0x17c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a1d      	ldr	r2, [pc, #116]	; (8004f58 <HAL_TIM_PWM_Start+0x180>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1c      	ldr	r2, [pc, #112]	; (8004f5c <HAL_TIM_PWM_Start+0x184>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	; (8004f50 <HAL_TIM_PWM_Start+0x178>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <HAL_TIM_PWM_Start+0x188>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIM_PWM_Start+0x136>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <HAL_TIM_PWM_Start+0x18c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d111      	bne.n	8004f32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b06      	cmp	r3, #6
 8004f1e:	d010      	beq.n	8004f42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	e007      	b.n	8004f42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010400 	.word	0x40010400
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40014000 	.word	0x40014000
 8004f64:	40001800 	.word	0x40001800

08004f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0ae      	b.n	80050e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	f200 809f 	bhi.w	80050d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	080050d5 	.word	0x080050d5
 8004fa4:	080050d5 	.word	0x080050d5
 8004fa8:	080050d5 	.word	0x080050d5
 8004fac:	08005011 	.word	0x08005011
 8004fb0:	080050d5 	.word	0x080050d5
 8004fb4:	080050d5 	.word	0x080050d5
 8004fb8:	080050d5 	.word	0x080050d5
 8004fbc:	08005053 	.word	0x08005053
 8004fc0:	080050d5 	.word	0x080050d5
 8004fc4:	080050d5 	.word	0x080050d5
 8004fc8:	080050d5 	.word	0x080050d5
 8004fcc:	08005093 	.word	0x08005093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f9f0 	bl	80053bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0208 	orr.w	r2, r2, #8
 8004fea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0204 	bic.w	r2, r2, #4
 8004ffa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6999      	ldr	r1, [r3, #24]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	619a      	str	r2, [r3, #24]
      break;
 800500e:	e064      	b.n	80050da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fa40 	bl	800549c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800502a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699a      	ldr	r2, [r3, #24]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6999      	ldr	r1, [r3, #24]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	021a      	lsls	r2, r3, #8
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	619a      	str	r2, [r3, #24]
      break;
 8005050:	e043      	b.n	80050da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68b9      	ldr	r1, [r7, #8]
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fa95 	bl	8005588 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0208 	orr.w	r2, r2, #8
 800506c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0204 	bic.w	r2, r2, #4
 800507c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69d9      	ldr	r1, [r3, #28]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	61da      	str	r2, [r3, #28]
      break;
 8005090:	e023      	b.n	80050da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fae9 	bl	8005670 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	69da      	ldr	r2, [r3, #28]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69d9      	ldr	r1, [r3, #28]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	021a      	lsls	r2, r3, #8
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	61da      	str	r2, [r3, #28]
      break;
 80050d2:	e002      	b.n	80050da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
      break;
 80050d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_TIM_ConfigClockSource+0x1c>
 8005104:	2302      	movs	r3, #2
 8005106:	e0b4      	b.n	8005272 <HAL_TIM_ConfigClockSource+0x186>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005126:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005140:	d03e      	beq.n	80051c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005146:	f200 8087 	bhi.w	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	f000 8086 	beq.w	800525e <HAL_TIM_ConfigClockSource+0x172>
 8005152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005156:	d87f      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005158:	2b70      	cmp	r3, #112	; 0x70
 800515a:	d01a      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0xa6>
 800515c:	2b70      	cmp	r3, #112	; 0x70
 800515e:	d87b      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005160:	2b60      	cmp	r3, #96	; 0x60
 8005162:	d050      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0x11a>
 8005164:	2b60      	cmp	r3, #96	; 0x60
 8005166:	d877      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005168:	2b50      	cmp	r3, #80	; 0x50
 800516a:	d03c      	beq.n	80051e6 <HAL_TIM_ConfigClockSource+0xfa>
 800516c:	2b50      	cmp	r3, #80	; 0x50
 800516e:	d873      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d058      	beq.n	8005226 <HAL_TIM_ConfigClockSource+0x13a>
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d86f      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b30      	cmp	r3, #48	; 0x30
 800517a:	d064      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x15a>
 800517c:	2b30      	cmp	r3, #48	; 0x30
 800517e:	d86b      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b20      	cmp	r3, #32
 8005182:	d060      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	2b20      	cmp	r3, #32
 8005186:	d867      	bhi.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b00      	cmp	r3, #0
 800518a:	d05c      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x15a>
 800518c:	2b10      	cmp	r3, #16
 800518e:	d05a      	beq.n	8005246 <HAL_TIM_ConfigClockSource+0x15a>
 8005190:	e062      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6899      	ldr	r1, [r3, #8]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f000 fb35 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	609a      	str	r2, [r3, #8]
      break;
 80051be:	e04f      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	6899      	ldr	r1, [r3, #8]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f000 fb1e 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e2:	609a      	str	r2, [r3, #8]
      break;
 80051e4:	e03c      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	6859      	ldr	r1, [r3, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f000 fa92 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2150      	movs	r1, #80	; 0x50
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 faeb 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005204:	e02c      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6859      	ldr	r1, [r3, #4]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	461a      	mov	r2, r3
 8005214:	f000 fab1 	bl	800577a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2160      	movs	r1, #96	; 0x60
 800521e:	4618      	mov	r0, r3
 8005220:	f000 fadb 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005224:	e01c      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6859      	ldr	r1, [r3, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	461a      	mov	r2, r3
 8005234:	f000 fa72 	bl	800571c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2140      	movs	r1, #64	; 0x40
 800523e:	4618      	mov	r0, r3
 8005240:	f000 facb 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005244:	e00c      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f000 fac2 	bl	80057da <TIM_ITRx_SetConfig>
      break;
 8005256:	e003      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
      break;
 800525c:	e000      	b.n	8005260 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800525e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3a      	ldr	r2, [pc, #232]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <TIM_Base_SetConfig+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d027      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d023      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <TIM_Base_SetConfig+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <TIM_Base_SetConfig+0x130>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	615a      	str	r2, [r3, #20]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40001800 	.word	0x40001800
 80053b4:	40001c00 	.word	0x40001c00
 80053b8:	40002000 	.word	0x40002000

080053bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f023 0302 	bic.w	r3, r3, #2
 8005404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a20      	ldr	r2, [pc, #128]	; (8005494 <TIM_OC1_SetConfig+0xd8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC1_SetConfig+0x64>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1f      	ldr	r2, [pc, #124]	; (8005498 <TIM_OC1_SetConfig+0xdc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d10c      	bne.n	800543a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f023 0308 	bic.w	r3, r3, #8
 8005426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	4313      	orrs	r3, r2
 8005430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 0304 	bic.w	r3, r3, #4
 8005438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a15      	ldr	r2, [pc, #84]	; (8005494 <TIM_OC1_SetConfig+0xd8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC1_SetConfig+0x8e>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a14      	ldr	r2, [pc, #80]	; (8005498 <TIM_OC1_SetConfig+0xdc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d111      	bne.n	800546e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000
 8005498:	40010400 	.word	0x40010400

0800549c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	f023 0210 	bic.w	r2, r3, #16
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	021b      	lsls	r3, r3, #8
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f023 0320 	bic.w	r3, r3, #32
 80054e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a22      	ldr	r2, [pc, #136]	; (8005580 <TIM_OC2_SetConfig+0xe4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0x68>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <TIM_OC2_SetConfig+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d10d      	bne.n	8005520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800550a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800551e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <TIM_OC2_SetConfig+0xe4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC2_SetConfig+0x94>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <TIM_OC2_SetConfig+0xe8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d113      	bne.n	8005558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800553e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40010400 	.word	0x40010400

08005588 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a21      	ldr	r2, [pc, #132]	; (8005668 <TIM_OC3_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC3_SetConfig+0x66>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a20      	ldr	r2, [pc, #128]	; (800566c <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10d      	bne.n	800560a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	021b      	lsls	r3, r3, #8
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <TIM_OC3_SetConfig+0xe0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_OC3_SetConfig+0x92>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <TIM_OC3_SetConfig+0xe4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d113      	bne.n	8005642 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	621a      	str	r2, [r3, #32]
}
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	40010000 	.word	0x40010000
 800566c:	40010400 	.word	0x40010400

08005670 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	021b      	lsls	r3, r3, #8
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	031b      	lsls	r3, r3, #12
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <TIM_OC4_SetConfig+0xa4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_OC4_SetConfig+0x68>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a11      	ldr	r2, [pc, #68]	; (8005718 <TIM_OC4_SetConfig+0xa8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d109      	bne.n	80056ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	621a      	str	r2, [r3, #32]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40010000 	.word	0x40010000
 8005718:	40010400 	.word	0x40010400

0800571c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f023 030a 	bic.w	r3, r3, #10
 8005758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577a:	b480      	push	{r7}
 800577c:	b087      	sub	sp, #28
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f023 0210 	bic.w	r2, r3, #16
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	031b      	lsls	r3, r3, #12
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f043 0307 	orr.w	r3, r3, #7
 80057fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	609a      	str	r2, [r3, #8]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	431a      	orrs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	2201      	movs	r2, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1a      	ldr	r2, [r3, #32]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e05a      	b.n	800596a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a21      	ldr	r2, [pc, #132]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d022      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005900:	d01d      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1b      	ldr	r2, [pc, #108]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1a      	ldr	r2, [pc, #104]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a18      	ldr	r2, [pc, #96]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d10c      	bne.n	8005958 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40010400 	.word	0x40010400
 800598c:	40014000 	.word	0x40014000
 8005990:	40001800 	.word	0x40001800

08005994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e03d      	b.n	8005a2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a38:	b084      	sub	sp, #16
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
 8005a42:	f107 001c 	add.w	r0, r7, #28
 8005a46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d122      	bne.n	8005a96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d105      	bne.n	8005a8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9c0 	bl	8005e10 <USB_CoreReset>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]
 8005a94:	e01a      	b.n	8005acc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f9b4 	bl	8005e10 <USB_CoreReset>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d106      	bne.n	8005ac0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38
 8005abe:	e005      	b.n	8005acc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d10b      	bne.n	8005aea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f043 0206 	orr.w	r2, r3, #6
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005af6:	b004      	add	sp, #16
 8005af8:	4770      	bx	lr

08005afa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f043 0201 	orr.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f023 0201 	bic.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	460b      	mov	r3, r1
 8005b48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d115      	bne.n	8005b8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b6c:	2001      	movs	r0, #1
 8005b6e:	f7fb fa79 	bl	8001064 <HAL_Delay>
      ms++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f93a 	bl	8005df2 <USB_GetMode>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d01e      	beq.n	8005bc2 <USB_SetCurrentMode+0x84>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b31      	cmp	r3, #49	; 0x31
 8005b88:	d9f0      	bls.n	8005b6c <USB_SetCurrentMode+0x2e>
 8005b8a:	e01a      	b.n	8005bc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b8c:	78fb      	ldrb	r3, [r7, #3]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d115      	bne.n	8005bbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	f7fb fa60 	bl	8001064 <HAL_Delay>
      ms++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f921 	bl	8005df2 <USB_GetMode>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <USB_SetCurrentMode+0x84>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b31      	cmp	r3, #49	; 0x31
 8005bba:	d9f0      	bls.n	8005b9e <USB_SetCurrentMode+0x60>
 8005bbc:	e001      	b.n	8005bc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e005      	b.n	8005bce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b32      	cmp	r3, #50	; 0x32
 8005bc6:	d101      	bne.n	8005bcc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e000      	b.n	8005bce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3301      	adds	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a13      	ldr	r2, [pc, #76]	; (8005c3c <USB_FlushTxFifo+0x64>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d901      	bls.n	8005bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e01b      	b.n	8005c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	daf2      	bge.n	8005be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	019b      	lsls	r3, r3, #6
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	3301      	adds	r3, #1
 8005c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <USB_FlushTxFifo+0x64>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d901      	bls.n	8005c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e006      	b.n	8005c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d0f0      	beq.n	8005c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	00030d40 	.word	0x00030d40

08005c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <USB_FlushRxFifo+0x5c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e018      	b.n	8005c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	daf2      	bge.n	8005c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2210      	movs	r2, #16
 8005c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <USB_FlushRxFifo+0x5c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e006      	b.n	8005c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b10      	cmp	r3, #16
 8005c8c:	d0f0      	beq.n	8005c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	00030d40 	.word	0x00030d40

08005ca0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	460b      	mov	r3, r1
 8005cb0:	71fb      	strb	r3, [r7, #7]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d123      	bne.n	8005d0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cc6:	88bb      	ldrh	r3, [r7, #4]
 8005cc8:	3303      	adds	r3, #3
 8005cca:	089b      	lsrs	r3, r3, #2
 8005ccc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e018      	b.n	8005d06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	031a      	lsls	r2, r3, #12
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	3301      	adds	r3, #1
 8005cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	3301      	adds	r3, #1
 8005d04:	61bb      	str	r3, [r7, #24]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d3e2      	bcc.n	8005cd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3724      	adds	r7, #36	; 0x24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b08b      	sub	sp, #44	; 0x2c
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d3a:	88fb      	ldrh	r3, [r7, #6]
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	623b      	str	r3, [r7, #32]
 8005d46:	e014      	b.n	8005d72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	3301      	adds	r3, #1
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	3301      	adds	r3, #1
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	3301      	adds	r3, #1
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	623b      	str	r3, [r7, #32]
 8005d72:	6a3a      	ldr	r2, [r7, #32]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d3e6      	bcc.n	8005d48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d7a:	8bfb      	ldrh	r3, [r7, #30]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d01e      	beq.n	8005dbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	701a      	strb	r2, [r3, #0]
      i++;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	3301      	adds	r3, #1
 8005daa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	3301      	adds	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005db2:	8bfb      	ldrh	r3, [r7, #30]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005db8:	8bfb      	ldrh	r3, [r7, #30]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ea      	bne.n	8005d94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	372c      	adds	r7, #44	; 0x2c
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de4:	68fb      	ldr	r3, [r7, #12]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
	...

08005e10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <USB_CoreReset+0x64>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e01b      	b.n	8005e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	daf2      	bge.n	8005e1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f043 0201 	orr.w	r2, r3, #1
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <USB_CoreReset+0x64>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d901      	bls.n	8005e58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e006      	b.n	8005e66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d0f0      	beq.n	8005e46 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	00030d40 	.word	0x00030d40

08005e78 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e78:	b084      	sub	sp, #16
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d018      	beq.n	8005f00 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d10a      	bne.n	8005eea <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ee2:	f043 0304 	orr.w	r3, r3, #4
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	e014      	b.n	8005f14 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ef8:	f023 0304 	bic.w	r3, r3, #4
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	e009      	b.n	8005f14 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f0e:	f023 0304 	bic.w	r3, r3, #4
 8005f12:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f14:	2110      	movs	r1, #16
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fe5e 	bl	8005bd8 <USB_FlushTxFifo>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fe8a 	bl	8005c40 <USB_FlushRxFifo>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e015      	b.n	8005f68 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	3301      	adds	r3, #1
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d3e5      	bcc.n	8005f3c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f90:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <USB_HostInit+0x16c>)
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <USB_HostInit+0x170>)
 8005f9c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005fa0:	e009      	b.n	8005fb6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a10      	ldr	r2, [pc, #64]	; (8005fec <USB_HostInit+0x174>)
 8005fac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a0f      	ldr	r2, [pc, #60]	; (8005ff0 <USB_HostInit+0x178>)
 8005fb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d105      	bne.n	8005fc8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f043 0210 	orr.w	r2, r3, #16
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <USB_HostInit+0x17c>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe0:	b004      	add	sp, #16
 8005fe2:	4770      	bx	lr
 8005fe4:	01000200 	.word	0x01000200
 8005fe8:	00e00300 	.word	0x00e00300
 8005fec:	00600080 	.word	0x00600080
 8005ff0:	004000e0 	.word	0x004000e0
 8005ff4:	a3200008 	.word	0xa3200008

08005ff8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	460b      	mov	r3, r1
 8006002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006030:	4313      	orrs	r3, r2
 8006032:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006040:	461a      	mov	r2, r3
 8006042:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006046:	6053      	str	r3, [r2, #4]
 8006048:	e009      	b.n	800605e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d106      	bne.n	800605e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006056:	461a      	mov	r2, r3
 8006058:	f241 7370 	movw	r3, #6000	; 0x1770
 800605c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800608c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800609a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800609c:	2064      	movs	r0, #100	; 0x64
 800609e:	f7fa ffe1 	bl	8001064 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80060b0:	200a      	movs	r0, #10
 80060b2:	f7fa ffd7 	bl	8001064 <HAL_Delay>

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	460b      	mov	r3, r1
 80060ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d109      	bne.n	8006104 <USB_DriveVbus+0x44>
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d106      	bne.n	8006104 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006102:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800610a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610e:	d109      	bne.n	8006124 <USB_DriveVbus+0x64>
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800611e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006122:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	0c5b      	lsrs	r3, r3, #17
 8006150:	f003 0303 	and.w	r3, r3, #3
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	b29b      	uxth	r3, r3
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	4608      	mov	r0, r1
 800618e:	4611      	mov	r1, r2
 8006190:	461a      	mov	r2, r3
 8006192:	4603      	mov	r3, r0
 8006194:	70fb      	strb	r3, [r7, #3]
 8006196:	460b      	mov	r3, r1
 8006198:	70bb      	strb	r3, [r7, #2]
 800619a:	4613      	mov	r3, r2
 800619c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	461a      	mov	r2, r3
 80061b4:	f04f 33ff 	mov.w	r3, #4294967295
 80061b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d87e      	bhi.n	80062c0 <USB_HC_Init+0x13c>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <USB_HC_Init+0x44>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061d9 	.word	0x080061d9
 80061cc:	08006283 	.word	0x08006283
 80061d0:	080061d9 	.word	0x080061d9
 80061d4:	08006245 	.word	0x08006245
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	461a      	mov	r2, r3
 80061e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80061ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80061ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da10      	bge.n	8006216 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	440a      	add	r2, r1
 800620a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006212:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006214:	e057      	b.n	80062c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621e:	2b00      	cmp	r3, #0
 8006220:	d051      	beq.n	80062c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	78fa      	ldrb	r2, [r7, #3]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	440a      	add	r2, r1
 8006238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006240:	60d3      	str	r3, [r2, #12]
      break;
 8006242:	e040      	b.n	80062c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	461a      	mov	r2, r3
 8006252:	f240 639d 	movw	r3, #1693	; 0x69d
 8006256:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006258:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	da34      	bge.n	80062ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006260:	78fb      	ldrb	r3, [r7, #3]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	4413      	add	r3, r2
 8006268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	440a      	add	r2, r1
 8006276:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800627a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006280:	e023      	b.n	80062ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	4413      	add	r3, r2
 800628a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628e:	461a      	mov	r2, r3
 8006290:	f240 2325 	movw	r3, #549	; 0x225
 8006294:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006296:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800629a:	2b00      	cmp	r3, #0
 800629c:	da17      	bge.n	80062ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80062bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80062be:	e006      	b.n	80062ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	77fb      	strb	r3, [r7, #31]
      break;
 80062c4:	e004      	b.n	80062d0 <USB_HC_Init+0x14c>
      break;
 80062c6:	bf00      	nop
 80062c8:	e002      	b.n	80062d0 <USB_HC_Init+0x14c>
      break;
 80062ca:	bf00      	nop
 80062cc:	e000      	b.n	80062d0 <USB_HC_Init+0x14c>
      break;
 80062ce:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ea:	f043 0302 	orr.w	r3, r3, #2
 80062ee:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	2101      	movs	r1, #1
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	6939      	ldr	r1, [r7, #16]
 8006306:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800630a:	4313      	orrs	r3, r2
 800630c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800631a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800631e:	2b00      	cmp	r3, #0
 8006320:	da03      	bge.n	800632a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006326:	61bb      	str	r3, [r7, #24]
 8006328:	e001      	b.n	800632e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff feff 	bl	8006132 <USB_GetHostSpeed>
 8006334:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006336:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800633a:	2b02      	cmp	r3, #2
 800633c:	d106      	bne.n	800634c <USB_HC_Init+0x1c8>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b02      	cmp	r3, #2
 8006342:	d003      	beq.n	800634c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	e001      	b.n	8006350 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006350:	787b      	ldrb	r3, [r7, #1]
 8006352:	059b      	lsls	r3, r3, #22
 8006354:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006358:	78bb      	ldrb	r3, [r7, #2]
 800635a:	02db      	lsls	r3, r3, #11
 800635c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006360:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006362:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006366:	049b      	lsls	r3, r3, #18
 8006368:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800636c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800636e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006370:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006374:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	0159      	lsls	r1, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	440b      	add	r3, r1
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800638c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800638e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006392:	2b03      	cmp	r3, #3
 8006394:	d003      	beq.n	800639e <USB_HC_Init+0x21a>
 8006396:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10f      	bne.n	80063be <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	78fa      	ldrb	r2, [r7, #3]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063be:	7ffb      	ldrb	r3, [r7, #31]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3720      	adds	r7, #32
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b08c      	sub	sp, #48	; 0x30
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	4613      	mov	r3, r2
 80063d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80063e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d02d      	beq.n	800644e <USB_HC_StartXfer+0x86>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	791b      	ldrb	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d129      	bne.n	800644e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d117      	bne.n	8006430 <USB_HC_StartXfer+0x68>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	79db      	ldrb	r3, [r3, #7]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <USB_HC_StartXfer+0x48>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	79db      	ldrb	r3, [r3, #7]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d10f      	bne.n	8006430 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	4413      	add	r3, r2
 8006418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	0151      	lsls	r1, r2, #5
 8006422:	6a3a      	ldr	r2, [r7, #32]
 8006424:	440a      	add	r2, r1
 8006426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <USB_HC_StartXfer+0x86>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	795b      	ldrb	r3, [r3, #5]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d107      	bne.n	800644e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	4619      	mov	r1, r3
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 fa0f 	bl	8006868 <USB_DoPing>
      return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e0f8      	b.n	8006640 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d018      	beq.n	8006488 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	8912      	ldrh	r2, [r2, #8]
 800645e:	4413      	add	r3, r2
 8006460:	3b01      	subs	r3, #1
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	8912      	ldrh	r2, [r2, #8]
 8006466:	fbb3 f3f2 	udiv	r3, r3, r2
 800646a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800646c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800646e:	8b7b      	ldrh	r3, [r7, #26]
 8006470:	429a      	cmp	r2, r3
 8006472:	d90b      	bls.n	800648c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006474:	8b7b      	ldrh	r3, [r7, #26]
 8006476:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006478:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	8912      	ldrh	r2, [r2, #8]
 800647e:	fb03 f202 	mul.w	r2, r3, r2
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	611a      	str	r2, [r3, #16]
 8006486:	e001      	b.n	800648c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006488:	2301      	movs	r3, #1
 800648a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	78db      	ldrb	r3, [r3, #3]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d007      	beq.n	80064a4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006494:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	8912      	ldrh	r2, [r2, #8]
 800649a:	fb03 f202 	mul.w	r2, r3, r2
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	611a      	str	r2, [r3, #16]
 80064a2:	e003      	b.n	80064ac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	695a      	ldr	r2, [r3, #20]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064b6:	04d9      	lsls	r1, r3, #19
 80064b8:	4b63      	ldr	r3, [pc, #396]	; (8006648 <USB_HC_StartXfer+0x280>)
 80064ba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064bc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	7a9b      	ldrb	r3, [r3, #10]
 80064c2:	075b      	lsls	r3, r3, #29
 80064c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064c8:	69f9      	ldr	r1, [r7, #28]
 80064ca:	0148      	lsls	r0, r1, #5
 80064cc:	6a39      	ldr	r1, [r7, #32]
 80064ce:	4401      	add	r1, r0
 80064d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064d4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064d6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	68d9      	ldr	r1, [r3, #12]
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ee:	460a      	mov	r2, r1
 80064f0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf0c      	ite	eq
 8006502:	2301      	moveq	r3, #1
 8006504:	2300      	movne	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69fa      	ldr	r2, [r7, #28]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	440a      	add	r2, r1
 8006520:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006524:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006528:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	4413      	add	r3, r2
 8006532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	7e7b      	ldrb	r3, [r7, #25]
 800653a:	075b      	lsls	r3, r3, #29
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	0148      	lsls	r0, r1, #5
 8006540:	6a39      	ldr	r1, [r7, #32]
 8006542:	4401      	add	r1, r0
 8006544:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	4413      	add	r3, r2
 8006554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006562:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	78db      	ldrb	r3, [r3, #3]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d004      	beq.n	8006576 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	e003      	b.n	800657e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800657c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006584:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	461a      	mov	r2, r3
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e04e      	b.n	8006640 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	78db      	ldrb	r3, [r3, #3]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d149      	bne.n	800663e <USB_HC_StartXfer+0x276>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d045      	beq.n	800663e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	79db      	ldrb	r3, [r3, #7]
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d830      	bhi.n	800661c <USB_HC_StartXfer+0x254>
 80065ba:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USB_HC_StartXfer+0x1f8>)
 80065bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c0:	080065d1 	.word	0x080065d1
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065d1 	.word	0x080065d1
 80065cc:	080065f5 	.word	0x080065f5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	3303      	adds	r3, #3
 80065d6:	089b      	lsrs	r3, r3, #2
 80065d8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80065da:	8afa      	ldrh	r2, [r7, #22]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d91c      	bls.n	8006620 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80065f2:	e015      	b.n	8006620 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	3303      	adds	r3, #3
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80065fe:	8afa      	ldrh	r2, [r7, #22]
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	b29b      	uxth	r3, r3
 800660a:	429a      	cmp	r2, r3
 800660c:	d90a      	bls.n	8006624 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	619a      	str	r2, [r3, #24]
        }
        break;
 800661a:	e003      	b.n	8006624 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800661c:	bf00      	nop
 800661e:	e002      	b.n	8006626 <USB_HC_StartXfer+0x25e>
        break;
 8006620:	bf00      	nop
 8006622:	e000      	b.n	8006626 <USB_HC_StartXfer+0x25e>
        break;
 8006624:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68d9      	ldr	r1, [r3, #12]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	785a      	ldrb	r2, [r3, #1]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	b29b      	uxth	r3, r3
 8006634:	2000      	movs	r0, #0
 8006636:	9000      	str	r0, [sp, #0]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff fb31 	bl	8005ca0 <USB_WritePacket>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3728      	adds	r7, #40	; 0x28
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	1ff80000 	.word	0x1ff80000

0800664c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	b29b      	uxth	r3, r3
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800666e:	b480      	push	{r7}
 8006670:	b089      	sub	sp, #36	; 0x24
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	0c9b      	lsrs	r3, r3, #18
 8006696:	f003 0303 	and.w	r3, r3, #3
 800669a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	0fdb      	lsrs	r3, r3, #31
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d104      	bne.n	80066c8 <USB_HC_Halt+0x5a>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e0c8      	b.n	800685a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <USB_HC_Halt+0x66>
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d163      	bne.n	800679c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066f2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0320 	and.w	r3, r3, #32
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 80ab 	bne.w	8006858 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d133      	bne.n	8006776 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	440a      	add	r2, r1
 8006724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006728:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800672c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006748:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800675a:	d81d      	bhi.n	8006798 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006772:	d0ec      	beq.n	800674e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006774:	e070      	b.n	8006858 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	69fb      	ldr	r3, [r7, #28]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	69fa      	ldr	r2, [r7, #28]
 800678a:	440a      	add	r2, r1
 800678c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006794:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006796:	e05f      	b.n	8006858 <USB_HC_Halt+0x1ea>
            break;
 8006798:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800679a:	e05d      	b.n	8006858 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d133      	bne.n	8006834 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	69fa      	ldr	r2, [r7, #28]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	440a      	add	r2, r1
 8006802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800680a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006818:	d81d      	bhi.n	8006856 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800682c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006830:	d0ec      	beq.n	800680c <USB_HC_Halt+0x19e>
 8006832:	e011      	b.n	8006858 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	0151      	lsls	r1, r2, #5
 8006846:	69fa      	ldr	r2, [r7, #28]
 8006848:	440a      	add	r2, r1
 800684a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e000      	b.n	8006858 <USB_HC_Halt+0x1ea>
          break;
 8006856:	bf00      	nop
    }
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	; 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	460b      	mov	r3, r1
 8006872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800687c:	2301      	movs	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	04da      	lsls	r2, r3, #19
 8006884:	4b15      	ldr	r3, [pc, #84]	; (80068dc <USB_DoPing+0x74>)
 8006886:	4013      	ands	r3, r2
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	440a      	add	r2, r1
 8006890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006898:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068c6:	461a      	mov	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	371c      	adds	r7, #28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	1ff80000 	.word	0x1ff80000

080068e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff f911 	bl	8005b1c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068fa:	2110      	movs	r1, #16
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff f96b 	bl	8005bd8 <USB_FlushTxFifo>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff f997 	bl	8005c40 <USB_FlushRxFifo>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e01f      	b.n	8006962 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	4413      	add	r3, r2
 800692a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006938:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006940:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006948:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	4413      	add	r3, r2
 8006952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006956:	461a      	mov	r2, r3
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	3301      	adds	r3, #1
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b0f      	cmp	r3, #15
 8006966:	d9dc      	bls.n	8006922 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006968:	2300      	movs	r3, #0
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	e034      	b.n	80069d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	4413      	add	r3, r2
 8006976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006984:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800698c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006994:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	461a      	mov	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069b4:	d80c      	bhi.n	80069d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069cc:	d0ec      	beq.n	80069a8 <USB_StopHost+0xc8>
 80069ce:	e000      	b.n	80069d2 <USB_StopHost+0xf2>
        break;
 80069d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	3301      	adds	r3, #1
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b0f      	cmp	r3, #15
 80069dc:	d9c7      	bls.n	800696e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069e4:	461a      	mov	r2, r3
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff f880 	bl	8005afa <USB_EnableGlobalInt>

  return ret;
 80069fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3720      	adds	r7, #32
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b089      	sub	sp, #36	; 0x24
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	2202      	movs	r2, #2
 8006a10:	2102      	movs	r1, #2
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fc66 	bl	80072e4 <USBH_FindInterface>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	2bff      	cmp	r3, #255	; 0xff
 8006a20:	d002      	beq.n	8006a28 <USBH_CDC_InterfaceInit+0x24>
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d901      	bls.n	8006a2c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e13d      	b.n	8006ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fc3b 	bl	80072ac <USBH_SelectInterface>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a3a:	7bbb      	ldrb	r3, [r7, #14]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a40:	2302      	movs	r3, #2
 8006a42:	e131      	b.n	8006ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a4a:	2050      	movs	r0, #80	; 0x50
 8006a4c:	f002 fafa 	bl	8009044 <malloc>
 8006a50:	4603      	mov	r3, r0
 8006a52:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006a64:	2302      	movs	r3, #2
 8006a66:	e11f      	b.n	8006ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006a68:	2250      	movs	r2, #80	; 0x50
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	68b8      	ldr	r0, [r7, #8]
 8006a6e:	f002 faf9 	bl	8009064 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	211a      	movs	r1, #26
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	b25b      	sxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	da15      	bge.n	8006ab6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	211a      	movs	r1, #26
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	211a      	movs	r1, #26
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 ff2c 	bl	800891a <USBH_AllocPipe>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	7819      	ldrb	r1, [r3, #0]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	7858      	ldrb	r0, [r3, #1]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	8952      	ldrh	r2, [r2, #10]
 8006ae2:	9202      	str	r2, [sp, #8]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	9201      	str	r2, [sp, #4]
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	4623      	mov	r3, r4
 8006aec:	4602      	mov	r2, r0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fee4 	bl	80088bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2200      	movs	r2, #0
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 f9f3 	bl	8008ee8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b02:	2300      	movs	r3, #0
 8006b04:	2200      	movs	r2, #0
 8006b06:	210a      	movs	r1, #10
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fbeb 	bl	80072e4 <USBH_FindInterface>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2bff      	cmp	r3, #255	; 0xff
 8006b16:	d002      	beq.n	8006b1e <USBH_CDC_InterfaceInit+0x11a>
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d901      	bls.n	8006b22 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e0c2      	b.n	8006ca8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	211a      	movs	r1, #26
 8006b28:	fb01 f303 	mul.w	r3, r1, r3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	b25b      	sxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da16      	bge.n	8006b68 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	211a      	movs	r1, #26
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	211a      	movs	r1, #26
 8006b56:	fb01 f303 	mul.w	r3, r1, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b60:	881a      	ldrh	r2, [r3, #0]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	835a      	strh	r2, [r3, #26]
 8006b66:	e015      	b.n	8006b94 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	211a      	movs	r1, #26
 8006b6e:	fb01 f303 	mul.w	r3, r1, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	211a      	movs	r1, #26
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b8e:	881a      	ldrh	r2, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	211a      	movs	r1, #26
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b25b      	sxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	da16      	bge.n	8006bda <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	211a      	movs	r1, #26
 8006bb2:	fb01 f303 	mul.w	r3, r1, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	211a      	movs	r1, #26
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006bd2:	881a      	ldrh	r2, [r3, #0]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	835a      	strh	r2, [r3, #26]
 8006bd8:	e015      	b.n	8006c06 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	211a      	movs	r1, #26
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	4413      	add	r3, r2
 8006be6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	211a      	movs	r1, #26
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c00:	881a      	ldrh	r2, [r3, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	7b9b      	ldrb	r3, [r3, #14]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f001 fe84 	bl	800891a <USBH_AllocPipe>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	7bdb      	ldrb	r3, [r3, #15]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fe7a 	bl	800891a <USBH_AllocPipe>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	7b59      	ldrb	r1, [r3, #13]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	7b98      	ldrb	r0, [r3, #14]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	8b12      	ldrh	r2, [r2, #24]
 8006c46:	9202      	str	r2, [sp, #8]
 8006c48:	2202      	movs	r2, #2
 8006c4a:	9201      	str	r2, [sp, #4]
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	4623      	mov	r3, r4
 8006c50:	4602      	mov	r2, r0
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fe32 	bl	80088bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	7b19      	ldrb	r1, [r3, #12]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	7bd8      	ldrb	r0, [r3, #15]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	8b52      	ldrh	r2, [r2, #26]
 8006c70:	9202      	str	r2, [sp, #8]
 8006c72:	2202      	movs	r2, #2
 8006c74:	9201      	str	r2, [sp, #4]
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	4623      	mov	r3, r4
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fe1d 	bl	80088bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	7b5b      	ldrb	r3, [r3, #13]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f002 f928 	bl	8008ee8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	7b1b      	ldrb	r3, [r3, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f002 f921 	bl	8008ee8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd90      	pop	{r4, r7, pc}

08006cb0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00e      	beq.n	8006ce8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 fe12 	bl	80088fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 fe3d 	bl	800895c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	7b1b      	ldrb	r3, [r3, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00e      	beq.n	8006d0e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	7b1b      	ldrb	r3, [r3, #12]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fdff 	bl	80088fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	7b1b      	ldrb	r3, [r3, #12]
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fe2a 	bl	800895c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	7b5b      	ldrb	r3, [r3, #13]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00e      	beq.n	8006d34 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	7b5b      	ldrb	r3, [r3, #13]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fdec 	bl	80088fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	7b5b      	ldrb	r3, [r3, #13]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fe17 	bl	800895c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 f983 	bl	8009054 <free>
    phost->pActiveClass->pData = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d54:	2200      	movs	r2, #0
 8006d56:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	3340      	adds	r3, #64	; 0x40
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f8b1 	bl	8006ee2 <GetLineCoding>
 8006d80:	4603      	mov	r3, r0
 8006d82:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d90:	2102      	movs	r1, #2
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006d96:	7afb      	ldrb	r3, [r7, #11]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006da8:	2301      	movs	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d877      	bhi.n	8006eb4 <USBH_CDC_Process+0x114>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <USBH_CDC_Process+0x2c>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006de1 	.word	0x08006de1
 8006dd0:	08006de7 	.word	0x08006de7
 8006dd4:	08006e17 	.word	0x08006e17
 8006dd8:	08006e8b 	.word	0x08006e8b
 8006ddc:	08006e99 	.word	0x08006e99
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	73fb      	strb	r3, [r7, #15]
      break;
 8006de4:	e06d      	b.n	8006ec2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f897 	bl	8006f20 <SetLineCoding>
 8006df2:	4603      	mov	r3, r0
 8006df4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e04:	e058      	b.n	8006eb8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d055      	beq.n	8006eb8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e14:	e050      	b.n	8006eb8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	3340      	adds	r3, #64	; 0x40
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f860 	bl	8006ee2 <GetLineCoding>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d126      	bne.n	8006e7a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3e:	791b      	ldrb	r3, [r3, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d13b      	bne.n	8006ebc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d133      	bne.n	8006ebc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d12b      	bne.n	8006ebc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e6c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d124      	bne.n	8006ebc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f958 	bl	8007128 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e78:	e020      	b.n	8006ebc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d01d      	beq.n	8006ebc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2204      	movs	r2, #4
 8006e84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e88:	e018      	b.n	8006ebc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f867 	bl	8006f5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f8da 	bl	800704a <CDC_ProcessReception>
      break;
 8006e96:	e014      	b.n	8006ec2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 ffef 	bl	8007e7e <USBH_ClrFeature>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10a      	bne.n	8006ec0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006eb2:	e005      	b.n	8006ec0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e004      	b.n	8006ec2 <USBH_CDC_Process+0x122>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <USBH_CDC_Process+0x122>
      break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <USBH_CDC_Process+0x122>
      break;
 8006ec0:	bf00      	nop

  }

  return status;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	22a1      	movs	r2, #161	; 0xa1
 8006ef0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2221      	movs	r2, #33	; 0x21
 8006ef6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2207      	movs	r2, #7
 8006f08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2207      	movs	r2, #7
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fa81 	bl	8008418 <USBH_CtlReq>
 8006f16:	4603      	mov	r3, r0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2221      	movs	r2, #33	; 0x21
 8006f2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2207      	movs	r2, #7
 8006f46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f001 fa62 	bl	8008418 <USBH_CtlReq>
 8006f54:	4603      	mov	r3, r0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af02      	add	r7, sp, #8
 8006f64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f70:	2300      	movs	r3, #0
 8006f72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d002      	beq.n	8006f84 <CDC_ProcessTransmission+0x26>
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d023      	beq.n	8006fca <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006f82:	e05e      	b.n	8007042 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	8b12      	ldrh	r2, [r2, #24]
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d90b      	bls.n	8006fa8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	69d9      	ldr	r1, [r3, #28]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8b1a      	ldrh	r2, [r3, #24]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	7b5b      	ldrb	r3, [r3, #13]
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	9000      	str	r0, [sp, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 fc48 	bl	8008836 <USBH_BulkSendData>
 8006fa6:	e00b      	b.n	8006fc0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7b5b      	ldrb	r3, [r3, #13]
 8006fb6:	2001      	movs	r0, #1
 8006fb8:	9000      	str	r0, [sp, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 fc3b 	bl	8008836 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006fc8:	e03b      	b.n	8007042 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	7b5b      	ldrb	r3, [r3, #13]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 ff5f 	bl	8008e94 <USBH_LL_GetURBState>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006fda:	7afb      	ldrb	r3, [r7, #11]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d128      	bne.n	8007032 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	8b12      	ldrh	r2, [r2, #24]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d90e      	bls.n	800700a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	8b12      	ldrh	r2, [r2, #24]
 8006ff4:	1a9a      	subs	r2, r3, r2
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	8b12      	ldrh	r2, [r2, #24]
 8007002:	441a      	add	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	61da      	str	r2, [r3, #28]
 8007008:	e002      	b.n	8007010 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007020:	e00e      	b.n	8007040 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f868 	bl	8007100 <USBH_CDC_TransmitCallback>
      break;
 8007030:	e006      	b.n	8007040 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d103      	bne.n	8007040 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007040:	bf00      	nop
  }
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b086      	sub	sp, #24
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800705c:	2300      	movs	r3, #0
 800705e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007066:	2b03      	cmp	r3, #3
 8007068:	d002      	beq.n	8007070 <CDC_ProcessReception+0x26>
 800706a:	2b04      	cmp	r3, #4
 800706c:	d00e      	beq.n	800708c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800706e:	e043      	b.n	80070f8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	6a19      	ldr	r1, [r3, #32]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	8b5a      	ldrh	r2, [r3, #26]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	7b1b      	ldrb	r3, [r3, #12]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 fbff 	bl	8008880 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2204      	movs	r2, #4
 8007086:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800708a:	e035      	b.n	80070f8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	7b1b      	ldrb	r3, [r3, #12]
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f001 fefe 	bl	8008e94 <USBH_LL_GetURBState>
 8007098:	4603      	mov	r3, r0
 800709a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800709c:	7cfb      	ldrb	r3, [r7, #19]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d129      	bne.n	80070f6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	7b1b      	ldrb	r3, [r3, #12]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fe61 	bl	8008d70 <USBH_LL_GetLastXferSize>
 80070ae:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d016      	beq.n	80070e8 <CDC_ProcessReception+0x9e>
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	8b5b      	ldrh	r3, [r3, #26]
 80070be:	461a      	mov	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d910      	bls.n	80070e8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	1ad2      	subs	r2, r2, r3
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	441a      	add	r2, r3
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070e6:	e006      	b.n	80070f6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f80f 	bl	8007114 <USBH_CDC_ReceiveCallback>
      break;
 80070f6:	bf00      	nop
  }
}
 80070f8:	bf00      	nop
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007150:	2302      	movs	r3, #2
 8007152:	e029      	b.n	80071a8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	79fa      	ldrb	r2, [r7, #7]
 8007158:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f81f 	bl	80071b0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f001 fd31 	bl	8008c08 <USBH_LL_Init>

  return USBH_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e009      	b.n	80071d6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	33e0      	adds	r3, #224	; 0xe0
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	2200      	movs	r2, #0
 80071ce:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b0f      	cmp	r3, #15
 80071da:	d9f2      	bls.n	80071c2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071dc:	2300      	movs	r3, #0
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e009      	b.n	80071f6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80071ec:	2200      	movs	r2, #0
 80071ee:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3301      	adds	r3, #1
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071fc:	d3f1      	bcc.n	80071e2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2240      	movs	r2, #64	; 0x40
 8007222:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d016      	beq.n	800729a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10e      	bne.n	8007294 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800727c:	1c59      	adds	r1, r3, #1
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	33de      	adds	r3, #222	; 0xde
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
 8007292:	e004      	b.n	800729e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007294:	2302      	movs	r3, #2
 8007296:	73fb      	strb	r3, [r7, #15]
 8007298:	e001      	b.n	800729e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800729a:	2302      	movs	r3, #2
 800729c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80072c2:	78fa      	ldrb	r2, [r7, #3]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d204      	bcs.n	80072d2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80072d0:	e001      	b.n	80072d6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80072d2:	2302      	movs	r3, #2
 80072d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	70fb      	strb	r3, [r7, #3]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70bb      	strb	r3, [r7, #2]
 80072fa:	4613      	mov	r3, r2
 80072fc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800730c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800730e:	e025      	b.n	800735c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	221a      	movs	r2, #26
 8007314:	fb02 f303 	mul.w	r3, r2, r3
 8007318:	3308      	adds	r3, #8
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	3302      	adds	r3, #2
 8007320:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	795b      	ldrb	r3, [r3, #5]
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	429a      	cmp	r2, r3
 800732a:	d002      	beq.n	8007332 <USBH_FindInterface+0x4e>
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	2bff      	cmp	r3, #255	; 0xff
 8007330:	d111      	bne.n	8007356 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007336:	78ba      	ldrb	r2, [r7, #2]
 8007338:	429a      	cmp	r2, r3
 800733a:	d002      	beq.n	8007342 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800733c:	78bb      	ldrb	r3, [r7, #2]
 800733e:	2bff      	cmp	r3, #255	; 0xff
 8007340:	d109      	bne.n	8007356 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007346:	787a      	ldrb	r2, [r7, #1]
 8007348:	429a      	cmp	r2, r3
 800734a:	d002      	beq.n	8007352 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800734c:	787b      	ldrb	r3, [r7, #1]
 800734e:	2bff      	cmp	r3, #255	; 0xff
 8007350:	d101      	bne.n	8007356 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	e006      	b.n	8007364 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	3301      	adds	r3, #1
 800735a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d9d6      	bls.n	8007310 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007362:	23ff      	movs	r3, #255	; 0xff
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 fc81 	bl	8008c80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800737e:	2101      	movs	r1, #1
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f001 fd9a 	bl	8008eba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af04      	add	r7, sp, #16
 8007396:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007398:	2302      	movs	r3, #2
 800739a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2203      	movs	r2, #3
 80073b0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b0b      	cmp	r3, #11
 80073ba:	f200 81be 	bhi.w	800773a <USBH_Process+0x3aa>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <USBH_Process+0x34>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073f5 	.word	0x080073f5
 80073c8:	08007427 	.word	0x08007427
 80073cc:	0800748f 	.word	0x0800748f
 80073d0:	080076d5 	.word	0x080076d5
 80073d4:	0800773b 	.word	0x0800773b
 80073d8:	08007533 	.word	0x08007533
 80073dc:	0800767b 	.word	0x0800767b
 80073e0:	08007569 	.word	0x08007569
 80073e4:	08007589 	.word	0x08007589
 80073e8:	080075a9 	.word	0x080075a9
 80073ec:	080075ed 	.word	0x080075ed
 80073f0:	080076bd 	.word	0x080076bd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 819e 	beq.w	800773e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007408:	20c8      	movs	r0, #200	; 0xc8
 800740a:	f001 fd9d 	bl	8008f48 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 fc93 	bl	8008d3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007424:	e18b      	b.n	800773e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800742c:	2b01      	cmp	r3, #1
 800742e:	d107      	bne.n	8007440 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800743e:	e18d      	b.n	800775c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800744a:	d914      	bls.n	8007476 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007452:	3301      	adds	r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007462:	2b03      	cmp	r3, #3
 8007464:	d903      	bls.n	800746e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	220d      	movs	r2, #13
 800746a:	701a      	strb	r2, [r3, #0]
      break;
 800746c:	e176      	b.n	800775c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]
      break;
 8007474:	e172      	b.n	800775c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800747c:	f103 020a 	add.w	r2, r3, #10
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007486:	200a      	movs	r0, #10
 8007488:	f001 fd5e 	bl	8008f48 <USBH_Delay>
      break;
 800748c:	e166      	b.n	800775c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800749e:	2104      	movs	r1, #4
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80074a4:	2064      	movs	r0, #100	; 0x64
 80074a6:	f001 fd4f 	bl	8008f48 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fc1e 	bl	8008cec <USBH_LL_GetSpeed>
 80074b0:	4603      	mov	r3, r0
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2205      	movs	r2, #5
 80074be:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 fa29 	bl	800891a <USBH_AllocPipe>
 80074c8:	4603      	mov	r3, r0
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80074d0:	2180      	movs	r1, #128	; 0x80
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fa21 	bl	800891a <USBH_AllocPipe>
 80074d8:	4603      	mov	r3, r0
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7919      	ldrb	r1, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80074f4:	b292      	uxth	r2, r2
 80074f6:	9202      	str	r2, [sp, #8]
 80074f8:	2200      	movs	r2, #0
 80074fa:	9201      	str	r2, [sp, #4]
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	4603      	mov	r3, r0
 8007500:	2280      	movs	r2, #128	; 0x80
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 f9da 	bl	80088bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	7959      	ldrb	r1, [r3, #5]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800751c:	b292      	uxth	r2, r2
 800751e:	9202      	str	r2, [sp, #8]
 8007520:	2200      	movs	r2, #0
 8007522:	9201      	str	r2, [sp, #4]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	4603      	mov	r3, r0
 8007528:	2200      	movs	r2, #0
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 f9c6 	bl	80088bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007530:	e114      	b.n	800775c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f918 	bl	8007768 <USBH_HandleEnum>
 8007538:	4603      	mov	r3, r0
 800753a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 80fe 	bne.w	8007742 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007554:	2b01      	cmp	r3, #1
 8007556:	d103      	bne.n	8007560 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2208      	movs	r2, #8
 800755c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800755e:	e0f0      	b.n	8007742 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2207      	movs	r2, #7
 8007564:	701a      	strb	r2, [r3, #0]
      break;
 8007566:	e0ec      	b.n	8007742 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 80e9 	beq.w	8007746 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800757a:	2101      	movs	r1, #1
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2208      	movs	r2, #8
 8007584:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007586:	e0de      	b.n	8007746 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800758e:	b29b      	uxth	r3, r3
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fc2c 	bl	8007df0 <USBH_SetCfg>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 80d5 	bne.w	800774a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2209      	movs	r2, #9
 80075a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075a6:	e0d0      	b.n	800774a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80075b6:	2101      	movs	r1, #1
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc3c 	bl	8007e36 <USBH_SetFeature>
 80075be:	4603      	mov	r3, r0
 80075c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80075c2:	7bbb      	ldrb	r3, [r7, #14]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	220a      	movs	r2, #10
 80075ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075d0:	e0bd      	b.n	800774e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b03      	cmp	r3, #3
 80075d8:	f040 80b9 	bne.w	800774e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	220a      	movs	r2, #10
 80075e0:	701a      	strb	r2, [r3, #0]
      break;
 80075e2:	e0b4      	b.n	800774e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	220a      	movs	r2, #10
 80075e8:	701a      	strb	r2, [r3, #0]
      break;
 80075ea:	e0b0      	b.n	800774e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 80ad 	beq.w	8007752 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
 8007604:	e016      	b.n	8007634 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007606:	7bfa      	ldrb	r2, [r7, #15]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	32de      	adds	r2, #222	; 0xde
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	791a      	ldrb	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007618:	429a      	cmp	r2, r3
 800761a:	d108      	bne.n	800762e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800761c:	7bfa      	ldrb	r2, [r7, #15]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32de      	adds	r2, #222	; 0xde
 8007622:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800762c:	e005      	b.n	800763a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800762e:	7bfb      	ldrb	r3, [r7, #15]
 8007630:	3301      	adds	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d0e5      	beq.n	8007606 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d016      	beq.n	8007672 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2206      	movs	r2, #6
 800765a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007662:	2103      	movs	r1, #3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007668:	e073      	b.n	8007752 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	220d      	movs	r2, #13
 800766e:	701a      	strb	r2, [r3, #0]
      break;
 8007670:	e06f      	b.n	8007752 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	220d      	movs	r2, #13
 8007676:	701a      	strb	r2, [r3, #0]
      break;
 8007678:	e06b      	b.n	8007752 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d017      	beq.n	80076b4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
 8007690:	4603      	mov	r3, r0
 8007692:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	220b      	movs	r2, #11
 80076a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a2:	e058      	b.n	8007756 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d154      	bne.n	8007756 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	220d      	movs	r2, #13
 80076b0:	701a      	strb	r2, [r3, #0]
      break;
 80076b2:	e050      	b.n	8007756 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	220d      	movs	r2, #13
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e04c      	b.n	8007756 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d049      	beq.n	800775a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
      }
      break;
 80076d2:	e042      	b.n	800775a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff fd67 	bl	80071b0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d009      	beq.n	8007700 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007710:	2105      	movs	r1, #5
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	d107      	bne.n	8007732 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff fe20 	bl	8007370 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007730:	e014      	b.n	800775c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 faa4 	bl	8008c80 <USBH_LL_Start>
      break;
 8007738:	e010      	b.n	800775c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800773a:	bf00      	nop
 800773c:	e00e      	b.n	800775c <USBH_Process+0x3cc>
      break;
 800773e:	bf00      	nop
 8007740:	e00c      	b.n	800775c <USBH_Process+0x3cc>
      break;
 8007742:	bf00      	nop
 8007744:	e00a      	b.n	800775c <USBH_Process+0x3cc>
    break;
 8007746:	bf00      	nop
 8007748:	e008      	b.n	800775c <USBH_Process+0x3cc>
      break;
 800774a:	bf00      	nop
 800774c:	e006      	b.n	800775c <USBH_Process+0x3cc>
      break;
 800774e:	bf00      	nop
 8007750:	e004      	b.n	800775c <USBH_Process+0x3cc>
      break;
 8007752:	bf00      	nop
 8007754:	e002      	b.n	800775c <USBH_Process+0x3cc>
      break;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <USBH_Process+0x3cc>
      break;
 800775a:	bf00      	nop
  }
  return USBH_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop

08007768 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af04      	add	r7, sp, #16
 800776e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007770:	2301      	movs	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007774:	2301      	movs	r3, #1
 8007776:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b07      	cmp	r3, #7
 800777e:	f200 81c1 	bhi.w	8007b04 <USBH_HandleEnum+0x39c>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <USBH_HandleEnum+0x20>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077a9 	.word	0x080077a9
 800778c:	08007867 	.word	0x08007867
 8007790:	080078d1 	.word	0x080078d1
 8007794:	0800795f 	.word	0x0800795f
 8007798:	080079c9 	.word	0x080079c9
 800779c:	08007a39 	.word	0x08007a39
 80077a0:	08007a7f 	.word	0x08007a7f
 80077a4:	08007ac5 	.word	0x08007ac5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077a8:	2108      	movs	r1, #8
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa50 	bl	8007c50 <USBH_Get_DevDesc>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d130      	bne.n	800781c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7919      	ldrb	r1, [r3, #4]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077de:	b292      	uxth	r2, r2
 80077e0:	9202      	str	r2, [sp, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	9201      	str	r2, [sp, #4]
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	4603      	mov	r3, r0
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 f865 	bl	80088bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	7959      	ldrb	r1, [r3, #5]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007806:	b292      	uxth	r2, r2
 8007808:	9202      	str	r2, [sp, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	4603      	mov	r3, r0
 8007812:	2200      	movs	r2, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 f851 	bl	80088bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800781a:	e175      	b.n	8007b08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b03      	cmp	r3, #3
 8007820:	f040 8172 	bne.w	8007b08 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782a:	3301      	adds	r3, #1
 800782c:	b2da      	uxtb	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800783a:	2b03      	cmp	r3, #3
 800783c:	d903      	bls.n	8007846 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	220d      	movs	r2, #13
 8007842:	701a      	strb	r2, [r3, #0]
      break;
 8007844:	e160      	b.n	8007b08 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	795b      	ldrb	r3, [r3, #5]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f885 	bl	800895c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	791b      	ldrb	r3, [r3, #4]
 8007856:	4619      	mov	r1, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 f87f 	bl	800895c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
      break;
 8007864:	e150      	b.n	8007b08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007866:	2112      	movs	r1, #18
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9f1 	bl	8007c50 <USBH_Get_DevDesc>
 800786e:	4603      	mov	r3, r0
 8007870:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d103      	bne.n	8007880 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800787e:	e145      	b.n	8007b0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b03      	cmp	r3, #3
 8007884:	f040 8142 	bne.w	8007b0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800788e:	3301      	adds	r3, #1
 8007890:	b2da      	uxtb	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d903      	bls.n	80078aa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	220d      	movs	r2, #13
 80078a6:	701a      	strb	r2, [r3, #0]
      break;
 80078a8:	e130      	b.n	8007b0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	795b      	ldrb	r3, [r3, #5]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f853 	bl	800895c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	791b      	ldrb	r3, [r3, #4]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f84d 	bl	800895c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e11d      	b.n	8007b0c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80078d0:	2101      	movs	r1, #1
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa68 	bl	8007da8 <USBH_SetAddress>
 80078d8:	4603      	mov	r3, r0
 80078da:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d132      	bne.n	8007948 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80078e2:	2002      	movs	r0, #2
 80078e4:	f001 fb30 	bl	8008f48 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7919      	ldrb	r1, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800790a:	b292      	uxth	r2, r2
 800790c:	9202      	str	r2, [sp, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	9201      	str	r2, [sp, #4]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4603      	mov	r3, r0
 8007916:	2280      	movs	r2, #128	; 0x80
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 ffcf 	bl	80088bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7959      	ldrb	r1, [r3, #5]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007932:	b292      	uxth	r2, r2
 8007934:	9202      	str	r2, [sp, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	9201      	str	r2, [sp, #4]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	4603      	mov	r3, r0
 800793e:	2200      	movs	r2, #0
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 ffbb 	bl	80088bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007946:	e0e3      	b.n	8007b10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b03      	cmp	r3, #3
 800794c:	f040 80e0 	bne.w	8007b10 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	220d      	movs	r2, #13
 8007954:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	705a      	strb	r2, [r3, #1]
      break;
 800795c:	e0d8      	b.n	8007b10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800795e:	2109      	movs	r1, #9
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f99d 	bl	8007ca0 <USBH_Get_CfgDesc>
 8007966:	4603      	mov	r3, r0
 8007968:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d103      	bne.n	8007978 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2204      	movs	r2, #4
 8007974:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007976:	e0cd      	b.n	8007b14 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b03      	cmp	r3, #3
 800797c:	f040 80ca 	bne.w	8007b14 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007986:	3301      	adds	r3, #1
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007996:	2b03      	cmp	r3, #3
 8007998:	d903      	bls.n	80079a2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	220d      	movs	r2, #13
 800799e:	701a      	strb	r2, [r3, #0]
      break;
 80079a0:	e0b8      	b.n	8007b14 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	795b      	ldrb	r3, [r3, #5]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 ffd7 	bl	800895c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	791b      	ldrb	r3, [r3, #4]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 ffd1 	bl	800895c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
      break;
 80079c6:	e0a5      	b.n	8007b14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 f965 	bl	8007ca0 <USBH_Get_CfgDesc>
 80079d6:	4603      	mov	r3, r0
 80079d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2205      	movs	r2, #5
 80079e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079e6:	e097      	b.n	8007b18 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	f040 8094 	bne.w	8007b18 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079f6:	3301      	adds	r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d903      	bls.n	8007a12 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	220d      	movs	r2, #13
 8007a0e:	701a      	strb	r2, [r3, #0]
      break;
 8007a10:	e082      	b.n	8007b18 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	795b      	ldrb	r3, [r3, #5]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 ff9f 	bl	800895c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	791b      	ldrb	r3, [r3, #4]
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 ff99 	bl	800895c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e06f      	b.n	8007b18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d019      	beq.n	8007a76 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a4e:	23ff      	movs	r3, #255	; 0xff
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f949 	bl	8007ce8 <USBH_Get_StringDesc>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2206      	movs	r2, #6
 8007a64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007a66:	e059      	b.n	8007b1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d156      	bne.n	8007b1c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2206      	movs	r2, #6
 8007a72:	705a      	strb	r2, [r3, #1]
      break;
 8007a74:	e052      	b.n	8007b1c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2206      	movs	r2, #6
 8007a7a:	705a      	strb	r2, [r3, #1]
      break;
 8007a7c:	e04e      	b.n	8007b1c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d019      	beq.n	8007abc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007a94:	23ff      	movs	r3, #255	; 0xff
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f926 	bl	8007ce8 <USBH_Get_StringDesc>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d103      	bne.n	8007aae <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2207      	movs	r2, #7
 8007aaa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aac:	e038      	b.n	8007b20 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d135      	bne.n	8007b20 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2207      	movs	r2, #7
 8007ab8:	705a      	strb	r2, [r3, #1]
      break;
 8007aba:	e031      	b.n	8007b20 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2207      	movs	r2, #7
 8007ac0:	705a      	strb	r2, [r3, #1]
      break;
 8007ac2:	e02d      	b.n	8007b20 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d017      	beq.n	8007afe <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007ada:	23ff      	movs	r3, #255	; 0xff
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f903 	bl	8007ce8 <USBH_Get_StringDesc>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007af0:	e018      	b.n	8007b24 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	2b03      	cmp	r3, #3
 8007af6:	d115      	bne.n	8007b24 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
      break;
 8007afc:	e012      	b.n	8007b24 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]
      break;
 8007b02:	e00f      	b.n	8007b24 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b04:	bf00      	nop
 8007b06:	e00e      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b08:	bf00      	nop
 8007b0a:	e00c      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b0c:	bf00      	nop
 8007b0e:	e00a      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b10:	bf00      	nop
 8007b12:	e008      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b14:	bf00      	nop
 8007b16:	e006      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b18:	bf00      	nop
 8007b1a:	e004      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b1c:	bf00      	nop
 8007b1e:	e002      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b20:	bf00      	nop
 8007b22:	e000      	b.n	8007b26 <USBH_HandleEnum+0x3be>
      break;
 8007b24:	bf00      	nop
  }
  return Status;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr

08007b4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f804 	bl	8007b72 <USBH_HandleSof>
}
 8007b6a:	bf00      	nop
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b0b      	cmp	r3, #11
 8007b82:	d10a      	bne.n	8007b9a <USBH_HandleSof+0x28>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d005      	beq.n	8007b9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b94:	699b      	ldr	r3, [r3, #24]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007bb2:	bf00      	nop
}
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007bce:	bf00      	nop
}
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f844 	bl	8008cb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fe91 	bl	800895c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	795b      	ldrb	r3, [r3, #5]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fe8b 	bl	800895c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3708      	adds	r7, #8
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c6e:	2100      	movs	r1, #0
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 f864 	bl	8007d3e <USBH_GetDescriptor>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007c8c:	78fa      	ldrb	r2, [r7, #3]
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	f000 f918 	bl	8007ec6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af02      	add	r7, sp, #8
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	331c      	adds	r3, #28
 8007cb0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cb2:	887b      	ldrh	r3, [r7, #2]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f83d 	bl	8007d3e <USBH_GetDescriptor>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007cce:	887b      	ldrh	r3, [r7, #2]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	68b9      	ldr	r1, [r7, #8]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f987 	bl	8007fe8 <USBH_ParseCfgDesc>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	72fb      	strb	r3, [r7, #11]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007cfc:	7afb      	ldrb	r3, [r7, #11]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d04:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d0c:	893b      	ldrh	r3, [r7, #8]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	460b      	mov	r3, r1
 8007d12:	2100      	movs	r1, #0
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f812 	bl	8007d3e <USBH_GetDescriptor>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d107      	bne.n	8007d34 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d2a:	893a      	ldrh	r2, [r7, #8]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fb24 	bl	800837c <USBH_ParseStringDesc>
  }

  return status;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	607b      	str	r3, [r7, #4]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	72fb      	strb	r3, [r7, #11]
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	789b      	ldrb	r3, [r3, #2]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d11c      	bne.n	8007d92 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d58:	7afb      	ldrb	r3, [r7, #11]
 8007d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2206      	movs	r2, #6
 8007d68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	893a      	ldrh	r2, [r7, #8]
 8007d6e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007d70:	893b      	ldrh	r3, [r7, #8]
 8007d72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d7a:	d104      	bne.n	8007d86 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f240 4209 	movw	r2, #1033	; 0x409
 8007d82:	829a      	strh	r2, [r3, #20]
 8007d84:	e002      	b.n	8007d8c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8b3a      	ldrh	r2, [r7, #24]
 8007d90:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007d92:	8b3b      	ldrh	r3, [r7, #24]
 8007d94:	461a      	mov	r2, r3
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 fb3d 	bl	8008418 <USBH_CtlReq>
 8007d9e:	4603      	mov	r3, r0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	789b      	ldrb	r3, [r3, #2]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d10f      	bne.n	8007ddc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2205      	movs	r2, #5
 8007dc6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007dc8:	78fb      	ldrb	r3, [r7, #3]
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2100      	movs	r1, #0
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fb19 	bl	8008418 <USBH_CtlReq>
 8007de6:	4603      	mov	r3, r0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	789b      	ldrb	r3, [r3, #2]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d10e      	bne.n	8007e22 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2209      	movs	r2, #9
 8007e0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	887a      	ldrh	r2, [r7, #2]
 8007e14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e22:	2200      	movs	r2, #0
 8007e24:	2100      	movs	r1, #0
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 faf6 	bl	8008418 <USBH_CtlReq>
 8007e2c:	4603      	mov	r3, r0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	789b      	ldrb	r3, [r3, #2]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d10f      	bne.n	8007e6a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2203      	movs	r2, #3
 8007e54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fad2 	bl	8008418 <USBH_CtlReq>
 8007e74:	4603      	mov	r3, r0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	789b      	ldrb	r3, [r3, #2]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d10f      	bne.n	8007eb2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2202      	movs	r2, #2
 8007e96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ea4:	78fb      	ldrb	r3, [r7, #3]
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 faae 	bl	8008418 <USBH_CtlReq>
 8007ebc:	4603      	mov	r3, r0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	60b9      	str	r1, [r7, #8]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	781a      	ldrb	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	785a      	ldrb	r2, [r3, #1]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	3303      	adds	r3, #3
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	791a      	ldrb	r2, [r3, #4]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	795a      	ldrb	r2, [r3, #5]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	799a      	ldrb	r2, [r3, #6]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	79da      	ldrb	r2, [r3, #7]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	79db      	ldrb	r3, [r3, #7]
 8007f24:	2b20      	cmp	r3, #32
 8007f26:	dc11      	bgt.n	8007f4c <USBH_ParseDevDesc+0x86>
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	db16      	blt.n	8007f5a <USBH_ParseDevDesc+0x94>
 8007f2c:	3b08      	subs	r3, #8
 8007f2e:	2201      	movs	r2, #1
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	bf14      	ite	ne
 8007f40:	2301      	movne	r3, #1
 8007f42:	2300      	moveq	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <USBH_ParseDevDesc+0x8a>
 8007f4a:	e006      	b.n	8007f5a <USBH_ParseDevDesc+0x94>
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d104      	bne.n	8007f5a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	79da      	ldrb	r2, [r3, #7]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	71da      	strb	r2, [r3, #7]
      break;
 8007f58:	e003      	b.n	8007f62 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2240      	movs	r2, #64	; 0x40
 8007f5e:	71da      	strb	r2, [r3, #7]
      break;
 8007f60:	bf00      	nop
  }

  if (length > 8U)
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d939      	bls.n	8007fdc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3309      	adds	r3, #9
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	330a      	adds	r3, #10
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	330b      	adds	r3, #11
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	330d      	adds	r3, #13
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	021b      	lsls	r3, r3, #8
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	7b9a      	ldrb	r2, [r3, #14]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	7bda      	ldrb	r2, [r3, #15]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	7c1a      	ldrb	r2, [r3, #16]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	7c5a      	ldrb	r2, [r3, #17]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	745a      	strb	r2, [r3, #17]
  }
}
 8007fdc:	bf00      	nop
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	; 0x30
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ffc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	781a      	ldrb	r2, [r3, #0]
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	785a      	ldrb	r2, [r3, #1]
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3302      	adds	r3, #2
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b29a      	uxth	r2, r3
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	3303      	adds	r3, #3
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b29b      	uxth	r3, r3
 8008038:	021b      	lsls	r3, r3, #8
 800803a:	b29b      	uxth	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b29b      	uxth	r3, r3
 8008040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008044:	bf28      	it	cs
 8008046:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800804a:	b29a      	uxth	r2, r3
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	791a      	ldrb	r2, [r3, #4]
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	795a      	ldrb	r2, [r3, #5]
 800805c:	6a3b      	ldr	r3, [r7, #32]
 800805e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	799a      	ldrb	r2, [r3, #6]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	79da      	ldrb	r2, [r3, #7]
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	7a1a      	ldrb	r2, [r3, #8]
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b09      	cmp	r3, #9
 800807e:	d002      	beq.n	8008086 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	2209      	movs	r2, #9
 8008084:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2b09      	cmp	r3, #9
 800808a:	f240 809d 	bls.w	80081c8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800808e:	2309      	movs	r3, #9
 8008090:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008092:	2300      	movs	r3, #0
 8008094:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008096:	e081      	b.n	800819c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008098:	f107 0316 	add.w	r3, r7, #22
 800809c:	4619      	mov	r1, r3
 800809e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a0:	f000 f99f 	bl	80083e2 <USBH_GetNextDesc>
 80080a4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d176      	bne.n	800819c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80080ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b09      	cmp	r3, #9
 80080b4:	d002      	beq.n	80080bc <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	2209      	movs	r2, #9
 80080ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80080bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080c0:	221a      	movs	r2, #26
 80080c2:	fb02 f303 	mul.w	r3, r2, r3
 80080c6:	3308      	adds	r3, #8
 80080c8:	6a3a      	ldr	r2, [r7, #32]
 80080ca:	4413      	add	r3, r2
 80080cc:	3302      	adds	r3, #2
 80080ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80080d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d2:	69f8      	ldr	r0, [r7, #28]
 80080d4:	f000 f87e 	bl	80081d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80080de:	2300      	movs	r3, #0
 80080e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080e2:	e043      	b.n	800816c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080e4:	f107 0316 	add.w	r3, r7, #22
 80080e8:	4619      	mov	r1, r3
 80080ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ec:	f000 f979 	bl	80083e2 <USBH_GetNextDesc>
 80080f0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	d138      	bne.n	800816c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	795b      	ldrb	r3, [r3, #5]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d10f      	bne.n	8008122 <USBH_ParseCfgDesc+0x13a>
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	799b      	ldrb	r3, [r3, #6]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d10b      	bne.n	8008122 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	79db      	ldrb	r3, [r3, #7]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10f      	bne.n	8008132 <USBH_ParseCfgDesc+0x14a>
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b09      	cmp	r3, #9
 8008118:	d00b      	beq.n	8008132 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	2209      	movs	r2, #9
 800811e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008120:	e007      	b.n	8008132 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b07      	cmp	r3, #7
 8008128:	d004      	beq.n	8008134 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	2207      	movs	r2, #7
 800812e:	701a      	strb	r2, [r3, #0]
 8008130:	e000      	b.n	8008134 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008132:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008138:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800813c:	3201      	adds	r2, #1
 800813e:	00d2      	lsls	r2, r2, #3
 8008140:	211a      	movs	r1, #26
 8008142:	fb01 f303 	mul.w	r3, r1, r3
 8008146:	4413      	add	r3, r2
 8008148:	3308      	adds	r3, #8
 800814a:	6a3a      	ldr	r2, [r7, #32]
 800814c:	4413      	add	r3, r2
 800814e:	3304      	adds	r3, #4
 8008150:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008154:	69b9      	ldr	r1, [r7, #24]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 f86b 	bl	8008232 <USBH_ParseEPDesc>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008162:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008166:	3301      	adds	r3, #1
 8008168:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	791b      	ldrb	r3, [r3, #4]
 8008170:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008174:	429a      	cmp	r2, r3
 8008176:	d204      	bcs.n	8008182 <USBH_ParseCfgDesc+0x19a>
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	885a      	ldrh	r2, [r3, #2]
 800817c:	8afb      	ldrh	r3, [r7, #22]
 800817e:	429a      	cmp	r2, r3
 8008180:	d8b0      	bhi.n	80080e4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	791b      	ldrb	r3, [r3, #4]
 8008186:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800818a:	429a      	cmp	r2, r3
 800818c:	d201      	bcs.n	8008192 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800818e:	2303      	movs	r3, #3
 8008190:	e01c      	b.n	80081cc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008196:	3301      	adds	r3, #1
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800819c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d805      	bhi.n	80081b0 <USBH_ParseCfgDesc+0x1c8>
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	885a      	ldrh	r2, [r3, #2]
 80081a8:	8afb      	ldrh	r3, [r7, #22]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	f63f af74 	bhi.w	8008098 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	791b      	ldrb	r3, [r3, #4]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	bf28      	it	cs
 80081b8:	2302      	movcs	r3, #2
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d201      	bcs.n	80081c8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e001      	b.n	80081cc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80081c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3730      	adds	r7, #48	; 0x30
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	785a      	ldrb	r2, [r3, #1]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	789a      	ldrb	r2, [r3, #2]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	78da      	ldrb	r2, [r3, #3]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	791a      	ldrb	r2, [r3, #4]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	795a      	ldrb	r2, [r3, #5]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	799a      	ldrb	r2, [r3, #6]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	79da      	ldrb	r2, [r3, #7]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	7a1a      	ldrb	r2, [r3, #8]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	721a      	strb	r2, [r3, #8]
}
 8008226:	bf00      	nop
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008232:	b480      	push	{r7}
 8008234:	b087      	sub	sp, #28
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	785a      	ldrb	r2, [r3, #1]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	789a      	ldrb	r2, [r3, #2]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	78da      	ldrb	r2, [r3, #3]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3304      	adds	r3, #4
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	b29a      	uxth	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3305      	adds	r3, #5
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	021b      	lsls	r3, r3, #8
 8008274:	b29b      	uxth	r3, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	b29a      	uxth	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	799a      	ldrb	r2, [r3, #6]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	889b      	ldrh	r3, [r3, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d102      	bne.n	8008294 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800828e:	2303      	movs	r3, #3
 8008290:	75fb      	strb	r3, [r7, #23]
 8008292:	e033      	b.n	80082fc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	889b      	ldrh	r3, [r3, #4]
 8008298:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800829c:	f023 0307 	bic.w	r3, r3, #7
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	889b      	ldrh	r3, [r3, #4]
 80082aa:	b21a      	sxth	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	3304      	adds	r3, #4
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	b299      	uxth	r1, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3305      	adds	r3, #5
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	021b      	lsls	r3, r3, #8
 80082be:	b29b      	uxth	r3, r3
 80082c0:	430b      	orrs	r3, r1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d110      	bne.n	80082ee <USBH_ParseEPDesc+0xbc>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b299      	uxth	r1, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3305      	adds	r3, #5
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	b29b      	uxth	r3, r3
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	b29b      	uxth	r3, r3
 80082e0:	430b      	orrs	r3, r1
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	b21b      	sxth	r3, r3
 80082e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082ea:	b21b      	sxth	r3, r3
 80082ec:	e001      	b.n	80082f2 <USBH_ParseEPDesc+0xc0>
 80082ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b21b      	sxth	r3, r3
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008302:	2b00      	cmp	r3, #0
 8008304:	d116      	bne.n	8008334 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	78db      	ldrb	r3, [r3, #3]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	2b01      	cmp	r3, #1
 8008310:	d005      	beq.n	800831e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	78db      	ldrb	r3, [r3, #3]
 8008316:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800831a:	2b03      	cmp	r3, #3
 800831c:	d127      	bne.n	800836e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	799b      	ldrb	r3, [r3, #6]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <USBH_ParseEPDesc+0xfc>
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	799b      	ldrb	r3, [r3, #6]
 800832a:	2b10      	cmp	r3, #16
 800832c:	d91f      	bls.n	800836e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800832e:	2303      	movs	r3, #3
 8008330:	75fb      	strb	r3, [r7, #23]
 8008332:	e01c      	b.n	800836e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	78db      	ldrb	r3, [r3, #3]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	2b01      	cmp	r3, #1
 800833e:	d10a      	bne.n	8008356 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	799b      	ldrb	r3, [r3, #6]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <USBH_ParseEPDesc+0x11e>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	799b      	ldrb	r3, [r3, #6]
 800834c:	2b10      	cmp	r3, #16
 800834e:	d90e      	bls.n	800836e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008350:	2303      	movs	r3, #3
 8008352:	75fb      	strb	r3, [r7, #23]
 8008354:	e00b      	b.n	800836e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	78db      	ldrb	r3, [r3, #3]
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	2b03      	cmp	r3, #3
 8008360:	d105      	bne.n	800836e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	799b      	ldrb	r3, [r3, #6]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800836a:	2303      	movs	r3, #3
 800836c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008370:	4618      	mov	r0, r3
 8008372:	371c      	adds	r7, #28
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	4613      	mov	r3, r2
 8008388:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d120      	bne.n	80083d6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	1e9a      	subs	r2, r3, #2
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	4293      	cmp	r3, r2
 800839e:	bf28      	it	cs
 80083a0:	4613      	movcs	r3, r2
 80083a2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3302      	adds	r3, #2
 80083a8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083aa:	2300      	movs	r3, #0
 80083ac:	82fb      	strh	r3, [r7, #22]
 80083ae:	e00b      	b.n	80083c8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083b0:	8afb      	ldrh	r3, [r7, #22]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	781a      	ldrb	r2, [r3, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	701a      	strb	r2, [r3, #0]
      pdest++;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	3301      	adds	r3, #1
 80083c0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80083c2:	8afb      	ldrh	r3, [r7, #22]
 80083c4:	3302      	adds	r3, #2
 80083c6:	82fb      	strh	r3, [r7, #22]
 80083c8:	8afa      	ldrh	r2, [r7, #22]
 80083ca:	8abb      	ldrh	r3, [r7, #20]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d3ef      	bcc.n	80083b0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
  }
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	881a      	ldrh	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4413      	add	r3, r2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4413      	add	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800840a:	68fb      	ldr	r3, [r7, #12]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	789b      	ldrb	r3, [r3, #2]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d002      	beq.n	8008438 <USBH_CtlReq+0x20>
 8008432:	2b02      	cmp	r3, #2
 8008434:	d00f      	beq.n	8008456 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008436:	e027      	b.n	8008488 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	88fa      	ldrh	r2, [r7, #6]
 8008442:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2202      	movs	r2, #2
 800844e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
      break;
 8008454:	e018      	b.n	8008488 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f000 f81c 	bl	8008494 <USBH_HandleControl>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <USBH_CtlReq+0x54>
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d106      	bne.n	800847a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2200      	movs	r2, #0
 8008476:	761a      	strb	r2, [r3, #24]
      break;
 8008478:	e005      	b.n	8008486 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800847a:	7dfb      	ldrb	r3, [r7, #23]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d102      	bne.n	8008486 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	709a      	strb	r2, [r3, #2]
      break;
 8008486:	bf00      	nop
  }
  return status;
 8008488:	7dfb      	ldrb	r3, [r7, #23]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3718      	adds	r7, #24
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af02      	add	r7, sp, #8
 800849a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7e1b      	ldrb	r3, [r3, #24]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	2b0a      	cmp	r3, #10
 80084ac:	f200 8156 	bhi.w	800875c <USBH_HandleControl+0x2c8>
 80084b0:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <USBH_HandleControl+0x24>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	080084ff 	.word	0x080084ff
 80084c0:	08008569 	.word	0x08008569
 80084c4:	0800858f 	.word	0x0800858f
 80084c8:	080085c7 	.word	0x080085c7
 80084cc:	080085f1 	.word	0x080085f1
 80084d0:	08008643 	.word	0x08008643
 80084d4:	08008665 	.word	0x08008665
 80084d8:	080086a1 	.word	0x080086a1
 80084dc:	080086c7 	.word	0x080086c7
 80084e0:	08008705 	.word	0x08008705
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f103 0110 	add.w	r1, r3, #16
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	795b      	ldrb	r3, [r3, #5]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f943 	bl	800877c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2202      	movs	r2, #2
 80084fa:	761a      	strb	r2, [r3, #24]
      break;
 80084fc:	e139      	b.n	8008772 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	795b      	ldrb	r3, [r3, #5]
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fcc5 	bl	8008e94 <USBH_LL_GetURBState>
 800850a:	4603      	mov	r3, r0
 800850c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800850e:	7bbb      	ldrb	r3, [r7, #14]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d11e      	bne.n	8008552 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7c1b      	ldrb	r3, [r3, #16]
 8008518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800851c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	8adb      	ldrh	r3, [r3, #22]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008526:	7b7b      	ldrb	r3, [r7, #13]
 8008528:	2b80      	cmp	r3, #128	; 0x80
 800852a:	d103      	bne.n	8008534 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2203      	movs	r2, #3
 8008530:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008532:	e115      	b.n	8008760 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2205      	movs	r2, #5
 8008538:	761a      	strb	r2, [r3, #24]
      break;
 800853a:	e111      	b.n	8008760 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800853c:	7b7b      	ldrb	r3, [r7, #13]
 800853e:	2b80      	cmp	r3, #128	; 0x80
 8008540:	d103      	bne.n	800854a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2209      	movs	r2, #9
 8008546:	761a      	strb	r2, [r3, #24]
      break;
 8008548:	e10a      	b.n	8008760 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2207      	movs	r2, #7
 800854e:	761a      	strb	r2, [r3, #24]
      break;
 8008550:	e106      	b.n	8008760 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d003      	beq.n	8008560 <USBH_HandleControl+0xcc>
 8008558:	7bbb      	ldrb	r3, [r7, #14]
 800855a:	2b02      	cmp	r3, #2
 800855c:	f040 8100 	bne.w	8008760 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220b      	movs	r2, #11
 8008564:	761a      	strb	r2, [r3, #24]
      break;
 8008566:	e0fb      	b.n	8008760 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6899      	ldr	r1, [r3, #8]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	899a      	ldrh	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	791b      	ldrb	r3, [r3, #4]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f93a 	bl	80087fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2204      	movs	r2, #4
 800858a:	761a      	strb	r2, [r3, #24]
      break;
 800858c:	e0f1      	b.n	8008772 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	791b      	ldrb	r3, [r3, #4]
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 fc7d 	bl	8008e94 <USBH_LL_GetURBState>
 800859a:	4603      	mov	r3, r0
 800859c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d102      	bne.n	80085aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2209      	movs	r2, #9
 80085a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
 80085ac:	2b05      	cmp	r3, #5
 80085ae:	d102      	bne.n	80085b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085b0:	2303      	movs	r3, #3
 80085b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80085b4:	e0d6      	b.n	8008764 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	f040 80d3 	bne.w	8008764 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	220b      	movs	r2, #11
 80085c2:	761a      	strb	r2, [r3, #24]
      break;
 80085c4:	e0ce      	b.n	8008764 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6899      	ldr	r1, [r3, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	899a      	ldrh	r2, [r3, #12]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	795b      	ldrb	r3, [r3, #5]
 80085d2:	2001      	movs	r0, #1
 80085d4:	9000      	str	r0, [sp, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f8ea 	bl	80087b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085e2:	b29a      	uxth	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2206      	movs	r2, #6
 80085ec:	761a      	strb	r2, [r3, #24]
      break;
 80085ee:	e0c0      	b.n	8008772 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	795b      	ldrb	r3, [r3, #5]
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fc4c 	bl	8008e94 <USBH_LL_GetURBState>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d103      	bne.n	800860e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2207      	movs	r2, #7
 800860a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800860c:	e0ac      	b.n	8008768 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b05      	cmp	r3, #5
 8008612:	d105      	bne.n	8008620 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	220c      	movs	r2, #12
 8008618:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800861a:	2303      	movs	r3, #3
 800861c:	73fb      	strb	r3, [r7, #15]
      break;
 800861e:	e0a3      	b.n	8008768 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	2b02      	cmp	r3, #2
 8008624:	d103      	bne.n	800862e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2205      	movs	r2, #5
 800862a:	761a      	strb	r2, [r3, #24]
      break;
 800862c:	e09c      	b.n	8008768 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	2b04      	cmp	r3, #4
 8008632:	f040 8099 	bne.w	8008768 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	220b      	movs	r2, #11
 800863a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800863c:	2302      	movs	r3, #2
 800863e:	73fb      	strb	r3, [r7, #15]
      break;
 8008640:	e092      	b.n	8008768 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	791b      	ldrb	r3, [r3, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	2100      	movs	r1, #0
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f8d5 	bl	80087fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2208      	movs	r2, #8
 8008660:	761a      	strb	r2, [r3, #24]

      break;
 8008662:	e086      	b.n	8008772 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	791b      	ldrb	r3, [r3, #4]
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fc12 	bl	8008e94 <USBH_LL_GetURBState>
 8008670:	4603      	mov	r3, r0
 8008672:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008674:	7bbb      	ldrb	r3, [r7, #14]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d105      	bne.n	8008686 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	220d      	movs	r2, #13
 800867e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008684:	e072      	b.n	800876c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b04      	cmp	r3, #4
 800868a:	d103      	bne.n	8008694 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	220b      	movs	r2, #11
 8008690:	761a      	strb	r2, [r3, #24]
      break;
 8008692:	e06b      	b.n	800876c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d168      	bne.n	800876c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800869a:	2303      	movs	r3, #3
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	e065      	b.n	800876c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	795b      	ldrb	r3, [r3, #5]
 80086a4:	2201      	movs	r2, #1
 80086a6:	9200      	str	r2, [sp, #0]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f87f 	bl	80087b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	220a      	movs	r2, #10
 80086c2:	761a      	strb	r2, [r3, #24]
      break;
 80086c4:	e055      	b.n	8008772 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	795b      	ldrb	r3, [r3, #5]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fbe1 	bl	8008e94 <USBH_LL_GetURBState>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d105      	bne.n	80086e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	220d      	movs	r2, #13
 80086e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086e6:	e043      	b.n	8008770 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d103      	bne.n	80086f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2209      	movs	r2, #9
 80086f2:	761a      	strb	r2, [r3, #24]
      break;
 80086f4:	e03c      	b.n	8008770 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d139      	bne.n	8008770 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	220b      	movs	r2, #11
 8008700:	761a      	strb	r2, [r3, #24]
      break;
 8008702:	e035      	b.n	8008770 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	7e5b      	ldrb	r3, [r3, #25]
 8008708:	3301      	adds	r3, #1
 800870a:	b2da      	uxtb	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	765a      	strb	r2, [r3, #25]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	7e5b      	ldrb	r3, [r3, #25]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d806      	bhi.n	8008726 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008724:	e025      	b.n	8008772 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800872c:	2106      	movs	r1, #6
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	795b      	ldrb	r3, [r3, #5]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f90c 	bl	800895c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	791b      	ldrb	r3, [r3, #4]
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f906 	bl	800895c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
      break;
 800875a:	e00a      	b.n	8008772 <USBH_HandleControl+0x2de>

    default:
      break;
 800875c:	bf00      	nop
 800875e:	e008      	b.n	8008772 <USBH_HandleControl+0x2de>
      break;
 8008760:	bf00      	nop
 8008762:	e006      	b.n	8008772 <USBH_HandleControl+0x2de>
      break;
 8008764:	bf00      	nop
 8008766:	e004      	b.n	8008772 <USBH_HandleControl+0x2de>
      break;
 8008768:	bf00      	nop
 800876a:	e002      	b.n	8008772 <USBH_HandleControl+0x2de>
      break;
 800876c:	bf00      	nop
 800876e:	e000      	b.n	8008772 <USBH_HandleControl+0x2de>
      break;
 8008770:	bf00      	nop
  }

  return status;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af04      	add	r7, sp, #16
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800878a:	79f9      	ldrb	r1, [r7, #7]
 800878c:	2300      	movs	r3, #0
 800878e:	9303      	str	r3, [sp, #12]
 8008790:	2308      	movs	r3, #8
 8008792:	9302      	str	r3, [sp, #8]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	9301      	str	r3, [sp, #4]
 8008798:	2300      	movs	r3, #0
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2300      	movs	r3, #0
 800879e:	2200      	movs	r2, #0
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fb46 	bl	8008e32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af04      	add	r7, sp, #16
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4611      	mov	r1, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	460b      	mov	r3, r1
 80087c0:	80fb      	strh	r3, [r7, #6]
 80087c2:	4613      	mov	r3, r2
 80087c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80087d4:	7979      	ldrb	r1, [r7, #5]
 80087d6:	7e3b      	ldrb	r3, [r7, #24]
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	2301      	movs	r3, #1
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	2300      	movs	r3, #0
 80087e8:	2200      	movs	r2, #0
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 fb21 	bl	8008e32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b088      	sub	sp, #32
 80087fe:	af04      	add	r7, sp, #16
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	60b9      	str	r1, [r7, #8]
 8008804:	4611      	mov	r1, r2
 8008806:	461a      	mov	r2, r3
 8008808:	460b      	mov	r3, r1
 800880a:	80fb      	strh	r3, [r7, #6]
 800880c:	4613      	mov	r3, r2
 800880e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008810:	7979      	ldrb	r1, [r7, #5]
 8008812:	2300      	movs	r3, #0
 8008814:	9303      	str	r3, [sp, #12]
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	9302      	str	r3, [sp, #8]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	2301      	movs	r3, #1
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	2300      	movs	r3, #0
 8008824:	2201      	movs	r2, #1
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f000 fb03 	bl	8008e32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800882c:	2300      	movs	r3, #0

}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b088      	sub	sp, #32
 800883a:	af04      	add	r7, sp, #16
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	4611      	mov	r1, r2
 8008842:	461a      	mov	r2, r3
 8008844:	460b      	mov	r3, r1
 8008846:	80fb      	strh	r3, [r7, #6]
 8008848:	4613      	mov	r3, r2
 800884a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800885a:	7979      	ldrb	r1, [r7, #5]
 800885c:	7e3b      	ldrb	r3, [r7, #24]
 800885e:	9303      	str	r3, [sp, #12]
 8008860:	88fb      	ldrh	r3, [r7, #6]
 8008862:	9302      	str	r3, [sp, #8]
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	2301      	movs	r3, #1
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2302      	movs	r3, #2
 800886e:	2200      	movs	r2, #0
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fade 	bl	8008e32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b088      	sub	sp, #32
 8008884:	af04      	add	r7, sp, #16
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	4611      	mov	r1, r2
 800888c:	461a      	mov	r2, r3
 800888e:	460b      	mov	r3, r1
 8008890:	80fb      	strh	r3, [r7, #6]
 8008892:	4613      	mov	r3, r2
 8008894:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008896:	7979      	ldrb	r1, [r7, #5]
 8008898:	2300      	movs	r3, #0
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	2301      	movs	r3, #1
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	2302      	movs	r3, #2
 80088aa:	2201      	movs	r2, #1
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 fac0 	bl	8008e32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af04      	add	r7, sp, #16
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	4608      	mov	r0, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	70fb      	strb	r3, [r7, #3]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70bb      	strb	r3, [r7, #2]
 80088d2:	4613      	mov	r3, r2
 80088d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80088d6:	7878      	ldrb	r0, [r7, #1]
 80088d8:	78ba      	ldrb	r2, [r7, #2]
 80088da:	78f9      	ldrb	r1, [r7, #3]
 80088dc:	8b3b      	ldrh	r3, [r7, #24]
 80088de:	9302      	str	r3, [sp, #8]
 80088e0:	7d3b      	ldrb	r3, [r7, #20]
 80088e2:	9301      	str	r3, [sp, #4]
 80088e4:	7c3b      	ldrb	r3, [r7, #16]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	4603      	mov	r3, r0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fa53 	bl	8008d96 <USBH_LL_OpenPipe>

  return USBH_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	4619      	mov	r1, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa72 	bl	8008df4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f836 	bl	8008998 <USBH_GetFreePipe>
 800892c:	4603      	mov	r3, r0
 800892e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008930:	89fb      	ldrh	r3, [r7, #14]
 8008932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008936:	4293      	cmp	r3, r2
 8008938:	d00a      	beq.n	8008950 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800893a:	78fa      	ldrb	r2, [r7, #3]
 800893c:	89fb      	ldrh	r3, [r7, #14]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	33e0      	adds	r3, #224	; 0xe0
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	440b      	add	r3, r1
 800894e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008950:	89fb      	ldrh	r3, [r7, #14]
 8008952:	b2db      	uxtb	r3, r3
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	d80d      	bhi.n	800898a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800896e:	78fb      	ldrb	r3, [r7, #3]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	33e0      	adds	r3, #224	; 0xe0
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	78fb      	ldrb	r3, [r7, #3]
 800897c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	33e0      	adds	r3, #224	; 0xe0
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	440b      	add	r3, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]
 80089a8:	e00f      	b.n	80089ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	33e0      	adds	r3, #224	; 0xe0
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d102      	bne.n	80089c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	e007      	b.n	80089d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	3301      	adds	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	2b0f      	cmp	r3, #15
 80089ce:	d9ec      	bls.n	80089aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80089d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80089e4:	2201      	movs	r2, #1
 80089e6:	490e      	ldr	r1, [pc, #56]	; (8008a20 <MX_USB_HOST_Init+0x40>)
 80089e8:	480e      	ldr	r0, [pc, #56]	; (8008a24 <MX_USB_HOST_Init+0x44>)
 80089ea:	f7fe fba7 	bl	800713c <USBH_Init>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d001      	beq.n	80089f8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80089f4:	f7f8 f848 	bl	8000a88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80089f8:	490b      	ldr	r1, [pc, #44]	; (8008a28 <MX_USB_HOST_Init+0x48>)
 80089fa:	480a      	ldr	r0, [pc, #40]	; (8008a24 <MX_USB_HOST_Init+0x44>)
 80089fc:	f7fe fc2c 	bl	8007258 <USBH_RegisterClass>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a06:	f7f8 f83f 	bl	8000a88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008a0a:	4806      	ldr	r0, [pc, #24]	; (8008a24 <MX_USB_HOST_Init+0x44>)
 8008a0c:	f7fe fcb0 	bl	8007370 <USBH_Start>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008a16:	f7f8 f837 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008a1a:	bf00      	nop
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	08008a41 	.word	0x08008a41
 8008a24:	20000250 	.word	0x20000250
 8008a28:	2000000c 	.word	0x2000000c

08008a2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008a30:	4802      	ldr	r0, [pc, #8]	; (8008a3c <MX_USB_HOST_Process+0x10>)
 8008a32:	f7fe fcad 	bl	8007390 <USBH_Process>
}
 8008a36:	bf00      	nop
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000250 	.word	0x20000250

08008a40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	460b      	mov	r3, r1
 8008a4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008a4c:	78fb      	ldrb	r3, [r7, #3]
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d819      	bhi.n	8008a88 <USBH_UserProcess+0x48>
 8008a54:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <USBH_UserProcess+0x1c>)
 8008a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5a:	bf00      	nop
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	08008a79 	.word	0x08008a79
 8008a64:	08008a89 	.word	0x08008a89
 8008a68:	08008a81 	.word	0x08008a81
 8008a6c:	08008a71 	.word	0x08008a71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008a70:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <USBH_UserProcess+0x58>)
 8008a72:	2203      	movs	r2, #3
 8008a74:	701a      	strb	r2, [r3, #0]
  break;
 8008a76:	e008      	b.n	8008a8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008a78:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <USBH_UserProcess+0x58>)
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	701a      	strb	r2, [r3, #0]
  break;
 8008a7e:	e004      	b.n	8008a8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <USBH_UserProcess+0x58>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	701a      	strb	r2, [r3, #0]
  break;
 8008a86:	e000      	b.n	8008a8a <USBH_UserProcess+0x4a>

  default:
  break;
 8008a88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000628 	.word	0x20000628

08008a9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b08a      	sub	sp, #40	; 0x28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	605a      	str	r2, [r3, #4]
 8008aae:	609a      	str	r2, [r3, #8]
 8008ab0:	60da      	str	r2, [r3, #12]
 8008ab2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008abc:	d147      	bne.n	8008b4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac6:	4a24      	ldr	r2, [pc, #144]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ace:	4b22      	ldr	r3, [pc, #136]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ae8:	f107 0314 	add.w	r3, r7, #20
 8008aec:	4619      	mov	r1, r3
 8008aee:	481b      	ldr	r0, [pc, #108]	; (8008b5c <HAL_HCD_MspInit+0xc0>)
 8008af0:	f7f8 fed8 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008af4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008afa:	2302      	movs	r3, #2
 8008afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b02:	2300      	movs	r3, #0
 8008b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b06:	230a      	movs	r3, #10
 8008b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b0a:	f107 0314 	add.w	r3, r7, #20
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4812      	ldr	r0, [pc, #72]	; (8008b5c <HAL_HCD_MspInit+0xc0>)
 8008b12:	f7f8 fec7 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1a:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b20:	6353      	str	r3, [r2, #52]	; 0x34
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2a:	4a0b      	ldr	r2, [pc, #44]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b30:	6453      	str	r3, [r2, #68]	; 0x44
 8008b32:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <HAL_HCD_MspInit+0xbc>)
 8008b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2100      	movs	r1, #0
 8008b42:	2043      	movs	r0, #67	; 0x43
 8008b44:	f7f8 fb8d 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b48:	2043      	movs	r0, #67	; 0x43
 8008b4a:	f7f8 fba6 	bl	800129a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b4e:	bf00      	nop
 8008b50:	3728      	adds	r7, #40	; 0x28
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	40023800 	.word	0x40023800
 8008b5c:	40020000 	.word	0x40020000

08008b60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe ffed 	bl	8007b4e <USBH_LL_IncTimer>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff f825 	bl	8007bda <USBH_LL_Connect>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff f82e 	bl	8007c08 <USBH_LL_Disconnect>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe ffdf 	bl	8007ba2 <USBH_LL_PortEnabled>
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fe ffdf 	bl	8007bbe <USBH_LL_PortDisabled>
}
 8008c00:	bf00      	nop
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d12a      	bne.n	8008c70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008c1a:	4a18      	ldr	r2, [pc, #96]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c26:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c2a:	4b14      	ldr	r3, [pc, #80]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008c32:	4b12      	ldr	r3, [pc, #72]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c34:	2208      	movs	r2, #8
 8008c36:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008c38:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008c44:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c46:	2202      	movs	r2, #2
 8008c48:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c4a:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008c50:	480a      	ldr	r0, [pc, #40]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c52:	f7f8 ffdc 	bl	8001c0e <HAL_HCD_Init>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008c5c:	f7f7 ff14 	bl	8000a88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008c60:	4806      	ldr	r0, [pc, #24]	; (8008c7c <USBH_LL_Init+0x74>)
 8008c62:	f7f9 fbc0 	bl	80023e6 <HAL_HCD_GetCurrentFrame>
 8008c66:	4603      	mov	r3, r0
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe ff60 	bl	8007b30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	2000062c 	.word	0x2000062c

08008c80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7f9 fb2f 	bl	80022fa <HAL_HCD_Start>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f95c 	bl	8008f60 <USBH_Get_USB_Status>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7f9 fb37 	bl	8002340 <HAL_HCD_Stop>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 f941 	bl	8008f60 <USBH_Get_USB_Status>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7f9 fb7f 	bl	8002402 <HAL_HCD_GetCurrentSpeed>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d00c      	beq.n	8008d24 <USBH_LL_GetSpeed+0x38>
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d80d      	bhi.n	8008d2a <USBH_LL_GetSpeed+0x3e>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <USBH_LL_GetSpeed+0x2c>
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d003      	beq.n	8008d1e <USBH_LL_GetSpeed+0x32>
 8008d16:	e008      	b.n	8008d2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1c:	e008      	b.n	8008d30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
    break;
 8008d22:	e005      	b.n	8008d30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008d24:	2302      	movs	r3, #2
 8008d26:	73fb      	strb	r3, [r7, #15]
    break;
 8008d28:	e002      	b.n	8008d30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d2e:	bf00      	nop
  }
  return  speed;
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7f9 fb12 	bl	800237a <HAL_HCD_ResetPort>
 8008d56:	4603      	mov	r3, r0
 8008d58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 f8ff 	bl	8008f60 <USBH_Get_USB_Status>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7f9 fb19 	bl	80023be <HAL_HCD_HC_GetXferCount>
 8008d8c:	4603      	mov	r3, r0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008d96:	b590      	push	{r4, r7, lr}
 8008d98:	b089      	sub	sp, #36	; 0x24
 8008d9a:	af04      	add	r7, sp, #16
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4611      	mov	r1, r2
 8008da2:	461a      	mov	r2, r3
 8008da4:	4603      	mov	r3, r0
 8008da6:	70fb      	strb	r3, [r7, #3]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70bb      	strb	r3, [r7, #2]
 8008dac:	4613      	mov	r3, r2
 8008dae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008db4:	2300      	movs	r3, #0
 8008db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008dbe:	787c      	ldrb	r4, [r7, #1]
 8008dc0:	78ba      	ldrb	r2, [r7, #2]
 8008dc2:	78f9      	ldrb	r1, [r7, #3]
 8008dc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008dcc:	9301      	str	r3, [sp, #4]
 8008dce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	4623      	mov	r3, r4
 8008dd6:	f7f8 ff7c 	bl	8001cd2 <HAL_HCD_HC_Init>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 f8bd 	bl	8008f60 <USBH_Get_USB_Status>
 8008de6:	4603      	mov	r3, r0
 8008de8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3714      	adds	r7, #20
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd90      	pop	{r4, r7, pc}

08008df4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7f8 ffec 	bl	8001df0 <HAL_HCD_HC_Halt>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 f89e 	bl	8008f60 <USBH_Get_USB_Status>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008e32:	b590      	push	{r4, r7, lr}
 8008e34:	b089      	sub	sp, #36	; 0x24
 8008e36:	af04      	add	r7, sp, #16
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	4608      	mov	r0, r1
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	461a      	mov	r2, r3
 8008e40:	4603      	mov	r3, r0
 8008e42:	70fb      	strb	r3, [r7, #3]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70bb      	strb	r3, [r7, #2]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008e5a:	787c      	ldrb	r4, [r7, #1]
 8008e5c:	78ba      	ldrb	r2, [r7, #2]
 8008e5e:	78f9      	ldrb	r1, [r7, #3]
 8008e60:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008e64:	9303      	str	r3, [sp, #12]
 8008e66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e68:	9302      	str	r3, [sp, #8]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	4623      	mov	r3, r4
 8008e76:	f7f8 ffdf 	bl	8001e38 <HAL_HCD_HC_SubmitRequest>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008e7e:	7bfb      	ldrb	r3, [r7, #15]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 f86d 	bl	8008f60 <USBH_Get_USB_Status>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd90      	pop	{r4, r7, pc}

08008e94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7f9 fa73 	bl	8002396 <HAL_HCD_HC_GetURBState>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d103      	bne.n	8008ed8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 f870 	bl	8008fb8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008ed8:	20c8      	movs	r0, #200	; 0xc8
 8008eda:	f7f8 f8c3 	bl	8001064 <HAL_Delay>
  return USBH_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008efe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	212c      	movs	r1, #44	; 0x2c
 8008f06:	fb01 f303 	mul.w	r3, r1, r3
 8008f0a:	4413      	add	r3, r2
 8008f0c:	333b      	adds	r3, #59	; 0x3b
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d009      	beq.n	8008f28 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008f14:	78fb      	ldrb	r3, [r7, #3]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	212c      	movs	r1, #44	; 0x2c
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	4413      	add	r3, r2
 8008f20:	3354      	adds	r3, #84	; 0x54
 8008f22:	78ba      	ldrb	r2, [r7, #2]
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e008      	b.n	8008f3a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	212c      	movs	r1, #44	; 0x2c
 8008f2e:	fb01 f303 	mul.w	r3, r1, r3
 8008f32:	4413      	add	r3, r2
 8008f34:	3355      	adds	r3, #85	; 0x55
 8008f36:	78ba      	ldrb	r2, [r7, #2]
 8008f38:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7f8 f887 	bl	8001064 <HAL_Delay>
}
 8008f56:	bf00      	nop
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d817      	bhi.n	8008fa4 <USBH_Get_USB_Status+0x44>
 8008f74:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <USBH_Get_USB_Status+0x1c>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008f8d 	.word	0x08008f8d
 8008f80:	08008f93 	.word	0x08008f93
 8008f84:	08008f99 	.word	0x08008f99
 8008f88:	08008f9f 	.word	0x08008f9f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f90:	e00b      	b.n	8008faa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008f92:	2302      	movs	r3, #2
 8008f94:	73fb      	strb	r3, [r7, #15]
    break;
 8008f96:	e008      	b.n	8008faa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9c:	e005      	b.n	8008faa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa2:	e002      	b.n	8008faa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa8:	bf00      	nop
  }
  return usb_status;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	e001      	b.n	8008fd6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	461a      	mov	r2, r3
 8008fda:	2101      	movs	r1, #1
 8008fdc:	4803      	ldr	r0, [pc, #12]	; (8008fec <MX_DriverVbusFS+0x34>)
 8008fde:	f7f8 fdfd 	bl	8001bdc <HAL_GPIO_WritePin>
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	40020800 	.word	0x40020800

08008ff0 <__errno>:
 8008ff0:	4b01      	ldr	r3, [pc, #4]	; (8008ff8 <__errno+0x8>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	2000002c 	.word	0x2000002c

08008ffc <__libc_init_array>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	4d0d      	ldr	r5, [pc, #52]	; (8009034 <__libc_init_array+0x38>)
 8009000:	4c0d      	ldr	r4, [pc, #52]	; (8009038 <__libc_init_array+0x3c>)
 8009002:	1b64      	subs	r4, r4, r5
 8009004:	10a4      	asrs	r4, r4, #2
 8009006:	2600      	movs	r6, #0
 8009008:	42a6      	cmp	r6, r4
 800900a:	d109      	bne.n	8009020 <__libc_init_array+0x24>
 800900c:	4d0b      	ldr	r5, [pc, #44]	; (800903c <__libc_init_array+0x40>)
 800900e:	4c0c      	ldr	r4, [pc, #48]	; (8009040 <__libc_init_array+0x44>)
 8009010:	f000 f92e 	bl	8009270 <_init>
 8009014:	1b64      	subs	r4, r4, r5
 8009016:	10a4      	asrs	r4, r4, #2
 8009018:	2600      	movs	r6, #0
 800901a:	42a6      	cmp	r6, r4
 800901c:	d105      	bne.n	800902a <__libc_init_array+0x2e>
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	f855 3b04 	ldr.w	r3, [r5], #4
 8009024:	4798      	blx	r3
 8009026:	3601      	adds	r6, #1
 8009028:	e7ee      	b.n	8009008 <__libc_init_array+0xc>
 800902a:	f855 3b04 	ldr.w	r3, [r5], #4
 800902e:	4798      	blx	r3
 8009030:	3601      	adds	r6, #1
 8009032:	e7f2      	b.n	800901a <__libc_init_array+0x1e>
 8009034:	080092b4 	.word	0x080092b4
 8009038:	080092b4 	.word	0x080092b4
 800903c:	080092b4 	.word	0x080092b4
 8009040:	080092b8 	.word	0x080092b8

08009044 <malloc>:
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <malloc+0xc>)
 8009046:	4601      	mov	r1, r0
 8009048:	6818      	ldr	r0, [r3, #0]
 800904a:	f000 b87f 	b.w	800914c <_malloc_r>
 800904e:	bf00      	nop
 8009050:	2000002c 	.word	0x2000002c

08009054 <free>:
 8009054:	4b02      	ldr	r3, [pc, #8]	; (8009060 <free+0xc>)
 8009056:	4601      	mov	r1, r0
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	f000 b80b 	b.w	8009074 <_free_r>
 800905e:	bf00      	nop
 8009060:	2000002c 	.word	0x2000002c

08009064 <memset>:
 8009064:	4402      	add	r2, r0
 8009066:	4603      	mov	r3, r0
 8009068:	4293      	cmp	r3, r2
 800906a:	d100      	bne.n	800906e <memset+0xa>
 800906c:	4770      	bx	lr
 800906e:	f803 1b01 	strb.w	r1, [r3], #1
 8009072:	e7f9      	b.n	8009068 <memset+0x4>

08009074 <_free_r>:
 8009074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009076:	2900      	cmp	r1, #0
 8009078:	d044      	beq.n	8009104 <_free_r+0x90>
 800907a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800907e:	9001      	str	r0, [sp, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f1a1 0404 	sub.w	r4, r1, #4
 8009086:	bfb8      	it	lt
 8009088:	18e4      	addlt	r4, r4, r3
 800908a:	f000 f8e3 	bl	8009254 <__malloc_lock>
 800908e:	4a1e      	ldr	r2, [pc, #120]	; (8009108 <_free_r+0x94>)
 8009090:	9801      	ldr	r0, [sp, #4]
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	b933      	cbnz	r3, 80090a4 <_free_r+0x30>
 8009096:	6063      	str	r3, [r4, #4]
 8009098:	6014      	str	r4, [r2, #0]
 800909a:	b003      	add	sp, #12
 800909c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090a0:	f000 b8de 	b.w	8009260 <__malloc_unlock>
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d908      	bls.n	80090ba <_free_r+0x46>
 80090a8:	6825      	ldr	r5, [r4, #0]
 80090aa:	1961      	adds	r1, r4, r5
 80090ac:	428b      	cmp	r3, r1
 80090ae:	bf01      	itttt	eq
 80090b0:	6819      	ldreq	r1, [r3, #0]
 80090b2:	685b      	ldreq	r3, [r3, #4]
 80090b4:	1949      	addeq	r1, r1, r5
 80090b6:	6021      	streq	r1, [r4, #0]
 80090b8:	e7ed      	b.n	8009096 <_free_r+0x22>
 80090ba:	461a      	mov	r2, r3
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b10b      	cbz	r3, 80090c4 <_free_r+0x50>
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	d9fa      	bls.n	80090ba <_free_r+0x46>
 80090c4:	6811      	ldr	r1, [r2, #0]
 80090c6:	1855      	adds	r5, r2, r1
 80090c8:	42a5      	cmp	r5, r4
 80090ca:	d10b      	bne.n	80090e4 <_free_r+0x70>
 80090cc:	6824      	ldr	r4, [r4, #0]
 80090ce:	4421      	add	r1, r4
 80090d0:	1854      	adds	r4, r2, r1
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	6011      	str	r1, [r2, #0]
 80090d6:	d1e0      	bne.n	800909a <_free_r+0x26>
 80090d8:	681c      	ldr	r4, [r3, #0]
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	6053      	str	r3, [r2, #4]
 80090de:	4421      	add	r1, r4
 80090e0:	6011      	str	r1, [r2, #0]
 80090e2:	e7da      	b.n	800909a <_free_r+0x26>
 80090e4:	d902      	bls.n	80090ec <_free_r+0x78>
 80090e6:	230c      	movs	r3, #12
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	e7d6      	b.n	800909a <_free_r+0x26>
 80090ec:	6825      	ldr	r5, [r4, #0]
 80090ee:	1961      	adds	r1, r4, r5
 80090f0:	428b      	cmp	r3, r1
 80090f2:	bf04      	itt	eq
 80090f4:	6819      	ldreq	r1, [r3, #0]
 80090f6:	685b      	ldreq	r3, [r3, #4]
 80090f8:	6063      	str	r3, [r4, #4]
 80090fa:	bf04      	itt	eq
 80090fc:	1949      	addeq	r1, r1, r5
 80090fe:	6021      	streq	r1, [r4, #0]
 8009100:	6054      	str	r4, [r2, #4]
 8009102:	e7ca      	b.n	800909a <_free_r+0x26>
 8009104:	b003      	add	sp, #12
 8009106:	bd30      	pop	{r4, r5, pc}
 8009108:	20000930 	.word	0x20000930

0800910c <sbrk_aligned>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4e0e      	ldr	r6, [pc, #56]	; (8009148 <sbrk_aligned+0x3c>)
 8009110:	460c      	mov	r4, r1
 8009112:	6831      	ldr	r1, [r6, #0]
 8009114:	4605      	mov	r5, r0
 8009116:	b911      	cbnz	r1, 800911e <sbrk_aligned+0x12>
 8009118:	f000 f88c 	bl	8009234 <_sbrk_r>
 800911c:	6030      	str	r0, [r6, #0]
 800911e:	4621      	mov	r1, r4
 8009120:	4628      	mov	r0, r5
 8009122:	f000 f887 	bl	8009234 <_sbrk_r>
 8009126:	1c43      	adds	r3, r0, #1
 8009128:	d00a      	beq.n	8009140 <sbrk_aligned+0x34>
 800912a:	1cc4      	adds	r4, r0, #3
 800912c:	f024 0403 	bic.w	r4, r4, #3
 8009130:	42a0      	cmp	r0, r4
 8009132:	d007      	beq.n	8009144 <sbrk_aligned+0x38>
 8009134:	1a21      	subs	r1, r4, r0
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f87c 	bl	8009234 <_sbrk_r>
 800913c:	3001      	adds	r0, #1
 800913e:	d101      	bne.n	8009144 <sbrk_aligned+0x38>
 8009140:	f04f 34ff 	mov.w	r4, #4294967295
 8009144:	4620      	mov	r0, r4
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	20000934 	.word	0x20000934

0800914c <_malloc_r>:
 800914c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009150:	1ccd      	adds	r5, r1, #3
 8009152:	f025 0503 	bic.w	r5, r5, #3
 8009156:	3508      	adds	r5, #8
 8009158:	2d0c      	cmp	r5, #12
 800915a:	bf38      	it	cc
 800915c:	250c      	movcc	r5, #12
 800915e:	2d00      	cmp	r5, #0
 8009160:	4607      	mov	r7, r0
 8009162:	db01      	blt.n	8009168 <_malloc_r+0x1c>
 8009164:	42a9      	cmp	r1, r5
 8009166:	d905      	bls.n	8009174 <_malloc_r+0x28>
 8009168:	230c      	movs	r3, #12
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	2600      	movs	r6, #0
 800916e:	4630      	mov	r0, r6
 8009170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009174:	4e2e      	ldr	r6, [pc, #184]	; (8009230 <_malloc_r+0xe4>)
 8009176:	f000 f86d 	bl	8009254 <__malloc_lock>
 800917a:	6833      	ldr	r3, [r6, #0]
 800917c:	461c      	mov	r4, r3
 800917e:	bb34      	cbnz	r4, 80091ce <_malloc_r+0x82>
 8009180:	4629      	mov	r1, r5
 8009182:	4638      	mov	r0, r7
 8009184:	f7ff ffc2 	bl	800910c <sbrk_aligned>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	4604      	mov	r4, r0
 800918c:	d14d      	bne.n	800922a <_malloc_r+0xde>
 800918e:	6834      	ldr	r4, [r6, #0]
 8009190:	4626      	mov	r6, r4
 8009192:	2e00      	cmp	r6, #0
 8009194:	d140      	bne.n	8009218 <_malloc_r+0xcc>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	4631      	mov	r1, r6
 800919a:	4638      	mov	r0, r7
 800919c:	eb04 0803 	add.w	r8, r4, r3
 80091a0:	f000 f848 	bl	8009234 <_sbrk_r>
 80091a4:	4580      	cmp	r8, r0
 80091a6:	d13a      	bne.n	800921e <_malloc_r+0xd2>
 80091a8:	6821      	ldr	r1, [r4, #0]
 80091aa:	3503      	adds	r5, #3
 80091ac:	1a6d      	subs	r5, r5, r1
 80091ae:	f025 0503 	bic.w	r5, r5, #3
 80091b2:	3508      	adds	r5, #8
 80091b4:	2d0c      	cmp	r5, #12
 80091b6:	bf38      	it	cc
 80091b8:	250c      	movcc	r5, #12
 80091ba:	4629      	mov	r1, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	f7ff ffa5 	bl	800910c <sbrk_aligned>
 80091c2:	3001      	adds	r0, #1
 80091c4:	d02b      	beq.n	800921e <_malloc_r+0xd2>
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	442b      	add	r3, r5
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	e00e      	b.n	80091ec <_malloc_r+0xa0>
 80091ce:	6822      	ldr	r2, [r4, #0]
 80091d0:	1b52      	subs	r2, r2, r5
 80091d2:	d41e      	bmi.n	8009212 <_malloc_r+0xc6>
 80091d4:	2a0b      	cmp	r2, #11
 80091d6:	d916      	bls.n	8009206 <_malloc_r+0xba>
 80091d8:	1961      	adds	r1, r4, r5
 80091da:	42a3      	cmp	r3, r4
 80091dc:	6025      	str	r5, [r4, #0]
 80091de:	bf18      	it	ne
 80091e0:	6059      	strne	r1, [r3, #4]
 80091e2:	6863      	ldr	r3, [r4, #4]
 80091e4:	bf08      	it	eq
 80091e6:	6031      	streq	r1, [r6, #0]
 80091e8:	5162      	str	r2, [r4, r5]
 80091ea:	604b      	str	r3, [r1, #4]
 80091ec:	4638      	mov	r0, r7
 80091ee:	f104 060b 	add.w	r6, r4, #11
 80091f2:	f000 f835 	bl	8009260 <__malloc_unlock>
 80091f6:	f026 0607 	bic.w	r6, r6, #7
 80091fa:	1d23      	adds	r3, r4, #4
 80091fc:	1af2      	subs	r2, r6, r3
 80091fe:	d0b6      	beq.n	800916e <_malloc_r+0x22>
 8009200:	1b9b      	subs	r3, r3, r6
 8009202:	50a3      	str	r3, [r4, r2]
 8009204:	e7b3      	b.n	800916e <_malloc_r+0x22>
 8009206:	6862      	ldr	r2, [r4, #4]
 8009208:	42a3      	cmp	r3, r4
 800920a:	bf0c      	ite	eq
 800920c:	6032      	streq	r2, [r6, #0]
 800920e:	605a      	strne	r2, [r3, #4]
 8009210:	e7ec      	b.n	80091ec <_malloc_r+0xa0>
 8009212:	4623      	mov	r3, r4
 8009214:	6864      	ldr	r4, [r4, #4]
 8009216:	e7b2      	b.n	800917e <_malloc_r+0x32>
 8009218:	4634      	mov	r4, r6
 800921a:	6876      	ldr	r6, [r6, #4]
 800921c:	e7b9      	b.n	8009192 <_malloc_r+0x46>
 800921e:	230c      	movs	r3, #12
 8009220:	603b      	str	r3, [r7, #0]
 8009222:	4638      	mov	r0, r7
 8009224:	f000 f81c 	bl	8009260 <__malloc_unlock>
 8009228:	e7a1      	b.n	800916e <_malloc_r+0x22>
 800922a:	6025      	str	r5, [r4, #0]
 800922c:	e7de      	b.n	80091ec <_malloc_r+0xa0>
 800922e:	bf00      	nop
 8009230:	20000930 	.word	0x20000930

08009234 <_sbrk_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_sbrk_r+0x1c>)
 8009238:	2300      	movs	r3, #0
 800923a:	4604      	mov	r4, r0
 800923c:	4608      	mov	r0, r1
 800923e:	602b      	str	r3, [r5, #0]
 8009240:	f7f7 fe2c 	bl	8000e9c <_sbrk>
 8009244:	1c43      	adds	r3, r0, #1
 8009246:	d102      	bne.n	800924e <_sbrk_r+0x1a>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b103      	cbz	r3, 800924e <_sbrk_r+0x1a>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd38      	pop	{r3, r4, r5, pc}
 8009250:	20000938 	.word	0x20000938

08009254 <__malloc_lock>:
 8009254:	4801      	ldr	r0, [pc, #4]	; (800925c <__malloc_lock+0x8>)
 8009256:	f000 b809 	b.w	800926c <__retarget_lock_acquire_recursive>
 800925a:	bf00      	nop
 800925c:	2000093c 	.word	0x2000093c

08009260 <__malloc_unlock>:
 8009260:	4801      	ldr	r0, [pc, #4]	; (8009268 <__malloc_unlock+0x8>)
 8009262:	f000 b804 	b.w	800926e <__retarget_lock_release_recursive>
 8009266:	bf00      	nop
 8009268:	2000093c 	.word	0x2000093c

0800926c <__retarget_lock_acquire_recursive>:
 800926c:	4770      	bx	lr

0800926e <__retarget_lock_release_recursive>:
 800926e:	4770      	bx	lr

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
