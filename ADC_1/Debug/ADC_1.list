
ADC_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007398  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08007528  08007528  00017528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a34  08007a34  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a3c  08007a3c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000088  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005d08  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000149b  00000000  00000000  00025f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005c8  00000000  00000000  000273b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000510  00000000  00000000  00027980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021cfb  00000000  00000000  00027e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006d9a  00000000  00000000  00049b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6fe  00000000  00000000  00050925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f023  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf8  00000000  00000000  0011f074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007510 	.word	0x08007510

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007510 	.word	0x08007510

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001018:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	e000      	b.n	8001024 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001022:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc9 	bl	8000ff8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
float a = 11, b=5;
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <main+0xa8>)
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <main+0xac>)
 800108c:	60bb      	str	r3, [r7, #8]
float c;
  c= a/b;
 800108e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001092:	ed97 7a02 	vldr	s14, [r7, #8]
 8001096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109a:	edc7 7a01 	vstr	s15, [r7, #4]
  printf("the division is %1.2f\n ",c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fa52 	bl	8000548 <__aeabi_f2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4821      	ldr	r0, [pc, #132]	; (8001130 <main+0xb0>)
 80010aa:	f002 fc21 	bl	80038f0 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80010ae:	f000 fab5 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f84b 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 f907 	bl	80012c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010ba:	f000 f8b1 	bl	8001220 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start(&hadc1);
 80010be:	481d      	ldr	r0, [pc, #116]	; (8001134 <main+0xb4>)
 80010c0:	f000 fb86 	bl	80017d0 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 80010c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c8:	f000 fb1a 	bl	8001700 <HAL_Delay>
	  ADC_VALUE = HAL_ADC_GetValue(&hadc1);
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <main+0xb4>)
 80010ce:	f000 fc51 	bl	8001974 <HAL_ADC_GetValue>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <main+0xb8>)
 80010d6:	6013      	str	r3, [r2, #0]
	  analog_vlaue = (float)ADC_VALUE;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <main+0xb8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <main+0xbc>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]
	  voltage = (analog_vlaue*3)/1023;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <main+0xbc>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010f8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001140 <main+0xc0>
 80010fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <main+0xc4>)
 8001102:	edc3 7a00 	vstr	s15, [r3]
	  printf("The ADC value is: %d and the voltage is: %1.2f \n",ADC_VALUE,voltage);
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <main+0xb8>)
 8001108:	681c      	ldr	r4, [r3, #0]
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <main+0xc4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fa1a 	bl	8000548 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4621      	mov	r1, r4
 800111a:	480b      	ldr	r0, [pc, #44]	; (8001148 <main+0xc8>)
 800111c:	f002 fbe8 	bl	80038f0 <iprintf>
	  HAL_ADC_Start(&hadc1);
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <main+0xb4>)
 8001122:	f000 fb55 	bl	80017d0 <HAL_ADC_Start>
	  HAL_Delay(1000);
 8001126:	e7cd      	b.n	80010c4 <main+0x44>
 8001128:	41300000 	.word	0x41300000
 800112c:	40a00000 	.word	0x40a00000
 8001130:	08007528 	.word	0x08007528
 8001134:	200001fc 	.word	0x200001fc
 8001138:	20000244 	.word	0x20000244
 800113c:	2000024c 	.word	0x2000024c
 8001140:	447fc000 	.word	0x447fc000
 8001144:	20000248 	.word	0x20000248
 8001148:	08007540 	.word	0x08007540

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	; 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2230      	movs	r2, #48	; 0x30
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fd46 	bl	8002bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b28      	ldr	r3, [pc, #160]	; (8001218 <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	4a27      	ldr	r2, [pc, #156]	; (8001218 <SystemClock_Config+0xcc>)
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117e:	6413      	str	r3, [r2, #64]	; 0x40
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <SystemClock_Config+0xd0>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	; (800121c <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011bc:	2308      	movs	r3, #8
 80011be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ca:	2307      	movs	r3, #7
 80011cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 f87c 	bl	80022d0 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011de:	f000 f89b 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2302      	movs	r3, #2
 80011e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2105      	movs	r1, #5
 8001200:	4618      	mov	r0, r3
 8001202:	f001 fadd 	bl	80027c0 <HAL_RCC_ClockConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800120c:	f000 f884 	bl	8001318 <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	3750      	adds	r7, #80	; 0x50
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	463b      	mov	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <MX_ADC1_Init+0xa0>)
 8001236:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <MX_ADC1_Init+0x9c>)
 800123a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800123e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001242:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001246:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_ADC1_Init+0x9c>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800124e:	4b1b      	ldr	r3, [pc, #108]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001250:	2200      	movs	r2, #0
 8001252:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_ADC1_Init+0x9c>)
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <MX_ADC1_Init+0xa4>)
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_ADC1_Init+0x9c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001270:	2201      	movs	r2, #1
 8001272:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_ADC1_Init+0x9c>)
 800127e:	2201      	movs	r2, #1
 8001280:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <MX_ADC1_Init+0x9c>)
 8001284:	f000 fa60 	bl	8001748 <HAL_ADC_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800128e:	f000 f843 	bl	8001318 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001292:	2301      	movs	r3, #1
 8001294:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_ADC1_Init+0x9c>)
 80012a4:	f000 fb74 	bl	8001990 <HAL_ADC_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012ae:	f000 f833 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200001fc 	.word	0x200001fc
 80012c0:	40012000 	.word	0x40012000
 80012c4:	0f000001 	.word	0x0f000001

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a0f      	ldr	r2, [pc, #60]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_GPIO_Init+0x4c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <HAL_MspInit+0x4c>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_MspInit+0x4c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001362:	2007      	movs	r0, #7
 8001364:	f000 fde4 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_ADC_MspInit+0x7c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d127      	bne.n	80013e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_ADC_MspInit+0x80>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <HAL_ADC_MspInit+0x80>)
 80013a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <HAL_ADC_MspInit+0x80>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_ADC_MspInit+0x80>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_ADC_MspInit+0x80>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_ADC_MspInit+0x80>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_ADC_MspInit+0x84>)
 80013e2:	f000 fdd9 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	; 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40012000 	.word	0x40012000
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <MemManage_Handler+0x4>

0800140e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler+0x4>

0800141a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001448:	f000 f93a 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}

08001450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	return 1;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <_kill>:

int _kill(int pid, int sig)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800146a:	f001 fb95 	bl	8002b98 <__errno>
 800146e:	4603      	mov	r3, r0
 8001470:	2216      	movs	r2, #22
 8001472:	601a      	str	r2, [r3, #0]
	return -1;
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_exit>:

void _exit (int status)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffe7 	bl	8001460 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001492:	e7fe      	b.n	8001492 <_exit+0x12>

08001494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	e00a      	b.n	80014bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014a6:	f3af 8000 	nop.w
 80014aa:	4601      	mov	r1, r0
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	b2ca      	uxtb	r2, r1
 80014b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbf0      	blt.n	80014a6 <_read+0x12>
	}

return len;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_close>:
	}
	return len;
}

int _close(int file)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return -1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f6:	605a      	str	r2, [r3, #4]
	return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <_isatty>:

int _isatty(int file)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
	return 1;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
	return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f001 fb16 	bl	8002b98 <__errno>
 800156c:	4603      	mov	r3, r0
 800156e:	220c      	movs	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <_sbrk+0x64>)
 8001588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20020000 	.word	0x20020000
 8001598:	00000400 	.word	0x00000400
 800159c:	20000250 	.word	0x20000250
 80015a0:	20000268 	.word	0x20000268

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d0:	4a0e      	ldr	r2, [pc, #56]	; (800160c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0b      	ldr	r2, [pc, #44]	; (8001610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e4:	4c0b      	ldr	r4, [pc, #44]	; (8001614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f2:	f7ff ffd7 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f001 fad5 	bl	8002ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff fd41 	bl	8001080 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800160c:	08007a44 	.word	0x08007a44
  ldr r2, =_sbss
 8001610:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001614:	20000268 	.word	0x20000268

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 fc73 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fe68 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 fc7d 	bl	8001f7e <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 fc53 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000008 	.word	0x20000008
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	20000254 	.word	0x20000254

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000254 	.word	0x20000254

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008

08001748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e033      	b.n	80017c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe04 	bl	8001374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	f043 0202 	orr.w	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa1a 	bl	8001bd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
 80017b6:	e001      	b.n	80017bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Start+0x1a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0b2      	b.n	8001950 <HAL_ADC_Start+0x180>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d018      	beq.n	8001832 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_ADC_Start+0x18c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_ADC_Start+0x190>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9a      	lsrs	r2, r3, #18
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d17a      	bne.n	8001936 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187e:	d106      	bne.n	800188e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f023 0206 	bic.w	r2, r3, #6
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
 800188c:	e002      	b.n	8001894 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_ADC_Start+0x194>)
 800189e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d12a      	bne.n	800190c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <HAL_ADC_Start+0x198>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d015      	beq.n	80018ec <HAL_ADC_Start+0x11c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <HAL_ADC_Start+0x19c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_Start+0x106>
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <HAL_ADC_Start+0x194>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a25      	ldr	r2, [pc, #148]	; (8001970 <HAL_ADC_Start+0x1a0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d136      	bne.n	800194e <HAL_ADC_Start+0x17e>
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_ADC_Start+0x194>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d130      	bne.n	800194e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d129      	bne.n	800194e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	e020      	b.n	800194e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_ADC_Start+0x198>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11b      	bne.n	800194e <HAL_ADC_Start+0x17e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d114      	bne.n	800194e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	e00b      	b.n	800194e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f043 0210 	orr.w	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	20000000 	.word	0x20000000
 8001960:	431bde83 	.word	0x431bde83
 8001964:	40012300 	.word	0x40012300
 8001968:	40012000 	.word	0x40012000
 800196c:	40012100 	.word	0x40012100
 8001970:	40012200 	.word	0x40012200

08001974 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x1c>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e105      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x228>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d925      	bls.n	8001a08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68d9      	ldr	r1, [r3, #12]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	3b1e      	subs	r3, #30
 80019d2:	2207      	movs	r2, #7
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43da      	mvns	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	400a      	ands	r2, r1
 80019e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68d9      	ldr	r1, [r3, #12]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	4603      	mov	r3, r0
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4403      	add	r3, r0
 80019fa:	3b1e      	subs	r3, #30
 80019fc:	409a      	lsls	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	e022      	b.n	8001a4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6919      	ldr	r1, [r3, #16]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	2207      	movs	r2, #7
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43da      	mvns	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	400a      	ands	r2, r1
 8001a2a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6919      	ldr	r1, [r3, #16]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4603      	mov	r3, r0
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4403      	add	r3, r0
 8001a44:	409a      	lsls	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d824      	bhi.n	8001aa0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b05      	subs	r3, #5
 8001a68:	221f      	movs	r2, #31
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	400a      	ands	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3b05      	subs	r3, #5
 8001a92:	fa00 f203 	lsl.w	r2, r0, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9e:	e04c      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d824      	bhi.n	8001af2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3b23      	subs	r3, #35	; 0x23
 8001aba:	221f      	movs	r2, #31
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43da      	mvns	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	400a      	ands	r2, r1
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3b23      	subs	r3, #35	; 0x23
 8001ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
 8001af0:	e023      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	3b41      	subs	r3, #65	; 0x41
 8001b04:	221f      	movs	r2, #31
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	400a      	ands	r2, r1
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3b41      	subs	r3, #65	; 0x41
 8001b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <HAL_ADC_ConfigChannel+0x234>)
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_ADC_ConfigChannel+0x238>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d109      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1cc>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	d105      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_ADC_ConfigChannel+0x238>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d123      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x21e>
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d003      	beq.n	8001b76 <HAL_ADC_ConfigChannel+0x1e6>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b11      	cmp	r3, #17
 8001b74:	d11b      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d111      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_ADC_ConfigChannel+0x23c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <HAL_ADC_ConfigChannel+0x240>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	0c9a      	lsrs	r2, r3, #18
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f9      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	40012000 	.word	0x40012000
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	431bde83 	.word	0x431bde83

08001bd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bdc:	4b79      	ldr	r3, [pc, #484]	; (8001dc4 <ADC_Init+0x1f0>)
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	021a      	lsls	r2, r3, #8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	4a58      	ldr	r2, [pc, #352]	; (8001dc8 <ADC_Init+0x1f4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d022      	beq.n	8001cb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	e00f      	b.n	8001cd2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0202 	bic.w	r2, r2, #2
 8001ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6899      	ldr	r1, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	7e1b      	ldrb	r3, [r3, #24]
 8001cec:	005a      	lsls	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6859      	ldr	r1, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	035a      	lsls	r2, r3, #13
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	e007      	b.n	8001d48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d46:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	051a      	lsls	r2, r3, #20
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6899      	ldr	r1, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d8a:	025a      	lsls	r2, r3, #9
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6899      	ldr	r1, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	029a      	lsls	r2, r3, #10
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40012300 	.word	0x40012300
 8001dc8:	0f000001 	.word	0x0f000001

08001dcc <__NVIC_SetPriorityGrouping>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_SetPriority>:
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff47 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff5c 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffb0 	bl	8001eec <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e16b      	b.n	800228c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 815a 	bne.w	8002286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d017      	beq.n	8002088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80b4 	beq.w	8002286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a5f      	ldr	r2, [pc, #380]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_GPIO_Init+0x30c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213a:	4a5b      	ldr	r2, [pc, #364]	; (80022a8 <HAL_GPIO_Init+0x310>)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	; (80022ac <HAL_GPIO_Init+0x314>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <HAL_GPIO_Init+0x226>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x318>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x222>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	; (80022b4 <HAL_GPIO_Init+0x31c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x21e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	; (80022b8 <HAL_GPIO_Init+0x320>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x21a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x324>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x216>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4d      	ldr	r2, [pc, #308]	; (80022c0 <HAL_GPIO_Init+0x328>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x212>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4c      	ldr	r2, [pc, #304]	; (80022c4 <HAL_GPIO_Init+0x32c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x20e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4b      	ldr	r2, [pc, #300]	; (80022c8 <HAL_GPIO_Init+0x330>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x20a>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00e      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e00c      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021a6:	2306      	movs	r3, #6
 80021a8:	e00a      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x228>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	; (80022a8 <HAL_GPIO_Init+0x310>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_GPIO_Init+0x334>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a32      	ldr	r2, [pc, #200]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_GPIO_Init+0x334>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <HAL_GPIO_Init+0x334>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_GPIO_Init+0x334>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_GPIO_Init+0x334>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f ae90 	bls.w	8001fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40021400 	.word	0x40021400
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40021c00 	.word	0x40021c00
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e267      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d075      	beq.n	80023da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ee:	4b88      	ldr	r3, [pc, #544]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d00c      	beq.n	8002314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fa:	4b85      	ldr	r3, [pc, #532]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d112      	bne.n	800232c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002306:	4b82      	ldr	r3, [pc, #520]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002312:	d10b      	bne.n	800232c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	4b7e      	ldr	r3, [pc, #504]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d05b      	beq.n	80023d8 <HAL_RCC_OscConfig+0x108>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d157      	bne.n	80023d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e242      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002334:	d106      	bne.n	8002344 <HAL_RCC_OscConfig+0x74>
 8002336:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a75      	ldr	r2, [pc, #468]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e01d      	b.n	8002380 <HAL_RCC_OscConfig+0xb0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x98>
 800234e:	4b70      	ldr	r3, [pc, #448]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a6f      	ldr	r2, [pc, #444]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6c      	ldr	r2, [pc, #432]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0xb0>
 8002368:	4b69      	ldr	r3, [pc, #420]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a68      	ldr	r2, [pc, #416]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff f9ae 	bl	80016e8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff f9aa 	bl	80016e8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e207      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xc0>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff f99a 	bl	80016e8 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff f996 	bl	80016e8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1f3      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0xe8>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d063      	beq.n	80024ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e6:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d11c      	bne.n	8002438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fe:	4b44      	ldr	r3, [pc, #272]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d116      	bne.n	8002438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	4b41      	ldr	r3, [pc, #260]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_RCC_OscConfig+0x152>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e1c7      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4937      	ldr	r1, [pc, #220]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	e03a      	b.n	80024ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002440:	4b34      	ldr	r3, [pc, #208]	; (8002514 <HAL_RCC_OscConfig+0x244>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff f94f 	bl	80016e8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244e:	f7ff f94b 	bl	80016e8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1a8      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b28      	ldr	r3, [pc, #160]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4925      	ldr	r1, [pc, #148]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCC_OscConfig+0x244>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff f92e 	bl	80016e8 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002490:	f7ff f92a 	bl	80016e8 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e187      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d036      	beq.n	8002528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_RCC_OscConfig+0x248>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7ff f90e 	bl	80016e8 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff f90a 	bl	80016e8 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e167      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_RCC_OscConfig+0x240>)
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x200>
 80024ee:	e01b      	b.n	8002528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_OscConfig+0x248>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff f8f7 	bl	80016e8 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	e00e      	b.n	800251c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fe:	f7ff f8f3 	bl	80016e8 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d907      	bls.n	800251c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e150      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
 8002510:	40023800 	.word	0x40023800
 8002514:	42470000 	.word	0x42470000
 8002518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ea      	bne.n	80024fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8097 	beq.w	8002664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253a:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10f      	bne.n	8002566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	4b7d      	ldr	r3, [pc, #500]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a7c      	ldr	r2, [pc, #496]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 8002550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002562:	2301      	movs	r3, #1
 8002564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002566:	4b77      	ldr	r3, [pc, #476]	; (8002744 <HAL_RCC_OscConfig+0x474>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d118      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002572:	4b74      	ldr	r3, [pc, #464]	; (8002744 <HAL_RCC_OscConfig+0x474>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a73      	ldr	r2, [pc, #460]	; (8002744 <HAL_RCC_OscConfig+0x474>)
 8002578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257e:	f7ff f8b3 	bl	80016e8 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002586:	f7ff f8af 	bl	80016e8 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e10c      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x474>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0f0      	beq.n	8002586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x2ea>
 80025ac:	4b64      	ldr	r3, [pc, #400]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b0:	4a63      	ldr	r2, [pc, #396]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6713      	str	r3, [r2, #112]	; 0x70
 80025b8:	e01c      	b.n	80025f4 <HAL_RCC_OscConfig+0x324>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b05      	cmp	r3, #5
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x30c>
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a5e      	ldr	r2, [pc, #376]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a5b      	ldr	r2, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_OscConfig+0x324>
 80025dc:	4b58      	ldr	r3, [pc, #352]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a57      	ldr	r2, [pc, #348]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a54      	ldr	r2, [pc, #336]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80025ee:	f023 0304 	bic.w	r3, r3, #4
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025fc:	f7ff f874 	bl	80016e8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	e00a      	b.n	800261a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7ff f870 	bl	80016e8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0cb      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0ee      	beq.n	8002604 <HAL_RCC_OscConfig+0x334>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7ff f85e 	bl	80016e8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7ff f85a 	bl	80016e8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0b5      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002646:	4b3e      	ldr	r3, [pc, #248]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ee      	bne.n	8002630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	4a38      	ldr	r2, [pc, #224]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80a1 	beq.w	80027b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800266e:	4b34      	ldr	r3, [pc, #208]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b08      	cmp	r3, #8
 8002678:	d05c      	beq.n	8002734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d141      	bne.n	8002706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b31      	ldr	r3, [pc, #196]	; (8002748 <HAL_RCC_OscConfig+0x478>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff f82e 	bl	80016e8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff f82a 	bl	80016e8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e087      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	3b01      	subs	r3, #1
 80026c8:	041b      	lsls	r3, r3, #16
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	491b      	ldr	r1, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <HAL_RCC_OscConfig+0x478>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7ff f803 	bl	80016e8 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe ffff 	bl	80016e8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e05c      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x416>
 8002704:	e054      	b.n	80027b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_RCC_OscConfig+0x478>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe ffec 	bl	80016e8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe ffe8 	bl	80016e8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e045      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_RCC_OscConfig+0x470>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x444>
 8002732:	e03d      	b.n	80027b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e038      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
 8002740:	40023800 	.word	0x40023800
 8002744:	40007000 	.word	0x40007000
 8002748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_RCC_OscConfig+0x4ec>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d028      	beq.n	80027ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d121      	bne.n	80027ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d11a      	bne.n	80027ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800277c:	4013      	ands	r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	4293      	cmp	r3, r2
 8002786:	d111      	bne.n	80027ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d107      	bne.n	80027ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e000      	b.n	80027b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0cc      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b68      	ldr	r3, [pc, #416]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d90c      	bls.n	80027fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b65      	ldr	r3, [pc, #404]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0b8      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d020      	beq.n	800284a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	4a58      	ldr	r2, [pc, #352]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800281e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800282c:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	494d      	ldr	r1, [pc, #308]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d044      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d107      	bne.n	800286e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d119      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e07f      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d003      	beq.n	800287e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800287a:	2b03      	cmp	r3, #3
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b3f      	ldr	r3, [pc, #252]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06f      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e067      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4934      	ldr	r1, [pc, #208]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7fe ff1a 	bl	80016e8 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe ff16 	bl	80016e8 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e04f      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2b      	ldr	r3, [pc, #172]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d20c      	bcs.n	8002908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b22      	ldr	r3, [pc, #136]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e032      	b.n	800296e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4916      	ldr	r1, [pc, #88]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	490e      	ldr	r1, [pc, #56]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002946:	f000 f821 	bl	800298c <HAL_RCC_GetSysClockFreq>
 800294a:	4602      	mov	r2, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	490a      	ldr	r1, [pc, #40]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 8002958:	5ccb      	ldrb	r3, [r1, r3]
 800295a:	fa22 f303 	lsr.w	r3, r2, r3
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fe7a 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023c00 	.word	0x40023c00
 800297c:	40023800 	.word	0x40023800
 8002980:	08007574 	.word	0x08007574
 8002984:	20000000 	.word	0x20000000
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800298c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002990:	b094      	sub	sp, #80	; 0x50
 8002992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	647b      	str	r3, [r7, #68]	; 0x44
 8002998:	2300      	movs	r3, #0
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800299c:	2300      	movs	r3, #0
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a4:	4b79      	ldr	r3, [pc, #484]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d00d      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x40>
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	f200 80e1 	bhi.w	8002b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029be:	e0db      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b73      	ldr	r3, [pc, #460]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80029c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029c4:	e0db      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ca:	e0d8      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029cc:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029d6:	4b6d      	ldr	r3, [pc, #436]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d063      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e2:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	099b      	lsrs	r3, r3, #6
 80029e8:	2200      	movs	r2, #0
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80029ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f4:	633b      	str	r3, [r7, #48]	; 0x30
 80029f6:	2300      	movs	r3, #0
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
 80029fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029fe:	4622      	mov	r2, r4
 8002a00:	462b      	mov	r3, r5
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a10:	0150      	lsls	r0, r2, #5
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4621      	mov	r1, r4
 8002a18:	1a51      	subs	r1, r2, r1
 8002a1a:	6139      	str	r1, [r7, #16]
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a30:	4659      	mov	r1, fp
 8002a32:	018b      	lsls	r3, r1, #6
 8002a34:	4651      	mov	r1, sl
 8002a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	018a      	lsls	r2, r1, #6
 8002a3e:	4651      	mov	r1, sl
 8002a40:	ebb2 0801 	subs.w	r8, r2, r1
 8002a44:	4659      	mov	r1, fp
 8002a46:	eb63 0901 	sbc.w	r9, r3, r1
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5e:	4690      	mov	r8, r2
 8002a60:	4699      	mov	r9, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	eb18 0303 	adds.w	r3, r8, r3
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	462b      	mov	r3, r5
 8002a6c:	eb49 0303 	adc.w	r3, r9, r3
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a7e:	4629      	mov	r1, r5
 8002a80:	024b      	lsls	r3, r1, #9
 8002a82:	4621      	mov	r1, r4
 8002a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a88:	4621      	mov	r1, r4
 8002a8a:	024a      	lsls	r2, r1, #9
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a92:	2200      	movs	r2, #0
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a9c:	f7fe f8f4 	bl	8000c88 <__aeabi_uldivmod>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aa8:	e058      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	099b      	lsrs	r3, r3, #6
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	2300      	movs	r3, #0
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	f04f 0000 	mov.w	r0, #0
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	0159      	lsls	r1, r3, #5
 8002ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad6:	0150      	lsls	r0, r2, #5
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4641      	mov	r1, r8
 8002ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002afc:	ebb2 040a 	subs.w	r4, r2, sl
 8002b00:	eb63 050b 	sbc.w	r5, r3, fp
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	00eb      	lsls	r3, r5, #3
 8002b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b12:	00e2      	lsls	r2, r4, #3
 8002b14:	4614      	mov	r4, r2
 8002b16:	461d      	mov	r5, r3
 8002b18:	4643      	mov	r3, r8
 8002b1a:	18e3      	adds	r3, r4, r3
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	464b      	mov	r3, r9
 8002b20:	eb45 0303 	adc.w	r3, r5, r3
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	f04f 0300 	mov.w	r3, #0
 8002b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b32:	4629      	mov	r1, r5
 8002b34:	028b      	lsls	r3, r1, #10
 8002b36:	4621      	mov	r1, r4
 8002b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	028a      	lsls	r2, r1, #10
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b46:	2200      	movs	r2, #0
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	61fa      	str	r2, [r7, #28]
 8002b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b50:	f7fe f89a 	bl	8000c88 <__aeabi_uldivmod>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	0c1b      	lsrs	r3, r3, #16
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	3301      	adds	r3, #1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b76:	e002      	b.n	8002b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3750      	adds	r7, #80	; 0x50
 8002b84:	46bd      	mov	sp, r7
 8002b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	00f42400 	.word	0x00f42400
 8002b94:	007a1200 	.word	0x007a1200

08002b98 <__errno>:
 8002b98:	4b01      	ldr	r3, [pc, #4]	; (8002ba0 <__errno+0x8>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	2000000c 	.word	0x2000000c

08002ba4 <__libc_init_array>:
 8002ba4:	b570      	push	{r4, r5, r6, lr}
 8002ba6:	4d0d      	ldr	r5, [pc, #52]	; (8002bdc <__libc_init_array+0x38>)
 8002ba8:	4c0d      	ldr	r4, [pc, #52]	; (8002be0 <__libc_init_array+0x3c>)
 8002baa:	1b64      	subs	r4, r4, r5
 8002bac:	10a4      	asrs	r4, r4, #2
 8002bae:	2600      	movs	r6, #0
 8002bb0:	42a6      	cmp	r6, r4
 8002bb2:	d109      	bne.n	8002bc8 <__libc_init_array+0x24>
 8002bb4:	4d0b      	ldr	r5, [pc, #44]	; (8002be4 <__libc_init_array+0x40>)
 8002bb6:	4c0c      	ldr	r4, [pc, #48]	; (8002be8 <__libc_init_array+0x44>)
 8002bb8:	f004 fcaa 	bl	8007510 <_init>
 8002bbc:	1b64      	subs	r4, r4, r5
 8002bbe:	10a4      	asrs	r4, r4, #2
 8002bc0:	2600      	movs	r6, #0
 8002bc2:	42a6      	cmp	r6, r4
 8002bc4:	d105      	bne.n	8002bd2 <__libc_init_array+0x2e>
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
 8002bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bcc:	4798      	blx	r3
 8002bce:	3601      	adds	r6, #1
 8002bd0:	e7ee      	b.n	8002bb0 <__libc_init_array+0xc>
 8002bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd6:	4798      	blx	r3
 8002bd8:	3601      	adds	r6, #1
 8002bda:	e7f2      	b.n	8002bc2 <__libc_init_array+0x1e>
 8002bdc:	08007a3c 	.word	0x08007a3c
 8002be0:	08007a3c 	.word	0x08007a3c
 8002be4:	08007a3c 	.word	0x08007a3c
 8002be8:	08007a40 	.word	0x08007a40

08002bec <memset>:
 8002bec:	4402      	add	r2, r0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d100      	bne.n	8002bf6 <memset+0xa>
 8002bf4:	4770      	bx	lr
 8002bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfa:	e7f9      	b.n	8002bf0 <memset+0x4>

08002bfc <__cvt>:
 8002bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c00:	ec55 4b10 	vmov	r4, r5, d0
 8002c04:	2d00      	cmp	r5, #0
 8002c06:	460e      	mov	r6, r1
 8002c08:	4619      	mov	r1, r3
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	bfbb      	ittet	lt
 8002c0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002c12:	461d      	movlt	r5, r3
 8002c14:	2300      	movge	r3, #0
 8002c16:	232d      	movlt	r3, #45	; 0x2d
 8002c18:	700b      	strb	r3, [r1, #0]
 8002c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002c20:	4691      	mov	r9, r2
 8002c22:	f023 0820 	bic.w	r8, r3, #32
 8002c26:	bfbc      	itt	lt
 8002c28:	4622      	movlt	r2, r4
 8002c2a:	4614      	movlt	r4, r2
 8002c2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c30:	d005      	beq.n	8002c3e <__cvt+0x42>
 8002c32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002c36:	d100      	bne.n	8002c3a <__cvt+0x3e>
 8002c38:	3601      	adds	r6, #1
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	e000      	b.n	8002c40 <__cvt+0x44>
 8002c3e:	2103      	movs	r1, #3
 8002c40:	ab03      	add	r3, sp, #12
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	ab02      	add	r3, sp, #8
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	ec45 4b10 	vmov	d0, r4, r5
 8002c4c:	4653      	mov	r3, sl
 8002c4e:	4632      	mov	r2, r6
 8002c50:	f001 fdc6 	bl	80047e0 <_dtoa_r>
 8002c54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c58:	4607      	mov	r7, r0
 8002c5a:	d102      	bne.n	8002c62 <__cvt+0x66>
 8002c5c:	f019 0f01 	tst.w	r9, #1
 8002c60:	d022      	beq.n	8002ca8 <__cvt+0xac>
 8002c62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c66:	eb07 0906 	add.w	r9, r7, r6
 8002c6a:	d110      	bne.n	8002c8e <__cvt+0x92>
 8002c6c:	783b      	ldrb	r3, [r7, #0]
 8002c6e:	2b30      	cmp	r3, #48	; 0x30
 8002c70:	d10a      	bne.n	8002c88 <__cvt+0x8c>
 8002c72:	2200      	movs	r2, #0
 8002c74:	2300      	movs	r3, #0
 8002c76:	4620      	mov	r0, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	f7fd ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c7e:	b918      	cbnz	r0, 8002c88 <__cvt+0x8c>
 8002c80:	f1c6 0601 	rsb	r6, r6, #1
 8002c84:	f8ca 6000 	str.w	r6, [sl]
 8002c88:	f8da 3000 	ldr.w	r3, [sl]
 8002c8c:	4499      	add	r9, r3
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2300      	movs	r3, #0
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fd ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c9a:	b108      	cbz	r0, 8002ca0 <__cvt+0xa4>
 8002c9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002ca0:	2230      	movs	r2, #48	; 0x30
 8002ca2:	9b03      	ldr	r3, [sp, #12]
 8002ca4:	454b      	cmp	r3, r9
 8002ca6:	d307      	bcc.n	8002cb8 <__cvt+0xbc>
 8002ca8:	9b03      	ldr	r3, [sp, #12]
 8002caa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cac:	1bdb      	subs	r3, r3, r7
 8002cae:	4638      	mov	r0, r7
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	b004      	add	sp, #16
 8002cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb8:	1c59      	adds	r1, r3, #1
 8002cba:	9103      	str	r1, [sp, #12]
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e7f0      	b.n	8002ca2 <__cvt+0xa6>

08002cc0 <__exponent>:
 8002cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2900      	cmp	r1, #0
 8002cc6:	bfb8      	it	lt
 8002cc8:	4249      	neglt	r1, r1
 8002cca:	f803 2b02 	strb.w	r2, [r3], #2
 8002cce:	bfb4      	ite	lt
 8002cd0:	222d      	movlt	r2, #45	; 0x2d
 8002cd2:	222b      	movge	r2, #43	; 0x2b
 8002cd4:	2909      	cmp	r1, #9
 8002cd6:	7042      	strb	r2, [r0, #1]
 8002cd8:	dd2a      	ble.n	8002d30 <__exponent+0x70>
 8002cda:	f10d 0407 	add.w	r4, sp, #7
 8002cde:	46a4      	mov	ip, r4
 8002ce0:	270a      	movs	r7, #10
 8002ce2:	46a6      	mov	lr, r4
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	fb91 f6f7 	sdiv	r6, r1, r7
 8002cea:	fb07 1516 	mls	r5, r7, r6, r1
 8002cee:	3530      	adds	r5, #48	; 0x30
 8002cf0:	2a63      	cmp	r2, #99	; 0x63
 8002cf2:	f104 34ff 	add.w	r4, r4, #4294967295
 8002cf6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002cfa:	4631      	mov	r1, r6
 8002cfc:	dcf1      	bgt.n	8002ce2 <__exponent+0x22>
 8002cfe:	3130      	adds	r1, #48	; 0x30
 8002d00:	f1ae 0502 	sub.w	r5, lr, #2
 8002d04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002d08:	1c44      	adds	r4, r0, #1
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	4561      	cmp	r1, ip
 8002d0e:	d30a      	bcc.n	8002d26 <__exponent+0x66>
 8002d10:	f10d 0209 	add.w	r2, sp, #9
 8002d14:	eba2 020e 	sub.w	r2, r2, lr
 8002d18:	4565      	cmp	r5, ip
 8002d1a:	bf88      	it	hi
 8002d1c:	2200      	movhi	r2, #0
 8002d1e:	4413      	add	r3, r2
 8002d20:	1a18      	subs	r0, r3, r0
 8002d22:	b003      	add	sp, #12
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002d2e:	e7ed      	b.n	8002d0c <__exponent+0x4c>
 8002d30:	2330      	movs	r3, #48	; 0x30
 8002d32:	3130      	adds	r1, #48	; 0x30
 8002d34:	7083      	strb	r3, [r0, #2]
 8002d36:	70c1      	strb	r1, [r0, #3]
 8002d38:	1d03      	adds	r3, r0, #4
 8002d3a:	e7f1      	b.n	8002d20 <__exponent+0x60>

08002d3c <_printf_float>:
 8002d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d40:	ed2d 8b02 	vpush	{d8}
 8002d44:	b08d      	sub	sp, #52	; 0x34
 8002d46:	460c      	mov	r4, r1
 8002d48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002d4c:	4616      	mov	r6, r2
 8002d4e:	461f      	mov	r7, r3
 8002d50:	4605      	mov	r5, r0
 8002d52:	f002 ff97 	bl	8005c84 <_localeconv_r>
 8002d56:	f8d0 a000 	ldr.w	sl, [r0]
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	f7fd fa38 	bl	80001d0 <strlen>
 8002d60:	2300      	movs	r3, #0
 8002d62:	930a      	str	r3, [sp, #40]	; 0x28
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	9305      	str	r3, [sp, #20]
 8002d68:	f8d8 3000 	ldr.w	r3, [r8]
 8002d6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002d70:	3307      	adds	r3, #7
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	f103 0208 	add.w	r2, r3, #8
 8002d7a:	f8c8 2000 	str.w	r2, [r8]
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002d86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002d8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002d8e:	9307      	str	r3, [sp, #28]
 8002d90:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d94:	ee08 0a10 	vmov	s16, r0
 8002d98:	4b9f      	ldr	r3, [pc, #636]	; (8003018 <_printf_float+0x2dc>)
 8002d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002da2:	f7fd fec3 	bl	8000b2c <__aeabi_dcmpun>
 8002da6:	bb88      	cbnz	r0, 8002e0c <_printf_float+0xd0>
 8002da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dac:	4b9a      	ldr	r3, [pc, #616]	; (8003018 <_printf_float+0x2dc>)
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	f7fd fe9d 	bl	8000af0 <__aeabi_dcmple>
 8002db6:	bb48      	cbnz	r0, 8002e0c <_printf_float+0xd0>
 8002db8:	2200      	movs	r2, #0
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	f7fd fe8c 	bl	8000adc <__aeabi_dcmplt>
 8002dc4:	b110      	cbz	r0, 8002dcc <_printf_float+0x90>
 8002dc6:	232d      	movs	r3, #45	; 0x2d
 8002dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dcc:	4b93      	ldr	r3, [pc, #588]	; (800301c <_printf_float+0x2e0>)
 8002dce:	4894      	ldr	r0, [pc, #592]	; (8003020 <_printf_float+0x2e4>)
 8002dd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002dd4:	bf94      	ite	ls
 8002dd6:	4698      	movls	r8, r3
 8002dd8:	4680      	movhi	r8, r0
 8002dda:	2303      	movs	r3, #3
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	9b05      	ldr	r3, [sp, #20]
 8002de0:	f023 0204 	bic.w	r2, r3, #4
 8002de4:	6022      	str	r2, [r4, #0]
 8002de6:	f04f 0900 	mov.w	r9, #0
 8002dea:	9700      	str	r7, [sp, #0]
 8002dec:	4633      	mov	r3, r6
 8002dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f9d8 	bl	80031a8 <_printf_common>
 8002df8:	3001      	adds	r0, #1
 8002dfa:	f040 8090 	bne.w	8002f1e <_printf_float+0x1e2>
 8002dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002e02:	b00d      	add	sp, #52	; 0x34
 8002e04:	ecbd 8b02 	vpop	{d8}
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	464b      	mov	r3, r9
 8002e10:	4640      	mov	r0, r8
 8002e12:	4649      	mov	r1, r9
 8002e14:	f7fd fe8a 	bl	8000b2c <__aeabi_dcmpun>
 8002e18:	b140      	cbz	r0, 8002e2c <_printf_float+0xf0>
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bfbc      	itt	lt
 8002e20:	232d      	movlt	r3, #45	; 0x2d
 8002e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002e26:	487f      	ldr	r0, [pc, #508]	; (8003024 <_printf_float+0x2e8>)
 8002e28:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <_printf_float+0x2ec>)
 8002e2a:	e7d1      	b.n	8002dd0 <_printf_float+0x94>
 8002e2c:	6863      	ldr	r3, [r4, #4]
 8002e2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002e32:	9206      	str	r2, [sp, #24]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	d13f      	bne.n	8002eb8 <_printf_float+0x17c>
 8002e38:	2306      	movs	r3, #6
 8002e3a:	6063      	str	r3, [r4, #4]
 8002e3c:	9b05      	ldr	r3, [sp, #20]
 8002e3e:	6861      	ldr	r1, [r4, #4]
 8002e40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e44:	2300      	movs	r3, #0
 8002e46:	9303      	str	r3, [sp, #12]
 8002e48:	ab0a      	add	r3, sp, #40	; 0x28
 8002e4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002e4e:	ab09      	add	r3, sp, #36	; 0x24
 8002e50:	ec49 8b10 	vmov	d0, r8, r9
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6022      	str	r2, [r4, #0]
 8002e58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f7ff fecd 	bl	8002bfc <__cvt>
 8002e62:	9b06      	ldr	r3, [sp, #24]
 8002e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e66:	2b47      	cmp	r3, #71	; 0x47
 8002e68:	4680      	mov	r8, r0
 8002e6a:	d108      	bne.n	8002e7e <_printf_float+0x142>
 8002e6c:	1cc8      	adds	r0, r1, #3
 8002e6e:	db02      	blt.n	8002e76 <_printf_float+0x13a>
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	4299      	cmp	r1, r3
 8002e74:	dd41      	ble.n	8002efa <_printf_float+0x1be>
 8002e76:	f1ab 0b02 	sub.w	fp, fp, #2
 8002e7a:	fa5f fb8b 	uxtb.w	fp, fp
 8002e7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e82:	d820      	bhi.n	8002ec6 <_printf_float+0x18a>
 8002e84:	3901      	subs	r1, #1
 8002e86:	465a      	mov	r2, fp
 8002e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8002e8e:	f7ff ff17 	bl	8002cc0 <__exponent>
 8002e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e94:	1813      	adds	r3, r2, r0
 8002e96:	2a01      	cmp	r2, #1
 8002e98:	4681      	mov	r9, r0
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	dc02      	bgt.n	8002ea4 <_printf_float+0x168>
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	07d2      	lsls	r2, r2, #31
 8002ea2:	d501      	bpl.n	8002ea8 <_printf_float+0x16c>
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	6123      	str	r3, [r4, #16]
 8002ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d09c      	beq.n	8002dea <_printf_float+0xae>
 8002eb0:	232d      	movs	r3, #45	; 0x2d
 8002eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb6:	e798      	b.n	8002dea <_printf_float+0xae>
 8002eb8:	9a06      	ldr	r2, [sp, #24]
 8002eba:	2a47      	cmp	r2, #71	; 0x47
 8002ebc:	d1be      	bne.n	8002e3c <_printf_float+0x100>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1bc      	bne.n	8002e3c <_printf_float+0x100>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e7b9      	b.n	8002e3a <_printf_float+0xfe>
 8002ec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002eca:	d118      	bne.n	8002efe <_printf_float+0x1c2>
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	6863      	ldr	r3, [r4, #4]
 8002ed0:	dd0b      	ble.n	8002eea <_printf_float+0x1ae>
 8002ed2:	6121      	str	r1, [r4, #16]
 8002ed4:	b913      	cbnz	r3, 8002edc <_printf_float+0x1a0>
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	07d0      	lsls	r0, r2, #31
 8002eda:	d502      	bpl.n	8002ee2 <_printf_float+0x1a6>
 8002edc:	3301      	adds	r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ee4:	f04f 0900 	mov.w	r9, #0
 8002ee8:	e7de      	b.n	8002ea8 <_printf_float+0x16c>
 8002eea:	b913      	cbnz	r3, 8002ef2 <_printf_float+0x1b6>
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	07d2      	lsls	r2, r2, #31
 8002ef0:	d501      	bpl.n	8002ef6 <_printf_float+0x1ba>
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	e7f4      	b.n	8002ee0 <_printf_float+0x1a4>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e7f2      	b.n	8002ee0 <_printf_float+0x1a4>
 8002efa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f00:	4299      	cmp	r1, r3
 8002f02:	db05      	blt.n	8002f10 <_printf_float+0x1d4>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	6121      	str	r1, [r4, #16]
 8002f08:	07d8      	lsls	r0, r3, #31
 8002f0a:	d5ea      	bpl.n	8002ee2 <_printf_float+0x1a6>
 8002f0c:	1c4b      	adds	r3, r1, #1
 8002f0e:	e7e7      	b.n	8002ee0 <_printf_float+0x1a4>
 8002f10:	2900      	cmp	r1, #0
 8002f12:	bfd4      	ite	le
 8002f14:	f1c1 0202 	rsble	r2, r1, #2
 8002f18:	2201      	movgt	r2, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	e7e0      	b.n	8002ee0 <_printf_float+0x1a4>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	055a      	lsls	r2, r3, #21
 8002f22:	d407      	bmi.n	8002f34 <_printf_float+0x1f8>
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	4642      	mov	r2, r8
 8002f28:	4631      	mov	r1, r6
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	47b8      	blx	r7
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d12c      	bne.n	8002f8c <_printf_float+0x250>
 8002f32:	e764      	b.n	8002dfe <_printf_float+0xc2>
 8002f34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002f38:	f240 80e0 	bls.w	80030fc <_printf_float+0x3c0>
 8002f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f40:	2200      	movs	r2, #0
 8002f42:	2300      	movs	r3, #0
 8002f44:	f7fd fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d034      	beq.n	8002fb6 <_printf_float+0x27a>
 8002f4c:	4a37      	ldr	r2, [pc, #220]	; (800302c <_printf_float+0x2f0>)
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4631      	mov	r1, r6
 8002f52:	4628      	mov	r0, r5
 8002f54:	47b8      	blx	r7
 8002f56:	3001      	adds	r0, #1
 8002f58:	f43f af51 	beq.w	8002dfe <_printf_float+0xc2>
 8002f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f60:	429a      	cmp	r2, r3
 8002f62:	db02      	blt.n	8002f6a <_printf_float+0x22e>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	07d8      	lsls	r0, r3, #31
 8002f68:	d510      	bpl.n	8002f8c <_printf_float+0x250>
 8002f6a:	ee18 3a10 	vmov	r3, s16
 8002f6e:	4652      	mov	r2, sl
 8002f70:	4631      	mov	r1, r6
 8002f72:	4628      	mov	r0, r5
 8002f74:	47b8      	blx	r7
 8002f76:	3001      	adds	r0, #1
 8002f78:	f43f af41 	beq.w	8002dfe <_printf_float+0xc2>
 8002f7c:	f04f 0800 	mov.w	r8, #0
 8002f80:	f104 091a 	add.w	r9, r4, #26
 8002f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	4543      	cmp	r3, r8
 8002f8a:	dc09      	bgt.n	8002fa0 <_printf_float+0x264>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	079b      	lsls	r3, r3, #30
 8002f90:	f100 8105 	bmi.w	800319e <_printf_float+0x462>
 8002f94:	68e0      	ldr	r0, [r4, #12]
 8002f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	bfb8      	it	lt
 8002f9c:	4618      	movlt	r0, r3
 8002f9e:	e730      	b.n	8002e02 <_printf_float+0xc6>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	464a      	mov	r2, r9
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	47b8      	blx	r7
 8002faa:	3001      	adds	r0, #1
 8002fac:	f43f af27 	beq.w	8002dfe <_printf_float+0xc2>
 8002fb0:	f108 0801 	add.w	r8, r8, #1
 8002fb4:	e7e6      	b.n	8002f84 <_printf_float+0x248>
 8002fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dc39      	bgt.n	8003030 <_printf_float+0x2f4>
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <_printf_float+0x2f0>)
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b8      	blx	r7
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	f43f af19 	beq.w	8002dfe <_printf_float+0xc2>
 8002fcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d102      	bne.n	8002fda <_printf_float+0x29e>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	07d9      	lsls	r1, r3, #31
 8002fd8:	d5d8      	bpl.n	8002f8c <_printf_float+0x250>
 8002fda:	ee18 3a10 	vmov	r3, s16
 8002fde:	4652      	mov	r2, sl
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	47b8      	blx	r7
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	f43f af09 	beq.w	8002dfe <_printf_float+0xc2>
 8002fec:	f04f 0900 	mov.w	r9, #0
 8002ff0:	f104 0a1a 	add.w	sl, r4, #26
 8002ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff6:	425b      	negs	r3, r3
 8002ff8:	454b      	cmp	r3, r9
 8002ffa:	dc01      	bgt.n	8003000 <_printf_float+0x2c4>
 8002ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ffe:	e792      	b.n	8002f26 <_printf_float+0x1ea>
 8003000:	2301      	movs	r3, #1
 8003002:	4652      	mov	r2, sl
 8003004:	4631      	mov	r1, r6
 8003006:	4628      	mov	r0, r5
 8003008:	47b8      	blx	r7
 800300a:	3001      	adds	r0, #1
 800300c:	f43f aef7 	beq.w	8002dfe <_printf_float+0xc2>
 8003010:	f109 0901 	add.w	r9, r9, #1
 8003014:	e7ee      	b.n	8002ff4 <_printf_float+0x2b8>
 8003016:	bf00      	nop
 8003018:	7fefffff 	.word	0x7fefffff
 800301c:	08007588 	.word	0x08007588
 8003020:	0800758c 	.word	0x0800758c
 8003024:	08007594 	.word	0x08007594
 8003028:	08007590 	.word	0x08007590
 800302c:	08007598 	.word	0x08007598
 8003030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003034:	429a      	cmp	r2, r3
 8003036:	bfa8      	it	ge
 8003038:	461a      	movge	r2, r3
 800303a:	2a00      	cmp	r2, #0
 800303c:	4691      	mov	r9, r2
 800303e:	dc37      	bgt.n	80030b0 <_printf_float+0x374>
 8003040:	f04f 0b00 	mov.w	fp, #0
 8003044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003048:	f104 021a 	add.w	r2, r4, #26
 800304c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800304e:	9305      	str	r3, [sp, #20]
 8003050:	eba3 0309 	sub.w	r3, r3, r9
 8003054:	455b      	cmp	r3, fp
 8003056:	dc33      	bgt.n	80030c0 <_printf_float+0x384>
 8003058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800305c:	429a      	cmp	r2, r3
 800305e:	db3b      	blt.n	80030d8 <_printf_float+0x39c>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	07da      	lsls	r2, r3, #31
 8003064:	d438      	bmi.n	80030d8 <_printf_float+0x39c>
 8003066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003068:	9a05      	ldr	r2, [sp, #20]
 800306a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800306c:	1a9a      	subs	r2, r3, r2
 800306e:	eba3 0901 	sub.w	r9, r3, r1
 8003072:	4591      	cmp	r9, r2
 8003074:	bfa8      	it	ge
 8003076:	4691      	movge	r9, r2
 8003078:	f1b9 0f00 	cmp.w	r9, #0
 800307c:	dc35      	bgt.n	80030ea <_printf_float+0x3ae>
 800307e:	f04f 0800 	mov.w	r8, #0
 8003082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003086:	f104 0a1a 	add.w	sl, r4, #26
 800308a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	eba3 0309 	sub.w	r3, r3, r9
 8003094:	4543      	cmp	r3, r8
 8003096:	f77f af79 	ble.w	8002f8c <_printf_float+0x250>
 800309a:	2301      	movs	r3, #1
 800309c:	4652      	mov	r2, sl
 800309e:	4631      	mov	r1, r6
 80030a0:	4628      	mov	r0, r5
 80030a2:	47b8      	blx	r7
 80030a4:	3001      	adds	r0, #1
 80030a6:	f43f aeaa 	beq.w	8002dfe <_printf_float+0xc2>
 80030aa:	f108 0801 	add.w	r8, r8, #1
 80030ae:	e7ec      	b.n	800308a <_printf_float+0x34e>
 80030b0:	4613      	mov	r3, r2
 80030b2:	4631      	mov	r1, r6
 80030b4:	4642      	mov	r2, r8
 80030b6:	4628      	mov	r0, r5
 80030b8:	47b8      	blx	r7
 80030ba:	3001      	adds	r0, #1
 80030bc:	d1c0      	bne.n	8003040 <_printf_float+0x304>
 80030be:	e69e      	b.n	8002dfe <_printf_float+0xc2>
 80030c0:	2301      	movs	r3, #1
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	9205      	str	r2, [sp, #20]
 80030c8:	47b8      	blx	r7
 80030ca:	3001      	adds	r0, #1
 80030cc:	f43f ae97 	beq.w	8002dfe <_printf_float+0xc2>
 80030d0:	9a05      	ldr	r2, [sp, #20]
 80030d2:	f10b 0b01 	add.w	fp, fp, #1
 80030d6:	e7b9      	b.n	800304c <_printf_float+0x310>
 80030d8:	ee18 3a10 	vmov	r3, s16
 80030dc:	4652      	mov	r2, sl
 80030de:	4631      	mov	r1, r6
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b8      	blx	r7
 80030e4:	3001      	adds	r0, #1
 80030e6:	d1be      	bne.n	8003066 <_printf_float+0x32a>
 80030e8:	e689      	b.n	8002dfe <_printf_float+0xc2>
 80030ea:	9a05      	ldr	r2, [sp, #20]
 80030ec:	464b      	mov	r3, r9
 80030ee:	4442      	add	r2, r8
 80030f0:	4631      	mov	r1, r6
 80030f2:	4628      	mov	r0, r5
 80030f4:	47b8      	blx	r7
 80030f6:	3001      	adds	r0, #1
 80030f8:	d1c1      	bne.n	800307e <_printf_float+0x342>
 80030fa:	e680      	b.n	8002dfe <_printf_float+0xc2>
 80030fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030fe:	2a01      	cmp	r2, #1
 8003100:	dc01      	bgt.n	8003106 <_printf_float+0x3ca>
 8003102:	07db      	lsls	r3, r3, #31
 8003104:	d538      	bpl.n	8003178 <_printf_float+0x43c>
 8003106:	2301      	movs	r3, #1
 8003108:	4642      	mov	r2, r8
 800310a:	4631      	mov	r1, r6
 800310c:	4628      	mov	r0, r5
 800310e:	47b8      	blx	r7
 8003110:	3001      	adds	r0, #1
 8003112:	f43f ae74 	beq.w	8002dfe <_printf_float+0xc2>
 8003116:	ee18 3a10 	vmov	r3, s16
 800311a:	4652      	mov	r2, sl
 800311c:	4631      	mov	r1, r6
 800311e:	4628      	mov	r0, r5
 8003120:	47b8      	blx	r7
 8003122:	3001      	adds	r0, #1
 8003124:	f43f ae6b 	beq.w	8002dfe <_printf_float+0xc2>
 8003128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800312c:	2200      	movs	r2, #0
 800312e:	2300      	movs	r3, #0
 8003130:	f7fd fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8003134:	b9d8      	cbnz	r0, 800316e <_printf_float+0x432>
 8003136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003138:	f108 0201 	add.w	r2, r8, #1
 800313c:	3b01      	subs	r3, #1
 800313e:	4631      	mov	r1, r6
 8003140:	4628      	mov	r0, r5
 8003142:	47b8      	blx	r7
 8003144:	3001      	adds	r0, #1
 8003146:	d10e      	bne.n	8003166 <_printf_float+0x42a>
 8003148:	e659      	b.n	8002dfe <_printf_float+0xc2>
 800314a:	2301      	movs	r3, #1
 800314c:	4652      	mov	r2, sl
 800314e:	4631      	mov	r1, r6
 8003150:	4628      	mov	r0, r5
 8003152:	47b8      	blx	r7
 8003154:	3001      	adds	r0, #1
 8003156:	f43f ae52 	beq.w	8002dfe <_printf_float+0xc2>
 800315a:	f108 0801 	add.w	r8, r8, #1
 800315e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	4543      	cmp	r3, r8
 8003164:	dcf1      	bgt.n	800314a <_printf_float+0x40e>
 8003166:	464b      	mov	r3, r9
 8003168:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800316c:	e6dc      	b.n	8002f28 <_printf_float+0x1ec>
 800316e:	f04f 0800 	mov.w	r8, #0
 8003172:	f104 0a1a 	add.w	sl, r4, #26
 8003176:	e7f2      	b.n	800315e <_printf_float+0x422>
 8003178:	2301      	movs	r3, #1
 800317a:	4642      	mov	r2, r8
 800317c:	e7df      	b.n	800313e <_printf_float+0x402>
 800317e:	2301      	movs	r3, #1
 8003180:	464a      	mov	r2, r9
 8003182:	4631      	mov	r1, r6
 8003184:	4628      	mov	r0, r5
 8003186:	47b8      	blx	r7
 8003188:	3001      	adds	r0, #1
 800318a:	f43f ae38 	beq.w	8002dfe <_printf_float+0xc2>
 800318e:	f108 0801 	add.w	r8, r8, #1
 8003192:	68e3      	ldr	r3, [r4, #12]
 8003194:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003196:	1a5b      	subs	r3, r3, r1
 8003198:	4543      	cmp	r3, r8
 800319a:	dcf0      	bgt.n	800317e <_printf_float+0x442>
 800319c:	e6fa      	b.n	8002f94 <_printf_float+0x258>
 800319e:	f04f 0800 	mov.w	r8, #0
 80031a2:	f104 0919 	add.w	r9, r4, #25
 80031a6:	e7f4      	b.n	8003192 <_printf_float+0x456>

080031a8 <_printf_common>:
 80031a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ac:	4616      	mov	r6, r2
 80031ae:	4699      	mov	r9, r3
 80031b0:	688a      	ldr	r2, [r1, #8]
 80031b2:	690b      	ldr	r3, [r1, #16]
 80031b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031b8:	4293      	cmp	r3, r2
 80031ba:	bfb8      	it	lt
 80031bc:	4613      	movlt	r3, r2
 80031be:	6033      	str	r3, [r6, #0]
 80031c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031c4:	4607      	mov	r7, r0
 80031c6:	460c      	mov	r4, r1
 80031c8:	b10a      	cbz	r2, 80031ce <_printf_common+0x26>
 80031ca:	3301      	adds	r3, #1
 80031cc:	6033      	str	r3, [r6, #0]
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	0699      	lsls	r1, r3, #26
 80031d2:	bf42      	ittt	mi
 80031d4:	6833      	ldrmi	r3, [r6, #0]
 80031d6:	3302      	addmi	r3, #2
 80031d8:	6033      	strmi	r3, [r6, #0]
 80031da:	6825      	ldr	r5, [r4, #0]
 80031dc:	f015 0506 	ands.w	r5, r5, #6
 80031e0:	d106      	bne.n	80031f0 <_printf_common+0x48>
 80031e2:	f104 0a19 	add.w	sl, r4, #25
 80031e6:	68e3      	ldr	r3, [r4, #12]
 80031e8:	6832      	ldr	r2, [r6, #0]
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	42ab      	cmp	r3, r5
 80031ee:	dc26      	bgt.n	800323e <_printf_common+0x96>
 80031f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031f4:	1e13      	subs	r3, r2, #0
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	bf18      	it	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	0692      	lsls	r2, r2, #26
 80031fe:	d42b      	bmi.n	8003258 <_printf_common+0xb0>
 8003200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003204:	4649      	mov	r1, r9
 8003206:	4638      	mov	r0, r7
 8003208:	47c0      	blx	r8
 800320a:	3001      	adds	r0, #1
 800320c:	d01e      	beq.n	800324c <_printf_common+0xa4>
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	68e5      	ldr	r5, [r4, #12]
 8003212:	6832      	ldr	r2, [r6, #0]
 8003214:	f003 0306 	and.w	r3, r3, #6
 8003218:	2b04      	cmp	r3, #4
 800321a:	bf08      	it	eq
 800321c:	1aad      	subeq	r5, r5, r2
 800321e:	68a3      	ldr	r3, [r4, #8]
 8003220:	6922      	ldr	r2, [r4, #16]
 8003222:	bf0c      	ite	eq
 8003224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003228:	2500      	movne	r5, #0
 800322a:	4293      	cmp	r3, r2
 800322c:	bfc4      	itt	gt
 800322e:	1a9b      	subgt	r3, r3, r2
 8003230:	18ed      	addgt	r5, r5, r3
 8003232:	2600      	movs	r6, #0
 8003234:	341a      	adds	r4, #26
 8003236:	42b5      	cmp	r5, r6
 8003238:	d11a      	bne.n	8003270 <_printf_common+0xc8>
 800323a:	2000      	movs	r0, #0
 800323c:	e008      	b.n	8003250 <_printf_common+0xa8>
 800323e:	2301      	movs	r3, #1
 8003240:	4652      	mov	r2, sl
 8003242:	4649      	mov	r1, r9
 8003244:	4638      	mov	r0, r7
 8003246:	47c0      	blx	r8
 8003248:	3001      	adds	r0, #1
 800324a:	d103      	bne.n	8003254 <_printf_common+0xac>
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003254:	3501      	adds	r5, #1
 8003256:	e7c6      	b.n	80031e6 <_printf_common+0x3e>
 8003258:	18e1      	adds	r1, r4, r3
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	2030      	movs	r0, #48	; 0x30
 800325e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003262:	4422      	add	r2, r4
 8003264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800326c:	3302      	adds	r3, #2
 800326e:	e7c7      	b.n	8003200 <_printf_common+0x58>
 8003270:	2301      	movs	r3, #1
 8003272:	4622      	mov	r2, r4
 8003274:	4649      	mov	r1, r9
 8003276:	4638      	mov	r0, r7
 8003278:	47c0      	blx	r8
 800327a:	3001      	adds	r0, #1
 800327c:	d0e6      	beq.n	800324c <_printf_common+0xa4>
 800327e:	3601      	adds	r6, #1
 8003280:	e7d9      	b.n	8003236 <_printf_common+0x8e>
	...

08003284 <_printf_i>:
 8003284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	7e0f      	ldrb	r7, [r1, #24]
 800328a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800328c:	2f78      	cmp	r7, #120	; 0x78
 800328e:	4691      	mov	r9, r2
 8003290:	4680      	mov	r8, r0
 8003292:	460c      	mov	r4, r1
 8003294:	469a      	mov	sl, r3
 8003296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800329a:	d807      	bhi.n	80032ac <_printf_i+0x28>
 800329c:	2f62      	cmp	r7, #98	; 0x62
 800329e:	d80a      	bhi.n	80032b6 <_printf_i+0x32>
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	f000 80d8 	beq.w	8003456 <_printf_i+0x1d2>
 80032a6:	2f58      	cmp	r7, #88	; 0x58
 80032a8:	f000 80a3 	beq.w	80033f2 <_printf_i+0x16e>
 80032ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032b4:	e03a      	b.n	800332c <_printf_i+0xa8>
 80032b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ba:	2b15      	cmp	r3, #21
 80032bc:	d8f6      	bhi.n	80032ac <_printf_i+0x28>
 80032be:	a101      	add	r1, pc, #4	; (adr r1, 80032c4 <_printf_i+0x40>)
 80032c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032c4:	0800331d 	.word	0x0800331d
 80032c8:	08003331 	.word	0x08003331
 80032cc:	080032ad 	.word	0x080032ad
 80032d0:	080032ad 	.word	0x080032ad
 80032d4:	080032ad 	.word	0x080032ad
 80032d8:	080032ad 	.word	0x080032ad
 80032dc:	08003331 	.word	0x08003331
 80032e0:	080032ad 	.word	0x080032ad
 80032e4:	080032ad 	.word	0x080032ad
 80032e8:	080032ad 	.word	0x080032ad
 80032ec:	080032ad 	.word	0x080032ad
 80032f0:	0800343d 	.word	0x0800343d
 80032f4:	08003361 	.word	0x08003361
 80032f8:	0800341f 	.word	0x0800341f
 80032fc:	080032ad 	.word	0x080032ad
 8003300:	080032ad 	.word	0x080032ad
 8003304:	0800345f 	.word	0x0800345f
 8003308:	080032ad 	.word	0x080032ad
 800330c:	08003361 	.word	0x08003361
 8003310:	080032ad 	.word	0x080032ad
 8003314:	080032ad 	.word	0x080032ad
 8003318:	08003427 	.word	0x08003427
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	1d1a      	adds	r2, r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	602a      	str	r2, [r5, #0]
 8003324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800332c:	2301      	movs	r3, #1
 800332e:	e0a3      	b.n	8003478 <_printf_i+0x1f4>
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	6829      	ldr	r1, [r5, #0]
 8003334:	0606      	lsls	r6, r0, #24
 8003336:	f101 0304 	add.w	r3, r1, #4
 800333a:	d50a      	bpl.n	8003352 <_printf_i+0xce>
 800333c:	680e      	ldr	r6, [r1, #0]
 800333e:	602b      	str	r3, [r5, #0]
 8003340:	2e00      	cmp	r6, #0
 8003342:	da03      	bge.n	800334c <_printf_i+0xc8>
 8003344:	232d      	movs	r3, #45	; 0x2d
 8003346:	4276      	negs	r6, r6
 8003348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800334c:	485e      	ldr	r0, [pc, #376]	; (80034c8 <_printf_i+0x244>)
 800334e:	230a      	movs	r3, #10
 8003350:	e019      	b.n	8003386 <_printf_i+0x102>
 8003352:	680e      	ldr	r6, [r1, #0]
 8003354:	602b      	str	r3, [r5, #0]
 8003356:	f010 0f40 	tst.w	r0, #64	; 0x40
 800335a:	bf18      	it	ne
 800335c:	b236      	sxthne	r6, r6
 800335e:	e7ef      	b.n	8003340 <_printf_i+0xbc>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	1d19      	adds	r1, r3, #4
 8003366:	6029      	str	r1, [r5, #0]
 8003368:	0601      	lsls	r1, r0, #24
 800336a:	d501      	bpl.n	8003370 <_printf_i+0xec>
 800336c:	681e      	ldr	r6, [r3, #0]
 800336e:	e002      	b.n	8003376 <_printf_i+0xf2>
 8003370:	0646      	lsls	r6, r0, #25
 8003372:	d5fb      	bpl.n	800336c <_printf_i+0xe8>
 8003374:	881e      	ldrh	r6, [r3, #0]
 8003376:	4854      	ldr	r0, [pc, #336]	; (80034c8 <_printf_i+0x244>)
 8003378:	2f6f      	cmp	r7, #111	; 0x6f
 800337a:	bf0c      	ite	eq
 800337c:	2308      	moveq	r3, #8
 800337e:	230a      	movne	r3, #10
 8003380:	2100      	movs	r1, #0
 8003382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003386:	6865      	ldr	r5, [r4, #4]
 8003388:	60a5      	str	r5, [r4, #8]
 800338a:	2d00      	cmp	r5, #0
 800338c:	bfa2      	ittt	ge
 800338e:	6821      	ldrge	r1, [r4, #0]
 8003390:	f021 0104 	bicge.w	r1, r1, #4
 8003394:	6021      	strge	r1, [r4, #0]
 8003396:	b90e      	cbnz	r6, 800339c <_printf_i+0x118>
 8003398:	2d00      	cmp	r5, #0
 800339a:	d04d      	beq.n	8003438 <_printf_i+0x1b4>
 800339c:	4615      	mov	r5, r2
 800339e:	fbb6 f1f3 	udiv	r1, r6, r3
 80033a2:	fb03 6711 	mls	r7, r3, r1, r6
 80033a6:	5dc7      	ldrb	r7, [r0, r7]
 80033a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033ac:	4637      	mov	r7, r6
 80033ae:	42bb      	cmp	r3, r7
 80033b0:	460e      	mov	r6, r1
 80033b2:	d9f4      	bls.n	800339e <_printf_i+0x11a>
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d10b      	bne.n	80033d0 <_printf_i+0x14c>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	07de      	lsls	r6, r3, #31
 80033bc:	d508      	bpl.n	80033d0 <_printf_i+0x14c>
 80033be:	6923      	ldr	r3, [r4, #16]
 80033c0:	6861      	ldr	r1, [r4, #4]
 80033c2:	4299      	cmp	r1, r3
 80033c4:	bfde      	ittt	le
 80033c6:	2330      	movle	r3, #48	; 0x30
 80033c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033d0:	1b52      	subs	r2, r2, r5
 80033d2:	6122      	str	r2, [r4, #16]
 80033d4:	f8cd a000 	str.w	sl, [sp]
 80033d8:	464b      	mov	r3, r9
 80033da:	aa03      	add	r2, sp, #12
 80033dc:	4621      	mov	r1, r4
 80033de:	4640      	mov	r0, r8
 80033e0:	f7ff fee2 	bl	80031a8 <_printf_common>
 80033e4:	3001      	adds	r0, #1
 80033e6:	d14c      	bne.n	8003482 <_printf_i+0x1fe>
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	b004      	add	sp, #16
 80033ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f2:	4835      	ldr	r0, [pc, #212]	; (80034c8 <_printf_i+0x244>)
 80033f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033f8:	6829      	ldr	r1, [r5, #0]
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003400:	6029      	str	r1, [r5, #0]
 8003402:	061d      	lsls	r5, r3, #24
 8003404:	d514      	bpl.n	8003430 <_printf_i+0x1ac>
 8003406:	07df      	lsls	r7, r3, #31
 8003408:	bf44      	itt	mi
 800340a:	f043 0320 	orrmi.w	r3, r3, #32
 800340e:	6023      	strmi	r3, [r4, #0]
 8003410:	b91e      	cbnz	r6, 800341a <_printf_i+0x196>
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	f023 0320 	bic.w	r3, r3, #32
 8003418:	6023      	str	r3, [r4, #0]
 800341a:	2310      	movs	r3, #16
 800341c:	e7b0      	b.n	8003380 <_printf_i+0xfc>
 800341e:	6823      	ldr	r3, [r4, #0]
 8003420:	f043 0320 	orr.w	r3, r3, #32
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	2378      	movs	r3, #120	; 0x78
 8003428:	4828      	ldr	r0, [pc, #160]	; (80034cc <_printf_i+0x248>)
 800342a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800342e:	e7e3      	b.n	80033f8 <_printf_i+0x174>
 8003430:	0659      	lsls	r1, r3, #25
 8003432:	bf48      	it	mi
 8003434:	b2b6      	uxthmi	r6, r6
 8003436:	e7e6      	b.n	8003406 <_printf_i+0x182>
 8003438:	4615      	mov	r5, r2
 800343a:	e7bb      	b.n	80033b4 <_printf_i+0x130>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	6826      	ldr	r6, [r4, #0]
 8003440:	6961      	ldr	r1, [r4, #20]
 8003442:	1d18      	adds	r0, r3, #4
 8003444:	6028      	str	r0, [r5, #0]
 8003446:	0635      	lsls	r5, r6, #24
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	d501      	bpl.n	8003450 <_printf_i+0x1cc>
 800344c:	6019      	str	r1, [r3, #0]
 800344e:	e002      	b.n	8003456 <_printf_i+0x1d2>
 8003450:	0670      	lsls	r0, r6, #25
 8003452:	d5fb      	bpl.n	800344c <_printf_i+0x1c8>
 8003454:	8019      	strh	r1, [r3, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	6123      	str	r3, [r4, #16]
 800345a:	4615      	mov	r5, r2
 800345c:	e7ba      	b.n	80033d4 <_printf_i+0x150>
 800345e:	682b      	ldr	r3, [r5, #0]
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	602a      	str	r2, [r5, #0]
 8003464:	681d      	ldr	r5, [r3, #0]
 8003466:	6862      	ldr	r2, [r4, #4]
 8003468:	2100      	movs	r1, #0
 800346a:	4628      	mov	r0, r5
 800346c:	f7fc feb8 	bl	80001e0 <memchr>
 8003470:	b108      	cbz	r0, 8003476 <_printf_i+0x1f2>
 8003472:	1b40      	subs	r0, r0, r5
 8003474:	6060      	str	r0, [r4, #4]
 8003476:	6863      	ldr	r3, [r4, #4]
 8003478:	6123      	str	r3, [r4, #16]
 800347a:	2300      	movs	r3, #0
 800347c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003480:	e7a8      	b.n	80033d4 <_printf_i+0x150>
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	462a      	mov	r2, r5
 8003486:	4649      	mov	r1, r9
 8003488:	4640      	mov	r0, r8
 800348a:	47d0      	blx	sl
 800348c:	3001      	adds	r0, #1
 800348e:	d0ab      	beq.n	80033e8 <_printf_i+0x164>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	079b      	lsls	r3, r3, #30
 8003494:	d413      	bmi.n	80034be <_printf_i+0x23a>
 8003496:	68e0      	ldr	r0, [r4, #12]
 8003498:	9b03      	ldr	r3, [sp, #12]
 800349a:	4298      	cmp	r0, r3
 800349c:	bfb8      	it	lt
 800349e:	4618      	movlt	r0, r3
 80034a0:	e7a4      	b.n	80033ec <_printf_i+0x168>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4632      	mov	r2, r6
 80034a6:	4649      	mov	r1, r9
 80034a8:	4640      	mov	r0, r8
 80034aa:	47d0      	blx	sl
 80034ac:	3001      	adds	r0, #1
 80034ae:	d09b      	beq.n	80033e8 <_printf_i+0x164>
 80034b0:	3501      	adds	r5, #1
 80034b2:	68e3      	ldr	r3, [r4, #12]
 80034b4:	9903      	ldr	r1, [sp, #12]
 80034b6:	1a5b      	subs	r3, r3, r1
 80034b8:	42ab      	cmp	r3, r5
 80034ba:	dcf2      	bgt.n	80034a2 <_printf_i+0x21e>
 80034bc:	e7eb      	b.n	8003496 <_printf_i+0x212>
 80034be:	2500      	movs	r5, #0
 80034c0:	f104 0619 	add.w	r6, r4, #25
 80034c4:	e7f5      	b.n	80034b2 <_printf_i+0x22e>
 80034c6:	bf00      	nop
 80034c8:	0800759a 	.word	0x0800759a
 80034cc:	080075ab 	.word	0x080075ab

080034d0 <_scanf_float>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	b087      	sub	sp, #28
 80034d6:	4617      	mov	r7, r2
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	688b      	ldr	r3, [r1, #8]
 80034dc:	1e5a      	subs	r2, r3, #1
 80034de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80034e2:	bf83      	ittte	hi
 80034e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80034e8:	195b      	addhi	r3, r3, r5
 80034ea:	9302      	strhi	r3, [sp, #8]
 80034ec:	2300      	movls	r3, #0
 80034ee:	bf86      	itte	hi
 80034f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80034f4:	608b      	strhi	r3, [r1, #8]
 80034f6:	9302      	strls	r3, [sp, #8]
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	468b      	mov	fp, r1
 80034fc:	2500      	movs	r5, #0
 80034fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003502:	f84b 3b1c 	str.w	r3, [fp], #28
 8003506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800350a:	4680      	mov	r8, r0
 800350c:	460c      	mov	r4, r1
 800350e:	465e      	mov	r6, fp
 8003510:	46aa      	mov	sl, r5
 8003512:	46a9      	mov	r9, r5
 8003514:	9501      	str	r5, [sp, #4]
 8003516:	68a2      	ldr	r2, [r4, #8]
 8003518:	b152      	cbz	r2, 8003530 <_scanf_float+0x60>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b4e      	cmp	r3, #78	; 0x4e
 8003520:	d864      	bhi.n	80035ec <_scanf_float+0x11c>
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d83c      	bhi.n	80035a0 <_scanf_float+0xd0>
 8003526:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800352a:	b2c8      	uxtb	r0, r1
 800352c:	280e      	cmp	r0, #14
 800352e:	d93a      	bls.n	80035a6 <_scanf_float+0xd6>
 8003530:	f1b9 0f00 	cmp.w	r9, #0
 8003534:	d003      	beq.n	800353e <_scanf_float+0x6e>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800353c:	6023      	str	r3, [r4, #0]
 800353e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003542:	f1ba 0f01 	cmp.w	sl, #1
 8003546:	f200 8113 	bhi.w	8003770 <_scanf_float+0x2a0>
 800354a:	455e      	cmp	r6, fp
 800354c:	f200 8105 	bhi.w	800375a <_scanf_float+0x28a>
 8003550:	2501      	movs	r5, #1
 8003552:	4628      	mov	r0, r5
 8003554:	b007      	add	sp, #28
 8003556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800355e:	2a0d      	cmp	r2, #13
 8003560:	d8e6      	bhi.n	8003530 <_scanf_float+0x60>
 8003562:	a101      	add	r1, pc, #4	; (adr r1, 8003568 <_scanf_float+0x98>)
 8003564:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003568:	080036a7 	.word	0x080036a7
 800356c:	08003531 	.word	0x08003531
 8003570:	08003531 	.word	0x08003531
 8003574:	08003531 	.word	0x08003531
 8003578:	08003707 	.word	0x08003707
 800357c:	080036df 	.word	0x080036df
 8003580:	08003531 	.word	0x08003531
 8003584:	08003531 	.word	0x08003531
 8003588:	080036b5 	.word	0x080036b5
 800358c:	08003531 	.word	0x08003531
 8003590:	08003531 	.word	0x08003531
 8003594:	08003531 	.word	0x08003531
 8003598:	08003531 	.word	0x08003531
 800359c:	0800366d 	.word	0x0800366d
 80035a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80035a4:	e7db      	b.n	800355e <_scanf_float+0x8e>
 80035a6:	290e      	cmp	r1, #14
 80035a8:	d8c2      	bhi.n	8003530 <_scanf_float+0x60>
 80035aa:	a001      	add	r0, pc, #4	; (adr r0, 80035b0 <_scanf_float+0xe0>)
 80035ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80035b0:	0800365f 	.word	0x0800365f
 80035b4:	08003531 	.word	0x08003531
 80035b8:	0800365f 	.word	0x0800365f
 80035bc:	080036f3 	.word	0x080036f3
 80035c0:	08003531 	.word	0x08003531
 80035c4:	0800360d 	.word	0x0800360d
 80035c8:	08003649 	.word	0x08003649
 80035cc:	08003649 	.word	0x08003649
 80035d0:	08003649 	.word	0x08003649
 80035d4:	08003649 	.word	0x08003649
 80035d8:	08003649 	.word	0x08003649
 80035dc:	08003649 	.word	0x08003649
 80035e0:	08003649 	.word	0x08003649
 80035e4:	08003649 	.word	0x08003649
 80035e8:	08003649 	.word	0x08003649
 80035ec:	2b6e      	cmp	r3, #110	; 0x6e
 80035ee:	d809      	bhi.n	8003604 <_scanf_float+0x134>
 80035f0:	2b60      	cmp	r3, #96	; 0x60
 80035f2:	d8b2      	bhi.n	800355a <_scanf_float+0x8a>
 80035f4:	2b54      	cmp	r3, #84	; 0x54
 80035f6:	d077      	beq.n	80036e8 <_scanf_float+0x218>
 80035f8:	2b59      	cmp	r3, #89	; 0x59
 80035fa:	d199      	bne.n	8003530 <_scanf_float+0x60>
 80035fc:	2d07      	cmp	r5, #7
 80035fe:	d197      	bne.n	8003530 <_scanf_float+0x60>
 8003600:	2508      	movs	r5, #8
 8003602:	e029      	b.n	8003658 <_scanf_float+0x188>
 8003604:	2b74      	cmp	r3, #116	; 0x74
 8003606:	d06f      	beq.n	80036e8 <_scanf_float+0x218>
 8003608:	2b79      	cmp	r3, #121	; 0x79
 800360a:	e7f6      	b.n	80035fa <_scanf_float+0x12a>
 800360c:	6821      	ldr	r1, [r4, #0]
 800360e:	05c8      	lsls	r0, r1, #23
 8003610:	d51a      	bpl.n	8003648 <_scanf_float+0x178>
 8003612:	9b02      	ldr	r3, [sp, #8]
 8003614:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003618:	6021      	str	r1, [r4, #0]
 800361a:	f109 0901 	add.w	r9, r9, #1
 800361e:	b11b      	cbz	r3, 8003628 <_scanf_float+0x158>
 8003620:	3b01      	subs	r3, #1
 8003622:	3201      	adds	r2, #1
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	60a2      	str	r2, [r4, #8]
 8003628:	68a3      	ldr	r3, [r4, #8]
 800362a:	3b01      	subs	r3, #1
 800362c:	60a3      	str	r3, [r4, #8]
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	3301      	adds	r3, #1
 8003632:	6123      	str	r3, [r4, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	f340 8084 	ble.w	8003748 <_scanf_float+0x278>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	e766      	b.n	8003516 <_scanf_float+0x46>
 8003648:	eb1a 0f05 	cmn.w	sl, r5
 800364c:	f47f af70 	bne.w	8003530 <_scanf_float+0x60>
 8003650:	6822      	ldr	r2, [r4, #0]
 8003652:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003656:	6022      	str	r2, [r4, #0]
 8003658:	f806 3b01 	strb.w	r3, [r6], #1
 800365c:	e7e4      	b.n	8003628 <_scanf_float+0x158>
 800365e:	6822      	ldr	r2, [r4, #0]
 8003660:	0610      	lsls	r0, r2, #24
 8003662:	f57f af65 	bpl.w	8003530 <_scanf_float+0x60>
 8003666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366a:	e7f4      	b.n	8003656 <_scanf_float+0x186>
 800366c:	f1ba 0f00 	cmp.w	sl, #0
 8003670:	d10e      	bne.n	8003690 <_scanf_float+0x1c0>
 8003672:	f1b9 0f00 	cmp.w	r9, #0
 8003676:	d10e      	bne.n	8003696 <_scanf_float+0x1c6>
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800367e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003682:	d108      	bne.n	8003696 <_scanf_float+0x1c6>
 8003684:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003688:	6022      	str	r2, [r4, #0]
 800368a:	f04f 0a01 	mov.w	sl, #1
 800368e:	e7e3      	b.n	8003658 <_scanf_float+0x188>
 8003690:	f1ba 0f02 	cmp.w	sl, #2
 8003694:	d055      	beq.n	8003742 <_scanf_float+0x272>
 8003696:	2d01      	cmp	r5, #1
 8003698:	d002      	beq.n	80036a0 <_scanf_float+0x1d0>
 800369a:	2d04      	cmp	r5, #4
 800369c:	f47f af48 	bne.w	8003530 <_scanf_float+0x60>
 80036a0:	3501      	adds	r5, #1
 80036a2:	b2ed      	uxtb	r5, r5
 80036a4:	e7d8      	b.n	8003658 <_scanf_float+0x188>
 80036a6:	f1ba 0f01 	cmp.w	sl, #1
 80036aa:	f47f af41 	bne.w	8003530 <_scanf_float+0x60>
 80036ae:	f04f 0a02 	mov.w	sl, #2
 80036b2:	e7d1      	b.n	8003658 <_scanf_float+0x188>
 80036b4:	b97d      	cbnz	r5, 80036d6 <_scanf_float+0x206>
 80036b6:	f1b9 0f00 	cmp.w	r9, #0
 80036ba:	f47f af3c 	bne.w	8003536 <_scanf_float+0x66>
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80036c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80036c8:	f47f af39 	bne.w	800353e <_scanf_float+0x6e>
 80036cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80036d0:	6022      	str	r2, [r4, #0]
 80036d2:	2501      	movs	r5, #1
 80036d4:	e7c0      	b.n	8003658 <_scanf_float+0x188>
 80036d6:	2d03      	cmp	r5, #3
 80036d8:	d0e2      	beq.n	80036a0 <_scanf_float+0x1d0>
 80036da:	2d05      	cmp	r5, #5
 80036dc:	e7de      	b.n	800369c <_scanf_float+0x1cc>
 80036de:	2d02      	cmp	r5, #2
 80036e0:	f47f af26 	bne.w	8003530 <_scanf_float+0x60>
 80036e4:	2503      	movs	r5, #3
 80036e6:	e7b7      	b.n	8003658 <_scanf_float+0x188>
 80036e8:	2d06      	cmp	r5, #6
 80036ea:	f47f af21 	bne.w	8003530 <_scanf_float+0x60>
 80036ee:	2507      	movs	r5, #7
 80036f0:	e7b2      	b.n	8003658 <_scanf_float+0x188>
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	0591      	lsls	r1, r2, #22
 80036f6:	f57f af1b 	bpl.w	8003530 <_scanf_float+0x60>
 80036fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80036fe:	6022      	str	r2, [r4, #0]
 8003700:	f8cd 9004 	str.w	r9, [sp, #4]
 8003704:	e7a8      	b.n	8003658 <_scanf_float+0x188>
 8003706:	6822      	ldr	r2, [r4, #0]
 8003708:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800370c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003710:	d006      	beq.n	8003720 <_scanf_float+0x250>
 8003712:	0550      	lsls	r0, r2, #21
 8003714:	f57f af0c 	bpl.w	8003530 <_scanf_float+0x60>
 8003718:	f1b9 0f00 	cmp.w	r9, #0
 800371c:	f43f af0f 	beq.w	800353e <_scanf_float+0x6e>
 8003720:	0591      	lsls	r1, r2, #22
 8003722:	bf58      	it	pl
 8003724:	9901      	ldrpl	r1, [sp, #4]
 8003726:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800372a:	bf58      	it	pl
 800372c:	eba9 0101 	subpl.w	r1, r9, r1
 8003730:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003734:	bf58      	it	pl
 8003736:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800373a:	6022      	str	r2, [r4, #0]
 800373c:	f04f 0900 	mov.w	r9, #0
 8003740:	e78a      	b.n	8003658 <_scanf_float+0x188>
 8003742:	f04f 0a03 	mov.w	sl, #3
 8003746:	e787      	b.n	8003658 <_scanf_float+0x188>
 8003748:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800374c:	4639      	mov	r1, r7
 800374e:	4640      	mov	r0, r8
 8003750:	4798      	blx	r3
 8003752:	2800      	cmp	r0, #0
 8003754:	f43f aedf 	beq.w	8003516 <_scanf_float+0x46>
 8003758:	e6ea      	b.n	8003530 <_scanf_float+0x60>
 800375a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800375e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003762:	463a      	mov	r2, r7
 8003764:	4640      	mov	r0, r8
 8003766:	4798      	blx	r3
 8003768:	6923      	ldr	r3, [r4, #16]
 800376a:	3b01      	subs	r3, #1
 800376c:	6123      	str	r3, [r4, #16]
 800376e:	e6ec      	b.n	800354a <_scanf_float+0x7a>
 8003770:	1e6b      	subs	r3, r5, #1
 8003772:	2b06      	cmp	r3, #6
 8003774:	d825      	bhi.n	80037c2 <_scanf_float+0x2f2>
 8003776:	2d02      	cmp	r5, #2
 8003778:	d836      	bhi.n	80037e8 <_scanf_float+0x318>
 800377a:	455e      	cmp	r6, fp
 800377c:	f67f aee8 	bls.w	8003550 <_scanf_float+0x80>
 8003780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003784:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003788:	463a      	mov	r2, r7
 800378a:	4640      	mov	r0, r8
 800378c:	4798      	blx	r3
 800378e:	6923      	ldr	r3, [r4, #16]
 8003790:	3b01      	subs	r3, #1
 8003792:	6123      	str	r3, [r4, #16]
 8003794:	e7f1      	b.n	800377a <_scanf_float+0x2aa>
 8003796:	9802      	ldr	r0, [sp, #8]
 8003798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800379c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80037a0:	9002      	str	r0, [sp, #8]
 80037a2:	463a      	mov	r2, r7
 80037a4:	4640      	mov	r0, r8
 80037a6:	4798      	blx	r3
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	6123      	str	r3, [r4, #16]
 80037ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037b2:	fa5f fa8a 	uxtb.w	sl, sl
 80037b6:	f1ba 0f02 	cmp.w	sl, #2
 80037ba:	d1ec      	bne.n	8003796 <_scanf_float+0x2c6>
 80037bc:	3d03      	subs	r5, #3
 80037be:	b2ed      	uxtb	r5, r5
 80037c0:	1b76      	subs	r6, r6, r5
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	05da      	lsls	r2, r3, #23
 80037c6:	d52f      	bpl.n	8003828 <_scanf_float+0x358>
 80037c8:	055b      	lsls	r3, r3, #21
 80037ca:	d510      	bpl.n	80037ee <_scanf_float+0x31e>
 80037cc:	455e      	cmp	r6, fp
 80037ce:	f67f aebf 	bls.w	8003550 <_scanf_float+0x80>
 80037d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80037da:	463a      	mov	r2, r7
 80037dc:	4640      	mov	r0, r8
 80037de:	4798      	blx	r3
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	e7f1      	b.n	80037cc <_scanf_float+0x2fc>
 80037e8:	46aa      	mov	sl, r5
 80037ea:	9602      	str	r6, [sp, #8]
 80037ec:	e7df      	b.n	80037ae <_scanf_float+0x2de>
 80037ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	2965      	cmp	r1, #101	; 0x65
 80037f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80037fa:	f106 35ff 	add.w	r5, r6, #4294967295
 80037fe:	6123      	str	r3, [r4, #16]
 8003800:	d00c      	beq.n	800381c <_scanf_float+0x34c>
 8003802:	2945      	cmp	r1, #69	; 0x45
 8003804:	d00a      	beq.n	800381c <_scanf_float+0x34c>
 8003806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800380a:	463a      	mov	r2, r7
 800380c:	4640      	mov	r0, r8
 800380e:	4798      	blx	r3
 8003810:	6923      	ldr	r3, [r4, #16]
 8003812:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003816:	3b01      	subs	r3, #1
 8003818:	1eb5      	subs	r5, r6, #2
 800381a:	6123      	str	r3, [r4, #16]
 800381c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003820:	463a      	mov	r2, r7
 8003822:	4640      	mov	r0, r8
 8003824:	4798      	blx	r3
 8003826:	462e      	mov	r6, r5
 8003828:	6825      	ldr	r5, [r4, #0]
 800382a:	f015 0510 	ands.w	r5, r5, #16
 800382e:	d159      	bne.n	80038e4 <_scanf_float+0x414>
 8003830:	7035      	strb	r5, [r6, #0]
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800383c:	d11b      	bne.n	8003876 <_scanf_float+0x3a6>
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	454b      	cmp	r3, r9
 8003842:	eba3 0209 	sub.w	r2, r3, r9
 8003846:	d123      	bne.n	8003890 <_scanf_float+0x3c0>
 8003848:	2200      	movs	r2, #0
 800384a:	4659      	mov	r1, fp
 800384c:	4640      	mov	r0, r8
 800384e:	f000 feb1 	bl	80045b4 <_strtod_r>
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	9b03      	ldr	r3, [sp, #12]
 8003856:	f012 0f02 	tst.w	r2, #2
 800385a:	ec57 6b10 	vmov	r6, r7, d0
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	d021      	beq.n	80038a6 <_scanf_float+0x3d6>
 8003862:	9903      	ldr	r1, [sp, #12]
 8003864:	1d1a      	adds	r2, r3, #4
 8003866:	600a      	str	r2, [r1, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	e9c3 6700 	strd	r6, r7, [r3]
 800386e:	68e3      	ldr	r3, [r4, #12]
 8003870:	3301      	adds	r3, #1
 8003872:	60e3      	str	r3, [r4, #12]
 8003874:	e66d      	b.n	8003552 <_scanf_float+0x82>
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0e5      	beq.n	8003848 <_scanf_float+0x378>
 800387c:	9905      	ldr	r1, [sp, #20]
 800387e:	230a      	movs	r3, #10
 8003880:	462a      	mov	r2, r5
 8003882:	3101      	adds	r1, #1
 8003884:	4640      	mov	r0, r8
 8003886:	f000 ff1d 	bl	80046c4 <_strtol_r>
 800388a:	9b04      	ldr	r3, [sp, #16]
 800388c:	9e05      	ldr	r6, [sp, #20]
 800388e:	1ac2      	subs	r2, r0, r3
 8003890:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003894:	429e      	cmp	r6, r3
 8003896:	bf28      	it	cs
 8003898:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800389c:	4912      	ldr	r1, [pc, #72]	; (80038e8 <_scanf_float+0x418>)
 800389e:	4630      	mov	r0, r6
 80038a0:	f000 f844 	bl	800392c <siprintf>
 80038a4:	e7d0      	b.n	8003848 <_scanf_float+0x378>
 80038a6:	9903      	ldr	r1, [sp, #12]
 80038a8:	f012 0f04 	tst.w	r2, #4
 80038ac:	f103 0204 	add.w	r2, r3, #4
 80038b0:	600a      	str	r2, [r1, #0]
 80038b2:	d1d9      	bne.n	8003868 <_scanf_float+0x398>
 80038b4:	f8d3 8000 	ldr.w	r8, [r3]
 80038b8:	ee10 2a10 	vmov	r2, s0
 80038bc:	ee10 0a10 	vmov	r0, s0
 80038c0:	463b      	mov	r3, r7
 80038c2:	4639      	mov	r1, r7
 80038c4:	f7fd f932 	bl	8000b2c <__aeabi_dcmpun>
 80038c8:	b128      	cbz	r0, 80038d6 <_scanf_float+0x406>
 80038ca:	4808      	ldr	r0, [pc, #32]	; (80038ec <_scanf_float+0x41c>)
 80038cc:	f000 f828 	bl	8003920 <nanf>
 80038d0:	ed88 0a00 	vstr	s0, [r8]
 80038d4:	e7cb      	b.n	800386e <_scanf_float+0x39e>
 80038d6:	4630      	mov	r0, r6
 80038d8:	4639      	mov	r1, r7
 80038da:	f7fd f985 	bl	8000be8 <__aeabi_d2f>
 80038de:	f8c8 0000 	str.w	r0, [r8]
 80038e2:	e7c4      	b.n	800386e <_scanf_float+0x39e>
 80038e4:	2500      	movs	r5, #0
 80038e6:	e634      	b.n	8003552 <_scanf_float+0x82>
 80038e8:	080075bc 	.word	0x080075bc
 80038ec:	08007a30 	.word	0x08007a30

080038f0 <iprintf>:
 80038f0:	b40f      	push	{r0, r1, r2, r3}
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <iprintf+0x2c>)
 80038f4:	b513      	push	{r0, r1, r4, lr}
 80038f6:	681c      	ldr	r4, [r3, #0]
 80038f8:	b124      	cbz	r4, 8003904 <iprintf+0x14>
 80038fa:	69a3      	ldr	r3, [r4, #24]
 80038fc:	b913      	cbnz	r3, 8003904 <iprintf+0x14>
 80038fe:	4620      	mov	r0, r4
 8003900:	f001 fdb4 	bl	800546c <__sinit>
 8003904:	ab05      	add	r3, sp, #20
 8003906:	9a04      	ldr	r2, [sp, #16]
 8003908:	68a1      	ldr	r1, [r4, #8]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	4620      	mov	r0, r4
 800390e:	f003 f927 	bl	8006b60 <_vfiprintf_r>
 8003912:	b002      	add	sp, #8
 8003914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003918:	b004      	add	sp, #16
 800391a:	4770      	bx	lr
 800391c:	2000000c 	.word	0x2000000c

08003920 <nanf>:
 8003920:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003928 <nanf+0x8>
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	7fc00000 	.word	0x7fc00000

0800392c <siprintf>:
 800392c:	b40e      	push	{r1, r2, r3}
 800392e:	b500      	push	{lr}
 8003930:	b09c      	sub	sp, #112	; 0x70
 8003932:	ab1d      	add	r3, sp, #116	; 0x74
 8003934:	9002      	str	r0, [sp, #8]
 8003936:	9006      	str	r0, [sp, #24]
 8003938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800393c:	4809      	ldr	r0, [pc, #36]	; (8003964 <siprintf+0x38>)
 800393e:	9107      	str	r1, [sp, #28]
 8003940:	9104      	str	r1, [sp, #16]
 8003942:	4909      	ldr	r1, [pc, #36]	; (8003968 <siprintf+0x3c>)
 8003944:	f853 2b04 	ldr.w	r2, [r3], #4
 8003948:	9105      	str	r1, [sp, #20]
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	a902      	add	r1, sp, #8
 8003950:	f002 ffdc 	bl	800690c <_svfiprintf_r>
 8003954:	9b02      	ldr	r3, [sp, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	b01c      	add	sp, #112	; 0x70
 800395c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003960:	b003      	add	sp, #12
 8003962:	4770      	bx	lr
 8003964:	2000000c 	.word	0x2000000c
 8003968:	ffff0208 	.word	0xffff0208

0800396c <sulp>:
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4604      	mov	r4, r0
 8003970:	460d      	mov	r5, r1
 8003972:	ec45 4b10 	vmov	d0, r4, r5
 8003976:	4616      	mov	r6, r2
 8003978:	f002 fd26 	bl	80063c8 <__ulp>
 800397c:	ec51 0b10 	vmov	r0, r1, d0
 8003980:	b17e      	cbz	r6, 80039a2 <sulp+0x36>
 8003982:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003986:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800398a:	2b00      	cmp	r3, #0
 800398c:	dd09      	ble.n	80039a2 <sulp+0x36>
 800398e:	051b      	lsls	r3, r3, #20
 8003990:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003994:	2400      	movs	r4, #0
 8003996:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800399a:	4622      	mov	r2, r4
 800399c:	462b      	mov	r3, r5
 800399e:	f7fc fe2b 	bl	80005f8 <__aeabi_dmul>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	0000      	movs	r0, r0
	...

080039a8 <_strtod_l>:
 80039a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ac:	ed2d 8b02 	vpush	{d8}
 80039b0:	b09d      	sub	sp, #116	; 0x74
 80039b2:	461f      	mov	r7, r3
 80039b4:	2300      	movs	r3, #0
 80039b6:	9318      	str	r3, [sp, #96]	; 0x60
 80039b8:	4ba2      	ldr	r3, [pc, #648]	; (8003c44 <_strtod_l+0x29c>)
 80039ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	9305      	str	r3, [sp, #20]
 80039c0:	4604      	mov	r4, r0
 80039c2:	4618      	mov	r0, r3
 80039c4:	4688      	mov	r8, r1
 80039c6:	f7fc fc03 	bl	80001d0 <strlen>
 80039ca:	f04f 0a00 	mov.w	sl, #0
 80039ce:	4605      	mov	r5, r0
 80039d0:	f04f 0b00 	mov.w	fp, #0
 80039d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80039d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	2a2b      	cmp	r2, #43	; 0x2b
 80039de:	d04e      	beq.n	8003a7e <_strtod_l+0xd6>
 80039e0:	d83b      	bhi.n	8003a5a <_strtod_l+0xb2>
 80039e2:	2a0d      	cmp	r2, #13
 80039e4:	d834      	bhi.n	8003a50 <_strtod_l+0xa8>
 80039e6:	2a08      	cmp	r2, #8
 80039e8:	d834      	bhi.n	8003a54 <_strtod_l+0xac>
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	d03e      	beq.n	8003a6c <_strtod_l+0xc4>
 80039ee:	2300      	movs	r3, #0
 80039f0:	930a      	str	r3, [sp, #40]	; 0x28
 80039f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80039f4:	7833      	ldrb	r3, [r6, #0]
 80039f6:	2b30      	cmp	r3, #48	; 0x30
 80039f8:	f040 80b0 	bne.w	8003b5c <_strtod_l+0x1b4>
 80039fc:	7873      	ldrb	r3, [r6, #1]
 80039fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003a02:	2b58      	cmp	r3, #88	; 0x58
 8003a04:	d168      	bne.n	8003ad8 <_strtod_l+0x130>
 8003a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	ab18      	add	r3, sp, #96	; 0x60
 8003a0c:	9702      	str	r7, [sp, #8]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	4a8d      	ldr	r2, [pc, #564]	; (8003c48 <_strtod_l+0x2a0>)
 8003a12:	ab19      	add	r3, sp, #100	; 0x64
 8003a14:	a917      	add	r1, sp, #92	; 0x5c
 8003a16:	4620      	mov	r0, r4
 8003a18:	f001 fe2c 	bl	8005674 <__gethex>
 8003a1c:	f010 0707 	ands.w	r7, r0, #7
 8003a20:	4605      	mov	r5, r0
 8003a22:	d005      	beq.n	8003a30 <_strtod_l+0x88>
 8003a24:	2f06      	cmp	r7, #6
 8003a26:	d12c      	bne.n	8003a82 <_strtod_l+0xda>
 8003a28:	3601      	adds	r6, #1
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9617      	str	r6, [sp, #92]	; 0x5c
 8003a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003a30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f040 8590 	bne.w	8004558 <_strtod_l+0xbb0>
 8003a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a3a:	b1eb      	cbz	r3, 8003a78 <_strtod_l+0xd0>
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003a42:	ec43 2b10 	vmov	d0, r2, r3
 8003a46:	b01d      	add	sp, #116	; 0x74
 8003a48:	ecbd 8b02 	vpop	{d8}
 8003a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a50:	2a20      	cmp	r2, #32
 8003a52:	d1cc      	bne.n	80039ee <_strtod_l+0x46>
 8003a54:	3301      	adds	r3, #1
 8003a56:	9317      	str	r3, [sp, #92]	; 0x5c
 8003a58:	e7be      	b.n	80039d8 <_strtod_l+0x30>
 8003a5a:	2a2d      	cmp	r2, #45	; 0x2d
 8003a5c:	d1c7      	bne.n	80039ee <_strtod_l+0x46>
 8003a5e:	2201      	movs	r2, #1
 8003a60:	920a      	str	r2, [sp, #40]	; 0x28
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	9217      	str	r2, [sp, #92]	; 0x5c
 8003a66:	785b      	ldrb	r3, [r3, #1]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1c2      	bne.n	80039f2 <_strtod_l+0x4a>
 8003a6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f040 856e 	bne.w	8004554 <_strtod_l+0xbac>
 8003a78:	4652      	mov	r2, sl
 8003a7a:	465b      	mov	r3, fp
 8003a7c:	e7e1      	b.n	8003a42 <_strtod_l+0x9a>
 8003a7e:	2200      	movs	r2, #0
 8003a80:	e7ee      	b.n	8003a60 <_strtod_l+0xb8>
 8003a82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003a84:	b13a      	cbz	r2, 8003a96 <_strtod_l+0xee>
 8003a86:	2135      	movs	r1, #53	; 0x35
 8003a88:	a81a      	add	r0, sp, #104	; 0x68
 8003a8a:	f002 fda8 	bl	80065de <__copybits>
 8003a8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003a90:	4620      	mov	r0, r4
 8003a92:	f002 f967 	bl	8005d64 <_Bfree>
 8003a96:	3f01      	subs	r7, #1
 8003a98:	2f04      	cmp	r7, #4
 8003a9a:	d806      	bhi.n	8003aaa <_strtod_l+0x102>
 8003a9c:	e8df f007 	tbb	[pc, r7]
 8003aa0:	1714030a 	.word	0x1714030a
 8003aa4:	0a          	.byte	0x0a
 8003aa5:	00          	.byte	0x00
 8003aa6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8003aaa:	0728      	lsls	r0, r5, #28
 8003aac:	d5c0      	bpl.n	8003a30 <_strtod_l+0x88>
 8003aae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003ab2:	e7bd      	b.n	8003a30 <_strtod_l+0x88>
 8003ab4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8003ab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003aba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003abe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003ac2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003ac6:	e7f0      	b.n	8003aaa <_strtod_l+0x102>
 8003ac8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8003c4c <_strtod_l+0x2a4>
 8003acc:	e7ed      	b.n	8003aaa <_strtod_l+0x102>
 8003ace:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003ad2:	f04f 3aff 	mov.w	sl, #4294967295
 8003ad6:	e7e8      	b.n	8003aaa <_strtod_l+0x102>
 8003ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	9217      	str	r2, [sp, #92]	; 0x5c
 8003ade:	785b      	ldrb	r3, [r3, #1]
 8003ae0:	2b30      	cmp	r3, #48	; 0x30
 8003ae2:	d0f9      	beq.n	8003ad8 <_strtod_l+0x130>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0a3      	beq.n	8003a30 <_strtod_l+0x88>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f04f 0900 	mov.w	r9, #0
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003af2:	9308      	str	r3, [sp, #32]
 8003af4:	f8cd 901c 	str.w	r9, [sp, #28]
 8003af8:	464f      	mov	r7, r9
 8003afa:	220a      	movs	r2, #10
 8003afc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003afe:	7806      	ldrb	r6, [r0, #0]
 8003b00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003b04:	b2d9      	uxtb	r1, r3
 8003b06:	2909      	cmp	r1, #9
 8003b08:	d92a      	bls.n	8003b60 <_strtod_l+0x1b8>
 8003b0a:	9905      	ldr	r1, [sp, #20]
 8003b0c:	462a      	mov	r2, r5
 8003b0e:	f003 f9b2 	bl	8006e76 <strncmp>
 8003b12:	b398      	cbz	r0, 8003b7c <_strtod_l+0x1d4>
 8003b14:	2000      	movs	r0, #0
 8003b16:	4632      	mov	r2, r6
 8003b18:	463d      	mov	r5, r7
 8003b1a:	9005      	str	r0, [sp, #20]
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2a65      	cmp	r2, #101	; 0x65
 8003b20:	d001      	beq.n	8003b26 <_strtod_l+0x17e>
 8003b22:	2a45      	cmp	r2, #69	; 0x45
 8003b24:	d118      	bne.n	8003b58 <_strtod_l+0x1b0>
 8003b26:	b91d      	cbnz	r5, 8003b30 <_strtod_l+0x188>
 8003b28:	9a04      	ldr	r2, [sp, #16]
 8003b2a:	4302      	orrs	r2, r0
 8003b2c:	d09e      	beq.n	8003a6c <_strtod_l+0xc4>
 8003b2e:	2500      	movs	r5, #0
 8003b30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8003b34:	f108 0201 	add.w	r2, r8, #1
 8003b38:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8003b3e:	2a2b      	cmp	r2, #43	; 0x2b
 8003b40:	d075      	beq.n	8003c2e <_strtod_l+0x286>
 8003b42:	2a2d      	cmp	r2, #45	; 0x2d
 8003b44:	d07b      	beq.n	8003c3e <_strtod_l+0x296>
 8003b46:	f04f 0c00 	mov.w	ip, #0
 8003b4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003b4e:	2909      	cmp	r1, #9
 8003b50:	f240 8082 	bls.w	8003c58 <_strtod_l+0x2b0>
 8003b54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8003b58:	2600      	movs	r6, #0
 8003b5a:	e09d      	b.n	8003c98 <_strtod_l+0x2f0>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e7c4      	b.n	8003aea <_strtod_l+0x142>
 8003b60:	2f08      	cmp	r7, #8
 8003b62:	bfd8      	it	le
 8003b64:	9907      	ldrle	r1, [sp, #28]
 8003b66:	f100 0001 	add.w	r0, r0, #1
 8003b6a:	bfda      	itte	le
 8003b6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b70:	9307      	strle	r3, [sp, #28]
 8003b72:	fb02 3909 	mlagt	r9, r2, r9, r3
 8003b76:	3701      	adds	r7, #1
 8003b78:	9017      	str	r0, [sp, #92]	; 0x5c
 8003b7a:	e7bf      	b.n	8003afc <_strtod_l+0x154>
 8003b7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b7e:	195a      	adds	r2, r3, r5
 8003b80:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b82:	5d5a      	ldrb	r2, [r3, r5]
 8003b84:	2f00      	cmp	r7, #0
 8003b86:	d037      	beq.n	8003bf8 <_strtod_l+0x250>
 8003b88:	9005      	str	r0, [sp, #20]
 8003b8a:	463d      	mov	r5, r7
 8003b8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003b90:	2b09      	cmp	r3, #9
 8003b92:	d912      	bls.n	8003bba <_strtod_l+0x212>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e7c2      	b.n	8003b1e <_strtod_l+0x176>
 8003b98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	9217      	str	r2, [sp, #92]	; 0x5c
 8003b9e:	785a      	ldrb	r2, [r3, #1]
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	2a30      	cmp	r2, #48	; 0x30
 8003ba4:	d0f8      	beq.n	8003b98 <_strtod_l+0x1f0>
 8003ba6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	f200 84d9 	bhi.w	8004562 <_strtod_l+0xbba>
 8003bb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003bb2:	9005      	str	r0, [sp, #20]
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	9308      	str	r3, [sp, #32]
 8003bb8:	4605      	mov	r5, r0
 8003bba:	3a30      	subs	r2, #48	; 0x30
 8003bbc:	f100 0301 	add.w	r3, r0, #1
 8003bc0:	d014      	beq.n	8003bec <_strtod_l+0x244>
 8003bc2:	9905      	ldr	r1, [sp, #20]
 8003bc4:	4419      	add	r1, r3
 8003bc6:	9105      	str	r1, [sp, #20]
 8003bc8:	462b      	mov	r3, r5
 8003bca:	eb00 0e05 	add.w	lr, r0, r5
 8003bce:	210a      	movs	r1, #10
 8003bd0:	4573      	cmp	r3, lr
 8003bd2:	d113      	bne.n	8003bfc <_strtod_l+0x254>
 8003bd4:	182b      	adds	r3, r5, r0
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	f105 0501 	add.w	r5, r5, #1
 8003bdc:	4405      	add	r5, r0
 8003bde:	dc1c      	bgt.n	8003c1a <_strtod_l+0x272>
 8003be0:	9907      	ldr	r1, [sp, #28]
 8003be2:	230a      	movs	r3, #10
 8003be4:	fb03 2301 	mla	r3, r3, r1, r2
 8003be8:	9307      	str	r3, [sp, #28]
 8003bea:	2300      	movs	r3, #0
 8003bec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003bee:	1c51      	adds	r1, r2, #1
 8003bf0:	9117      	str	r1, [sp, #92]	; 0x5c
 8003bf2:	7852      	ldrb	r2, [r2, #1]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	e7c9      	b.n	8003b8c <_strtod_l+0x1e4>
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	e7d2      	b.n	8003ba2 <_strtod_l+0x1fa>
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	dc04      	bgt.n	8003c0a <_strtod_l+0x262>
 8003c00:	9e07      	ldr	r6, [sp, #28]
 8003c02:	434e      	muls	r6, r1
 8003c04:	9607      	str	r6, [sp, #28]
 8003c06:	3301      	adds	r3, #1
 8003c08:	e7e2      	b.n	8003bd0 <_strtod_l+0x228>
 8003c0a:	f103 0c01 	add.w	ip, r3, #1
 8003c0e:	f1bc 0f10 	cmp.w	ip, #16
 8003c12:	bfd8      	it	le
 8003c14:	fb01 f909 	mulle.w	r9, r1, r9
 8003c18:	e7f5      	b.n	8003c06 <_strtod_l+0x25e>
 8003c1a:	2d10      	cmp	r5, #16
 8003c1c:	bfdc      	itt	le
 8003c1e:	230a      	movle	r3, #10
 8003c20:	fb03 2909 	mlale	r9, r3, r9, r2
 8003c24:	e7e1      	b.n	8003bea <_strtod_l+0x242>
 8003c26:	2300      	movs	r3, #0
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e77c      	b.n	8003b28 <_strtod_l+0x180>
 8003c2e:	f04f 0c00 	mov.w	ip, #0
 8003c32:	f108 0202 	add.w	r2, r8, #2
 8003c36:	9217      	str	r2, [sp, #92]	; 0x5c
 8003c38:	f898 2002 	ldrb.w	r2, [r8, #2]
 8003c3c:	e785      	b.n	8003b4a <_strtod_l+0x1a2>
 8003c3e:	f04f 0c01 	mov.w	ip, #1
 8003c42:	e7f6      	b.n	8003c32 <_strtod_l+0x28a>
 8003c44:	08007874 	.word	0x08007874
 8003c48:	080075c4 	.word	0x080075c4
 8003c4c:	7ff00000 	.word	0x7ff00000
 8003c50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c52:	1c51      	adds	r1, r2, #1
 8003c54:	9117      	str	r1, [sp, #92]	; 0x5c
 8003c56:	7852      	ldrb	r2, [r2, #1]
 8003c58:	2a30      	cmp	r2, #48	; 0x30
 8003c5a:	d0f9      	beq.n	8003c50 <_strtod_l+0x2a8>
 8003c5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003c60:	2908      	cmp	r1, #8
 8003c62:	f63f af79 	bhi.w	8003b58 <_strtod_l+0x1b0>
 8003c66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8003c6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c6c:	9206      	str	r2, [sp, #24]
 8003c6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003c70:	1c51      	adds	r1, r2, #1
 8003c72:	9117      	str	r1, [sp, #92]	; 0x5c
 8003c74:	7852      	ldrb	r2, [r2, #1]
 8003c76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8003c7a:	2e09      	cmp	r6, #9
 8003c7c:	d937      	bls.n	8003cee <_strtod_l+0x346>
 8003c7e:	9e06      	ldr	r6, [sp, #24]
 8003c80:	1b89      	subs	r1, r1, r6
 8003c82:	2908      	cmp	r1, #8
 8003c84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8003c88:	dc02      	bgt.n	8003c90 <_strtod_l+0x2e8>
 8003c8a:	4576      	cmp	r6, lr
 8003c8c:	bfa8      	it	ge
 8003c8e:	4676      	movge	r6, lr
 8003c90:	f1bc 0f00 	cmp.w	ip, #0
 8003c94:	d000      	beq.n	8003c98 <_strtod_l+0x2f0>
 8003c96:	4276      	negs	r6, r6
 8003c98:	2d00      	cmp	r5, #0
 8003c9a:	d14d      	bne.n	8003d38 <_strtod_l+0x390>
 8003c9c:	9904      	ldr	r1, [sp, #16]
 8003c9e:	4301      	orrs	r1, r0
 8003ca0:	f47f aec6 	bne.w	8003a30 <_strtod_l+0x88>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f aee1 	bne.w	8003a6c <_strtod_l+0xc4>
 8003caa:	2a69      	cmp	r2, #105	; 0x69
 8003cac:	d027      	beq.n	8003cfe <_strtod_l+0x356>
 8003cae:	dc24      	bgt.n	8003cfa <_strtod_l+0x352>
 8003cb0:	2a49      	cmp	r2, #73	; 0x49
 8003cb2:	d024      	beq.n	8003cfe <_strtod_l+0x356>
 8003cb4:	2a4e      	cmp	r2, #78	; 0x4e
 8003cb6:	f47f aed9 	bne.w	8003a6c <_strtod_l+0xc4>
 8003cba:	499f      	ldr	r1, [pc, #636]	; (8003f38 <_strtod_l+0x590>)
 8003cbc:	a817      	add	r0, sp, #92	; 0x5c
 8003cbe:	f001 ff31 	bl	8005b24 <__match>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	f43f aed2 	beq.w	8003a6c <_strtod_l+0xc4>
 8003cc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b28      	cmp	r3, #40	; 0x28
 8003cce:	d12d      	bne.n	8003d2c <_strtod_l+0x384>
 8003cd0:	499a      	ldr	r1, [pc, #616]	; (8003f3c <_strtod_l+0x594>)
 8003cd2:	aa1a      	add	r2, sp, #104	; 0x68
 8003cd4:	a817      	add	r0, sp, #92	; 0x5c
 8003cd6:	f001 ff39 	bl	8005b4c <__hexnan>
 8003cda:	2805      	cmp	r0, #5
 8003cdc:	d126      	bne.n	8003d2c <_strtod_l+0x384>
 8003cde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ce0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8003ce4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003ce8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003cec:	e6a0      	b.n	8003a30 <_strtod_l+0x88>
 8003cee:	210a      	movs	r1, #10
 8003cf0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8003cf4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003cf8:	e7b9      	b.n	8003c6e <_strtod_l+0x2c6>
 8003cfa:	2a6e      	cmp	r2, #110	; 0x6e
 8003cfc:	e7db      	b.n	8003cb6 <_strtod_l+0x30e>
 8003cfe:	4990      	ldr	r1, [pc, #576]	; (8003f40 <_strtod_l+0x598>)
 8003d00:	a817      	add	r0, sp, #92	; 0x5c
 8003d02:	f001 ff0f 	bl	8005b24 <__match>
 8003d06:	2800      	cmp	r0, #0
 8003d08:	f43f aeb0 	beq.w	8003a6c <_strtod_l+0xc4>
 8003d0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d0e:	498d      	ldr	r1, [pc, #564]	; (8003f44 <_strtod_l+0x59c>)
 8003d10:	3b01      	subs	r3, #1
 8003d12:	a817      	add	r0, sp, #92	; 0x5c
 8003d14:	9317      	str	r3, [sp, #92]	; 0x5c
 8003d16:	f001 ff05 	bl	8005b24 <__match>
 8003d1a:	b910      	cbnz	r0, 8003d22 <_strtod_l+0x37a>
 8003d1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d1e:	3301      	adds	r3, #1
 8003d20:	9317      	str	r3, [sp, #92]	; 0x5c
 8003d22:	f8df b230 	ldr.w	fp, [pc, #560]	; 8003f54 <_strtod_l+0x5ac>
 8003d26:	f04f 0a00 	mov.w	sl, #0
 8003d2a:	e681      	b.n	8003a30 <_strtod_l+0x88>
 8003d2c:	4886      	ldr	r0, [pc, #536]	; (8003f48 <_strtod_l+0x5a0>)
 8003d2e:	f003 f847 	bl	8006dc0 <nan>
 8003d32:	ec5b ab10 	vmov	sl, fp, d0
 8003d36:	e67b      	b.n	8003a30 <_strtod_l+0x88>
 8003d38:	9b05      	ldr	r3, [sp, #20]
 8003d3a:	9807      	ldr	r0, [sp, #28]
 8003d3c:	1af3      	subs	r3, r6, r3
 8003d3e:	2f00      	cmp	r7, #0
 8003d40:	bf08      	it	eq
 8003d42:	462f      	moveq	r7, r5
 8003d44:	2d10      	cmp	r5, #16
 8003d46:	9306      	str	r3, [sp, #24]
 8003d48:	46a8      	mov	r8, r5
 8003d4a:	bfa8      	it	ge
 8003d4c:	f04f 0810 	movge.w	r8, #16
 8003d50:	f7fc fbd8 	bl	8000504 <__aeabi_ui2d>
 8003d54:	2d09      	cmp	r5, #9
 8003d56:	4682      	mov	sl, r0
 8003d58:	468b      	mov	fp, r1
 8003d5a:	dd13      	ble.n	8003d84 <_strtod_l+0x3dc>
 8003d5c:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <_strtod_l+0x5a4>)
 8003d5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003d62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003d66:	f7fc fc47 	bl	80005f8 <__aeabi_dmul>
 8003d6a:	4682      	mov	sl, r0
 8003d6c:	4648      	mov	r0, r9
 8003d6e:	468b      	mov	fp, r1
 8003d70:	f7fc fbc8 	bl	8000504 <__aeabi_ui2d>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4650      	mov	r0, sl
 8003d7a:	4659      	mov	r1, fp
 8003d7c:	f7fc fa86 	bl	800028c <__adddf3>
 8003d80:	4682      	mov	sl, r0
 8003d82:	468b      	mov	fp, r1
 8003d84:	2d0f      	cmp	r5, #15
 8003d86:	dc38      	bgt.n	8003dfa <_strtod_l+0x452>
 8003d88:	9b06      	ldr	r3, [sp, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f43f ae50 	beq.w	8003a30 <_strtod_l+0x88>
 8003d90:	dd24      	ble.n	8003ddc <_strtod_l+0x434>
 8003d92:	2b16      	cmp	r3, #22
 8003d94:	dc0b      	bgt.n	8003dae <_strtod_l+0x406>
 8003d96:	496d      	ldr	r1, [pc, #436]	; (8003f4c <_strtod_l+0x5a4>)
 8003d98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003da0:	4652      	mov	r2, sl
 8003da2:	465b      	mov	r3, fp
 8003da4:	f7fc fc28 	bl	80005f8 <__aeabi_dmul>
 8003da8:	4682      	mov	sl, r0
 8003daa:	468b      	mov	fp, r1
 8003dac:	e640      	b.n	8003a30 <_strtod_l+0x88>
 8003dae:	9a06      	ldr	r2, [sp, #24]
 8003db0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8003db4:	4293      	cmp	r3, r2
 8003db6:	db20      	blt.n	8003dfa <_strtod_l+0x452>
 8003db8:	4c64      	ldr	r4, [pc, #400]	; (8003f4c <_strtod_l+0x5a4>)
 8003dba:	f1c5 050f 	rsb	r5, r5, #15
 8003dbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8003dc2:	4652      	mov	r2, sl
 8003dc4:	465b      	mov	r3, fp
 8003dc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dca:	f7fc fc15 	bl	80005f8 <__aeabi_dmul>
 8003dce:	9b06      	ldr	r3, [sp, #24]
 8003dd0:	1b5d      	subs	r5, r3, r5
 8003dd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8003dd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8003dda:	e7e3      	b.n	8003da4 <_strtod_l+0x3fc>
 8003ddc:	9b06      	ldr	r3, [sp, #24]
 8003dde:	3316      	adds	r3, #22
 8003de0:	db0b      	blt.n	8003dfa <_strtod_l+0x452>
 8003de2:	9b05      	ldr	r3, [sp, #20]
 8003de4:	1b9e      	subs	r6, r3, r6
 8003de6:	4b59      	ldr	r3, [pc, #356]	; (8003f4c <_strtod_l+0x5a4>)
 8003de8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8003dec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003df0:	4650      	mov	r0, sl
 8003df2:	4659      	mov	r1, fp
 8003df4:	f7fc fd2a 	bl	800084c <__aeabi_ddiv>
 8003df8:	e7d6      	b.n	8003da8 <_strtod_l+0x400>
 8003dfa:	9b06      	ldr	r3, [sp, #24]
 8003dfc:	eba5 0808 	sub.w	r8, r5, r8
 8003e00:	4498      	add	r8, r3
 8003e02:	f1b8 0f00 	cmp.w	r8, #0
 8003e06:	dd74      	ble.n	8003ef2 <_strtod_l+0x54a>
 8003e08:	f018 030f 	ands.w	r3, r8, #15
 8003e0c:	d00a      	beq.n	8003e24 <_strtod_l+0x47c>
 8003e0e:	494f      	ldr	r1, [pc, #316]	; (8003f4c <_strtod_l+0x5a4>)
 8003e10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003e14:	4652      	mov	r2, sl
 8003e16:	465b      	mov	r3, fp
 8003e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e1c:	f7fc fbec 	bl	80005f8 <__aeabi_dmul>
 8003e20:	4682      	mov	sl, r0
 8003e22:	468b      	mov	fp, r1
 8003e24:	f038 080f 	bics.w	r8, r8, #15
 8003e28:	d04f      	beq.n	8003eca <_strtod_l+0x522>
 8003e2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003e2e:	dd22      	ble.n	8003e76 <_strtod_l+0x4ce>
 8003e30:	2500      	movs	r5, #0
 8003e32:	462e      	mov	r6, r5
 8003e34:	9507      	str	r5, [sp, #28]
 8003e36:	9505      	str	r5, [sp, #20]
 8003e38:	2322      	movs	r3, #34	; 0x22
 8003e3a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8003f54 <_strtod_l+0x5ac>
 8003e3e:	6023      	str	r3, [r4, #0]
 8003e40:	f04f 0a00 	mov.w	sl, #0
 8003e44:	9b07      	ldr	r3, [sp, #28]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f43f adf2 	beq.w	8003a30 <_strtod_l+0x88>
 8003e4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f001 ff88 	bl	8005d64 <_Bfree>
 8003e54:	9905      	ldr	r1, [sp, #20]
 8003e56:	4620      	mov	r0, r4
 8003e58:	f001 ff84 	bl	8005d64 <_Bfree>
 8003e5c:	4631      	mov	r1, r6
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f001 ff80 	bl	8005d64 <_Bfree>
 8003e64:	9907      	ldr	r1, [sp, #28]
 8003e66:	4620      	mov	r0, r4
 8003e68:	f001 ff7c 	bl	8005d64 <_Bfree>
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f001 ff78 	bl	8005d64 <_Bfree>
 8003e74:	e5dc      	b.n	8003a30 <_strtod_l+0x88>
 8003e76:	4b36      	ldr	r3, [pc, #216]	; (8003f50 <_strtod_l+0x5a8>)
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003e80:	4650      	mov	r0, sl
 8003e82:	4659      	mov	r1, fp
 8003e84:	4699      	mov	r9, r3
 8003e86:	f1b8 0f01 	cmp.w	r8, #1
 8003e8a:	dc21      	bgt.n	8003ed0 <_strtod_l+0x528>
 8003e8c:	b10b      	cbz	r3, 8003e92 <_strtod_l+0x4ea>
 8003e8e:	4682      	mov	sl, r0
 8003e90:	468b      	mov	fp, r1
 8003e92:	4b2f      	ldr	r3, [pc, #188]	; (8003f50 <_strtod_l+0x5a8>)
 8003e94:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003e98:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003e9c:	4652      	mov	r2, sl
 8003e9e:	465b      	mov	r3, fp
 8003ea0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003ea4:	f7fc fba8 	bl	80005f8 <__aeabi_dmul>
 8003ea8:	4b2a      	ldr	r3, [pc, #168]	; (8003f54 <_strtod_l+0x5ac>)
 8003eaa:	460a      	mov	r2, r1
 8003eac:	400b      	ands	r3, r1
 8003eae:	492a      	ldr	r1, [pc, #168]	; (8003f58 <_strtod_l+0x5b0>)
 8003eb0:	428b      	cmp	r3, r1
 8003eb2:	4682      	mov	sl, r0
 8003eb4:	d8bc      	bhi.n	8003e30 <_strtod_l+0x488>
 8003eb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003eba:	428b      	cmp	r3, r1
 8003ebc:	bf86      	itte	hi
 8003ebe:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8003f5c <_strtod_l+0x5b4>
 8003ec2:	f04f 3aff 	movhi.w	sl, #4294967295
 8003ec6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9304      	str	r3, [sp, #16]
 8003ece:	e084      	b.n	8003fda <_strtod_l+0x632>
 8003ed0:	f018 0f01 	tst.w	r8, #1
 8003ed4:	d005      	beq.n	8003ee2 <_strtod_l+0x53a>
 8003ed6:	9b04      	ldr	r3, [sp, #16]
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc fb8c 	bl	80005f8 <__aeabi_dmul>
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	9a04      	ldr	r2, [sp, #16]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	f109 0901 	add.w	r9, r9, #1
 8003eea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003eee:	9204      	str	r2, [sp, #16]
 8003ef0:	e7c9      	b.n	8003e86 <_strtod_l+0x4de>
 8003ef2:	d0ea      	beq.n	8003eca <_strtod_l+0x522>
 8003ef4:	f1c8 0800 	rsb	r8, r8, #0
 8003ef8:	f018 020f 	ands.w	r2, r8, #15
 8003efc:	d00a      	beq.n	8003f14 <_strtod_l+0x56c>
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <_strtod_l+0x5a4>)
 8003f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f04:	4650      	mov	r0, sl
 8003f06:	4659      	mov	r1, fp
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fc9e 	bl	800084c <__aeabi_ddiv>
 8003f10:	4682      	mov	sl, r0
 8003f12:	468b      	mov	fp, r1
 8003f14:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003f18:	d0d7      	beq.n	8003eca <_strtod_l+0x522>
 8003f1a:	f1b8 0f1f 	cmp.w	r8, #31
 8003f1e:	dd1f      	ble.n	8003f60 <_strtod_l+0x5b8>
 8003f20:	2500      	movs	r5, #0
 8003f22:	462e      	mov	r6, r5
 8003f24:	9507      	str	r5, [sp, #28]
 8003f26:	9505      	str	r5, [sp, #20]
 8003f28:	2322      	movs	r3, #34	; 0x22
 8003f2a:	f04f 0a00 	mov.w	sl, #0
 8003f2e:	f04f 0b00 	mov.w	fp, #0
 8003f32:	6023      	str	r3, [r4, #0]
 8003f34:	e786      	b.n	8003e44 <_strtod_l+0x49c>
 8003f36:	bf00      	nop
 8003f38:	08007595 	.word	0x08007595
 8003f3c:	080075d8 	.word	0x080075d8
 8003f40:	0800758d 	.word	0x0800758d
 8003f44:	0800771c 	.word	0x0800771c
 8003f48:	08007a30 	.word	0x08007a30
 8003f4c:	08007910 	.word	0x08007910
 8003f50:	080078e8 	.word	0x080078e8
 8003f54:	7ff00000 	.word	0x7ff00000
 8003f58:	7ca00000 	.word	0x7ca00000
 8003f5c:	7fefffff 	.word	0x7fefffff
 8003f60:	f018 0310 	ands.w	r3, r8, #16
 8003f64:	bf18      	it	ne
 8003f66:	236a      	movne	r3, #106	; 0x6a
 8003f68:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004318 <_strtod_l+0x970>
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	4650      	mov	r0, sl
 8003f70:	4659      	mov	r1, fp
 8003f72:	2300      	movs	r3, #0
 8003f74:	f018 0f01 	tst.w	r8, #1
 8003f78:	d004      	beq.n	8003f84 <_strtod_l+0x5dc>
 8003f7a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003f7e:	f7fc fb3b 	bl	80005f8 <__aeabi_dmul>
 8003f82:	2301      	movs	r3, #1
 8003f84:	ea5f 0868 	movs.w	r8, r8, asr #1
 8003f88:	f109 0908 	add.w	r9, r9, #8
 8003f8c:	d1f2      	bne.n	8003f74 <_strtod_l+0x5cc>
 8003f8e:	b10b      	cbz	r3, 8003f94 <_strtod_l+0x5ec>
 8003f90:	4682      	mov	sl, r0
 8003f92:	468b      	mov	fp, r1
 8003f94:	9b04      	ldr	r3, [sp, #16]
 8003f96:	b1c3      	cbz	r3, 8003fca <_strtod_l+0x622>
 8003f98:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8003f9c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	4659      	mov	r1, fp
 8003fa4:	dd11      	ble.n	8003fca <_strtod_l+0x622>
 8003fa6:	2b1f      	cmp	r3, #31
 8003fa8:	f340 8124 	ble.w	80041f4 <_strtod_l+0x84c>
 8003fac:	2b34      	cmp	r3, #52	; 0x34
 8003fae:	bfde      	ittt	le
 8003fb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8003fb4:	f04f 33ff 	movle.w	r3, #4294967295
 8003fb8:	fa03 f202 	lslle.w	r2, r3, r2
 8003fbc:	f04f 0a00 	mov.w	sl, #0
 8003fc0:	bfcc      	ite	gt
 8003fc2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003fc6:	ea02 0b01 	andle.w	fp, r2, r1
 8003fca:	2200      	movs	r2, #0
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4650      	mov	r0, sl
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	f7fc fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d1a2      	bne.n	8003f20 <_strtod_l+0x578>
 8003fda:	9b07      	ldr	r3, [sp, #28]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	9908      	ldr	r1, [sp, #32]
 8003fe0:	462b      	mov	r3, r5
 8003fe2:	463a      	mov	r2, r7
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f001 ff25 	bl	8005e34 <__s2b>
 8003fea:	9007      	str	r0, [sp, #28]
 8003fec:	2800      	cmp	r0, #0
 8003fee:	f43f af1f 	beq.w	8003e30 <_strtod_l+0x488>
 8003ff2:	9b05      	ldr	r3, [sp, #20]
 8003ff4:	1b9e      	subs	r6, r3, r6
 8003ff6:	9b06      	ldr	r3, [sp, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bfb4      	ite	lt
 8003ffc:	4633      	movlt	r3, r6
 8003ffe:	2300      	movge	r3, #0
 8004000:	930c      	str	r3, [sp, #48]	; 0x30
 8004002:	9b06      	ldr	r3, [sp, #24]
 8004004:	2500      	movs	r5, #0
 8004006:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800400a:	9312      	str	r3, [sp, #72]	; 0x48
 800400c:	462e      	mov	r6, r5
 800400e:	9b07      	ldr	r3, [sp, #28]
 8004010:	4620      	mov	r0, r4
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	f001 fe66 	bl	8005ce4 <_Balloc>
 8004018:	9005      	str	r0, [sp, #20]
 800401a:	2800      	cmp	r0, #0
 800401c:	f43f af0c 	beq.w	8003e38 <_strtod_l+0x490>
 8004020:	9b07      	ldr	r3, [sp, #28]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	3202      	adds	r2, #2
 8004026:	f103 010c 	add.w	r1, r3, #12
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	300c      	adds	r0, #12
 800402e:	f001 fe4b 	bl	8005cc8 <memcpy>
 8004032:	ec4b ab10 	vmov	d0, sl, fp
 8004036:	aa1a      	add	r2, sp, #104	; 0x68
 8004038:	a919      	add	r1, sp, #100	; 0x64
 800403a:	4620      	mov	r0, r4
 800403c:	f002 fa40 	bl	80064c0 <__d2b>
 8004040:	ec4b ab18 	vmov	d8, sl, fp
 8004044:	9018      	str	r0, [sp, #96]	; 0x60
 8004046:	2800      	cmp	r0, #0
 8004048:	f43f aef6 	beq.w	8003e38 <_strtod_l+0x490>
 800404c:	2101      	movs	r1, #1
 800404e:	4620      	mov	r0, r4
 8004050:	f001 ff8a 	bl	8005f68 <__i2b>
 8004054:	4606      	mov	r6, r0
 8004056:	2800      	cmp	r0, #0
 8004058:	f43f aeee 	beq.w	8003e38 <_strtod_l+0x490>
 800405c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800405e:	9904      	ldr	r1, [sp, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	bfab      	itete	ge
 8004064:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8004066:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004068:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800406a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800406e:	bfac      	ite	ge
 8004070:	eb03 0902 	addge.w	r9, r3, r2
 8004074:	1ad7      	sublt	r7, r2, r3
 8004076:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004078:	eba3 0801 	sub.w	r8, r3, r1
 800407c:	4490      	add	r8, r2
 800407e:	4ba1      	ldr	r3, [pc, #644]	; (8004304 <_strtod_l+0x95c>)
 8004080:	f108 38ff 	add.w	r8, r8, #4294967295
 8004084:	4598      	cmp	r8, r3
 8004086:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800408a:	f280 80c7 	bge.w	800421c <_strtod_l+0x874>
 800408e:	eba3 0308 	sub.w	r3, r3, r8
 8004092:	2b1f      	cmp	r3, #31
 8004094:	eba2 0203 	sub.w	r2, r2, r3
 8004098:	f04f 0101 	mov.w	r1, #1
 800409c:	f300 80b1 	bgt.w	8004202 <_strtod_l+0x85a>
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	930d      	str	r3, [sp, #52]	; 0x34
 80040a6:	2300      	movs	r3, #0
 80040a8:	9308      	str	r3, [sp, #32]
 80040aa:	eb09 0802 	add.w	r8, r9, r2
 80040ae:	9b04      	ldr	r3, [sp, #16]
 80040b0:	45c1      	cmp	r9, r8
 80040b2:	4417      	add	r7, r2
 80040b4:	441f      	add	r7, r3
 80040b6:	464b      	mov	r3, r9
 80040b8:	bfa8      	it	ge
 80040ba:	4643      	movge	r3, r8
 80040bc:	42bb      	cmp	r3, r7
 80040be:	bfa8      	it	ge
 80040c0:	463b      	movge	r3, r7
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bfc2      	ittt	gt
 80040c6:	eba8 0803 	subgt.w	r8, r8, r3
 80040ca:	1aff      	subgt	r7, r7, r3
 80040cc:	eba9 0903 	subgt.w	r9, r9, r3
 80040d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	dd17      	ble.n	8004106 <_strtod_l+0x75e>
 80040d6:	4631      	mov	r1, r6
 80040d8:	461a      	mov	r2, r3
 80040da:	4620      	mov	r0, r4
 80040dc:	f002 f804 	bl	80060e8 <__pow5mult>
 80040e0:	4606      	mov	r6, r0
 80040e2:	2800      	cmp	r0, #0
 80040e4:	f43f aea8 	beq.w	8003e38 <_strtod_l+0x490>
 80040e8:	4601      	mov	r1, r0
 80040ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040ec:	4620      	mov	r0, r4
 80040ee:	f001 ff51 	bl	8005f94 <__multiply>
 80040f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f43f ae9f 	beq.w	8003e38 <_strtod_l+0x490>
 80040fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80040fc:	4620      	mov	r0, r4
 80040fe:	f001 fe31 	bl	8005d64 <_Bfree>
 8004102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004104:	9318      	str	r3, [sp, #96]	; 0x60
 8004106:	f1b8 0f00 	cmp.w	r8, #0
 800410a:	f300 808c 	bgt.w	8004226 <_strtod_l+0x87e>
 800410e:	9b06      	ldr	r3, [sp, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	dd08      	ble.n	8004126 <_strtod_l+0x77e>
 8004114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004116:	9905      	ldr	r1, [sp, #20]
 8004118:	4620      	mov	r0, r4
 800411a:	f001 ffe5 	bl	80060e8 <__pow5mult>
 800411e:	9005      	str	r0, [sp, #20]
 8004120:	2800      	cmp	r0, #0
 8004122:	f43f ae89 	beq.w	8003e38 <_strtod_l+0x490>
 8004126:	2f00      	cmp	r7, #0
 8004128:	dd08      	ble.n	800413c <_strtod_l+0x794>
 800412a:	9905      	ldr	r1, [sp, #20]
 800412c:	463a      	mov	r2, r7
 800412e:	4620      	mov	r0, r4
 8004130:	f002 f834 	bl	800619c <__lshift>
 8004134:	9005      	str	r0, [sp, #20]
 8004136:	2800      	cmp	r0, #0
 8004138:	f43f ae7e 	beq.w	8003e38 <_strtod_l+0x490>
 800413c:	f1b9 0f00 	cmp.w	r9, #0
 8004140:	dd08      	ble.n	8004154 <_strtod_l+0x7ac>
 8004142:	4631      	mov	r1, r6
 8004144:	464a      	mov	r2, r9
 8004146:	4620      	mov	r0, r4
 8004148:	f002 f828 	bl	800619c <__lshift>
 800414c:	4606      	mov	r6, r0
 800414e:	2800      	cmp	r0, #0
 8004150:	f43f ae72 	beq.w	8003e38 <_strtod_l+0x490>
 8004154:	9a05      	ldr	r2, [sp, #20]
 8004156:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004158:	4620      	mov	r0, r4
 800415a:	f002 f8ab 	bl	80062b4 <__mdiff>
 800415e:	4605      	mov	r5, r0
 8004160:	2800      	cmp	r0, #0
 8004162:	f43f ae69 	beq.w	8003e38 <_strtod_l+0x490>
 8004166:	68c3      	ldr	r3, [r0, #12]
 8004168:	930b      	str	r3, [sp, #44]	; 0x2c
 800416a:	2300      	movs	r3, #0
 800416c:	60c3      	str	r3, [r0, #12]
 800416e:	4631      	mov	r1, r6
 8004170:	f002 f884 	bl	800627c <__mcmp>
 8004174:	2800      	cmp	r0, #0
 8004176:	da60      	bge.n	800423a <_strtod_l+0x892>
 8004178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800417a:	ea53 030a 	orrs.w	r3, r3, sl
 800417e:	f040 8082 	bne.w	8004286 <_strtod_l+0x8de>
 8004182:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004186:	2b00      	cmp	r3, #0
 8004188:	d17d      	bne.n	8004286 <_strtod_l+0x8de>
 800418a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800418e:	0d1b      	lsrs	r3, r3, #20
 8004190:	051b      	lsls	r3, r3, #20
 8004192:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004196:	d976      	bls.n	8004286 <_strtod_l+0x8de>
 8004198:	696b      	ldr	r3, [r5, #20]
 800419a:	b913      	cbnz	r3, 80041a2 <_strtod_l+0x7fa>
 800419c:	692b      	ldr	r3, [r5, #16]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	dd71      	ble.n	8004286 <_strtod_l+0x8de>
 80041a2:	4629      	mov	r1, r5
 80041a4:	2201      	movs	r2, #1
 80041a6:	4620      	mov	r0, r4
 80041a8:	f001 fff8 	bl	800619c <__lshift>
 80041ac:	4631      	mov	r1, r6
 80041ae:	4605      	mov	r5, r0
 80041b0:	f002 f864 	bl	800627c <__mcmp>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	dd66      	ble.n	8004286 <_strtod_l+0x8de>
 80041b8:	9904      	ldr	r1, [sp, #16]
 80041ba:	4a53      	ldr	r2, [pc, #332]	; (8004308 <_strtod_l+0x960>)
 80041bc:	465b      	mov	r3, fp
 80041be:	2900      	cmp	r1, #0
 80041c0:	f000 8081 	beq.w	80042c6 <_strtod_l+0x91e>
 80041c4:	ea02 010b 	and.w	r1, r2, fp
 80041c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80041cc:	dc7b      	bgt.n	80042c6 <_strtod_l+0x91e>
 80041ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80041d2:	f77f aea9 	ble.w	8003f28 <_strtod_l+0x580>
 80041d6:	4b4d      	ldr	r3, [pc, #308]	; (800430c <_strtod_l+0x964>)
 80041d8:	4650      	mov	r0, sl
 80041da:	4659      	mov	r1, fp
 80041dc:	2200      	movs	r2, #0
 80041de:	f7fc fa0b 	bl	80005f8 <__aeabi_dmul>
 80041e2:	460b      	mov	r3, r1
 80041e4:	4303      	orrs	r3, r0
 80041e6:	bf08      	it	eq
 80041e8:	2322      	moveq	r3, #34	; 0x22
 80041ea:	4682      	mov	sl, r0
 80041ec:	468b      	mov	fp, r1
 80041ee:	bf08      	it	eq
 80041f0:	6023      	streq	r3, [r4, #0]
 80041f2:	e62b      	b.n	8003e4c <_strtod_l+0x4a4>
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	ea03 0a0a 	and.w	sl, r3, sl
 8004200:	e6e3      	b.n	8003fca <_strtod_l+0x622>
 8004202:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004206:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800420a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800420e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004212:	fa01 f308 	lsl.w	r3, r1, r8
 8004216:	9308      	str	r3, [sp, #32]
 8004218:	910d      	str	r1, [sp, #52]	; 0x34
 800421a:	e746      	b.n	80040aa <_strtod_l+0x702>
 800421c:	2300      	movs	r3, #0
 800421e:	9308      	str	r3, [sp, #32]
 8004220:	2301      	movs	r3, #1
 8004222:	930d      	str	r3, [sp, #52]	; 0x34
 8004224:	e741      	b.n	80040aa <_strtod_l+0x702>
 8004226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004228:	4642      	mov	r2, r8
 800422a:	4620      	mov	r0, r4
 800422c:	f001 ffb6 	bl	800619c <__lshift>
 8004230:	9018      	str	r0, [sp, #96]	; 0x60
 8004232:	2800      	cmp	r0, #0
 8004234:	f47f af6b 	bne.w	800410e <_strtod_l+0x766>
 8004238:	e5fe      	b.n	8003e38 <_strtod_l+0x490>
 800423a:	465f      	mov	r7, fp
 800423c:	d16e      	bne.n	800431c <_strtod_l+0x974>
 800423e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004240:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004244:	b342      	cbz	r2, 8004298 <_strtod_l+0x8f0>
 8004246:	4a32      	ldr	r2, [pc, #200]	; (8004310 <_strtod_l+0x968>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d128      	bne.n	800429e <_strtod_l+0x8f6>
 800424c:	9b04      	ldr	r3, [sp, #16]
 800424e:	4651      	mov	r1, sl
 8004250:	b1eb      	cbz	r3, 800428e <_strtod_l+0x8e6>
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <_strtod_l+0x960>)
 8004254:	403b      	ands	r3, r7
 8004256:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800425a:	f04f 32ff 	mov.w	r2, #4294967295
 800425e:	d819      	bhi.n	8004294 <_strtod_l+0x8ec>
 8004260:	0d1b      	lsrs	r3, r3, #20
 8004262:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	4299      	cmp	r1, r3
 800426c:	d117      	bne.n	800429e <_strtod_l+0x8f6>
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <_strtod_l+0x96c>)
 8004270:	429f      	cmp	r7, r3
 8004272:	d102      	bne.n	800427a <_strtod_l+0x8d2>
 8004274:	3101      	adds	r1, #1
 8004276:	f43f addf 	beq.w	8003e38 <_strtod_l+0x490>
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <_strtod_l+0x960>)
 800427c:	403b      	ands	r3, r7
 800427e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004282:	f04f 0a00 	mov.w	sl, #0
 8004286:	9b04      	ldr	r3, [sp, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1a4      	bne.n	80041d6 <_strtod_l+0x82e>
 800428c:	e5de      	b.n	8003e4c <_strtod_l+0x4a4>
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	e7ea      	b.n	800426a <_strtod_l+0x8c2>
 8004294:	4613      	mov	r3, r2
 8004296:	e7e8      	b.n	800426a <_strtod_l+0x8c2>
 8004298:	ea53 030a 	orrs.w	r3, r3, sl
 800429c:	d08c      	beq.n	80041b8 <_strtod_l+0x810>
 800429e:	9b08      	ldr	r3, [sp, #32]
 80042a0:	b1db      	cbz	r3, 80042da <_strtod_l+0x932>
 80042a2:	423b      	tst	r3, r7
 80042a4:	d0ef      	beq.n	8004286 <_strtod_l+0x8de>
 80042a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80042a8:	9a04      	ldr	r2, [sp, #16]
 80042aa:	4650      	mov	r0, sl
 80042ac:	4659      	mov	r1, fp
 80042ae:	b1c3      	cbz	r3, 80042e2 <_strtod_l+0x93a>
 80042b0:	f7ff fb5c 	bl	800396c <sulp>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	ec51 0b18 	vmov	r0, r1, d8
 80042bc:	f7fb ffe6 	bl	800028c <__adddf3>
 80042c0:	4682      	mov	sl, r0
 80042c2:	468b      	mov	fp, r1
 80042c4:	e7df      	b.n	8004286 <_strtod_l+0x8de>
 80042c6:	4013      	ands	r3, r2
 80042c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80042cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80042d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80042d4:	f04f 3aff 	mov.w	sl, #4294967295
 80042d8:	e7d5      	b.n	8004286 <_strtod_l+0x8de>
 80042da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042dc:	ea13 0f0a 	tst.w	r3, sl
 80042e0:	e7e0      	b.n	80042a4 <_strtod_l+0x8fc>
 80042e2:	f7ff fb43 	bl	800396c <sulp>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	ec51 0b18 	vmov	r0, r1, d8
 80042ee:	f7fb ffcb 	bl	8000288 <__aeabi_dsub>
 80042f2:	2200      	movs	r2, #0
 80042f4:	2300      	movs	r3, #0
 80042f6:	4682      	mov	sl, r0
 80042f8:	468b      	mov	fp, r1
 80042fa:	f7fc fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80042fe:	2800      	cmp	r0, #0
 8004300:	d0c1      	beq.n	8004286 <_strtod_l+0x8de>
 8004302:	e611      	b.n	8003f28 <_strtod_l+0x580>
 8004304:	fffffc02 	.word	0xfffffc02
 8004308:	7ff00000 	.word	0x7ff00000
 800430c:	39500000 	.word	0x39500000
 8004310:	000fffff 	.word	0x000fffff
 8004314:	7fefffff 	.word	0x7fefffff
 8004318:	080075f0 	.word	0x080075f0
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	f002 f92a 	bl	8006578 <__ratio>
 8004324:	ec59 8b10 	vmov	r8, r9, d0
 8004328:	ee10 0a10 	vmov	r0, s0
 800432c:	2200      	movs	r2, #0
 800432e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004332:	4649      	mov	r1, r9
 8004334:	f7fc fbdc 	bl	8000af0 <__aeabi_dcmple>
 8004338:	2800      	cmp	r0, #0
 800433a:	d07a      	beq.n	8004432 <_strtod_l+0xa8a>
 800433c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d04a      	beq.n	80043d8 <_strtod_l+0xa30>
 8004342:	4b95      	ldr	r3, [pc, #596]	; (8004598 <_strtod_l+0xbf0>)
 8004344:	2200      	movs	r2, #0
 8004346:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800434a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004598 <_strtod_l+0xbf0>
 800434e:	f04f 0800 	mov.w	r8, #0
 8004352:	4b92      	ldr	r3, [pc, #584]	; (800459c <_strtod_l+0xbf4>)
 8004354:	403b      	ands	r3, r7
 8004356:	930d      	str	r3, [sp, #52]	; 0x34
 8004358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800435a:	4b91      	ldr	r3, [pc, #580]	; (80045a0 <_strtod_l+0xbf8>)
 800435c:	429a      	cmp	r2, r3
 800435e:	f040 80b0 	bne.w	80044c2 <_strtod_l+0xb1a>
 8004362:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004366:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800436a:	ec4b ab10 	vmov	d0, sl, fp
 800436e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004372:	f002 f829 	bl	80063c8 <__ulp>
 8004376:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800437a:	ec53 2b10 	vmov	r2, r3, d0
 800437e:	f7fc f93b 	bl	80005f8 <__aeabi_dmul>
 8004382:	4652      	mov	r2, sl
 8004384:	465b      	mov	r3, fp
 8004386:	f7fb ff81 	bl	800028c <__adddf3>
 800438a:	460b      	mov	r3, r1
 800438c:	4983      	ldr	r1, [pc, #524]	; (800459c <_strtod_l+0xbf4>)
 800438e:	4a85      	ldr	r2, [pc, #532]	; (80045a4 <_strtod_l+0xbfc>)
 8004390:	4019      	ands	r1, r3
 8004392:	4291      	cmp	r1, r2
 8004394:	4682      	mov	sl, r0
 8004396:	d960      	bls.n	800445a <_strtod_l+0xab2>
 8004398:	ee18 3a90 	vmov	r3, s17
 800439c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d104      	bne.n	80043ae <_strtod_l+0xa06>
 80043a4:	ee18 3a10 	vmov	r3, s16
 80043a8:	3301      	adds	r3, #1
 80043aa:	f43f ad45 	beq.w	8003e38 <_strtod_l+0x490>
 80043ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 80045b0 <_strtod_l+0xc08>
 80043b2:	f04f 3aff 	mov.w	sl, #4294967295
 80043b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80043b8:	4620      	mov	r0, r4
 80043ba:	f001 fcd3 	bl	8005d64 <_Bfree>
 80043be:	9905      	ldr	r1, [sp, #20]
 80043c0:	4620      	mov	r0, r4
 80043c2:	f001 fccf 	bl	8005d64 <_Bfree>
 80043c6:	4631      	mov	r1, r6
 80043c8:	4620      	mov	r0, r4
 80043ca:	f001 fccb 	bl	8005d64 <_Bfree>
 80043ce:	4629      	mov	r1, r5
 80043d0:	4620      	mov	r0, r4
 80043d2:	f001 fcc7 	bl	8005d64 <_Bfree>
 80043d6:	e61a      	b.n	800400e <_strtod_l+0x666>
 80043d8:	f1ba 0f00 	cmp.w	sl, #0
 80043dc:	d11b      	bne.n	8004416 <_strtod_l+0xa6e>
 80043de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80043e2:	b9f3      	cbnz	r3, 8004422 <_strtod_l+0xa7a>
 80043e4:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <_strtod_l+0xbf0>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	4640      	mov	r0, r8
 80043ea:	4649      	mov	r1, r9
 80043ec:	f7fc fb76 	bl	8000adc <__aeabi_dcmplt>
 80043f0:	b9d0      	cbnz	r0, 8004428 <_strtod_l+0xa80>
 80043f2:	4640      	mov	r0, r8
 80043f4:	4649      	mov	r1, r9
 80043f6:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <_strtod_l+0xc00>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	f7fc f8fd 	bl	80005f8 <__aeabi_dmul>
 80043fe:	4680      	mov	r8, r0
 8004400:	4689      	mov	r9, r1
 8004402:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004406:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800440a:	9315      	str	r3, [sp, #84]	; 0x54
 800440c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004410:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004414:	e79d      	b.n	8004352 <_strtod_l+0x9aa>
 8004416:	f1ba 0f01 	cmp.w	sl, #1
 800441a:	d102      	bne.n	8004422 <_strtod_l+0xa7a>
 800441c:	2f00      	cmp	r7, #0
 800441e:	f43f ad83 	beq.w	8003f28 <_strtod_l+0x580>
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <_strtod_l+0xc04>)
 8004424:	2200      	movs	r2, #0
 8004426:	e78e      	b.n	8004346 <_strtod_l+0x99e>
 8004428:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80045a8 <_strtod_l+0xc00>
 800442c:	f04f 0800 	mov.w	r8, #0
 8004430:	e7e7      	b.n	8004402 <_strtod_l+0xa5a>
 8004432:	4b5d      	ldr	r3, [pc, #372]	; (80045a8 <_strtod_l+0xc00>)
 8004434:	4640      	mov	r0, r8
 8004436:	4649      	mov	r1, r9
 8004438:	2200      	movs	r2, #0
 800443a:	f7fc f8dd 	bl	80005f8 <__aeabi_dmul>
 800443e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004440:	4680      	mov	r8, r0
 8004442:	4689      	mov	r9, r1
 8004444:	b933      	cbnz	r3, 8004454 <_strtod_l+0xaac>
 8004446:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800444a:	900e      	str	r0, [sp, #56]	; 0x38
 800444c:	930f      	str	r3, [sp, #60]	; 0x3c
 800444e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004452:	e7dd      	b.n	8004410 <_strtod_l+0xa68>
 8004454:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004458:	e7f9      	b.n	800444e <_strtod_l+0xaa6>
 800445a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800445e:	9b04      	ldr	r3, [sp, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1a8      	bne.n	80043b6 <_strtod_l+0xa0e>
 8004464:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800446a:	0d1b      	lsrs	r3, r3, #20
 800446c:	051b      	lsls	r3, r3, #20
 800446e:	429a      	cmp	r2, r3
 8004470:	d1a1      	bne.n	80043b6 <_strtod_l+0xa0e>
 8004472:	4640      	mov	r0, r8
 8004474:	4649      	mov	r1, r9
 8004476:	f7fc fc1f 	bl	8000cb8 <__aeabi_d2lz>
 800447a:	f7fc f88f 	bl	800059c <__aeabi_l2d>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	4640      	mov	r0, r8
 8004484:	4649      	mov	r1, r9
 8004486:	f7fb feff 	bl	8000288 <__aeabi_dsub>
 800448a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800448c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004490:	ea43 030a 	orr.w	r3, r3, sl
 8004494:	4313      	orrs	r3, r2
 8004496:	4680      	mov	r8, r0
 8004498:	4689      	mov	r9, r1
 800449a:	d055      	beq.n	8004548 <_strtod_l+0xba0>
 800449c:	a336      	add	r3, pc, #216	; (adr r3, 8004578 <_strtod_l+0xbd0>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f7fc fb1b 	bl	8000adc <__aeabi_dcmplt>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	f47f acd0 	bne.w	8003e4c <_strtod_l+0x4a4>
 80044ac:	a334      	add	r3, pc, #208	; (adr r3, 8004580 <_strtod_l+0xbd8>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	4640      	mov	r0, r8
 80044b4:	4649      	mov	r1, r9
 80044b6:	f7fc fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	f43f af7b 	beq.w	80043b6 <_strtod_l+0xa0e>
 80044c0:	e4c4      	b.n	8003e4c <_strtod_l+0x4a4>
 80044c2:	9b04      	ldr	r3, [sp, #16]
 80044c4:	b333      	cbz	r3, 8004514 <_strtod_l+0xb6c>
 80044c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80044cc:	d822      	bhi.n	8004514 <_strtod_l+0xb6c>
 80044ce:	a32e      	add	r3, pc, #184	; (adr r3, 8004588 <_strtod_l+0xbe0>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	4640      	mov	r0, r8
 80044d6:	4649      	mov	r1, r9
 80044d8:	f7fc fb0a 	bl	8000af0 <__aeabi_dcmple>
 80044dc:	b1a0      	cbz	r0, 8004508 <_strtod_l+0xb60>
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	f7fc fb61 	bl	8000ba8 <__aeabi_d2uiz>
 80044e6:	2801      	cmp	r0, #1
 80044e8:	bf38      	it	cc
 80044ea:	2001      	movcc	r0, #1
 80044ec:	f7fc f80a 	bl	8000504 <__aeabi_ui2d>
 80044f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044f2:	4680      	mov	r8, r0
 80044f4:	4689      	mov	r9, r1
 80044f6:	bb23      	cbnz	r3, 8004542 <_strtod_l+0xb9a>
 80044f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044fc:	9010      	str	r0, [sp, #64]	; 0x40
 80044fe:	9311      	str	r3, [sp, #68]	; 0x44
 8004500:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004504:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800450c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	9309      	str	r3, [sp, #36]	; 0x24
 8004514:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004518:	eeb0 0a48 	vmov.f32	s0, s16
 800451c:	eef0 0a68 	vmov.f32	s1, s17
 8004520:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004524:	f001 ff50 	bl	80063c8 <__ulp>
 8004528:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800452c:	ec53 2b10 	vmov	r2, r3, d0
 8004530:	f7fc f862 	bl	80005f8 <__aeabi_dmul>
 8004534:	ec53 2b18 	vmov	r2, r3, d8
 8004538:	f7fb fea8 	bl	800028c <__adddf3>
 800453c:	4682      	mov	sl, r0
 800453e:	468b      	mov	fp, r1
 8004540:	e78d      	b.n	800445e <_strtod_l+0xab6>
 8004542:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004546:	e7db      	b.n	8004500 <_strtod_l+0xb58>
 8004548:	a311      	add	r3, pc, #68	; (adr r3, 8004590 <_strtod_l+0xbe8>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f7fc fac5 	bl	8000adc <__aeabi_dcmplt>
 8004552:	e7b2      	b.n	80044ba <_strtod_l+0xb12>
 8004554:	2300      	movs	r3, #0
 8004556:	930a      	str	r3, [sp, #40]	; 0x28
 8004558:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800455a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	f7ff ba6b 	b.w	8003a38 <_strtod_l+0x90>
 8004562:	2a65      	cmp	r2, #101	; 0x65
 8004564:	f43f ab5f 	beq.w	8003c26 <_strtod_l+0x27e>
 8004568:	2a45      	cmp	r2, #69	; 0x45
 800456a:	f43f ab5c 	beq.w	8003c26 <_strtod_l+0x27e>
 800456e:	2301      	movs	r3, #1
 8004570:	f7ff bb94 	b.w	8003c9c <_strtod_l+0x2f4>
 8004574:	f3af 8000 	nop.w
 8004578:	94a03595 	.word	0x94a03595
 800457c:	3fdfffff 	.word	0x3fdfffff
 8004580:	35afe535 	.word	0x35afe535
 8004584:	3fe00000 	.word	0x3fe00000
 8004588:	ffc00000 	.word	0xffc00000
 800458c:	41dfffff 	.word	0x41dfffff
 8004590:	94a03595 	.word	0x94a03595
 8004594:	3fcfffff 	.word	0x3fcfffff
 8004598:	3ff00000 	.word	0x3ff00000
 800459c:	7ff00000 	.word	0x7ff00000
 80045a0:	7fe00000 	.word	0x7fe00000
 80045a4:	7c9fffff 	.word	0x7c9fffff
 80045a8:	3fe00000 	.word	0x3fe00000
 80045ac:	bff00000 	.word	0xbff00000
 80045b0:	7fefffff 	.word	0x7fefffff

080045b4 <_strtod_r>:
 80045b4:	4b01      	ldr	r3, [pc, #4]	; (80045bc <_strtod_r+0x8>)
 80045b6:	f7ff b9f7 	b.w	80039a8 <_strtod_l>
 80045ba:	bf00      	nop
 80045bc:	20000074 	.word	0x20000074

080045c0 <_strtol_l.constprop.0>:
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c6:	d001      	beq.n	80045cc <_strtol_l.constprop.0+0xc>
 80045c8:	2b24      	cmp	r3, #36	; 0x24
 80045ca:	d906      	bls.n	80045da <_strtol_l.constprop.0+0x1a>
 80045cc:	f7fe fae4 	bl	8002b98 <__errno>
 80045d0:	2316      	movs	r3, #22
 80045d2:	6003      	str	r3, [r0, #0]
 80045d4:	2000      	movs	r0, #0
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80046c0 <_strtol_l.constprop.0+0x100>
 80045de:	460d      	mov	r5, r1
 80045e0:	462e      	mov	r6, r5
 80045e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80045ea:	f017 0708 	ands.w	r7, r7, #8
 80045ee:	d1f7      	bne.n	80045e0 <_strtol_l.constprop.0+0x20>
 80045f0:	2c2d      	cmp	r4, #45	; 0x2d
 80045f2:	d132      	bne.n	800465a <_strtol_l.constprop.0+0x9a>
 80045f4:	782c      	ldrb	r4, [r5, #0]
 80045f6:	2701      	movs	r7, #1
 80045f8:	1cb5      	adds	r5, r6, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d05b      	beq.n	80046b6 <_strtol_l.constprop.0+0xf6>
 80045fe:	2b10      	cmp	r3, #16
 8004600:	d109      	bne.n	8004616 <_strtol_l.constprop.0+0x56>
 8004602:	2c30      	cmp	r4, #48	; 0x30
 8004604:	d107      	bne.n	8004616 <_strtol_l.constprop.0+0x56>
 8004606:	782c      	ldrb	r4, [r5, #0]
 8004608:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800460c:	2c58      	cmp	r4, #88	; 0x58
 800460e:	d14d      	bne.n	80046ac <_strtol_l.constprop.0+0xec>
 8004610:	786c      	ldrb	r4, [r5, #1]
 8004612:	2310      	movs	r3, #16
 8004614:	3502      	adds	r5, #2
 8004616:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800461a:	f108 38ff 	add.w	r8, r8, #4294967295
 800461e:	f04f 0c00 	mov.w	ip, #0
 8004622:	fbb8 f9f3 	udiv	r9, r8, r3
 8004626:	4666      	mov	r6, ip
 8004628:	fb03 8a19 	mls	sl, r3, r9, r8
 800462c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004630:	f1be 0f09 	cmp.w	lr, #9
 8004634:	d816      	bhi.n	8004664 <_strtol_l.constprop.0+0xa4>
 8004636:	4674      	mov	r4, lr
 8004638:	42a3      	cmp	r3, r4
 800463a:	dd24      	ble.n	8004686 <_strtol_l.constprop.0+0xc6>
 800463c:	f1bc 0f00 	cmp.w	ip, #0
 8004640:	db1e      	blt.n	8004680 <_strtol_l.constprop.0+0xc0>
 8004642:	45b1      	cmp	r9, r6
 8004644:	d31c      	bcc.n	8004680 <_strtol_l.constprop.0+0xc0>
 8004646:	d101      	bne.n	800464c <_strtol_l.constprop.0+0x8c>
 8004648:	45a2      	cmp	sl, r4
 800464a:	db19      	blt.n	8004680 <_strtol_l.constprop.0+0xc0>
 800464c:	fb06 4603 	mla	r6, r6, r3, r4
 8004650:	f04f 0c01 	mov.w	ip, #1
 8004654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004658:	e7e8      	b.n	800462c <_strtol_l.constprop.0+0x6c>
 800465a:	2c2b      	cmp	r4, #43	; 0x2b
 800465c:	bf04      	itt	eq
 800465e:	782c      	ldrbeq	r4, [r5, #0]
 8004660:	1cb5      	addeq	r5, r6, #2
 8004662:	e7ca      	b.n	80045fa <_strtol_l.constprop.0+0x3a>
 8004664:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004668:	f1be 0f19 	cmp.w	lr, #25
 800466c:	d801      	bhi.n	8004672 <_strtol_l.constprop.0+0xb2>
 800466e:	3c37      	subs	r4, #55	; 0x37
 8004670:	e7e2      	b.n	8004638 <_strtol_l.constprop.0+0x78>
 8004672:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004676:	f1be 0f19 	cmp.w	lr, #25
 800467a:	d804      	bhi.n	8004686 <_strtol_l.constprop.0+0xc6>
 800467c:	3c57      	subs	r4, #87	; 0x57
 800467e:	e7db      	b.n	8004638 <_strtol_l.constprop.0+0x78>
 8004680:	f04f 3cff 	mov.w	ip, #4294967295
 8004684:	e7e6      	b.n	8004654 <_strtol_l.constprop.0+0x94>
 8004686:	f1bc 0f00 	cmp.w	ip, #0
 800468a:	da05      	bge.n	8004698 <_strtol_l.constprop.0+0xd8>
 800468c:	2322      	movs	r3, #34	; 0x22
 800468e:	6003      	str	r3, [r0, #0]
 8004690:	4646      	mov	r6, r8
 8004692:	b942      	cbnz	r2, 80046a6 <_strtol_l.constprop.0+0xe6>
 8004694:	4630      	mov	r0, r6
 8004696:	e79e      	b.n	80045d6 <_strtol_l.constprop.0+0x16>
 8004698:	b107      	cbz	r7, 800469c <_strtol_l.constprop.0+0xdc>
 800469a:	4276      	negs	r6, r6
 800469c:	2a00      	cmp	r2, #0
 800469e:	d0f9      	beq.n	8004694 <_strtol_l.constprop.0+0xd4>
 80046a0:	f1bc 0f00 	cmp.w	ip, #0
 80046a4:	d000      	beq.n	80046a8 <_strtol_l.constprop.0+0xe8>
 80046a6:	1e69      	subs	r1, r5, #1
 80046a8:	6011      	str	r1, [r2, #0]
 80046aa:	e7f3      	b.n	8004694 <_strtol_l.constprop.0+0xd4>
 80046ac:	2430      	movs	r4, #48	; 0x30
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1b1      	bne.n	8004616 <_strtol_l.constprop.0+0x56>
 80046b2:	2308      	movs	r3, #8
 80046b4:	e7af      	b.n	8004616 <_strtol_l.constprop.0+0x56>
 80046b6:	2c30      	cmp	r4, #48	; 0x30
 80046b8:	d0a5      	beq.n	8004606 <_strtol_l.constprop.0+0x46>
 80046ba:	230a      	movs	r3, #10
 80046bc:	e7ab      	b.n	8004616 <_strtol_l.constprop.0+0x56>
 80046be:	bf00      	nop
 80046c0:	08007619 	.word	0x08007619

080046c4 <_strtol_r>:
 80046c4:	f7ff bf7c 	b.w	80045c0 <_strtol_l.constprop.0>

080046c8 <quorem>:
 80046c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046cc:	6903      	ldr	r3, [r0, #16]
 80046ce:	690c      	ldr	r4, [r1, #16]
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	4607      	mov	r7, r0
 80046d4:	f2c0 8081 	blt.w	80047da <quorem+0x112>
 80046d8:	3c01      	subs	r4, #1
 80046da:	f101 0814 	add.w	r8, r1, #20
 80046de:	f100 0514 	add.w	r5, r0, #20
 80046e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046e6:	9301      	str	r3, [sp, #4]
 80046e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046f0:	3301      	adds	r3, #1
 80046f2:	429a      	cmp	r2, r3
 80046f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004700:	d331      	bcc.n	8004766 <quorem+0x9e>
 8004702:	f04f 0e00 	mov.w	lr, #0
 8004706:	4640      	mov	r0, r8
 8004708:	46ac      	mov	ip, r5
 800470a:	46f2      	mov	sl, lr
 800470c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004710:	b293      	uxth	r3, r2
 8004712:	fb06 e303 	mla	r3, r6, r3, lr
 8004716:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800471a:	b29b      	uxth	r3, r3
 800471c:	ebaa 0303 	sub.w	r3, sl, r3
 8004720:	f8dc a000 	ldr.w	sl, [ip]
 8004724:	0c12      	lsrs	r2, r2, #16
 8004726:	fa13 f38a 	uxtah	r3, r3, sl
 800472a:	fb06 e202 	mla	r2, r6, r2, lr
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	9b00      	ldr	r3, [sp, #0]
 8004732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004736:	b292      	uxth	r2, r2
 8004738:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800473c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004740:	f8bd 3000 	ldrh.w	r3, [sp]
 8004744:	4581      	cmp	r9, r0
 8004746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800474a:	f84c 3b04 	str.w	r3, [ip], #4
 800474e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004752:	d2db      	bcs.n	800470c <quorem+0x44>
 8004754:	f855 300b 	ldr.w	r3, [r5, fp]
 8004758:	b92b      	cbnz	r3, 8004766 <quorem+0x9e>
 800475a:	9b01      	ldr	r3, [sp, #4]
 800475c:	3b04      	subs	r3, #4
 800475e:	429d      	cmp	r5, r3
 8004760:	461a      	mov	r2, r3
 8004762:	d32e      	bcc.n	80047c2 <quorem+0xfa>
 8004764:	613c      	str	r4, [r7, #16]
 8004766:	4638      	mov	r0, r7
 8004768:	f001 fd88 	bl	800627c <__mcmp>
 800476c:	2800      	cmp	r0, #0
 800476e:	db24      	blt.n	80047ba <quorem+0xf2>
 8004770:	3601      	adds	r6, #1
 8004772:	4628      	mov	r0, r5
 8004774:	f04f 0c00 	mov.w	ip, #0
 8004778:	f858 2b04 	ldr.w	r2, [r8], #4
 800477c:	f8d0 e000 	ldr.w	lr, [r0]
 8004780:	b293      	uxth	r3, r2
 8004782:	ebac 0303 	sub.w	r3, ip, r3
 8004786:	0c12      	lsrs	r2, r2, #16
 8004788:	fa13 f38e 	uxtah	r3, r3, lr
 800478c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004794:	b29b      	uxth	r3, r3
 8004796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800479a:	45c1      	cmp	r9, r8
 800479c:	f840 3b04 	str.w	r3, [r0], #4
 80047a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047a4:	d2e8      	bcs.n	8004778 <quorem+0xb0>
 80047a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047ae:	b922      	cbnz	r2, 80047ba <quorem+0xf2>
 80047b0:	3b04      	subs	r3, #4
 80047b2:	429d      	cmp	r5, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	d30a      	bcc.n	80047ce <quorem+0x106>
 80047b8:	613c      	str	r4, [r7, #16]
 80047ba:	4630      	mov	r0, r6
 80047bc:	b003      	add	sp, #12
 80047be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	3b04      	subs	r3, #4
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	d1cc      	bne.n	8004764 <quorem+0x9c>
 80047ca:	3c01      	subs	r4, #1
 80047cc:	e7c7      	b.n	800475e <quorem+0x96>
 80047ce:	6812      	ldr	r2, [r2, #0]
 80047d0:	3b04      	subs	r3, #4
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d1f0      	bne.n	80047b8 <quorem+0xf0>
 80047d6:	3c01      	subs	r4, #1
 80047d8:	e7eb      	b.n	80047b2 <quorem+0xea>
 80047da:	2000      	movs	r0, #0
 80047dc:	e7ee      	b.n	80047bc <quorem+0xf4>
	...

080047e0 <_dtoa_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	ed2d 8b04 	vpush	{d8-d9}
 80047e8:	ec57 6b10 	vmov	r6, r7, d0
 80047ec:	b093      	sub	sp, #76	; 0x4c
 80047ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80047f4:	9106      	str	r1, [sp, #24]
 80047f6:	ee10 aa10 	vmov	sl, s0
 80047fa:	4604      	mov	r4, r0
 80047fc:	9209      	str	r2, [sp, #36]	; 0x24
 80047fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004800:	46bb      	mov	fp, r7
 8004802:	b975      	cbnz	r5, 8004822 <_dtoa_r+0x42>
 8004804:	2010      	movs	r0, #16
 8004806:	f001 fa45 	bl	8005c94 <malloc>
 800480a:	4602      	mov	r2, r0
 800480c:	6260      	str	r0, [r4, #36]	; 0x24
 800480e:	b920      	cbnz	r0, 800481a <_dtoa_r+0x3a>
 8004810:	4ba7      	ldr	r3, [pc, #668]	; (8004ab0 <_dtoa_r+0x2d0>)
 8004812:	21ea      	movs	r1, #234	; 0xea
 8004814:	48a7      	ldr	r0, [pc, #668]	; (8004ab4 <_dtoa_r+0x2d4>)
 8004816:	f002 fc23 	bl	8007060 <__assert_func>
 800481a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800481e:	6005      	str	r5, [r0, #0]
 8004820:	60c5      	str	r5, [r0, #12]
 8004822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004824:	6819      	ldr	r1, [r3, #0]
 8004826:	b151      	cbz	r1, 800483e <_dtoa_r+0x5e>
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	604a      	str	r2, [r1, #4]
 800482c:	2301      	movs	r3, #1
 800482e:	4093      	lsls	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
 8004832:	4620      	mov	r0, r4
 8004834:	f001 fa96 	bl	8005d64 <_Bfree>
 8004838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	1e3b      	subs	r3, r7, #0
 8004840:	bfaa      	itet	ge
 8004842:	2300      	movge	r3, #0
 8004844:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004848:	f8c8 3000 	strge.w	r3, [r8]
 800484c:	4b9a      	ldr	r3, [pc, #616]	; (8004ab8 <_dtoa_r+0x2d8>)
 800484e:	bfbc      	itt	lt
 8004850:	2201      	movlt	r2, #1
 8004852:	f8c8 2000 	strlt.w	r2, [r8]
 8004856:	ea33 030b 	bics.w	r3, r3, fp
 800485a:	d11b      	bne.n	8004894 <_dtoa_r+0xb4>
 800485c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800485e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004862:	6013      	str	r3, [r2, #0]
 8004864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004868:	4333      	orrs	r3, r6
 800486a:	f000 8592 	beq.w	8005392 <_dtoa_r+0xbb2>
 800486e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004870:	b963      	cbnz	r3, 800488c <_dtoa_r+0xac>
 8004872:	4b92      	ldr	r3, [pc, #584]	; (8004abc <_dtoa_r+0x2dc>)
 8004874:	e022      	b.n	80048bc <_dtoa_r+0xdc>
 8004876:	4b92      	ldr	r3, [pc, #584]	; (8004ac0 <_dtoa_r+0x2e0>)
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	3308      	adds	r3, #8
 800487c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	9801      	ldr	r0, [sp, #4]
 8004882:	b013      	add	sp, #76	; 0x4c
 8004884:	ecbd 8b04 	vpop	{d8-d9}
 8004888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488c:	4b8b      	ldr	r3, [pc, #556]	; (8004abc <_dtoa_r+0x2dc>)
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	3303      	adds	r3, #3
 8004892:	e7f3      	b.n	800487c <_dtoa_r+0x9c>
 8004894:	2200      	movs	r2, #0
 8004896:	2300      	movs	r3, #0
 8004898:	4650      	mov	r0, sl
 800489a:	4659      	mov	r1, fp
 800489c:	f7fc f914 	bl	8000ac8 <__aeabi_dcmpeq>
 80048a0:	ec4b ab19 	vmov	d9, sl, fp
 80048a4:	4680      	mov	r8, r0
 80048a6:	b158      	cbz	r0, 80048c0 <_dtoa_r+0xe0>
 80048a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048aa:	2301      	movs	r3, #1
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 856b 	beq.w	800538c <_dtoa_r+0xbac>
 80048b6:	4883      	ldr	r0, [pc, #524]	; (8004ac4 <_dtoa_r+0x2e4>)
 80048b8:	6018      	str	r0, [r3, #0]
 80048ba:	1e43      	subs	r3, r0, #1
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	e7df      	b.n	8004880 <_dtoa_r+0xa0>
 80048c0:	ec4b ab10 	vmov	d0, sl, fp
 80048c4:	aa10      	add	r2, sp, #64	; 0x40
 80048c6:	a911      	add	r1, sp, #68	; 0x44
 80048c8:	4620      	mov	r0, r4
 80048ca:	f001 fdf9 	bl	80064c0 <__d2b>
 80048ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80048d2:	ee08 0a10 	vmov	s16, r0
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	f000 8084 	beq.w	80049e4 <_dtoa_r+0x204>
 80048dc:	ee19 3a90 	vmov	r3, s19
 80048e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80048e8:	4656      	mov	r6, sl
 80048ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80048ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80048f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80048f6:	4b74      	ldr	r3, [pc, #464]	; (8004ac8 <_dtoa_r+0x2e8>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	f7fb fcc3 	bl	8000288 <__aeabi_dsub>
 8004902:	a365      	add	r3, pc, #404	; (adr r3, 8004a98 <_dtoa_r+0x2b8>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f7fb fe76 	bl	80005f8 <__aeabi_dmul>
 800490c:	a364      	add	r3, pc, #400	; (adr r3, 8004aa0 <_dtoa_r+0x2c0>)
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fcbb 	bl	800028c <__adddf3>
 8004916:	4606      	mov	r6, r0
 8004918:	4628      	mov	r0, r5
 800491a:	460f      	mov	r7, r1
 800491c:	f7fb fe02 	bl	8000524 <__aeabi_i2d>
 8004920:	a361      	add	r3, pc, #388	; (adr r3, 8004aa8 <_dtoa_r+0x2c8>)
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	f7fb fe67 	bl	80005f8 <__aeabi_dmul>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4630      	mov	r0, r6
 8004930:	4639      	mov	r1, r7
 8004932:	f7fb fcab 	bl	800028c <__adddf3>
 8004936:	4606      	mov	r6, r0
 8004938:	460f      	mov	r7, r1
 800493a:	f7fc f90d 	bl	8000b58 <__aeabi_d2iz>
 800493e:	2200      	movs	r2, #0
 8004940:	9000      	str	r0, [sp, #0]
 8004942:	2300      	movs	r3, #0
 8004944:	4630      	mov	r0, r6
 8004946:	4639      	mov	r1, r7
 8004948:	f7fc f8c8 	bl	8000adc <__aeabi_dcmplt>
 800494c:	b150      	cbz	r0, 8004964 <_dtoa_r+0x184>
 800494e:	9800      	ldr	r0, [sp, #0]
 8004950:	f7fb fde8 	bl	8000524 <__aeabi_i2d>
 8004954:	4632      	mov	r2, r6
 8004956:	463b      	mov	r3, r7
 8004958:	f7fc f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800495c:	b910      	cbnz	r0, 8004964 <_dtoa_r+0x184>
 800495e:	9b00      	ldr	r3, [sp, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	9b00      	ldr	r3, [sp, #0]
 8004966:	2b16      	cmp	r3, #22
 8004968:	d85a      	bhi.n	8004a20 <_dtoa_r+0x240>
 800496a:	9a00      	ldr	r2, [sp, #0]
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <_dtoa_r+0x2ec>)
 800496e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	ec51 0b19 	vmov	r0, r1, d9
 800497a:	f7fc f8af 	bl	8000adc <__aeabi_dcmplt>
 800497e:	2800      	cmp	r0, #0
 8004980:	d050      	beq.n	8004a24 <_dtoa_r+0x244>
 8004982:	9b00      	ldr	r3, [sp, #0]
 8004984:	3b01      	subs	r3, #1
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	2300      	movs	r3, #0
 800498a:	930b      	str	r3, [sp, #44]	; 0x2c
 800498c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800498e:	1b5d      	subs	r5, r3, r5
 8004990:	1e6b      	subs	r3, r5, #1
 8004992:	9305      	str	r3, [sp, #20]
 8004994:	bf45      	ittet	mi
 8004996:	f1c5 0301 	rsbmi	r3, r5, #1
 800499a:	9304      	strmi	r3, [sp, #16]
 800499c:	2300      	movpl	r3, #0
 800499e:	2300      	movmi	r3, #0
 80049a0:	bf4c      	ite	mi
 80049a2:	9305      	strmi	r3, [sp, #20]
 80049a4:	9304      	strpl	r3, [sp, #16]
 80049a6:	9b00      	ldr	r3, [sp, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	db3d      	blt.n	8004a28 <_dtoa_r+0x248>
 80049ac:	9b05      	ldr	r3, [sp, #20]
 80049ae:	9a00      	ldr	r2, [sp, #0]
 80049b0:	920a      	str	r2, [sp, #40]	; 0x28
 80049b2:	4413      	add	r3, r2
 80049b4:	9305      	str	r3, [sp, #20]
 80049b6:	2300      	movs	r3, #0
 80049b8:	9307      	str	r3, [sp, #28]
 80049ba:	9b06      	ldr	r3, [sp, #24]
 80049bc:	2b09      	cmp	r3, #9
 80049be:	f200 8089 	bhi.w	8004ad4 <_dtoa_r+0x2f4>
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	bfc4      	itt	gt
 80049c6:	3b04      	subgt	r3, #4
 80049c8:	9306      	strgt	r3, [sp, #24]
 80049ca:	9b06      	ldr	r3, [sp, #24]
 80049cc:	f1a3 0302 	sub.w	r3, r3, #2
 80049d0:	bfcc      	ite	gt
 80049d2:	2500      	movgt	r5, #0
 80049d4:	2501      	movle	r5, #1
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	f200 8087 	bhi.w	8004aea <_dtoa_r+0x30a>
 80049dc:	e8df f003 	tbb	[pc, r3]
 80049e0:	59383a2d 	.word	0x59383a2d
 80049e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80049e8:	441d      	add	r5, r3
 80049ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	bfc1      	itttt	gt
 80049f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80049fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80049fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004a02:	bfda      	itte	le
 8004a04:	f1c3 0320 	rsble	r3, r3, #32
 8004a08:	fa06 f003 	lslle.w	r0, r6, r3
 8004a0c:	4318      	orrgt	r0, r3
 8004a0e:	f7fb fd79 	bl	8000504 <__aeabi_ui2d>
 8004a12:	2301      	movs	r3, #1
 8004a14:	4606      	mov	r6, r0
 8004a16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004a1a:	3d01      	subs	r5, #1
 8004a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8004a1e:	e76a      	b.n	80048f6 <_dtoa_r+0x116>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e7b2      	b.n	800498a <_dtoa_r+0x1aa>
 8004a24:	900b      	str	r0, [sp, #44]	; 0x2c
 8004a26:	e7b1      	b.n	800498c <_dtoa_r+0x1ac>
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	9a00      	ldr	r2, [sp, #0]
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	4253      	negs	r3, r2
 8004a32:	9307      	str	r3, [sp, #28]
 8004a34:	2300      	movs	r3, #0
 8004a36:	930a      	str	r3, [sp, #40]	; 0x28
 8004a38:	e7bf      	b.n	80049ba <_dtoa_r+0x1da>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9308      	str	r3, [sp, #32]
 8004a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	dc55      	bgt.n	8004af0 <_dtoa_r+0x310>
 8004a44:	2301      	movs	r3, #1
 8004a46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a4e:	e00c      	b.n	8004a6a <_dtoa_r+0x28a>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e7f3      	b.n	8004a3c <_dtoa_r+0x25c>
 8004a54:	2300      	movs	r3, #0
 8004a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a58:	9308      	str	r3, [sp, #32]
 8004a5a:	9b00      	ldr	r3, [sp, #0]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	9302      	str	r3, [sp, #8]
 8004a60:	3301      	adds	r3, #1
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	9303      	str	r3, [sp, #12]
 8004a66:	bfb8      	it	lt
 8004a68:	2301      	movlt	r3, #1
 8004a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	6042      	str	r2, [r0, #4]
 8004a70:	2204      	movs	r2, #4
 8004a72:	f102 0614 	add.w	r6, r2, #20
 8004a76:	429e      	cmp	r6, r3
 8004a78:	6841      	ldr	r1, [r0, #4]
 8004a7a:	d93d      	bls.n	8004af8 <_dtoa_r+0x318>
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f001 f931 	bl	8005ce4 <_Balloc>
 8004a82:	9001      	str	r0, [sp, #4]
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d13b      	bne.n	8004b00 <_dtoa_r+0x320>
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <_dtoa_r+0x2f0>)
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004a90:	e6c0      	b.n	8004814 <_dtoa_r+0x34>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e7df      	b.n	8004a56 <_dtoa_r+0x276>
 8004a96:	bf00      	nop
 8004a98:	636f4361 	.word	0x636f4361
 8004a9c:	3fd287a7 	.word	0x3fd287a7
 8004aa0:	8b60c8b3 	.word	0x8b60c8b3
 8004aa4:	3fc68a28 	.word	0x3fc68a28
 8004aa8:	509f79fb 	.word	0x509f79fb
 8004aac:	3fd34413 	.word	0x3fd34413
 8004ab0:	08007726 	.word	0x08007726
 8004ab4:	0800773d 	.word	0x0800773d
 8004ab8:	7ff00000 	.word	0x7ff00000
 8004abc:	08007722 	.word	0x08007722
 8004ac0:	08007719 	.word	0x08007719
 8004ac4:	08007599 	.word	0x08007599
 8004ac8:	3ff80000 	.word	0x3ff80000
 8004acc:	08007910 	.word	0x08007910
 8004ad0:	08007798 	.word	0x08007798
 8004ad4:	2501      	movs	r5, #1
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9306      	str	r3, [sp, #24]
 8004ada:	9508      	str	r5, [sp, #32]
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2312      	movs	r3, #18
 8004ae8:	e7b0      	b.n	8004a4c <_dtoa_r+0x26c>
 8004aea:	2301      	movs	r3, #1
 8004aec:	9308      	str	r3, [sp, #32]
 8004aee:	e7f5      	b.n	8004adc <_dtoa_r+0x2fc>
 8004af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004af6:	e7b8      	b.n	8004a6a <_dtoa_r+0x28a>
 8004af8:	3101      	adds	r1, #1
 8004afa:	6041      	str	r1, [r0, #4]
 8004afc:	0052      	lsls	r2, r2, #1
 8004afe:	e7b8      	b.n	8004a72 <_dtoa_r+0x292>
 8004b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b02:	9a01      	ldr	r2, [sp, #4]
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	2b0e      	cmp	r3, #14
 8004b0a:	f200 809d 	bhi.w	8004c48 <_dtoa_r+0x468>
 8004b0e:	2d00      	cmp	r5, #0
 8004b10:	f000 809a 	beq.w	8004c48 <_dtoa_r+0x468>
 8004b14:	9b00      	ldr	r3, [sp, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	dd32      	ble.n	8004b80 <_dtoa_r+0x3a0>
 8004b1a:	4ab7      	ldr	r2, [pc, #732]	; (8004df8 <_dtoa_r+0x618>)
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b28:	9b00      	ldr	r3, [sp, #0]
 8004b2a:	05d8      	lsls	r0, r3, #23
 8004b2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004b30:	d516      	bpl.n	8004b60 <_dtoa_r+0x380>
 8004b32:	4bb2      	ldr	r3, [pc, #712]	; (8004dfc <_dtoa_r+0x61c>)
 8004b34:	ec51 0b19 	vmov	r0, r1, d9
 8004b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b3c:	f7fb fe86 	bl	800084c <__aeabi_ddiv>
 8004b40:	f007 070f 	and.w	r7, r7, #15
 8004b44:	4682      	mov	sl, r0
 8004b46:	468b      	mov	fp, r1
 8004b48:	2503      	movs	r5, #3
 8004b4a:	4eac      	ldr	r6, [pc, #688]	; (8004dfc <_dtoa_r+0x61c>)
 8004b4c:	b957      	cbnz	r7, 8004b64 <_dtoa_r+0x384>
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	4650      	mov	r0, sl
 8004b54:	4659      	mov	r1, fp
 8004b56:	f7fb fe79 	bl	800084c <__aeabi_ddiv>
 8004b5a:	4682      	mov	sl, r0
 8004b5c:	468b      	mov	fp, r1
 8004b5e:	e028      	b.n	8004bb2 <_dtoa_r+0x3d2>
 8004b60:	2502      	movs	r5, #2
 8004b62:	e7f2      	b.n	8004b4a <_dtoa_r+0x36a>
 8004b64:	07f9      	lsls	r1, r7, #31
 8004b66:	d508      	bpl.n	8004b7a <_dtoa_r+0x39a>
 8004b68:	4640      	mov	r0, r8
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b70:	f7fb fd42 	bl	80005f8 <__aeabi_dmul>
 8004b74:	3501      	adds	r5, #1
 8004b76:	4680      	mov	r8, r0
 8004b78:	4689      	mov	r9, r1
 8004b7a:	107f      	asrs	r7, r7, #1
 8004b7c:	3608      	adds	r6, #8
 8004b7e:	e7e5      	b.n	8004b4c <_dtoa_r+0x36c>
 8004b80:	f000 809b 	beq.w	8004cba <_dtoa_r+0x4da>
 8004b84:	9b00      	ldr	r3, [sp, #0]
 8004b86:	4f9d      	ldr	r7, [pc, #628]	; (8004dfc <_dtoa_r+0x61c>)
 8004b88:	425e      	negs	r6, r3
 8004b8a:	4b9b      	ldr	r3, [pc, #620]	; (8004df8 <_dtoa_r+0x618>)
 8004b8c:	f006 020f 	and.w	r2, r6, #15
 8004b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	ec51 0b19 	vmov	r0, r1, d9
 8004b9c:	f7fb fd2c 	bl	80005f8 <__aeabi_dmul>
 8004ba0:	1136      	asrs	r6, r6, #4
 8004ba2:	4682      	mov	sl, r0
 8004ba4:	468b      	mov	fp, r1
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2502      	movs	r5, #2
 8004baa:	2e00      	cmp	r6, #0
 8004bac:	d17a      	bne.n	8004ca4 <_dtoa_r+0x4c4>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1d3      	bne.n	8004b5a <_dtoa_r+0x37a>
 8004bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8082 	beq.w	8004cbe <_dtoa_r+0x4de>
 8004bba:	4b91      	ldr	r3, [pc, #580]	; (8004e00 <_dtoa_r+0x620>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	f7fb ff8b 	bl	8000adc <__aeabi_dcmplt>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d079      	beq.n	8004cbe <_dtoa_r+0x4de>
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d076      	beq.n	8004cbe <_dtoa_r+0x4de>
 8004bd0:	9b02      	ldr	r3, [sp, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	dd36      	ble.n	8004c44 <_dtoa_r+0x464>
 8004bd6:	9b00      	ldr	r3, [sp, #0]
 8004bd8:	4650      	mov	r0, sl
 8004bda:	4659      	mov	r1, fp
 8004bdc:	1e5f      	subs	r7, r3, #1
 8004bde:	2200      	movs	r2, #0
 8004be0:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <_dtoa_r+0x624>)
 8004be2:	f7fb fd09 	bl	80005f8 <__aeabi_dmul>
 8004be6:	9e02      	ldr	r6, [sp, #8]
 8004be8:	4682      	mov	sl, r0
 8004bea:	468b      	mov	fp, r1
 8004bec:	3501      	adds	r5, #1
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f7fb fc98 	bl	8000524 <__aeabi_i2d>
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	465b      	mov	r3, fp
 8004bf8:	f7fb fcfe 	bl	80005f8 <__aeabi_dmul>
 8004bfc:	4b82      	ldr	r3, [pc, #520]	; (8004e08 <_dtoa_r+0x628>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f7fb fb44 	bl	800028c <__adddf3>
 8004c04:	46d0      	mov	r8, sl
 8004c06:	46d9      	mov	r9, fp
 8004c08:	4682      	mov	sl, r0
 8004c0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004c0e:	2e00      	cmp	r6, #0
 8004c10:	d158      	bne.n	8004cc4 <_dtoa_r+0x4e4>
 8004c12:	4b7e      	ldr	r3, [pc, #504]	; (8004e0c <_dtoa_r+0x62c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	4640      	mov	r0, r8
 8004c18:	4649      	mov	r1, r9
 8004c1a:	f7fb fb35 	bl	8000288 <__aeabi_dsub>
 8004c1e:	4652      	mov	r2, sl
 8004c20:	465b      	mov	r3, fp
 8004c22:	4680      	mov	r8, r0
 8004c24:	4689      	mov	r9, r1
 8004c26:	f7fb ff77 	bl	8000b18 <__aeabi_dcmpgt>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f040 8295 	bne.w	800515a <_dtoa_r+0x97a>
 8004c30:	4652      	mov	r2, sl
 8004c32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c36:	4640      	mov	r0, r8
 8004c38:	4649      	mov	r1, r9
 8004c3a:	f7fb ff4f 	bl	8000adc <__aeabi_dcmplt>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	f040 8289 	bne.w	8005156 <_dtoa_r+0x976>
 8004c44:	ec5b ab19 	vmov	sl, fp, d9
 8004c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f2c0 8148 	blt.w	8004ee0 <_dtoa_r+0x700>
 8004c50:	9a00      	ldr	r2, [sp, #0]
 8004c52:	2a0e      	cmp	r2, #14
 8004c54:	f300 8144 	bgt.w	8004ee0 <_dtoa_r+0x700>
 8004c58:	4b67      	ldr	r3, [pc, #412]	; (8004df8 <_dtoa_r+0x618>)
 8004c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f280 80d5 	bge.w	8004e14 <_dtoa_r+0x634>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f300 80d1 	bgt.w	8004e14 <_dtoa_r+0x634>
 8004c72:	f040 826f 	bne.w	8005154 <_dtoa_r+0x974>
 8004c76:	4b65      	ldr	r3, [pc, #404]	; (8004e0c <_dtoa_r+0x62c>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4640      	mov	r0, r8
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	f7fb fcbb 	bl	80005f8 <__aeabi_dmul>
 8004c82:	4652      	mov	r2, sl
 8004c84:	465b      	mov	r3, fp
 8004c86:	f7fb ff3d 	bl	8000b04 <__aeabi_dcmpge>
 8004c8a:	9e03      	ldr	r6, [sp, #12]
 8004c8c:	4637      	mov	r7, r6
 8004c8e:	2800      	cmp	r0, #0
 8004c90:	f040 8245 	bne.w	800511e <_dtoa_r+0x93e>
 8004c94:	9d01      	ldr	r5, [sp, #4]
 8004c96:	2331      	movs	r3, #49	; 0x31
 8004c98:	f805 3b01 	strb.w	r3, [r5], #1
 8004c9c:	9b00      	ldr	r3, [sp, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	e240      	b.n	8005126 <_dtoa_r+0x946>
 8004ca4:	07f2      	lsls	r2, r6, #31
 8004ca6:	d505      	bpl.n	8004cb4 <_dtoa_r+0x4d4>
 8004ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cac:	f7fb fca4 	bl	80005f8 <__aeabi_dmul>
 8004cb0:	3501      	adds	r5, #1
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	1076      	asrs	r6, r6, #1
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	e777      	b.n	8004baa <_dtoa_r+0x3ca>
 8004cba:	2502      	movs	r5, #2
 8004cbc:	e779      	b.n	8004bb2 <_dtoa_r+0x3d2>
 8004cbe:	9f00      	ldr	r7, [sp, #0]
 8004cc0:	9e03      	ldr	r6, [sp, #12]
 8004cc2:	e794      	b.n	8004bee <_dtoa_r+0x40e>
 8004cc4:	9901      	ldr	r1, [sp, #4]
 8004cc6:	4b4c      	ldr	r3, [pc, #304]	; (8004df8 <_dtoa_r+0x618>)
 8004cc8:	4431      	add	r1, r6
 8004cca:	910d      	str	r1, [sp, #52]	; 0x34
 8004ccc:	9908      	ldr	r1, [sp, #32]
 8004cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	d043      	beq.n	8004d62 <_dtoa_r+0x582>
 8004cda:	494d      	ldr	r1, [pc, #308]	; (8004e10 <_dtoa_r+0x630>)
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f7fb fdb5 	bl	800084c <__aeabi_ddiv>
 8004ce2:	4652      	mov	r2, sl
 8004ce4:	465b      	mov	r3, fp
 8004ce6:	f7fb facf 	bl	8000288 <__aeabi_dsub>
 8004cea:	9d01      	ldr	r5, [sp, #4]
 8004cec:	4682      	mov	sl, r0
 8004cee:	468b      	mov	fp, r1
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	f7fb ff30 	bl	8000b58 <__aeabi_d2iz>
 8004cf8:	4606      	mov	r6, r0
 8004cfa:	f7fb fc13 	bl	8000524 <__aeabi_i2d>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	4640      	mov	r0, r8
 8004d04:	4649      	mov	r1, r9
 8004d06:	f7fb fabf 	bl	8000288 <__aeabi_dsub>
 8004d0a:	3630      	adds	r6, #48	; 0x30
 8004d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8004d10:	4652      	mov	r2, sl
 8004d12:	465b      	mov	r3, fp
 8004d14:	4680      	mov	r8, r0
 8004d16:	4689      	mov	r9, r1
 8004d18:	f7fb fee0 	bl	8000adc <__aeabi_dcmplt>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d163      	bne.n	8004de8 <_dtoa_r+0x608>
 8004d20:	4642      	mov	r2, r8
 8004d22:	464b      	mov	r3, r9
 8004d24:	4936      	ldr	r1, [pc, #216]	; (8004e00 <_dtoa_r+0x620>)
 8004d26:	2000      	movs	r0, #0
 8004d28:	f7fb faae 	bl	8000288 <__aeabi_dsub>
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	465b      	mov	r3, fp
 8004d30:	f7fb fed4 	bl	8000adc <__aeabi_dcmplt>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f040 80b5 	bne.w	8004ea4 <_dtoa_r+0x6c4>
 8004d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d3c:	429d      	cmp	r5, r3
 8004d3e:	d081      	beq.n	8004c44 <_dtoa_r+0x464>
 8004d40:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <_dtoa_r+0x624>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	4650      	mov	r0, sl
 8004d46:	4659      	mov	r1, fp
 8004d48:	f7fb fc56 	bl	80005f8 <__aeabi_dmul>
 8004d4c:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <_dtoa_r+0x624>)
 8004d4e:	4682      	mov	sl, r0
 8004d50:	468b      	mov	fp, r1
 8004d52:	4640      	mov	r0, r8
 8004d54:	4649      	mov	r1, r9
 8004d56:	2200      	movs	r2, #0
 8004d58:	f7fb fc4e 	bl	80005f8 <__aeabi_dmul>
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	4689      	mov	r9, r1
 8004d60:	e7c6      	b.n	8004cf0 <_dtoa_r+0x510>
 8004d62:	4650      	mov	r0, sl
 8004d64:	4659      	mov	r1, fp
 8004d66:	f7fb fc47 	bl	80005f8 <__aeabi_dmul>
 8004d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d6c:	9d01      	ldr	r5, [sp, #4]
 8004d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d70:	4682      	mov	sl, r0
 8004d72:	468b      	mov	fp, r1
 8004d74:	4649      	mov	r1, r9
 8004d76:	4640      	mov	r0, r8
 8004d78:	f7fb feee 	bl	8000b58 <__aeabi_d2iz>
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	f7fb fbd1 	bl	8000524 <__aeabi_i2d>
 8004d82:	3630      	adds	r6, #48	; 0x30
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4640      	mov	r0, r8
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	f7fb fa7c 	bl	8000288 <__aeabi_dsub>
 8004d90:	f805 6b01 	strb.w	r6, [r5], #1
 8004d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d96:	429d      	cmp	r5, r3
 8004d98:	4680      	mov	r8, r0
 8004d9a:	4689      	mov	r9, r1
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	d124      	bne.n	8004dec <_dtoa_r+0x60c>
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <_dtoa_r+0x630>)
 8004da4:	4650      	mov	r0, sl
 8004da6:	4659      	mov	r1, fp
 8004da8:	f7fb fa70 	bl	800028c <__adddf3>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4640      	mov	r0, r8
 8004db2:	4649      	mov	r1, r9
 8004db4:	f7fb feb0 	bl	8000b18 <__aeabi_dcmpgt>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d173      	bne.n	8004ea4 <_dtoa_r+0x6c4>
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	465b      	mov	r3, fp
 8004dc0:	4913      	ldr	r1, [pc, #76]	; (8004e10 <_dtoa_r+0x630>)
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7fb fa60 	bl	8000288 <__aeabi_dsub>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4640      	mov	r0, r8
 8004dce:	4649      	mov	r1, r9
 8004dd0:	f7fb fe84 	bl	8000adc <__aeabi_dcmplt>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f43f af35 	beq.w	8004c44 <_dtoa_r+0x464>
 8004dda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004ddc:	1e6b      	subs	r3, r5, #1
 8004dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8004de0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004de4:	2b30      	cmp	r3, #48	; 0x30
 8004de6:	d0f8      	beq.n	8004dda <_dtoa_r+0x5fa>
 8004de8:	9700      	str	r7, [sp, #0]
 8004dea:	e049      	b.n	8004e80 <_dtoa_r+0x6a0>
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <_dtoa_r+0x624>)
 8004dee:	f7fb fc03 	bl	80005f8 <__aeabi_dmul>
 8004df2:	4680      	mov	r8, r0
 8004df4:	4689      	mov	r9, r1
 8004df6:	e7bd      	b.n	8004d74 <_dtoa_r+0x594>
 8004df8:	08007910 	.word	0x08007910
 8004dfc:	080078e8 	.word	0x080078e8
 8004e00:	3ff00000 	.word	0x3ff00000
 8004e04:	40240000 	.word	0x40240000
 8004e08:	401c0000 	.word	0x401c0000
 8004e0c:	40140000 	.word	0x40140000
 8004e10:	3fe00000 	.word	0x3fe00000
 8004e14:	9d01      	ldr	r5, [sp, #4]
 8004e16:	4656      	mov	r6, sl
 8004e18:	465f      	mov	r7, fp
 8004e1a:	4642      	mov	r2, r8
 8004e1c:	464b      	mov	r3, r9
 8004e1e:	4630      	mov	r0, r6
 8004e20:	4639      	mov	r1, r7
 8004e22:	f7fb fd13 	bl	800084c <__aeabi_ddiv>
 8004e26:	f7fb fe97 	bl	8000b58 <__aeabi_d2iz>
 8004e2a:	4682      	mov	sl, r0
 8004e2c:	f7fb fb7a 	bl	8000524 <__aeabi_i2d>
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	f7fb fbe0 	bl	80005f8 <__aeabi_dmul>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	4639      	mov	r1, r7
 8004e40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004e44:	f7fb fa20 	bl	8000288 <__aeabi_dsub>
 8004e48:	f805 6b01 	strb.w	r6, [r5], #1
 8004e4c:	9e01      	ldr	r6, [sp, #4]
 8004e4e:	9f03      	ldr	r7, [sp, #12]
 8004e50:	1bae      	subs	r6, r5, r6
 8004e52:	42b7      	cmp	r7, r6
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	d135      	bne.n	8004ec6 <_dtoa_r+0x6e6>
 8004e5a:	f7fb fa17 	bl	800028c <__adddf3>
 8004e5e:	4642      	mov	r2, r8
 8004e60:	464b      	mov	r3, r9
 8004e62:	4606      	mov	r6, r0
 8004e64:	460f      	mov	r7, r1
 8004e66:	f7fb fe57 	bl	8000b18 <__aeabi_dcmpgt>
 8004e6a:	b9d0      	cbnz	r0, 8004ea2 <_dtoa_r+0x6c2>
 8004e6c:	4642      	mov	r2, r8
 8004e6e:	464b      	mov	r3, r9
 8004e70:	4630      	mov	r0, r6
 8004e72:	4639      	mov	r1, r7
 8004e74:	f7fb fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e78:	b110      	cbz	r0, 8004e80 <_dtoa_r+0x6a0>
 8004e7a:	f01a 0f01 	tst.w	sl, #1
 8004e7e:	d110      	bne.n	8004ea2 <_dtoa_r+0x6c2>
 8004e80:	4620      	mov	r0, r4
 8004e82:	ee18 1a10 	vmov	r1, s16
 8004e86:	f000 ff6d 	bl	8005d64 <_Bfree>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9800      	ldr	r0, [sp, #0]
 8004e8e:	702b      	strb	r3, [r5, #0]
 8004e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e92:	3001      	adds	r0, #1
 8004e94:	6018      	str	r0, [r3, #0]
 8004e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f43f acf1 	beq.w	8004880 <_dtoa_r+0xa0>
 8004e9e:	601d      	str	r5, [r3, #0]
 8004ea0:	e4ee      	b.n	8004880 <_dtoa_r+0xa0>
 8004ea2:	9f00      	ldr	r7, [sp, #0]
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004eac:	2a39      	cmp	r2, #57	; 0x39
 8004eae:	d106      	bne.n	8004ebe <_dtoa_r+0x6de>
 8004eb0:	9a01      	ldr	r2, [sp, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d1f7      	bne.n	8004ea6 <_dtoa_r+0x6c6>
 8004eb6:	9901      	ldr	r1, [sp, #4]
 8004eb8:	2230      	movs	r2, #48	; 0x30
 8004eba:	3701      	adds	r7, #1
 8004ebc:	700a      	strb	r2, [r1, #0]
 8004ebe:	781a      	ldrb	r2, [r3, #0]
 8004ec0:	3201      	adds	r2, #1
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e790      	b.n	8004de8 <_dtoa_r+0x608>
 8004ec6:	4ba6      	ldr	r3, [pc, #664]	; (8005160 <_dtoa_r+0x980>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f7fb fb95 	bl	80005f8 <__aeabi_dmul>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	f7fb fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d09d      	beq.n	8004e1a <_dtoa_r+0x63a>
 8004ede:	e7cf      	b.n	8004e80 <_dtoa_r+0x6a0>
 8004ee0:	9a08      	ldr	r2, [sp, #32]
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	f000 80d7 	beq.w	8005096 <_dtoa_r+0x8b6>
 8004ee8:	9a06      	ldr	r2, [sp, #24]
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	f300 80ba 	bgt.w	8005064 <_dtoa_r+0x884>
 8004ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	f000 80b2 	beq.w	800505c <_dtoa_r+0x87c>
 8004ef8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004efc:	9e07      	ldr	r6, [sp, #28]
 8004efe:	9d04      	ldr	r5, [sp, #16]
 8004f00:	9a04      	ldr	r2, [sp, #16]
 8004f02:	441a      	add	r2, r3
 8004f04:	9204      	str	r2, [sp, #16]
 8004f06:	9a05      	ldr	r2, [sp, #20]
 8004f08:	2101      	movs	r1, #1
 8004f0a:	441a      	add	r2, r3
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	9205      	str	r2, [sp, #20]
 8004f10:	f001 f82a 	bl	8005f68 <__i2b>
 8004f14:	4607      	mov	r7, r0
 8004f16:	2d00      	cmp	r5, #0
 8004f18:	dd0c      	ble.n	8004f34 <_dtoa_r+0x754>
 8004f1a:	9b05      	ldr	r3, [sp, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	dd09      	ble.n	8004f34 <_dtoa_r+0x754>
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	9a04      	ldr	r2, [sp, #16]
 8004f24:	bfa8      	it	ge
 8004f26:	462b      	movge	r3, r5
 8004f28:	1ad2      	subs	r2, r2, r3
 8004f2a:	9204      	str	r2, [sp, #16]
 8004f2c:	9a05      	ldr	r2, [sp, #20]
 8004f2e:	1aed      	subs	r5, r5, r3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	9305      	str	r3, [sp, #20]
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	b31b      	cbz	r3, 8004f80 <_dtoa_r+0x7a0>
 8004f38:	9b08      	ldr	r3, [sp, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 80af 	beq.w	800509e <_dtoa_r+0x8be>
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	dd13      	ble.n	8004f6c <_dtoa_r+0x78c>
 8004f44:	4639      	mov	r1, r7
 8004f46:	4632      	mov	r2, r6
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f001 f8cd 	bl	80060e8 <__pow5mult>
 8004f4e:	ee18 2a10 	vmov	r2, s16
 8004f52:	4601      	mov	r1, r0
 8004f54:	4607      	mov	r7, r0
 8004f56:	4620      	mov	r0, r4
 8004f58:	f001 f81c 	bl	8005f94 <__multiply>
 8004f5c:	ee18 1a10 	vmov	r1, s16
 8004f60:	4680      	mov	r8, r0
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fefe 	bl	8005d64 <_Bfree>
 8004f68:	ee08 8a10 	vmov	s16, r8
 8004f6c:	9b07      	ldr	r3, [sp, #28]
 8004f6e:	1b9a      	subs	r2, r3, r6
 8004f70:	d006      	beq.n	8004f80 <_dtoa_r+0x7a0>
 8004f72:	ee18 1a10 	vmov	r1, s16
 8004f76:	4620      	mov	r0, r4
 8004f78:	f001 f8b6 	bl	80060e8 <__pow5mult>
 8004f7c:	ee08 0a10 	vmov	s16, r0
 8004f80:	2101      	movs	r1, #1
 8004f82:	4620      	mov	r0, r4
 8004f84:	f000 fff0 	bl	8005f68 <__i2b>
 8004f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	f340 8088 	ble.w	80050a2 <_dtoa_r+0x8c2>
 8004f92:	461a      	mov	r2, r3
 8004f94:	4601      	mov	r1, r0
 8004f96:	4620      	mov	r0, r4
 8004f98:	f001 f8a6 	bl	80060e8 <__pow5mult>
 8004f9c:	9b06      	ldr	r3, [sp, #24]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	4606      	mov	r6, r0
 8004fa2:	f340 8081 	ble.w	80050a8 <_dtoa_r+0x8c8>
 8004fa6:	f04f 0800 	mov.w	r8, #0
 8004faa:	6933      	ldr	r3, [r6, #16]
 8004fac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004fb0:	6918      	ldr	r0, [r3, #16]
 8004fb2:	f000 ff89 	bl	8005ec8 <__hi0bits>
 8004fb6:	f1c0 0020 	rsb	r0, r0, #32
 8004fba:	9b05      	ldr	r3, [sp, #20]
 8004fbc:	4418      	add	r0, r3
 8004fbe:	f010 001f 	ands.w	r0, r0, #31
 8004fc2:	f000 8092 	beq.w	80050ea <_dtoa_r+0x90a>
 8004fc6:	f1c0 0320 	rsb	r3, r0, #32
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	f340 808a 	ble.w	80050e4 <_dtoa_r+0x904>
 8004fd0:	f1c0 001c 	rsb	r0, r0, #28
 8004fd4:	9b04      	ldr	r3, [sp, #16]
 8004fd6:	4403      	add	r3, r0
 8004fd8:	9304      	str	r3, [sp, #16]
 8004fda:	9b05      	ldr	r3, [sp, #20]
 8004fdc:	4403      	add	r3, r0
 8004fde:	4405      	add	r5, r0
 8004fe0:	9305      	str	r3, [sp, #20]
 8004fe2:	9b04      	ldr	r3, [sp, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	dd07      	ble.n	8004ff8 <_dtoa_r+0x818>
 8004fe8:	ee18 1a10 	vmov	r1, s16
 8004fec:	461a      	mov	r2, r3
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f001 f8d4 	bl	800619c <__lshift>
 8004ff4:	ee08 0a10 	vmov	s16, r0
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	dd05      	ble.n	800500a <_dtoa_r+0x82a>
 8004ffe:	4631      	mov	r1, r6
 8005000:	461a      	mov	r2, r3
 8005002:	4620      	mov	r0, r4
 8005004:	f001 f8ca 	bl	800619c <__lshift>
 8005008:	4606      	mov	r6, r0
 800500a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d06e      	beq.n	80050ee <_dtoa_r+0x90e>
 8005010:	ee18 0a10 	vmov	r0, s16
 8005014:	4631      	mov	r1, r6
 8005016:	f001 f931 	bl	800627c <__mcmp>
 800501a:	2800      	cmp	r0, #0
 800501c:	da67      	bge.n	80050ee <_dtoa_r+0x90e>
 800501e:	9b00      	ldr	r3, [sp, #0]
 8005020:	3b01      	subs	r3, #1
 8005022:	ee18 1a10 	vmov	r1, s16
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	220a      	movs	r2, #10
 800502a:	2300      	movs	r3, #0
 800502c:	4620      	mov	r0, r4
 800502e:	f000 febb 	bl	8005da8 <__multadd>
 8005032:	9b08      	ldr	r3, [sp, #32]
 8005034:	ee08 0a10 	vmov	s16, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 81b1 	beq.w	80053a0 <_dtoa_r+0xbc0>
 800503e:	2300      	movs	r3, #0
 8005040:	4639      	mov	r1, r7
 8005042:	220a      	movs	r2, #10
 8005044:	4620      	mov	r0, r4
 8005046:	f000 feaf 	bl	8005da8 <__multadd>
 800504a:	9b02      	ldr	r3, [sp, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	4607      	mov	r7, r0
 8005050:	f300 808e 	bgt.w	8005170 <_dtoa_r+0x990>
 8005054:	9b06      	ldr	r3, [sp, #24]
 8005056:	2b02      	cmp	r3, #2
 8005058:	dc51      	bgt.n	80050fe <_dtoa_r+0x91e>
 800505a:	e089      	b.n	8005170 <_dtoa_r+0x990>
 800505c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800505e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005062:	e74b      	b.n	8004efc <_dtoa_r+0x71c>
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	1e5e      	subs	r6, r3, #1
 8005068:	9b07      	ldr	r3, [sp, #28]
 800506a:	42b3      	cmp	r3, r6
 800506c:	bfbf      	itttt	lt
 800506e:	9b07      	ldrlt	r3, [sp, #28]
 8005070:	9607      	strlt	r6, [sp, #28]
 8005072:	1af2      	sublt	r2, r6, r3
 8005074:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005076:	bfb6      	itet	lt
 8005078:	189b      	addlt	r3, r3, r2
 800507a:	1b9e      	subge	r6, r3, r6
 800507c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800507e:	9b03      	ldr	r3, [sp, #12]
 8005080:	bfb8      	it	lt
 8005082:	2600      	movlt	r6, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	bfb7      	itett	lt
 8005088:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800508c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005090:	1a9d      	sublt	r5, r3, r2
 8005092:	2300      	movlt	r3, #0
 8005094:	e734      	b.n	8004f00 <_dtoa_r+0x720>
 8005096:	9e07      	ldr	r6, [sp, #28]
 8005098:	9d04      	ldr	r5, [sp, #16]
 800509a:	9f08      	ldr	r7, [sp, #32]
 800509c:	e73b      	b.n	8004f16 <_dtoa_r+0x736>
 800509e:	9a07      	ldr	r2, [sp, #28]
 80050a0:	e767      	b.n	8004f72 <_dtoa_r+0x792>
 80050a2:	9b06      	ldr	r3, [sp, #24]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	dc18      	bgt.n	80050da <_dtoa_r+0x8fa>
 80050a8:	f1ba 0f00 	cmp.w	sl, #0
 80050ac:	d115      	bne.n	80050da <_dtoa_r+0x8fa>
 80050ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050b2:	b993      	cbnz	r3, 80050da <_dtoa_r+0x8fa>
 80050b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80050b8:	0d1b      	lsrs	r3, r3, #20
 80050ba:	051b      	lsls	r3, r3, #20
 80050bc:	b183      	cbz	r3, 80050e0 <_dtoa_r+0x900>
 80050be:	9b04      	ldr	r3, [sp, #16]
 80050c0:	3301      	adds	r3, #1
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	9b05      	ldr	r3, [sp, #20]
 80050c6:	3301      	adds	r3, #1
 80050c8:	9305      	str	r3, [sp, #20]
 80050ca:	f04f 0801 	mov.w	r8, #1
 80050ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f47f af6a 	bne.w	8004faa <_dtoa_r+0x7ca>
 80050d6:	2001      	movs	r0, #1
 80050d8:	e76f      	b.n	8004fba <_dtoa_r+0x7da>
 80050da:	f04f 0800 	mov.w	r8, #0
 80050de:	e7f6      	b.n	80050ce <_dtoa_r+0x8ee>
 80050e0:	4698      	mov	r8, r3
 80050e2:	e7f4      	b.n	80050ce <_dtoa_r+0x8ee>
 80050e4:	f43f af7d 	beq.w	8004fe2 <_dtoa_r+0x802>
 80050e8:	4618      	mov	r0, r3
 80050ea:	301c      	adds	r0, #28
 80050ec:	e772      	b.n	8004fd4 <_dtoa_r+0x7f4>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	dc37      	bgt.n	8005164 <_dtoa_r+0x984>
 80050f4:	9b06      	ldr	r3, [sp, #24]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	dd34      	ble.n	8005164 <_dtoa_r+0x984>
 80050fa:	9b03      	ldr	r3, [sp, #12]
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	9b02      	ldr	r3, [sp, #8]
 8005100:	b96b      	cbnz	r3, 800511e <_dtoa_r+0x93e>
 8005102:	4631      	mov	r1, r6
 8005104:	2205      	movs	r2, #5
 8005106:	4620      	mov	r0, r4
 8005108:	f000 fe4e 	bl	8005da8 <__multadd>
 800510c:	4601      	mov	r1, r0
 800510e:	4606      	mov	r6, r0
 8005110:	ee18 0a10 	vmov	r0, s16
 8005114:	f001 f8b2 	bl	800627c <__mcmp>
 8005118:	2800      	cmp	r0, #0
 800511a:	f73f adbb 	bgt.w	8004c94 <_dtoa_r+0x4b4>
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	9d01      	ldr	r5, [sp, #4]
 8005122:	43db      	mvns	r3, r3
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	f04f 0800 	mov.w	r8, #0
 800512a:	4631      	mov	r1, r6
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fe19 	bl	8005d64 <_Bfree>
 8005132:	2f00      	cmp	r7, #0
 8005134:	f43f aea4 	beq.w	8004e80 <_dtoa_r+0x6a0>
 8005138:	f1b8 0f00 	cmp.w	r8, #0
 800513c:	d005      	beq.n	800514a <_dtoa_r+0x96a>
 800513e:	45b8      	cmp	r8, r7
 8005140:	d003      	beq.n	800514a <_dtoa_r+0x96a>
 8005142:	4641      	mov	r1, r8
 8005144:	4620      	mov	r0, r4
 8005146:	f000 fe0d 	bl	8005d64 <_Bfree>
 800514a:	4639      	mov	r1, r7
 800514c:	4620      	mov	r0, r4
 800514e:	f000 fe09 	bl	8005d64 <_Bfree>
 8005152:	e695      	b.n	8004e80 <_dtoa_r+0x6a0>
 8005154:	2600      	movs	r6, #0
 8005156:	4637      	mov	r7, r6
 8005158:	e7e1      	b.n	800511e <_dtoa_r+0x93e>
 800515a:	9700      	str	r7, [sp, #0]
 800515c:	4637      	mov	r7, r6
 800515e:	e599      	b.n	8004c94 <_dtoa_r+0x4b4>
 8005160:	40240000 	.word	0x40240000
 8005164:	9b08      	ldr	r3, [sp, #32]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80ca 	beq.w	8005300 <_dtoa_r+0xb20>
 800516c:	9b03      	ldr	r3, [sp, #12]
 800516e:	9302      	str	r3, [sp, #8]
 8005170:	2d00      	cmp	r5, #0
 8005172:	dd05      	ble.n	8005180 <_dtoa_r+0x9a0>
 8005174:	4639      	mov	r1, r7
 8005176:	462a      	mov	r2, r5
 8005178:	4620      	mov	r0, r4
 800517a:	f001 f80f 	bl	800619c <__lshift>
 800517e:	4607      	mov	r7, r0
 8005180:	f1b8 0f00 	cmp.w	r8, #0
 8005184:	d05b      	beq.n	800523e <_dtoa_r+0xa5e>
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4620      	mov	r0, r4
 800518a:	f000 fdab 	bl	8005ce4 <_Balloc>
 800518e:	4605      	mov	r5, r0
 8005190:	b928      	cbnz	r0, 800519e <_dtoa_r+0x9be>
 8005192:	4b87      	ldr	r3, [pc, #540]	; (80053b0 <_dtoa_r+0xbd0>)
 8005194:	4602      	mov	r2, r0
 8005196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800519a:	f7ff bb3b 	b.w	8004814 <_dtoa_r+0x34>
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	3202      	adds	r2, #2
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	f107 010c 	add.w	r1, r7, #12
 80051a8:	300c      	adds	r0, #12
 80051aa:	f000 fd8d 	bl	8005cc8 <memcpy>
 80051ae:	2201      	movs	r2, #1
 80051b0:	4629      	mov	r1, r5
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 fff2 	bl	800619c <__lshift>
 80051b8:	9b01      	ldr	r3, [sp, #4]
 80051ba:	f103 0901 	add.w	r9, r3, #1
 80051be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	f00a 0301 	and.w	r3, sl, #1
 80051ca:	46b8      	mov	r8, r7
 80051cc:	9304      	str	r3, [sp, #16]
 80051ce:	4607      	mov	r7, r0
 80051d0:	4631      	mov	r1, r6
 80051d2:	ee18 0a10 	vmov	r0, s16
 80051d6:	f7ff fa77 	bl	80046c8 <quorem>
 80051da:	4641      	mov	r1, r8
 80051dc:	9002      	str	r0, [sp, #8]
 80051de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80051e2:	ee18 0a10 	vmov	r0, s16
 80051e6:	f001 f849 	bl	800627c <__mcmp>
 80051ea:	463a      	mov	r2, r7
 80051ec:	9003      	str	r0, [sp, #12]
 80051ee:	4631      	mov	r1, r6
 80051f0:	4620      	mov	r0, r4
 80051f2:	f001 f85f 	bl	80062b4 <__mdiff>
 80051f6:	68c2      	ldr	r2, [r0, #12]
 80051f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80051fc:	4605      	mov	r5, r0
 80051fe:	bb02      	cbnz	r2, 8005242 <_dtoa_r+0xa62>
 8005200:	4601      	mov	r1, r0
 8005202:	ee18 0a10 	vmov	r0, s16
 8005206:	f001 f839 	bl	800627c <__mcmp>
 800520a:	4602      	mov	r2, r0
 800520c:	4629      	mov	r1, r5
 800520e:	4620      	mov	r0, r4
 8005210:	9207      	str	r2, [sp, #28]
 8005212:	f000 fda7 	bl	8005d64 <_Bfree>
 8005216:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800521a:	ea43 0102 	orr.w	r1, r3, r2
 800521e:	9b04      	ldr	r3, [sp, #16]
 8005220:	430b      	orrs	r3, r1
 8005222:	464d      	mov	r5, r9
 8005224:	d10f      	bne.n	8005246 <_dtoa_r+0xa66>
 8005226:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800522a:	d02a      	beq.n	8005282 <_dtoa_r+0xaa2>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	dd02      	ble.n	8005238 <_dtoa_r+0xa58>
 8005232:	9b02      	ldr	r3, [sp, #8]
 8005234:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005238:	f88b a000 	strb.w	sl, [fp]
 800523c:	e775      	b.n	800512a <_dtoa_r+0x94a>
 800523e:	4638      	mov	r0, r7
 8005240:	e7ba      	b.n	80051b8 <_dtoa_r+0x9d8>
 8005242:	2201      	movs	r2, #1
 8005244:	e7e2      	b.n	800520c <_dtoa_r+0xa2c>
 8005246:	9b03      	ldr	r3, [sp, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	db04      	blt.n	8005256 <_dtoa_r+0xa76>
 800524c:	9906      	ldr	r1, [sp, #24]
 800524e:	430b      	orrs	r3, r1
 8005250:	9904      	ldr	r1, [sp, #16]
 8005252:	430b      	orrs	r3, r1
 8005254:	d122      	bne.n	800529c <_dtoa_r+0xabc>
 8005256:	2a00      	cmp	r2, #0
 8005258:	ddee      	ble.n	8005238 <_dtoa_r+0xa58>
 800525a:	ee18 1a10 	vmov	r1, s16
 800525e:	2201      	movs	r2, #1
 8005260:	4620      	mov	r0, r4
 8005262:	f000 ff9b 	bl	800619c <__lshift>
 8005266:	4631      	mov	r1, r6
 8005268:	ee08 0a10 	vmov	s16, r0
 800526c:	f001 f806 	bl	800627c <__mcmp>
 8005270:	2800      	cmp	r0, #0
 8005272:	dc03      	bgt.n	800527c <_dtoa_r+0xa9c>
 8005274:	d1e0      	bne.n	8005238 <_dtoa_r+0xa58>
 8005276:	f01a 0f01 	tst.w	sl, #1
 800527a:	d0dd      	beq.n	8005238 <_dtoa_r+0xa58>
 800527c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005280:	d1d7      	bne.n	8005232 <_dtoa_r+0xa52>
 8005282:	2339      	movs	r3, #57	; 0x39
 8005284:	f88b 3000 	strb.w	r3, [fp]
 8005288:	462b      	mov	r3, r5
 800528a:	461d      	mov	r5, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005292:	2a39      	cmp	r2, #57	; 0x39
 8005294:	d071      	beq.n	800537a <_dtoa_r+0xb9a>
 8005296:	3201      	adds	r2, #1
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e746      	b.n	800512a <_dtoa_r+0x94a>
 800529c:	2a00      	cmp	r2, #0
 800529e:	dd07      	ble.n	80052b0 <_dtoa_r+0xad0>
 80052a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80052a4:	d0ed      	beq.n	8005282 <_dtoa_r+0xaa2>
 80052a6:	f10a 0301 	add.w	r3, sl, #1
 80052aa:	f88b 3000 	strb.w	r3, [fp]
 80052ae:	e73c      	b.n	800512a <_dtoa_r+0x94a>
 80052b0:	9b05      	ldr	r3, [sp, #20]
 80052b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80052b6:	4599      	cmp	r9, r3
 80052b8:	d047      	beq.n	800534a <_dtoa_r+0xb6a>
 80052ba:	ee18 1a10 	vmov	r1, s16
 80052be:	2300      	movs	r3, #0
 80052c0:	220a      	movs	r2, #10
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fd70 	bl	8005da8 <__multadd>
 80052c8:	45b8      	cmp	r8, r7
 80052ca:	ee08 0a10 	vmov	s16, r0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	f04f 020a 	mov.w	r2, #10
 80052d6:	4641      	mov	r1, r8
 80052d8:	4620      	mov	r0, r4
 80052da:	d106      	bne.n	80052ea <_dtoa_r+0xb0a>
 80052dc:	f000 fd64 	bl	8005da8 <__multadd>
 80052e0:	4680      	mov	r8, r0
 80052e2:	4607      	mov	r7, r0
 80052e4:	f109 0901 	add.w	r9, r9, #1
 80052e8:	e772      	b.n	80051d0 <_dtoa_r+0x9f0>
 80052ea:	f000 fd5d 	bl	8005da8 <__multadd>
 80052ee:	4639      	mov	r1, r7
 80052f0:	4680      	mov	r8, r0
 80052f2:	2300      	movs	r3, #0
 80052f4:	220a      	movs	r2, #10
 80052f6:	4620      	mov	r0, r4
 80052f8:	f000 fd56 	bl	8005da8 <__multadd>
 80052fc:	4607      	mov	r7, r0
 80052fe:	e7f1      	b.n	80052e4 <_dtoa_r+0xb04>
 8005300:	9b03      	ldr	r3, [sp, #12]
 8005302:	9302      	str	r3, [sp, #8]
 8005304:	9d01      	ldr	r5, [sp, #4]
 8005306:	ee18 0a10 	vmov	r0, s16
 800530a:	4631      	mov	r1, r6
 800530c:	f7ff f9dc 	bl	80046c8 <quorem>
 8005310:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005314:	9b01      	ldr	r3, [sp, #4]
 8005316:	f805 ab01 	strb.w	sl, [r5], #1
 800531a:	1aea      	subs	r2, r5, r3
 800531c:	9b02      	ldr	r3, [sp, #8]
 800531e:	4293      	cmp	r3, r2
 8005320:	dd09      	ble.n	8005336 <_dtoa_r+0xb56>
 8005322:	ee18 1a10 	vmov	r1, s16
 8005326:	2300      	movs	r3, #0
 8005328:	220a      	movs	r2, #10
 800532a:	4620      	mov	r0, r4
 800532c:	f000 fd3c 	bl	8005da8 <__multadd>
 8005330:	ee08 0a10 	vmov	s16, r0
 8005334:	e7e7      	b.n	8005306 <_dtoa_r+0xb26>
 8005336:	9b02      	ldr	r3, [sp, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	bfc8      	it	gt
 800533c:	461d      	movgt	r5, r3
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	bfd8      	it	le
 8005342:	2501      	movle	r5, #1
 8005344:	441d      	add	r5, r3
 8005346:	f04f 0800 	mov.w	r8, #0
 800534a:	ee18 1a10 	vmov	r1, s16
 800534e:	2201      	movs	r2, #1
 8005350:	4620      	mov	r0, r4
 8005352:	f000 ff23 	bl	800619c <__lshift>
 8005356:	4631      	mov	r1, r6
 8005358:	ee08 0a10 	vmov	s16, r0
 800535c:	f000 ff8e 	bl	800627c <__mcmp>
 8005360:	2800      	cmp	r0, #0
 8005362:	dc91      	bgt.n	8005288 <_dtoa_r+0xaa8>
 8005364:	d102      	bne.n	800536c <_dtoa_r+0xb8c>
 8005366:	f01a 0f01 	tst.w	sl, #1
 800536a:	d18d      	bne.n	8005288 <_dtoa_r+0xaa8>
 800536c:	462b      	mov	r3, r5
 800536e:	461d      	mov	r5, r3
 8005370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005374:	2a30      	cmp	r2, #48	; 0x30
 8005376:	d0fa      	beq.n	800536e <_dtoa_r+0xb8e>
 8005378:	e6d7      	b.n	800512a <_dtoa_r+0x94a>
 800537a:	9a01      	ldr	r2, [sp, #4]
 800537c:	429a      	cmp	r2, r3
 800537e:	d184      	bne.n	800528a <_dtoa_r+0xaaa>
 8005380:	9b00      	ldr	r3, [sp, #0]
 8005382:	3301      	adds	r3, #1
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2331      	movs	r3, #49	; 0x31
 8005388:	7013      	strb	r3, [r2, #0]
 800538a:	e6ce      	b.n	800512a <_dtoa_r+0x94a>
 800538c:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <_dtoa_r+0xbd4>)
 800538e:	f7ff ba95 	b.w	80048bc <_dtoa_r+0xdc>
 8005392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005394:	2b00      	cmp	r3, #0
 8005396:	f47f aa6e 	bne.w	8004876 <_dtoa_r+0x96>
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <_dtoa_r+0xbd8>)
 800539c:	f7ff ba8e 	b.w	80048bc <_dtoa_r+0xdc>
 80053a0:	9b02      	ldr	r3, [sp, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dcae      	bgt.n	8005304 <_dtoa_r+0xb24>
 80053a6:	9b06      	ldr	r3, [sp, #24]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f73f aea8 	bgt.w	80050fe <_dtoa_r+0x91e>
 80053ae:	e7a9      	b.n	8005304 <_dtoa_r+0xb24>
 80053b0:	08007798 	.word	0x08007798
 80053b4:	08007598 	.word	0x08007598
 80053b8:	08007719 	.word	0x08007719

080053bc <std>:
 80053bc:	2300      	movs	r3, #0
 80053be:	b510      	push	{r4, lr}
 80053c0:	4604      	mov	r4, r0
 80053c2:	e9c0 3300 	strd	r3, r3, [r0]
 80053c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ca:	6083      	str	r3, [r0, #8]
 80053cc:	8181      	strh	r1, [r0, #12]
 80053ce:	6643      	str	r3, [r0, #100]	; 0x64
 80053d0:	81c2      	strh	r2, [r0, #14]
 80053d2:	6183      	str	r3, [r0, #24]
 80053d4:	4619      	mov	r1, r3
 80053d6:	2208      	movs	r2, #8
 80053d8:	305c      	adds	r0, #92	; 0x5c
 80053da:	f7fd fc07 	bl	8002bec <memset>
 80053de:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <std+0x38>)
 80053e0:	6263      	str	r3, [r4, #36]	; 0x24
 80053e2:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <std+0x3c>)
 80053e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053e6:	4b05      	ldr	r3, [pc, #20]	; (80053fc <std+0x40>)
 80053e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <std+0x44>)
 80053ec:	6224      	str	r4, [r4, #32]
 80053ee:	6323      	str	r3, [r4, #48]	; 0x30
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	bf00      	nop
 80053f4:	08006df1 	.word	0x08006df1
 80053f8:	08006e13 	.word	0x08006e13
 80053fc:	08006e4b 	.word	0x08006e4b
 8005400:	08006e6f 	.word	0x08006e6f

08005404 <_cleanup_r>:
 8005404:	4901      	ldr	r1, [pc, #4]	; (800540c <_cleanup_r+0x8>)
 8005406:	f000 b8af 	b.w	8005568 <_fwalk_reent>
 800540a:	bf00      	nop
 800540c:	080071c9 	.word	0x080071c9

08005410 <__sfmoreglue>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	2268      	movs	r2, #104	; 0x68
 8005414:	1e4d      	subs	r5, r1, #1
 8005416:	4355      	muls	r5, r2
 8005418:	460e      	mov	r6, r1
 800541a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800541e:	f001 f9a5 	bl	800676c <_malloc_r>
 8005422:	4604      	mov	r4, r0
 8005424:	b140      	cbz	r0, 8005438 <__sfmoreglue+0x28>
 8005426:	2100      	movs	r1, #0
 8005428:	e9c0 1600 	strd	r1, r6, [r0]
 800542c:	300c      	adds	r0, #12
 800542e:	60a0      	str	r0, [r4, #8]
 8005430:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005434:	f7fd fbda 	bl	8002bec <memset>
 8005438:	4620      	mov	r0, r4
 800543a:	bd70      	pop	{r4, r5, r6, pc}

0800543c <__sfp_lock_acquire>:
 800543c:	4801      	ldr	r0, [pc, #4]	; (8005444 <__sfp_lock_acquire+0x8>)
 800543e:	f000 bc26 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 8005442:	bf00      	nop
 8005444:	20000259 	.word	0x20000259

08005448 <__sfp_lock_release>:
 8005448:	4801      	ldr	r0, [pc, #4]	; (8005450 <__sfp_lock_release+0x8>)
 800544a:	f000 bc21 	b.w	8005c90 <__retarget_lock_release_recursive>
 800544e:	bf00      	nop
 8005450:	20000259 	.word	0x20000259

08005454 <__sinit_lock_acquire>:
 8005454:	4801      	ldr	r0, [pc, #4]	; (800545c <__sinit_lock_acquire+0x8>)
 8005456:	f000 bc1a 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 800545a:	bf00      	nop
 800545c:	2000025a 	.word	0x2000025a

08005460 <__sinit_lock_release>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__sinit_lock_release+0x8>)
 8005462:	f000 bc15 	b.w	8005c90 <__retarget_lock_release_recursive>
 8005466:	bf00      	nop
 8005468:	2000025a 	.word	0x2000025a

0800546c <__sinit>:
 800546c:	b510      	push	{r4, lr}
 800546e:	4604      	mov	r4, r0
 8005470:	f7ff fff0 	bl	8005454 <__sinit_lock_acquire>
 8005474:	69a3      	ldr	r3, [r4, #24]
 8005476:	b11b      	cbz	r3, 8005480 <__sinit+0x14>
 8005478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547c:	f7ff bff0 	b.w	8005460 <__sinit_lock_release>
 8005480:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005484:	6523      	str	r3, [r4, #80]	; 0x50
 8005486:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <__sinit+0x68>)
 8005488:	4a13      	ldr	r2, [pc, #76]	; (80054d8 <__sinit+0x6c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	62a2      	str	r2, [r4, #40]	; 0x28
 800548e:	42a3      	cmp	r3, r4
 8005490:	bf04      	itt	eq
 8005492:	2301      	moveq	r3, #1
 8005494:	61a3      	streq	r3, [r4, #24]
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f820 	bl	80054dc <__sfp>
 800549c:	6060      	str	r0, [r4, #4]
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 f81c 	bl	80054dc <__sfp>
 80054a4:	60a0      	str	r0, [r4, #8]
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 f818 	bl	80054dc <__sfp>
 80054ac:	2200      	movs	r2, #0
 80054ae:	60e0      	str	r0, [r4, #12]
 80054b0:	2104      	movs	r1, #4
 80054b2:	6860      	ldr	r0, [r4, #4]
 80054b4:	f7ff ff82 	bl	80053bc <std>
 80054b8:	68a0      	ldr	r0, [r4, #8]
 80054ba:	2201      	movs	r2, #1
 80054bc:	2109      	movs	r1, #9
 80054be:	f7ff ff7d 	bl	80053bc <std>
 80054c2:	68e0      	ldr	r0, [r4, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	2112      	movs	r1, #18
 80054c8:	f7ff ff78 	bl	80053bc <std>
 80054cc:	2301      	movs	r3, #1
 80054ce:	61a3      	str	r3, [r4, #24]
 80054d0:	e7d2      	b.n	8005478 <__sinit+0xc>
 80054d2:	bf00      	nop
 80054d4:	08007584 	.word	0x08007584
 80054d8:	08005405 	.word	0x08005405

080054dc <__sfp>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	4607      	mov	r7, r0
 80054e0:	f7ff ffac 	bl	800543c <__sfp_lock_acquire>
 80054e4:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <__sfp+0x84>)
 80054e6:	681e      	ldr	r6, [r3, #0]
 80054e8:	69b3      	ldr	r3, [r6, #24]
 80054ea:	b913      	cbnz	r3, 80054f2 <__sfp+0x16>
 80054ec:	4630      	mov	r0, r6
 80054ee:	f7ff ffbd 	bl	800546c <__sinit>
 80054f2:	3648      	adds	r6, #72	; 0x48
 80054f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	d503      	bpl.n	8005504 <__sfp+0x28>
 80054fc:	6833      	ldr	r3, [r6, #0]
 80054fe:	b30b      	cbz	r3, 8005544 <__sfp+0x68>
 8005500:	6836      	ldr	r6, [r6, #0]
 8005502:	e7f7      	b.n	80054f4 <__sfp+0x18>
 8005504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005508:	b9d5      	cbnz	r5, 8005540 <__sfp+0x64>
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <__sfp+0x88>)
 800550c:	60e3      	str	r3, [r4, #12]
 800550e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005512:	6665      	str	r5, [r4, #100]	; 0x64
 8005514:	f000 fbba 	bl	8005c8c <__retarget_lock_init_recursive>
 8005518:	f7ff ff96 	bl	8005448 <__sfp_lock_release>
 800551c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005520:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005524:	6025      	str	r5, [r4, #0]
 8005526:	61a5      	str	r5, [r4, #24]
 8005528:	2208      	movs	r2, #8
 800552a:	4629      	mov	r1, r5
 800552c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005530:	f7fd fb5c 	bl	8002bec <memset>
 8005534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800553c:	4620      	mov	r0, r4
 800553e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005540:	3468      	adds	r4, #104	; 0x68
 8005542:	e7d9      	b.n	80054f8 <__sfp+0x1c>
 8005544:	2104      	movs	r1, #4
 8005546:	4638      	mov	r0, r7
 8005548:	f7ff ff62 	bl	8005410 <__sfmoreglue>
 800554c:	4604      	mov	r4, r0
 800554e:	6030      	str	r0, [r6, #0]
 8005550:	2800      	cmp	r0, #0
 8005552:	d1d5      	bne.n	8005500 <__sfp+0x24>
 8005554:	f7ff ff78 	bl	8005448 <__sfp_lock_release>
 8005558:	230c      	movs	r3, #12
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	e7ee      	b.n	800553c <__sfp+0x60>
 800555e:	bf00      	nop
 8005560:	08007584 	.word	0x08007584
 8005564:	ffff0001 	.word	0xffff0001

08005568 <_fwalk_reent>:
 8005568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800556c:	4606      	mov	r6, r0
 800556e:	4688      	mov	r8, r1
 8005570:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005574:	2700      	movs	r7, #0
 8005576:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800557a:	f1b9 0901 	subs.w	r9, r9, #1
 800557e:	d505      	bpl.n	800558c <_fwalk_reent+0x24>
 8005580:	6824      	ldr	r4, [r4, #0]
 8005582:	2c00      	cmp	r4, #0
 8005584:	d1f7      	bne.n	8005576 <_fwalk_reent+0xe>
 8005586:	4638      	mov	r0, r7
 8005588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800558c:	89ab      	ldrh	r3, [r5, #12]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d907      	bls.n	80055a2 <_fwalk_reent+0x3a>
 8005592:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005596:	3301      	adds	r3, #1
 8005598:	d003      	beq.n	80055a2 <_fwalk_reent+0x3a>
 800559a:	4629      	mov	r1, r5
 800559c:	4630      	mov	r0, r6
 800559e:	47c0      	blx	r8
 80055a0:	4307      	orrs	r7, r0
 80055a2:	3568      	adds	r5, #104	; 0x68
 80055a4:	e7e9      	b.n	800557a <_fwalk_reent+0x12>

080055a6 <rshift>:
 80055a6:	6903      	ldr	r3, [r0, #16]
 80055a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80055ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80055b4:	f100 0414 	add.w	r4, r0, #20
 80055b8:	dd45      	ble.n	8005646 <rshift+0xa0>
 80055ba:	f011 011f 	ands.w	r1, r1, #31
 80055be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80055c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80055c6:	d10c      	bne.n	80055e2 <rshift+0x3c>
 80055c8:	f100 0710 	add.w	r7, r0, #16
 80055cc:	4629      	mov	r1, r5
 80055ce:	42b1      	cmp	r1, r6
 80055d0:	d334      	bcc.n	800563c <rshift+0x96>
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	1eea      	subs	r2, r5, #3
 80055d8:	4296      	cmp	r6, r2
 80055da:	bf38      	it	cc
 80055dc:	2300      	movcc	r3, #0
 80055de:	4423      	add	r3, r4
 80055e0:	e015      	b.n	800560e <rshift+0x68>
 80055e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80055e6:	f1c1 0820 	rsb	r8, r1, #32
 80055ea:	40cf      	lsrs	r7, r1
 80055ec:	f105 0e04 	add.w	lr, r5, #4
 80055f0:	46a1      	mov	r9, r4
 80055f2:	4576      	cmp	r6, lr
 80055f4:	46f4      	mov	ip, lr
 80055f6:	d815      	bhi.n	8005624 <rshift+0x7e>
 80055f8:	1a9a      	subs	r2, r3, r2
 80055fa:	0092      	lsls	r2, r2, #2
 80055fc:	3a04      	subs	r2, #4
 80055fe:	3501      	adds	r5, #1
 8005600:	42ae      	cmp	r6, r5
 8005602:	bf38      	it	cc
 8005604:	2200      	movcc	r2, #0
 8005606:	18a3      	adds	r3, r4, r2
 8005608:	50a7      	str	r7, [r4, r2]
 800560a:	b107      	cbz	r7, 800560e <rshift+0x68>
 800560c:	3304      	adds	r3, #4
 800560e:	1b1a      	subs	r2, r3, r4
 8005610:	42a3      	cmp	r3, r4
 8005612:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005616:	bf08      	it	eq
 8005618:	2300      	moveq	r3, #0
 800561a:	6102      	str	r2, [r0, #16]
 800561c:	bf08      	it	eq
 800561e:	6143      	streq	r3, [r0, #20]
 8005620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005624:	f8dc c000 	ldr.w	ip, [ip]
 8005628:	fa0c fc08 	lsl.w	ip, ip, r8
 800562c:	ea4c 0707 	orr.w	r7, ip, r7
 8005630:	f849 7b04 	str.w	r7, [r9], #4
 8005634:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005638:	40cf      	lsrs	r7, r1
 800563a:	e7da      	b.n	80055f2 <rshift+0x4c>
 800563c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005640:	f847 cf04 	str.w	ip, [r7, #4]!
 8005644:	e7c3      	b.n	80055ce <rshift+0x28>
 8005646:	4623      	mov	r3, r4
 8005648:	e7e1      	b.n	800560e <rshift+0x68>

0800564a <__hexdig_fun>:
 800564a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800564e:	2b09      	cmp	r3, #9
 8005650:	d802      	bhi.n	8005658 <__hexdig_fun+0xe>
 8005652:	3820      	subs	r0, #32
 8005654:	b2c0      	uxtb	r0, r0
 8005656:	4770      	bx	lr
 8005658:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800565c:	2b05      	cmp	r3, #5
 800565e:	d801      	bhi.n	8005664 <__hexdig_fun+0x1a>
 8005660:	3847      	subs	r0, #71	; 0x47
 8005662:	e7f7      	b.n	8005654 <__hexdig_fun+0xa>
 8005664:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005668:	2b05      	cmp	r3, #5
 800566a:	d801      	bhi.n	8005670 <__hexdig_fun+0x26>
 800566c:	3827      	subs	r0, #39	; 0x27
 800566e:	e7f1      	b.n	8005654 <__hexdig_fun+0xa>
 8005670:	2000      	movs	r0, #0
 8005672:	4770      	bx	lr

08005674 <__gethex>:
 8005674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005678:	ed2d 8b02 	vpush	{d8}
 800567c:	b089      	sub	sp, #36	; 0x24
 800567e:	ee08 0a10 	vmov	s16, r0
 8005682:	9304      	str	r3, [sp, #16]
 8005684:	4bb4      	ldr	r3, [pc, #720]	; (8005958 <__gethex+0x2e4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	4618      	mov	r0, r3
 800568c:	468b      	mov	fp, r1
 800568e:	4690      	mov	r8, r2
 8005690:	f7fa fd9e 	bl	80001d0 <strlen>
 8005694:	9b01      	ldr	r3, [sp, #4]
 8005696:	f8db 2000 	ldr.w	r2, [fp]
 800569a:	4403      	add	r3, r0
 800569c:	4682      	mov	sl, r0
 800569e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80056a2:	9305      	str	r3, [sp, #20]
 80056a4:	1c93      	adds	r3, r2, #2
 80056a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80056aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80056ae:	32fe      	adds	r2, #254	; 0xfe
 80056b0:	18d1      	adds	r1, r2, r3
 80056b2:	461f      	mov	r7, r3
 80056b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80056b8:	9100      	str	r1, [sp, #0]
 80056ba:	2830      	cmp	r0, #48	; 0x30
 80056bc:	d0f8      	beq.n	80056b0 <__gethex+0x3c>
 80056be:	f7ff ffc4 	bl	800564a <__hexdig_fun>
 80056c2:	4604      	mov	r4, r0
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d13a      	bne.n	800573e <__gethex+0xca>
 80056c8:	9901      	ldr	r1, [sp, #4]
 80056ca:	4652      	mov	r2, sl
 80056cc:	4638      	mov	r0, r7
 80056ce:	f001 fbd2 	bl	8006e76 <strncmp>
 80056d2:	4605      	mov	r5, r0
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d168      	bne.n	80057aa <__gethex+0x136>
 80056d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80056dc:	eb07 060a 	add.w	r6, r7, sl
 80056e0:	f7ff ffb3 	bl	800564a <__hexdig_fun>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d062      	beq.n	80057ae <__gethex+0x13a>
 80056e8:	4633      	mov	r3, r6
 80056ea:	7818      	ldrb	r0, [r3, #0]
 80056ec:	2830      	cmp	r0, #48	; 0x30
 80056ee:	461f      	mov	r7, r3
 80056f0:	f103 0301 	add.w	r3, r3, #1
 80056f4:	d0f9      	beq.n	80056ea <__gethex+0x76>
 80056f6:	f7ff ffa8 	bl	800564a <__hexdig_fun>
 80056fa:	2301      	movs	r3, #1
 80056fc:	fab0 f480 	clz	r4, r0
 8005700:	0964      	lsrs	r4, r4, #5
 8005702:	4635      	mov	r5, r6
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	463a      	mov	r2, r7
 8005708:	4616      	mov	r6, r2
 800570a:	3201      	adds	r2, #1
 800570c:	7830      	ldrb	r0, [r6, #0]
 800570e:	f7ff ff9c 	bl	800564a <__hexdig_fun>
 8005712:	2800      	cmp	r0, #0
 8005714:	d1f8      	bne.n	8005708 <__gethex+0x94>
 8005716:	9901      	ldr	r1, [sp, #4]
 8005718:	4652      	mov	r2, sl
 800571a:	4630      	mov	r0, r6
 800571c:	f001 fbab 	bl	8006e76 <strncmp>
 8005720:	b980      	cbnz	r0, 8005744 <__gethex+0xd0>
 8005722:	b94d      	cbnz	r5, 8005738 <__gethex+0xc4>
 8005724:	eb06 050a 	add.w	r5, r6, sl
 8005728:	462a      	mov	r2, r5
 800572a:	4616      	mov	r6, r2
 800572c:	3201      	adds	r2, #1
 800572e:	7830      	ldrb	r0, [r6, #0]
 8005730:	f7ff ff8b 	bl	800564a <__hexdig_fun>
 8005734:	2800      	cmp	r0, #0
 8005736:	d1f8      	bne.n	800572a <__gethex+0xb6>
 8005738:	1bad      	subs	r5, r5, r6
 800573a:	00ad      	lsls	r5, r5, #2
 800573c:	e004      	b.n	8005748 <__gethex+0xd4>
 800573e:	2400      	movs	r4, #0
 8005740:	4625      	mov	r5, r4
 8005742:	e7e0      	b.n	8005706 <__gethex+0x92>
 8005744:	2d00      	cmp	r5, #0
 8005746:	d1f7      	bne.n	8005738 <__gethex+0xc4>
 8005748:	7833      	ldrb	r3, [r6, #0]
 800574a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800574e:	2b50      	cmp	r3, #80	; 0x50
 8005750:	d13b      	bne.n	80057ca <__gethex+0x156>
 8005752:	7873      	ldrb	r3, [r6, #1]
 8005754:	2b2b      	cmp	r3, #43	; 0x2b
 8005756:	d02c      	beq.n	80057b2 <__gethex+0x13e>
 8005758:	2b2d      	cmp	r3, #45	; 0x2d
 800575a:	d02e      	beq.n	80057ba <__gethex+0x146>
 800575c:	1c71      	adds	r1, r6, #1
 800575e:	f04f 0900 	mov.w	r9, #0
 8005762:	7808      	ldrb	r0, [r1, #0]
 8005764:	f7ff ff71 	bl	800564a <__hexdig_fun>
 8005768:	1e43      	subs	r3, r0, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b18      	cmp	r3, #24
 800576e:	d82c      	bhi.n	80057ca <__gethex+0x156>
 8005770:	f1a0 0210 	sub.w	r2, r0, #16
 8005774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005778:	f7ff ff67 	bl	800564a <__hexdig_fun>
 800577c:	1e43      	subs	r3, r0, #1
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b18      	cmp	r3, #24
 8005782:	d91d      	bls.n	80057c0 <__gethex+0x14c>
 8005784:	f1b9 0f00 	cmp.w	r9, #0
 8005788:	d000      	beq.n	800578c <__gethex+0x118>
 800578a:	4252      	negs	r2, r2
 800578c:	4415      	add	r5, r2
 800578e:	f8cb 1000 	str.w	r1, [fp]
 8005792:	b1e4      	cbz	r4, 80057ce <__gethex+0x15a>
 8005794:	9b00      	ldr	r3, [sp, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf14      	ite	ne
 800579a:	2700      	movne	r7, #0
 800579c:	2706      	moveq	r7, #6
 800579e:	4638      	mov	r0, r7
 80057a0:	b009      	add	sp, #36	; 0x24
 80057a2:	ecbd 8b02 	vpop	{d8}
 80057a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057aa:	463e      	mov	r6, r7
 80057ac:	4625      	mov	r5, r4
 80057ae:	2401      	movs	r4, #1
 80057b0:	e7ca      	b.n	8005748 <__gethex+0xd4>
 80057b2:	f04f 0900 	mov.w	r9, #0
 80057b6:	1cb1      	adds	r1, r6, #2
 80057b8:	e7d3      	b.n	8005762 <__gethex+0xee>
 80057ba:	f04f 0901 	mov.w	r9, #1
 80057be:	e7fa      	b.n	80057b6 <__gethex+0x142>
 80057c0:	230a      	movs	r3, #10
 80057c2:	fb03 0202 	mla	r2, r3, r2, r0
 80057c6:	3a10      	subs	r2, #16
 80057c8:	e7d4      	b.n	8005774 <__gethex+0x100>
 80057ca:	4631      	mov	r1, r6
 80057cc:	e7df      	b.n	800578e <__gethex+0x11a>
 80057ce:	1bf3      	subs	r3, r6, r7
 80057d0:	3b01      	subs	r3, #1
 80057d2:	4621      	mov	r1, r4
 80057d4:	2b07      	cmp	r3, #7
 80057d6:	dc0b      	bgt.n	80057f0 <__gethex+0x17c>
 80057d8:	ee18 0a10 	vmov	r0, s16
 80057dc:	f000 fa82 	bl	8005ce4 <_Balloc>
 80057e0:	4604      	mov	r4, r0
 80057e2:	b940      	cbnz	r0, 80057f6 <__gethex+0x182>
 80057e4:	4b5d      	ldr	r3, [pc, #372]	; (800595c <__gethex+0x2e8>)
 80057e6:	4602      	mov	r2, r0
 80057e8:	21de      	movs	r1, #222	; 0xde
 80057ea:	485d      	ldr	r0, [pc, #372]	; (8005960 <__gethex+0x2ec>)
 80057ec:	f001 fc38 	bl	8007060 <__assert_func>
 80057f0:	3101      	adds	r1, #1
 80057f2:	105b      	asrs	r3, r3, #1
 80057f4:	e7ee      	b.n	80057d4 <__gethex+0x160>
 80057f6:	f100 0914 	add.w	r9, r0, #20
 80057fa:	f04f 0b00 	mov.w	fp, #0
 80057fe:	f1ca 0301 	rsb	r3, sl, #1
 8005802:	f8cd 9008 	str.w	r9, [sp, #8]
 8005806:	f8cd b000 	str.w	fp, [sp]
 800580a:	9306      	str	r3, [sp, #24]
 800580c:	42b7      	cmp	r7, r6
 800580e:	d340      	bcc.n	8005892 <__gethex+0x21e>
 8005810:	9802      	ldr	r0, [sp, #8]
 8005812:	9b00      	ldr	r3, [sp, #0]
 8005814:	f840 3b04 	str.w	r3, [r0], #4
 8005818:	eba0 0009 	sub.w	r0, r0, r9
 800581c:	1080      	asrs	r0, r0, #2
 800581e:	0146      	lsls	r6, r0, #5
 8005820:	6120      	str	r0, [r4, #16]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fb50 	bl	8005ec8 <__hi0bits>
 8005828:	1a30      	subs	r0, r6, r0
 800582a:	f8d8 6000 	ldr.w	r6, [r8]
 800582e:	42b0      	cmp	r0, r6
 8005830:	dd63      	ble.n	80058fa <__gethex+0x286>
 8005832:	1b87      	subs	r7, r0, r6
 8005834:	4639      	mov	r1, r7
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fef4 	bl	8006624 <__any_on>
 800583c:	4682      	mov	sl, r0
 800583e:	b1a8      	cbz	r0, 800586c <__gethex+0x1f8>
 8005840:	1e7b      	subs	r3, r7, #1
 8005842:	1159      	asrs	r1, r3, #5
 8005844:	f003 021f 	and.w	r2, r3, #31
 8005848:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800584c:	f04f 0a01 	mov.w	sl, #1
 8005850:	fa0a f202 	lsl.w	r2, sl, r2
 8005854:	420a      	tst	r2, r1
 8005856:	d009      	beq.n	800586c <__gethex+0x1f8>
 8005858:	4553      	cmp	r3, sl
 800585a:	dd05      	ble.n	8005868 <__gethex+0x1f4>
 800585c:	1eb9      	subs	r1, r7, #2
 800585e:	4620      	mov	r0, r4
 8005860:	f000 fee0 	bl	8006624 <__any_on>
 8005864:	2800      	cmp	r0, #0
 8005866:	d145      	bne.n	80058f4 <__gethex+0x280>
 8005868:	f04f 0a02 	mov.w	sl, #2
 800586c:	4639      	mov	r1, r7
 800586e:	4620      	mov	r0, r4
 8005870:	f7ff fe99 	bl	80055a6 <rshift>
 8005874:	443d      	add	r5, r7
 8005876:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800587a:	42ab      	cmp	r3, r5
 800587c:	da4c      	bge.n	8005918 <__gethex+0x2a4>
 800587e:	ee18 0a10 	vmov	r0, s16
 8005882:	4621      	mov	r1, r4
 8005884:	f000 fa6e 	bl	8005d64 <_Bfree>
 8005888:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800588a:	2300      	movs	r3, #0
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	27a3      	movs	r7, #163	; 0xa3
 8005890:	e785      	b.n	800579e <__gethex+0x12a>
 8005892:	1e73      	subs	r3, r6, #1
 8005894:	9a05      	ldr	r2, [sp, #20]
 8005896:	9303      	str	r3, [sp, #12]
 8005898:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800589c:	4293      	cmp	r3, r2
 800589e:	d019      	beq.n	80058d4 <__gethex+0x260>
 80058a0:	f1bb 0f20 	cmp.w	fp, #32
 80058a4:	d107      	bne.n	80058b6 <__gethex+0x242>
 80058a6:	9b02      	ldr	r3, [sp, #8]
 80058a8:	9a00      	ldr	r2, [sp, #0]
 80058aa:	f843 2b04 	str.w	r2, [r3], #4
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	2300      	movs	r3, #0
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	469b      	mov	fp, r3
 80058b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80058ba:	f7ff fec6 	bl	800564a <__hexdig_fun>
 80058be:	9b00      	ldr	r3, [sp, #0]
 80058c0:	f000 000f 	and.w	r0, r0, #15
 80058c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80058c8:	4303      	orrs	r3, r0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	f10b 0b04 	add.w	fp, fp, #4
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	e00d      	b.n	80058f0 <__gethex+0x27c>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	9a06      	ldr	r2, [sp, #24]
 80058d8:	4413      	add	r3, r2
 80058da:	42bb      	cmp	r3, r7
 80058dc:	d3e0      	bcc.n	80058a0 <__gethex+0x22c>
 80058de:	4618      	mov	r0, r3
 80058e0:	9901      	ldr	r1, [sp, #4]
 80058e2:	9307      	str	r3, [sp, #28]
 80058e4:	4652      	mov	r2, sl
 80058e6:	f001 fac6 	bl	8006e76 <strncmp>
 80058ea:	9b07      	ldr	r3, [sp, #28]
 80058ec:	2800      	cmp	r0, #0
 80058ee:	d1d7      	bne.n	80058a0 <__gethex+0x22c>
 80058f0:	461e      	mov	r6, r3
 80058f2:	e78b      	b.n	800580c <__gethex+0x198>
 80058f4:	f04f 0a03 	mov.w	sl, #3
 80058f8:	e7b8      	b.n	800586c <__gethex+0x1f8>
 80058fa:	da0a      	bge.n	8005912 <__gethex+0x29e>
 80058fc:	1a37      	subs	r7, r6, r0
 80058fe:	4621      	mov	r1, r4
 8005900:	ee18 0a10 	vmov	r0, s16
 8005904:	463a      	mov	r2, r7
 8005906:	f000 fc49 	bl	800619c <__lshift>
 800590a:	1bed      	subs	r5, r5, r7
 800590c:	4604      	mov	r4, r0
 800590e:	f100 0914 	add.w	r9, r0, #20
 8005912:	f04f 0a00 	mov.w	sl, #0
 8005916:	e7ae      	b.n	8005876 <__gethex+0x202>
 8005918:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800591c:	42a8      	cmp	r0, r5
 800591e:	dd72      	ble.n	8005a06 <__gethex+0x392>
 8005920:	1b45      	subs	r5, r0, r5
 8005922:	42ae      	cmp	r6, r5
 8005924:	dc36      	bgt.n	8005994 <__gethex+0x320>
 8005926:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d02a      	beq.n	8005984 <__gethex+0x310>
 800592e:	2b03      	cmp	r3, #3
 8005930:	d02c      	beq.n	800598c <__gethex+0x318>
 8005932:	2b01      	cmp	r3, #1
 8005934:	d11c      	bne.n	8005970 <__gethex+0x2fc>
 8005936:	42ae      	cmp	r6, r5
 8005938:	d11a      	bne.n	8005970 <__gethex+0x2fc>
 800593a:	2e01      	cmp	r6, #1
 800593c:	d112      	bne.n	8005964 <__gethex+0x2f0>
 800593e:	9a04      	ldr	r2, [sp, #16]
 8005940:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	2301      	movs	r3, #1
 8005948:	6123      	str	r3, [r4, #16]
 800594a:	f8c9 3000 	str.w	r3, [r9]
 800594e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005950:	2762      	movs	r7, #98	; 0x62
 8005952:	601c      	str	r4, [r3, #0]
 8005954:	e723      	b.n	800579e <__gethex+0x12a>
 8005956:	bf00      	nop
 8005958:	08007874 	.word	0x08007874
 800595c:	08007798 	.word	0x08007798
 8005960:	0800780c 	.word	0x0800780c
 8005964:	1e71      	subs	r1, r6, #1
 8005966:	4620      	mov	r0, r4
 8005968:	f000 fe5c 	bl	8006624 <__any_on>
 800596c:	2800      	cmp	r0, #0
 800596e:	d1e6      	bne.n	800593e <__gethex+0x2ca>
 8005970:	ee18 0a10 	vmov	r0, s16
 8005974:	4621      	mov	r1, r4
 8005976:	f000 f9f5 	bl	8005d64 <_Bfree>
 800597a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800597c:	2300      	movs	r3, #0
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	2750      	movs	r7, #80	; 0x50
 8005982:	e70c      	b.n	800579e <__gethex+0x12a>
 8005984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f2      	bne.n	8005970 <__gethex+0x2fc>
 800598a:	e7d8      	b.n	800593e <__gethex+0x2ca>
 800598c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1d5      	bne.n	800593e <__gethex+0x2ca>
 8005992:	e7ed      	b.n	8005970 <__gethex+0x2fc>
 8005994:	1e6f      	subs	r7, r5, #1
 8005996:	f1ba 0f00 	cmp.w	sl, #0
 800599a:	d131      	bne.n	8005a00 <__gethex+0x38c>
 800599c:	b127      	cbz	r7, 80059a8 <__gethex+0x334>
 800599e:	4639      	mov	r1, r7
 80059a0:	4620      	mov	r0, r4
 80059a2:	f000 fe3f 	bl	8006624 <__any_on>
 80059a6:	4682      	mov	sl, r0
 80059a8:	117b      	asrs	r3, r7, #5
 80059aa:	2101      	movs	r1, #1
 80059ac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80059b0:	f007 071f 	and.w	r7, r7, #31
 80059b4:	fa01 f707 	lsl.w	r7, r1, r7
 80059b8:	421f      	tst	r7, r3
 80059ba:	4629      	mov	r1, r5
 80059bc:	4620      	mov	r0, r4
 80059be:	bf18      	it	ne
 80059c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80059c4:	1b76      	subs	r6, r6, r5
 80059c6:	f7ff fdee 	bl	80055a6 <rshift>
 80059ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80059ce:	2702      	movs	r7, #2
 80059d0:	f1ba 0f00 	cmp.w	sl, #0
 80059d4:	d048      	beq.n	8005a68 <__gethex+0x3f4>
 80059d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d015      	beq.n	8005a0a <__gethex+0x396>
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d017      	beq.n	8005a12 <__gethex+0x39e>
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d109      	bne.n	80059fa <__gethex+0x386>
 80059e6:	f01a 0f02 	tst.w	sl, #2
 80059ea:	d006      	beq.n	80059fa <__gethex+0x386>
 80059ec:	f8d9 0000 	ldr.w	r0, [r9]
 80059f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80059f4:	f01a 0f01 	tst.w	sl, #1
 80059f8:	d10e      	bne.n	8005a18 <__gethex+0x3a4>
 80059fa:	f047 0710 	orr.w	r7, r7, #16
 80059fe:	e033      	b.n	8005a68 <__gethex+0x3f4>
 8005a00:	f04f 0a01 	mov.w	sl, #1
 8005a04:	e7d0      	b.n	80059a8 <__gethex+0x334>
 8005a06:	2701      	movs	r7, #1
 8005a08:	e7e2      	b.n	80059d0 <__gethex+0x35c>
 8005a0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a0c:	f1c3 0301 	rsb	r3, r3, #1
 8005a10:	9315      	str	r3, [sp, #84]	; 0x54
 8005a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0f0      	beq.n	80059fa <__gethex+0x386>
 8005a18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005a1c:	f104 0314 	add.w	r3, r4, #20
 8005a20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005a24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005a28:	f04f 0c00 	mov.w	ip, #0
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a32:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005a36:	d01c      	beq.n	8005a72 <__gethex+0x3fe>
 8005a38:	3201      	adds	r2, #1
 8005a3a:	6002      	str	r2, [r0, #0]
 8005a3c:	2f02      	cmp	r7, #2
 8005a3e:	f104 0314 	add.w	r3, r4, #20
 8005a42:	d13f      	bne.n	8005ac4 <__gethex+0x450>
 8005a44:	f8d8 2000 	ldr.w	r2, [r8]
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	42b2      	cmp	r2, r6
 8005a4c:	d10a      	bne.n	8005a64 <__gethex+0x3f0>
 8005a4e:	1171      	asrs	r1, r6, #5
 8005a50:	2201      	movs	r2, #1
 8005a52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a56:	f006 061f 	and.w	r6, r6, #31
 8005a5a:	fa02 f606 	lsl.w	r6, r2, r6
 8005a5e:	421e      	tst	r6, r3
 8005a60:	bf18      	it	ne
 8005a62:	4617      	movne	r7, r2
 8005a64:	f047 0720 	orr.w	r7, r7, #32
 8005a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a6a:	601c      	str	r4, [r3, #0]
 8005a6c:	9b04      	ldr	r3, [sp, #16]
 8005a6e:	601d      	str	r5, [r3, #0]
 8005a70:	e695      	b.n	800579e <__gethex+0x12a>
 8005a72:	4299      	cmp	r1, r3
 8005a74:	f843 cc04 	str.w	ip, [r3, #-4]
 8005a78:	d8d8      	bhi.n	8005a2c <__gethex+0x3b8>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	459b      	cmp	fp, r3
 8005a7e:	db19      	blt.n	8005ab4 <__gethex+0x440>
 8005a80:	6861      	ldr	r1, [r4, #4]
 8005a82:	ee18 0a10 	vmov	r0, s16
 8005a86:	3101      	adds	r1, #1
 8005a88:	f000 f92c 	bl	8005ce4 <_Balloc>
 8005a8c:	4681      	mov	r9, r0
 8005a8e:	b918      	cbnz	r0, 8005a98 <__gethex+0x424>
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <__gethex+0x488>)
 8005a92:	4602      	mov	r2, r0
 8005a94:	2184      	movs	r1, #132	; 0x84
 8005a96:	e6a8      	b.n	80057ea <__gethex+0x176>
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	3202      	adds	r2, #2
 8005a9c:	f104 010c 	add.w	r1, r4, #12
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	300c      	adds	r0, #12
 8005aa4:	f000 f910 	bl	8005cc8 <memcpy>
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	ee18 0a10 	vmov	r0, s16
 8005aae:	f000 f959 	bl	8005d64 <_Bfree>
 8005ab2:	464c      	mov	r4, r9
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005abc:	6122      	str	r2, [r4, #16]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]
 8005ac2:	e7bb      	b.n	8005a3c <__gethex+0x3c8>
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	455a      	cmp	r2, fp
 8005ac8:	dd0b      	ble.n	8005ae2 <__gethex+0x46e>
 8005aca:	2101      	movs	r1, #1
 8005acc:	4620      	mov	r0, r4
 8005ace:	f7ff fd6a 	bl	80055a6 <rshift>
 8005ad2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005ad6:	3501      	adds	r5, #1
 8005ad8:	42ab      	cmp	r3, r5
 8005ada:	f6ff aed0 	blt.w	800587e <__gethex+0x20a>
 8005ade:	2701      	movs	r7, #1
 8005ae0:	e7c0      	b.n	8005a64 <__gethex+0x3f0>
 8005ae2:	f016 061f 	ands.w	r6, r6, #31
 8005ae6:	d0fa      	beq.n	8005ade <__gethex+0x46a>
 8005ae8:	4453      	add	r3, sl
 8005aea:	f1c6 0620 	rsb	r6, r6, #32
 8005aee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005af2:	f000 f9e9 	bl	8005ec8 <__hi0bits>
 8005af6:	42b0      	cmp	r0, r6
 8005af8:	dbe7      	blt.n	8005aca <__gethex+0x456>
 8005afa:	e7f0      	b.n	8005ade <__gethex+0x46a>
 8005afc:	08007798 	.word	0x08007798

08005b00 <L_shift>:
 8005b00:	f1c2 0208 	rsb	r2, r2, #8
 8005b04:	0092      	lsls	r2, r2, #2
 8005b06:	b570      	push	{r4, r5, r6, lr}
 8005b08:	f1c2 0620 	rsb	r6, r2, #32
 8005b0c:	6843      	ldr	r3, [r0, #4]
 8005b0e:	6804      	ldr	r4, [r0, #0]
 8005b10:	fa03 f506 	lsl.w	r5, r3, r6
 8005b14:	432c      	orrs	r4, r5
 8005b16:	40d3      	lsrs	r3, r2
 8005b18:	6004      	str	r4, [r0, #0]
 8005b1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005b1e:	4288      	cmp	r0, r1
 8005b20:	d3f4      	bcc.n	8005b0c <L_shift+0xc>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}

08005b24 <__match>:
 8005b24:	b530      	push	{r4, r5, lr}
 8005b26:	6803      	ldr	r3, [r0, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b2e:	b914      	cbnz	r4, 8005b36 <__match+0x12>
 8005b30:	6003      	str	r3, [r0, #0]
 8005b32:	2001      	movs	r0, #1
 8005b34:	bd30      	pop	{r4, r5, pc}
 8005b36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005b3e:	2d19      	cmp	r5, #25
 8005b40:	bf98      	it	ls
 8005b42:	3220      	addls	r2, #32
 8005b44:	42a2      	cmp	r2, r4
 8005b46:	d0f0      	beq.n	8005b2a <__match+0x6>
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e7f3      	b.n	8005b34 <__match+0x10>

08005b4c <__hexnan>:
 8005b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	115e      	asrs	r6, r3, #5
 8005b54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005b58:	f013 031f 	ands.w	r3, r3, #31
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	bf18      	it	ne
 8005b60:	3604      	addne	r6, #4
 8005b62:	2500      	movs	r5, #0
 8005b64:	1f37      	subs	r7, r6, #4
 8005b66:	4690      	mov	r8, r2
 8005b68:	6802      	ldr	r2, [r0, #0]
 8005b6a:	9301      	str	r3, [sp, #4]
 8005b6c:	4682      	mov	sl, r0
 8005b6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005b72:	46b9      	mov	r9, r7
 8005b74:	463c      	mov	r4, r7
 8005b76:	9502      	str	r5, [sp, #8]
 8005b78:	46ab      	mov	fp, r5
 8005b7a:	7851      	ldrb	r1, [r2, #1]
 8005b7c:	1c53      	adds	r3, r2, #1
 8005b7e:	9303      	str	r3, [sp, #12]
 8005b80:	b341      	cbz	r1, 8005bd4 <__hexnan+0x88>
 8005b82:	4608      	mov	r0, r1
 8005b84:	9205      	str	r2, [sp, #20]
 8005b86:	9104      	str	r1, [sp, #16]
 8005b88:	f7ff fd5f 	bl	800564a <__hexdig_fun>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d14f      	bne.n	8005c30 <__hexnan+0xe4>
 8005b90:	9904      	ldr	r1, [sp, #16]
 8005b92:	9a05      	ldr	r2, [sp, #20]
 8005b94:	2920      	cmp	r1, #32
 8005b96:	d818      	bhi.n	8005bca <__hexnan+0x7e>
 8005b98:	9b02      	ldr	r3, [sp, #8]
 8005b9a:	459b      	cmp	fp, r3
 8005b9c:	dd13      	ble.n	8005bc6 <__hexnan+0x7a>
 8005b9e:	454c      	cmp	r4, r9
 8005ba0:	d206      	bcs.n	8005bb0 <__hexnan+0x64>
 8005ba2:	2d07      	cmp	r5, #7
 8005ba4:	dc04      	bgt.n	8005bb0 <__hexnan+0x64>
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4620      	mov	r0, r4
 8005bac:	f7ff ffa8 	bl	8005b00 <L_shift>
 8005bb0:	4544      	cmp	r4, r8
 8005bb2:	d950      	bls.n	8005c56 <__hexnan+0x10a>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f1a4 0904 	sub.w	r9, r4, #4
 8005bba:	f844 3c04 	str.w	r3, [r4, #-4]
 8005bbe:	f8cd b008 	str.w	fp, [sp, #8]
 8005bc2:	464c      	mov	r4, r9
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	9a03      	ldr	r2, [sp, #12]
 8005bc8:	e7d7      	b.n	8005b7a <__hexnan+0x2e>
 8005bca:	2929      	cmp	r1, #41	; 0x29
 8005bcc:	d156      	bne.n	8005c7c <__hexnan+0x130>
 8005bce:	3202      	adds	r2, #2
 8005bd0:	f8ca 2000 	str.w	r2, [sl]
 8005bd4:	f1bb 0f00 	cmp.w	fp, #0
 8005bd8:	d050      	beq.n	8005c7c <__hexnan+0x130>
 8005bda:	454c      	cmp	r4, r9
 8005bdc:	d206      	bcs.n	8005bec <__hexnan+0xa0>
 8005bde:	2d07      	cmp	r5, #7
 8005be0:	dc04      	bgt.n	8005bec <__hexnan+0xa0>
 8005be2:	462a      	mov	r2, r5
 8005be4:	4649      	mov	r1, r9
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7ff ff8a 	bl	8005b00 <L_shift>
 8005bec:	4544      	cmp	r4, r8
 8005bee:	d934      	bls.n	8005c5a <__hexnan+0x10e>
 8005bf0:	f1a8 0204 	sub.w	r2, r8, #4
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bfa:	f842 1f04 	str.w	r1, [r2, #4]!
 8005bfe:	429f      	cmp	r7, r3
 8005c00:	d2f9      	bcs.n	8005bf6 <__hexnan+0xaa>
 8005c02:	1b3b      	subs	r3, r7, r4
 8005c04:	f023 0303 	bic.w	r3, r3, #3
 8005c08:	3304      	adds	r3, #4
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	3e03      	subs	r6, #3
 8005c0e:	42b4      	cmp	r4, r6
 8005c10:	bf88      	it	hi
 8005c12:	2304      	movhi	r3, #4
 8005c14:	4443      	add	r3, r8
 8005c16:	2200      	movs	r2, #0
 8005c18:	f843 2b04 	str.w	r2, [r3], #4
 8005c1c:	429f      	cmp	r7, r3
 8005c1e:	d2fb      	bcs.n	8005c18 <__hexnan+0xcc>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b91b      	cbnz	r3, 8005c2c <__hexnan+0xe0>
 8005c24:	4547      	cmp	r7, r8
 8005c26:	d127      	bne.n	8005c78 <__hexnan+0x12c>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	2005      	movs	r0, #5
 8005c2e:	e026      	b.n	8005c7e <__hexnan+0x132>
 8005c30:	3501      	adds	r5, #1
 8005c32:	2d08      	cmp	r5, #8
 8005c34:	f10b 0b01 	add.w	fp, fp, #1
 8005c38:	dd06      	ble.n	8005c48 <__hexnan+0xfc>
 8005c3a:	4544      	cmp	r4, r8
 8005c3c:	d9c3      	bls.n	8005bc6 <__hexnan+0x7a>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c44:	2501      	movs	r5, #1
 8005c46:	3c04      	subs	r4, #4
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	f000 000f 	and.w	r0, r0, #15
 8005c4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005c52:	6022      	str	r2, [r4, #0]
 8005c54:	e7b7      	b.n	8005bc6 <__hexnan+0x7a>
 8005c56:	2508      	movs	r5, #8
 8005c58:	e7b5      	b.n	8005bc6 <__hexnan+0x7a>
 8005c5a:	9b01      	ldr	r3, [sp, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0df      	beq.n	8005c20 <__hexnan+0xd4>
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	f1c3 0320 	rsb	r3, r3, #32
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005c70:	401a      	ands	r2, r3
 8005c72:	f846 2c04 	str.w	r2, [r6, #-4]
 8005c76:	e7d3      	b.n	8005c20 <__hexnan+0xd4>
 8005c78:	3f04      	subs	r7, #4
 8005c7a:	e7d1      	b.n	8005c20 <__hexnan+0xd4>
 8005c7c:	2004      	movs	r0, #4
 8005c7e:	b007      	add	sp, #28
 8005c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c84 <_localeconv_r>:
 8005c84:	4800      	ldr	r0, [pc, #0]	; (8005c88 <_localeconv_r+0x4>)
 8005c86:	4770      	bx	lr
 8005c88:	20000164 	.word	0x20000164

08005c8c <__retarget_lock_init_recursive>:
 8005c8c:	4770      	bx	lr

08005c8e <__retarget_lock_acquire_recursive>:
 8005c8e:	4770      	bx	lr

08005c90 <__retarget_lock_release_recursive>:
 8005c90:	4770      	bx	lr
	...

08005c94 <malloc>:
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <malloc+0xc>)
 8005c96:	4601      	mov	r1, r0
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f000 bd67 	b.w	800676c <_malloc_r>
 8005c9e:	bf00      	nop
 8005ca0:	2000000c 	.word	0x2000000c

08005ca4 <__ascii_mbtowc>:
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	b901      	cbnz	r1, 8005caa <__ascii_mbtowc+0x6>
 8005ca8:	a901      	add	r1, sp, #4
 8005caa:	b142      	cbz	r2, 8005cbe <__ascii_mbtowc+0x1a>
 8005cac:	b14b      	cbz	r3, 8005cc2 <__ascii_mbtowc+0x1e>
 8005cae:	7813      	ldrb	r3, [r2, #0]
 8005cb0:	600b      	str	r3, [r1, #0]
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	1e10      	subs	r0, r2, #0
 8005cb6:	bf18      	it	ne
 8005cb8:	2001      	movne	r0, #1
 8005cba:	b002      	add	sp, #8
 8005cbc:	4770      	bx	lr
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	e7fb      	b.n	8005cba <__ascii_mbtowc+0x16>
 8005cc2:	f06f 0001 	mvn.w	r0, #1
 8005cc6:	e7f8      	b.n	8005cba <__ascii_mbtowc+0x16>

08005cc8 <memcpy>:
 8005cc8:	440a      	add	r2, r1
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cd0:	d100      	bne.n	8005cd4 <memcpy+0xc>
 8005cd2:	4770      	bx	lr
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	d1f9      	bne.n	8005cd6 <memcpy+0xe>
 8005ce2:	bd10      	pop	{r4, pc}

08005ce4 <_Balloc>:
 8005ce4:	b570      	push	{r4, r5, r6, lr}
 8005ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ce8:	4604      	mov	r4, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	b976      	cbnz	r6, 8005d0c <_Balloc+0x28>
 8005cee:	2010      	movs	r0, #16
 8005cf0:	f7ff ffd0 	bl	8005c94 <malloc>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6260      	str	r0, [r4, #36]	; 0x24
 8005cf8:	b920      	cbnz	r0, 8005d04 <_Balloc+0x20>
 8005cfa:	4b18      	ldr	r3, [pc, #96]	; (8005d5c <_Balloc+0x78>)
 8005cfc:	4818      	ldr	r0, [pc, #96]	; (8005d60 <_Balloc+0x7c>)
 8005cfe:	2166      	movs	r1, #102	; 0x66
 8005d00:	f001 f9ae 	bl	8007060 <__assert_func>
 8005d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d08:	6006      	str	r6, [r0, #0]
 8005d0a:	60c6      	str	r6, [r0, #12]
 8005d0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d0e:	68f3      	ldr	r3, [r6, #12]
 8005d10:	b183      	cbz	r3, 8005d34 <_Balloc+0x50>
 8005d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d1a:	b9b8      	cbnz	r0, 8005d4c <_Balloc+0x68>
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8005d22:	1d72      	adds	r2, r6, #5
 8005d24:	0092      	lsls	r2, r2, #2
 8005d26:	4620      	mov	r0, r4
 8005d28:	f000 fc9d 	bl	8006666 <_calloc_r>
 8005d2c:	b160      	cbz	r0, 8005d48 <_Balloc+0x64>
 8005d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d32:	e00e      	b.n	8005d52 <_Balloc+0x6e>
 8005d34:	2221      	movs	r2, #33	; 0x21
 8005d36:	2104      	movs	r1, #4
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fc94 	bl	8006666 <_calloc_r>
 8005d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d40:	60f0      	str	r0, [r6, #12]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e4      	bne.n	8005d12 <_Balloc+0x2e>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	6802      	ldr	r2, [r0, #0]
 8005d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d52:	2300      	movs	r3, #0
 8005d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d58:	e7f7      	b.n	8005d4a <_Balloc+0x66>
 8005d5a:	bf00      	nop
 8005d5c:	08007726 	.word	0x08007726
 8005d60:	08007888 	.word	0x08007888

08005d64 <_Bfree>:
 8005d64:	b570      	push	{r4, r5, r6, lr}
 8005d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d68:	4605      	mov	r5, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	b976      	cbnz	r6, 8005d8c <_Bfree+0x28>
 8005d6e:	2010      	movs	r0, #16
 8005d70:	f7ff ff90 	bl	8005c94 <malloc>
 8005d74:	4602      	mov	r2, r0
 8005d76:	6268      	str	r0, [r5, #36]	; 0x24
 8005d78:	b920      	cbnz	r0, 8005d84 <_Bfree+0x20>
 8005d7a:	4b09      	ldr	r3, [pc, #36]	; (8005da0 <_Bfree+0x3c>)
 8005d7c:	4809      	ldr	r0, [pc, #36]	; (8005da4 <_Bfree+0x40>)
 8005d7e:	218a      	movs	r1, #138	; 0x8a
 8005d80:	f001 f96e 	bl	8007060 <__assert_func>
 8005d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d88:	6006      	str	r6, [r0, #0]
 8005d8a:	60c6      	str	r6, [r0, #12]
 8005d8c:	b13c      	cbz	r4, 8005d9e <_Bfree+0x3a>
 8005d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d90:	6862      	ldr	r2, [r4, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d98:	6021      	str	r1, [r4, #0]
 8005d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d9e:	bd70      	pop	{r4, r5, r6, pc}
 8005da0:	08007726 	.word	0x08007726
 8005da4:	08007888 	.word	0x08007888

08005da8 <__multadd>:
 8005da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dac:	690d      	ldr	r5, [r1, #16]
 8005dae:	4607      	mov	r7, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	461e      	mov	r6, r3
 8005db4:	f101 0c14 	add.w	ip, r1, #20
 8005db8:	2000      	movs	r0, #0
 8005dba:	f8dc 3000 	ldr.w	r3, [ip]
 8005dbe:	b299      	uxth	r1, r3
 8005dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8005dc4:	0c1e      	lsrs	r6, r3, #16
 8005dc6:	0c0b      	lsrs	r3, r1, #16
 8005dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8005dcc:	b289      	uxth	r1, r1
 8005dce:	3001      	adds	r0, #1
 8005dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dd4:	4285      	cmp	r5, r0
 8005dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8005dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005dde:	dcec      	bgt.n	8005dba <__multadd+0x12>
 8005de0:	b30e      	cbz	r6, 8005e26 <__multadd+0x7e>
 8005de2:	68a3      	ldr	r3, [r4, #8]
 8005de4:	42ab      	cmp	r3, r5
 8005de6:	dc19      	bgt.n	8005e1c <__multadd+0x74>
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	4638      	mov	r0, r7
 8005dec:	3101      	adds	r1, #1
 8005dee:	f7ff ff79 	bl	8005ce4 <_Balloc>
 8005df2:	4680      	mov	r8, r0
 8005df4:	b928      	cbnz	r0, 8005e02 <__multadd+0x5a>
 8005df6:	4602      	mov	r2, r0
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <__multadd+0x84>)
 8005dfa:	480d      	ldr	r0, [pc, #52]	; (8005e30 <__multadd+0x88>)
 8005dfc:	21b5      	movs	r1, #181	; 0xb5
 8005dfe:	f001 f92f 	bl	8007060 <__assert_func>
 8005e02:	6922      	ldr	r2, [r4, #16]
 8005e04:	3202      	adds	r2, #2
 8005e06:	f104 010c 	add.w	r1, r4, #12
 8005e0a:	0092      	lsls	r2, r2, #2
 8005e0c:	300c      	adds	r0, #12
 8005e0e:	f7ff ff5b 	bl	8005cc8 <memcpy>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff ffa5 	bl	8005d64 <_Bfree>
 8005e1a:	4644      	mov	r4, r8
 8005e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e20:	3501      	adds	r5, #1
 8005e22:	615e      	str	r6, [r3, #20]
 8005e24:	6125      	str	r5, [r4, #16]
 8005e26:	4620      	mov	r0, r4
 8005e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2c:	08007798 	.word	0x08007798
 8005e30:	08007888 	.word	0x08007888

08005e34 <__s2b>:
 8005e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e38:	460c      	mov	r4, r1
 8005e3a:	4615      	mov	r5, r2
 8005e3c:	461f      	mov	r7, r3
 8005e3e:	2209      	movs	r2, #9
 8005e40:	3308      	adds	r3, #8
 8005e42:	4606      	mov	r6, r0
 8005e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e48:	2100      	movs	r1, #0
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	db09      	blt.n	8005e64 <__s2b+0x30>
 8005e50:	4630      	mov	r0, r6
 8005e52:	f7ff ff47 	bl	8005ce4 <_Balloc>
 8005e56:	b940      	cbnz	r0, 8005e6a <__s2b+0x36>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <__s2b+0x8c>)
 8005e5c:	4819      	ldr	r0, [pc, #100]	; (8005ec4 <__s2b+0x90>)
 8005e5e:	21ce      	movs	r1, #206	; 0xce
 8005e60:	f001 f8fe 	bl	8007060 <__assert_func>
 8005e64:	0052      	lsls	r2, r2, #1
 8005e66:	3101      	adds	r1, #1
 8005e68:	e7f0      	b.n	8005e4c <__s2b+0x18>
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	6143      	str	r3, [r0, #20]
 8005e6e:	2d09      	cmp	r5, #9
 8005e70:	f04f 0301 	mov.w	r3, #1
 8005e74:	6103      	str	r3, [r0, #16]
 8005e76:	dd16      	ble.n	8005ea6 <__s2b+0x72>
 8005e78:	f104 0909 	add.w	r9, r4, #9
 8005e7c:	46c8      	mov	r8, r9
 8005e7e:	442c      	add	r4, r5
 8005e80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e84:	4601      	mov	r1, r0
 8005e86:	3b30      	subs	r3, #48	; 0x30
 8005e88:	220a      	movs	r2, #10
 8005e8a:	4630      	mov	r0, r6
 8005e8c:	f7ff ff8c 	bl	8005da8 <__multadd>
 8005e90:	45a0      	cmp	r8, r4
 8005e92:	d1f5      	bne.n	8005e80 <__s2b+0x4c>
 8005e94:	f1a5 0408 	sub.w	r4, r5, #8
 8005e98:	444c      	add	r4, r9
 8005e9a:	1b2d      	subs	r5, r5, r4
 8005e9c:	1963      	adds	r3, r4, r5
 8005e9e:	42bb      	cmp	r3, r7
 8005ea0:	db04      	blt.n	8005eac <__s2b+0x78>
 8005ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea6:	340a      	adds	r4, #10
 8005ea8:	2509      	movs	r5, #9
 8005eaa:	e7f6      	b.n	8005e9a <__s2b+0x66>
 8005eac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005eb0:	4601      	mov	r1, r0
 8005eb2:	3b30      	subs	r3, #48	; 0x30
 8005eb4:	220a      	movs	r2, #10
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f7ff ff76 	bl	8005da8 <__multadd>
 8005ebc:	e7ee      	b.n	8005e9c <__s2b+0x68>
 8005ebe:	bf00      	nop
 8005ec0:	08007798 	.word	0x08007798
 8005ec4:	08007888 	.word	0x08007888

08005ec8 <__hi0bits>:
 8005ec8:	0c03      	lsrs	r3, r0, #16
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	b9d3      	cbnz	r3, 8005f04 <__hi0bits+0x3c>
 8005ece:	0400      	lsls	r0, r0, #16
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ed6:	bf04      	itt	eq
 8005ed8:	0200      	lsleq	r0, r0, #8
 8005eda:	3308      	addeq	r3, #8
 8005edc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ee0:	bf04      	itt	eq
 8005ee2:	0100      	lsleq	r0, r0, #4
 8005ee4:	3304      	addeq	r3, #4
 8005ee6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005eea:	bf04      	itt	eq
 8005eec:	0080      	lsleq	r0, r0, #2
 8005eee:	3302      	addeq	r3, #2
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	db05      	blt.n	8005f00 <__hi0bits+0x38>
 8005ef4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ef8:	f103 0301 	add.w	r3, r3, #1
 8005efc:	bf08      	it	eq
 8005efe:	2320      	moveq	r3, #32
 8005f00:	4618      	mov	r0, r3
 8005f02:	4770      	bx	lr
 8005f04:	2300      	movs	r3, #0
 8005f06:	e7e4      	b.n	8005ed2 <__hi0bits+0xa>

08005f08 <__lo0bits>:
 8005f08:	6803      	ldr	r3, [r0, #0]
 8005f0a:	f013 0207 	ands.w	r2, r3, #7
 8005f0e:	4601      	mov	r1, r0
 8005f10:	d00b      	beq.n	8005f2a <__lo0bits+0x22>
 8005f12:	07da      	lsls	r2, r3, #31
 8005f14:	d423      	bmi.n	8005f5e <__lo0bits+0x56>
 8005f16:	0798      	lsls	r0, r3, #30
 8005f18:	bf49      	itett	mi
 8005f1a:	085b      	lsrmi	r3, r3, #1
 8005f1c:	089b      	lsrpl	r3, r3, #2
 8005f1e:	2001      	movmi	r0, #1
 8005f20:	600b      	strmi	r3, [r1, #0]
 8005f22:	bf5c      	itt	pl
 8005f24:	600b      	strpl	r3, [r1, #0]
 8005f26:	2002      	movpl	r0, #2
 8005f28:	4770      	bx	lr
 8005f2a:	b298      	uxth	r0, r3
 8005f2c:	b9a8      	cbnz	r0, 8005f5a <__lo0bits+0x52>
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	2010      	movs	r0, #16
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	b90a      	cbnz	r2, 8005f3a <__lo0bits+0x32>
 8005f36:	3008      	adds	r0, #8
 8005f38:	0a1b      	lsrs	r3, r3, #8
 8005f3a:	071a      	lsls	r2, r3, #28
 8005f3c:	bf04      	itt	eq
 8005f3e:	091b      	lsreq	r3, r3, #4
 8005f40:	3004      	addeq	r0, #4
 8005f42:	079a      	lsls	r2, r3, #30
 8005f44:	bf04      	itt	eq
 8005f46:	089b      	lsreq	r3, r3, #2
 8005f48:	3002      	addeq	r0, #2
 8005f4a:	07da      	lsls	r2, r3, #31
 8005f4c:	d403      	bmi.n	8005f56 <__lo0bits+0x4e>
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	f100 0001 	add.w	r0, r0, #1
 8005f54:	d005      	beq.n	8005f62 <__lo0bits+0x5a>
 8005f56:	600b      	str	r3, [r1, #0]
 8005f58:	4770      	bx	lr
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	e7e9      	b.n	8005f32 <__lo0bits+0x2a>
 8005f5e:	2000      	movs	r0, #0
 8005f60:	4770      	bx	lr
 8005f62:	2020      	movs	r0, #32
 8005f64:	4770      	bx	lr
	...

08005f68 <__i2b>:
 8005f68:	b510      	push	{r4, lr}
 8005f6a:	460c      	mov	r4, r1
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	f7ff feb9 	bl	8005ce4 <_Balloc>
 8005f72:	4602      	mov	r2, r0
 8005f74:	b928      	cbnz	r0, 8005f82 <__i2b+0x1a>
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <__i2b+0x24>)
 8005f78:	4805      	ldr	r0, [pc, #20]	; (8005f90 <__i2b+0x28>)
 8005f7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f7e:	f001 f86f 	bl	8007060 <__assert_func>
 8005f82:	2301      	movs	r3, #1
 8005f84:	6144      	str	r4, [r0, #20]
 8005f86:	6103      	str	r3, [r0, #16]
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	bf00      	nop
 8005f8c:	08007798 	.word	0x08007798
 8005f90:	08007888 	.word	0x08007888

08005f94 <__multiply>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	4691      	mov	r9, r2
 8005f9a:	690a      	ldr	r2, [r1, #16]
 8005f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	bfb8      	it	lt
 8005fa4:	460b      	movlt	r3, r1
 8005fa6:	460c      	mov	r4, r1
 8005fa8:	bfbc      	itt	lt
 8005faa:	464c      	movlt	r4, r9
 8005fac:	4699      	movlt	r9, r3
 8005fae:	6927      	ldr	r7, [r4, #16]
 8005fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fb4:	68a3      	ldr	r3, [r4, #8]
 8005fb6:	6861      	ldr	r1, [r4, #4]
 8005fb8:	eb07 060a 	add.w	r6, r7, sl
 8005fbc:	42b3      	cmp	r3, r6
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	bfb8      	it	lt
 8005fc2:	3101      	addlt	r1, #1
 8005fc4:	f7ff fe8e 	bl	8005ce4 <_Balloc>
 8005fc8:	b930      	cbnz	r0, 8005fd8 <__multiply+0x44>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	4b44      	ldr	r3, [pc, #272]	; (80060e0 <__multiply+0x14c>)
 8005fce:	4845      	ldr	r0, [pc, #276]	; (80060e4 <__multiply+0x150>)
 8005fd0:	f240 115d 	movw	r1, #349	; 0x15d
 8005fd4:	f001 f844 	bl	8007060 <__assert_func>
 8005fd8:	f100 0514 	add.w	r5, r0, #20
 8005fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fe0:	462b      	mov	r3, r5
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4543      	cmp	r3, r8
 8005fe6:	d321      	bcc.n	800602c <__multiply+0x98>
 8005fe8:	f104 0314 	add.w	r3, r4, #20
 8005fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ff0:	f109 0314 	add.w	r3, r9, #20
 8005ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	1b3a      	subs	r2, r7, r4
 8005ffc:	3a15      	subs	r2, #21
 8005ffe:	f022 0203 	bic.w	r2, r2, #3
 8006002:	3204      	adds	r2, #4
 8006004:	f104 0115 	add.w	r1, r4, #21
 8006008:	428f      	cmp	r7, r1
 800600a:	bf38      	it	cc
 800600c:	2204      	movcc	r2, #4
 800600e:	9201      	str	r2, [sp, #4]
 8006010:	9a02      	ldr	r2, [sp, #8]
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d80c      	bhi.n	8006032 <__multiply+0x9e>
 8006018:	2e00      	cmp	r6, #0
 800601a:	dd03      	ble.n	8006024 <__multiply+0x90>
 800601c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05a      	beq.n	80060da <__multiply+0x146>
 8006024:	6106      	str	r6, [r0, #16]
 8006026:	b005      	add	sp, #20
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	f843 2b04 	str.w	r2, [r3], #4
 8006030:	e7d8      	b.n	8005fe4 <__multiply+0x50>
 8006032:	f8b3 a000 	ldrh.w	sl, [r3]
 8006036:	f1ba 0f00 	cmp.w	sl, #0
 800603a:	d024      	beq.n	8006086 <__multiply+0xf2>
 800603c:	f104 0e14 	add.w	lr, r4, #20
 8006040:	46a9      	mov	r9, r5
 8006042:	f04f 0c00 	mov.w	ip, #0
 8006046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800604a:	f8d9 1000 	ldr.w	r1, [r9]
 800604e:	fa1f fb82 	uxth.w	fp, r2
 8006052:	b289      	uxth	r1, r1
 8006054:	fb0a 110b 	mla	r1, sl, fp, r1
 8006058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800605c:	f8d9 2000 	ldr.w	r2, [r9]
 8006060:	4461      	add	r1, ip
 8006062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006066:	fb0a c20b 	mla	r2, sl, fp, ip
 800606a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800606e:	b289      	uxth	r1, r1
 8006070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006074:	4577      	cmp	r7, lr
 8006076:	f849 1b04 	str.w	r1, [r9], #4
 800607a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800607e:	d8e2      	bhi.n	8006046 <__multiply+0xb2>
 8006080:	9a01      	ldr	r2, [sp, #4]
 8006082:	f845 c002 	str.w	ip, [r5, r2]
 8006086:	9a03      	ldr	r2, [sp, #12]
 8006088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800608c:	3304      	adds	r3, #4
 800608e:	f1b9 0f00 	cmp.w	r9, #0
 8006092:	d020      	beq.n	80060d6 <__multiply+0x142>
 8006094:	6829      	ldr	r1, [r5, #0]
 8006096:	f104 0c14 	add.w	ip, r4, #20
 800609a:	46ae      	mov	lr, r5
 800609c:	f04f 0a00 	mov.w	sl, #0
 80060a0:	f8bc b000 	ldrh.w	fp, [ip]
 80060a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80060a8:	fb09 220b 	mla	r2, r9, fp, r2
 80060ac:	4492      	add	sl, r2
 80060ae:	b289      	uxth	r1, r1
 80060b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80060b4:	f84e 1b04 	str.w	r1, [lr], #4
 80060b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060bc:	f8be 1000 	ldrh.w	r1, [lr]
 80060c0:	0c12      	lsrs	r2, r2, #16
 80060c2:	fb09 1102 	mla	r1, r9, r2, r1
 80060c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80060ca:	4567      	cmp	r7, ip
 80060cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060d0:	d8e6      	bhi.n	80060a0 <__multiply+0x10c>
 80060d2:	9a01      	ldr	r2, [sp, #4]
 80060d4:	50a9      	str	r1, [r5, r2]
 80060d6:	3504      	adds	r5, #4
 80060d8:	e79a      	b.n	8006010 <__multiply+0x7c>
 80060da:	3e01      	subs	r6, #1
 80060dc:	e79c      	b.n	8006018 <__multiply+0x84>
 80060de:	bf00      	nop
 80060e0:	08007798 	.word	0x08007798
 80060e4:	08007888 	.word	0x08007888

080060e8 <__pow5mult>:
 80060e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ec:	4615      	mov	r5, r2
 80060ee:	f012 0203 	ands.w	r2, r2, #3
 80060f2:	4606      	mov	r6, r0
 80060f4:	460f      	mov	r7, r1
 80060f6:	d007      	beq.n	8006108 <__pow5mult+0x20>
 80060f8:	4c25      	ldr	r4, [pc, #148]	; (8006190 <__pow5mult+0xa8>)
 80060fa:	3a01      	subs	r2, #1
 80060fc:	2300      	movs	r3, #0
 80060fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006102:	f7ff fe51 	bl	8005da8 <__multadd>
 8006106:	4607      	mov	r7, r0
 8006108:	10ad      	asrs	r5, r5, #2
 800610a:	d03d      	beq.n	8006188 <__pow5mult+0xa0>
 800610c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800610e:	b97c      	cbnz	r4, 8006130 <__pow5mult+0x48>
 8006110:	2010      	movs	r0, #16
 8006112:	f7ff fdbf 	bl	8005c94 <malloc>
 8006116:	4602      	mov	r2, r0
 8006118:	6270      	str	r0, [r6, #36]	; 0x24
 800611a:	b928      	cbnz	r0, 8006128 <__pow5mult+0x40>
 800611c:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <__pow5mult+0xac>)
 800611e:	481e      	ldr	r0, [pc, #120]	; (8006198 <__pow5mult+0xb0>)
 8006120:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006124:	f000 ff9c 	bl	8007060 <__assert_func>
 8006128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800612c:	6004      	str	r4, [r0, #0]
 800612e:	60c4      	str	r4, [r0, #12]
 8006130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006138:	b94c      	cbnz	r4, 800614e <__pow5mult+0x66>
 800613a:	f240 2171 	movw	r1, #625	; 0x271
 800613e:	4630      	mov	r0, r6
 8006140:	f7ff ff12 	bl	8005f68 <__i2b>
 8006144:	2300      	movs	r3, #0
 8006146:	f8c8 0008 	str.w	r0, [r8, #8]
 800614a:	4604      	mov	r4, r0
 800614c:	6003      	str	r3, [r0, #0]
 800614e:	f04f 0900 	mov.w	r9, #0
 8006152:	07eb      	lsls	r3, r5, #31
 8006154:	d50a      	bpl.n	800616c <__pow5mult+0x84>
 8006156:	4639      	mov	r1, r7
 8006158:	4622      	mov	r2, r4
 800615a:	4630      	mov	r0, r6
 800615c:	f7ff ff1a 	bl	8005f94 <__multiply>
 8006160:	4639      	mov	r1, r7
 8006162:	4680      	mov	r8, r0
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff fdfd 	bl	8005d64 <_Bfree>
 800616a:	4647      	mov	r7, r8
 800616c:	106d      	asrs	r5, r5, #1
 800616e:	d00b      	beq.n	8006188 <__pow5mult+0xa0>
 8006170:	6820      	ldr	r0, [r4, #0]
 8006172:	b938      	cbnz	r0, 8006184 <__pow5mult+0x9c>
 8006174:	4622      	mov	r2, r4
 8006176:	4621      	mov	r1, r4
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff ff0b 	bl	8005f94 <__multiply>
 800617e:	6020      	str	r0, [r4, #0]
 8006180:	f8c0 9000 	str.w	r9, [r0]
 8006184:	4604      	mov	r4, r0
 8006186:	e7e4      	b.n	8006152 <__pow5mult+0x6a>
 8006188:	4638      	mov	r0, r7
 800618a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618e:	bf00      	nop
 8006190:	080079d8 	.word	0x080079d8
 8006194:	08007726 	.word	0x08007726
 8006198:	08007888 	.word	0x08007888

0800619c <__lshift>:
 800619c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a0:	460c      	mov	r4, r1
 80061a2:	6849      	ldr	r1, [r1, #4]
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	4607      	mov	r7, r0
 80061ae:	4691      	mov	r9, r2
 80061b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061b4:	f108 0601 	add.w	r6, r8, #1
 80061b8:	42b3      	cmp	r3, r6
 80061ba:	db0b      	blt.n	80061d4 <__lshift+0x38>
 80061bc:	4638      	mov	r0, r7
 80061be:	f7ff fd91 	bl	8005ce4 <_Balloc>
 80061c2:	4605      	mov	r5, r0
 80061c4:	b948      	cbnz	r0, 80061da <__lshift+0x3e>
 80061c6:	4602      	mov	r2, r0
 80061c8:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <__lshift+0xd8>)
 80061ca:	482b      	ldr	r0, [pc, #172]	; (8006278 <__lshift+0xdc>)
 80061cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061d0:	f000 ff46 	bl	8007060 <__assert_func>
 80061d4:	3101      	adds	r1, #1
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	e7ee      	b.n	80061b8 <__lshift+0x1c>
 80061da:	2300      	movs	r3, #0
 80061dc:	f100 0114 	add.w	r1, r0, #20
 80061e0:	f100 0210 	add.w	r2, r0, #16
 80061e4:	4618      	mov	r0, r3
 80061e6:	4553      	cmp	r3, sl
 80061e8:	db37      	blt.n	800625a <__lshift+0xbe>
 80061ea:	6920      	ldr	r0, [r4, #16]
 80061ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061f0:	f104 0314 	add.w	r3, r4, #20
 80061f4:	f019 091f 	ands.w	r9, r9, #31
 80061f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006200:	d02f      	beq.n	8006262 <__lshift+0xc6>
 8006202:	f1c9 0e20 	rsb	lr, r9, #32
 8006206:	468a      	mov	sl, r1
 8006208:	f04f 0c00 	mov.w	ip, #0
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	fa02 f209 	lsl.w	r2, r2, r9
 8006212:	ea42 020c 	orr.w	r2, r2, ip
 8006216:	f84a 2b04 	str.w	r2, [sl], #4
 800621a:	f853 2b04 	ldr.w	r2, [r3], #4
 800621e:	4298      	cmp	r0, r3
 8006220:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006224:	d8f2      	bhi.n	800620c <__lshift+0x70>
 8006226:	1b03      	subs	r3, r0, r4
 8006228:	3b15      	subs	r3, #21
 800622a:	f023 0303 	bic.w	r3, r3, #3
 800622e:	3304      	adds	r3, #4
 8006230:	f104 0215 	add.w	r2, r4, #21
 8006234:	4290      	cmp	r0, r2
 8006236:	bf38      	it	cc
 8006238:	2304      	movcc	r3, #4
 800623a:	f841 c003 	str.w	ip, [r1, r3]
 800623e:	f1bc 0f00 	cmp.w	ip, #0
 8006242:	d001      	beq.n	8006248 <__lshift+0xac>
 8006244:	f108 0602 	add.w	r6, r8, #2
 8006248:	3e01      	subs	r6, #1
 800624a:	4638      	mov	r0, r7
 800624c:	612e      	str	r6, [r5, #16]
 800624e:	4621      	mov	r1, r4
 8006250:	f7ff fd88 	bl	8005d64 <_Bfree>
 8006254:	4628      	mov	r0, r5
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	f842 0f04 	str.w	r0, [r2, #4]!
 800625e:	3301      	adds	r3, #1
 8006260:	e7c1      	b.n	80061e6 <__lshift+0x4a>
 8006262:	3904      	subs	r1, #4
 8006264:	f853 2b04 	ldr.w	r2, [r3], #4
 8006268:	f841 2f04 	str.w	r2, [r1, #4]!
 800626c:	4298      	cmp	r0, r3
 800626e:	d8f9      	bhi.n	8006264 <__lshift+0xc8>
 8006270:	e7ea      	b.n	8006248 <__lshift+0xac>
 8006272:	bf00      	nop
 8006274:	08007798 	.word	0x08007798
 8006278:	08007888 	.word	0x08007888

0800627c <__mcmp>:
 800627c:	b530      	push	{r4, r5, lr}
 800627e:	6902      	ldr	r2, [r0, #16]
 8006280:	690c      	ldr	r4, [r1, #16]
 8006282:	1b12      	subs	r2, r2, r4
 8006284:	d10e      	bne.n	80062a4 <__mcmp+0x28>
 8006286:	f100 0314 	add.w	r3, r0, #20
 800628a:	3114      	adds	r1, #20
 800628c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800629c:	42a5      	cmp	r5, r4
 800629e:	d003      	beq.n	80062a8 <__mcmp+0x2c>
 80062a0:	d305      	bcc.n	80062ae <__mcmp+0x32>
 80062a2:	2201      	movs	r2, #1
 80062a4:	4610      	mov	r0, r2
 80062a6:	bd30      	pop	{r4, r5, pc}
 80062a8:	4283      	cmp	r3, r0
 80062aa:	d3f3      	bcc.n	8006294 <__mcmp+0x18>
 80062ac:	e7fa      	b.n	80062a4 <__mcmp+0x28>
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	e7f7      	b.n	80062a4 <__mcmp+0x28>

080062b4 <__mdiff>:
 80062b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	460c      	mov	r4, r1
 80062ba:	4606      	mov	r6, r0
 80062bc:	4611      	mov	r1, r2
 80062be:	4620      	mov	r0, r4
 80062c0:	4690      	mov	r8, r2
 80062c2:	f7ff ffdb 	bl	800627c <__mcmp>
 80062c6:	1e05      	subs	r5, r0, #0
 80062c8:	d110      	bne.n	80062ec <__mdiff+0x38>
 80062ca:	4629      	mov	r1, r5
 80062cc:	4630      	mov	r0, r6
 80062ce:	f7ff fd09 	bl	8005ce4 <_Balloc>
 80062d2:	b930      	cbnz	r0, 80062e2 <__mdiff+0x2e>
 80062d4:	4b3a      	ldr	r3, [pc, #232]	; (80063c0 <__mdiff+0x10c>)
 80062d6:	4602      	mov	r2, r0
 80062d8:	f240 2132 	movw	r1, #562	; 0x232
 80062dc:	4839      	ldr	r0, [pc, #228]	; (80063c4 <__mdiff+0x110>)
 80062de:	f000 febf 	bl	8007060 <__assert_func>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	bfa4      	itt	ge
 80062ee:	4643      	movge	r3, r8
 80062f0:	46a0      	movge	r8, r4
 80062f2:	4630      	mov	r0, r6
 80062f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062f8:	bfa6      	itte	ge
 80062fa:	461c      	movge	r4, r3
 80062fc:	2500      	movge	r5, #0
 80062fe:	2501      	movlt	r5, #1
 8006300:	f7ff fcf0 	bl	8005ce4 <_Balloc>
 8006304:	b920      	cbnz	r0, 8006310 <__mdiff+0x5c>
 8006306:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <__mdiff+0x10c>)
 8006308:	4602      	mov	r2, r0
 800630a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800630e:	e7e5      	b.n	80062dc <__mdiff+0x28>
 8006310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006314:	6926      	ldr	r6, [r4, #16]
 8006316:	60c5      	str	r5, [r0, #12]
 8006318:	f104 0914 	add.w	r9, r4, #20
 800631c:	f108 0514 	add.w	r5, r8, #20
 8006320:	f100 0e14 	add.w	lr, r0, #20
 8006324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800632c:	f108 0210 	add.w	r2, r8, #16
 8006330:	46f2      	mov	sl, lr
 8006332:	2100      	movs	r1, #0
 8006334:	f859 3b04 	ldr.w	r3, [r9], #4
 8006338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800633c:	fa1f f883 	uxth.w	r8, r3
 8006340:	fa11 f18b 	uxtah	r1, r1, fp
 8006344:	0c1b      	lsrs	r3, r3, #16
 8006346:	eba1 0808 	sub.w	r8, r1, r8
 800634a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800634e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006352:	fa1f f888 	uxth.w	r8, r8
 8006356:	1419      	asrs	r1, r3, #16
 8006358:	454e      	cmp	r6, r9
 800635a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800635e:	f84a 3b04 	str.w	r3, [sl], #4
 8006362:	d8e7      	bhi.n	8006334 <__mdiff+0x80>
 8006364:	1b33      	subs	r3, r6, r4
 8006366:	3b15      	subs	r3, #21
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	3304      	adds	r3, #4
 800636e:	3415      	adds	r4, #21
 8006370:	42a6      	cmp	r6, r4
 8006372:	bf38      	it	cc
 8006374:	2304      	movcc	r3, #4
 8006376:	441d      	add	r5, r3
 8006378:	4473      	add	r3, lr
 800637a:	469e      	mov	lr, r3
 800637c:	462e      	mov	r6, r5
 800637e:	4566      	cmp	r6, ip
 8006380:	d30e      	bcc.n	80063a0 <__mdiff+0xec>
 8006382:	f10c 0203 	add.w	r2, ip, #3
 8006386:	1b52      	subs	r2, r2, r5
 8006388:	f022 0203 	bic.w	r2, r2, #3
 800638c:	3d03      	subs	r5, #3
 800638e:	45ac      	cmp	ip, r5
 8006390:	bf38      	it	cc
 8006392:	2200      	movcc	r2, #0
 8006394:	441a      	add	r2, r3
 8006396:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800639a:	b17b      	cbz	r3, 80063bc <__mdiff+0x108>
 800639c:	6107      	str	r7, [r0, #16]
 800639e:	e7a3      	b.n	80062e8 <__mdiff+0x34>
 80063a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80063a4:	fa11 f288 	uxtah	r2, r1, r8
 80063a8:	1414      	asrs	r4, r2, #16
 80063aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80063ae:	b292      	uxth	r2, r2
 80063b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80063b4:	f84e 2b04 	str.w	r2, [lr], #4
 80063b8:	1421      	asrs	r1, r4, #16
 80063ba:	e7e0      	b.n	800637e <__mdiff+0xca>
 80063bc:	3f01      	subs	r7, #1
 80063be:	e7ea      	b.n	8006396 <__mdiff+0xe2>
 80063c0:	08007798 	.word	0x08007798
 80063c4:	08007888 	.word	0x08007888

080063c8 <__ulp>:
 80063c8:	b082      	sub	sp, #8
 80063ca:	ed8d 0b00 	vstr	d0, [sp]
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	4912      	ldr	r1, [pc, #72]	; (800641c <__ulp+0x54>)
 80063d2:	4019      	ands	r1, r3
 80063d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80063d8:	2900      	cmp	r1, #0
 80063da:	dd05      	ble.n	80063e8 <__ulp+0x20>
 80063dc:	2200      	movs	r2, #0
 80063de:	460b      	mov	r3, r1
 80063e0:	ec43 2b10 	vmov	d0, r2, r3
 80063e4:	b002      	add	sp, #8
 80063e6:	4770      	bx	lr
 80063e8:	4249      	negs	r1, r1
 80063ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80063ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	da04      	bge.n	8006406 <__ulp+0x3e>
 80063fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006400:	fa41 f300 	asr.w	r3, r1, r0
 8006404:	e7ec      	b.n	80063e0 <__ulp+0x18>
 8006406:	f1a0 0114 	sub.w	r1, r0, #20
 800640a:	291e      	cmp	r1, #30
 800640c:	bfda      	itte	le
 800640e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006412:	fa20 f101 	lsrle.w	r1, r0, r1
 8006416:	2101      	movgt	r1, #1
 8006418:	460a      	mov	r2, r1
 800641a:	e7e1      	b.n	80063e0 <__ulp+0x18>
 800641c:	7ff00000 	.word	0x7ff00000

08006420 <__b2d>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	6905      	ldr	r5, [r0, #16]
 8006424:	f100 0714 	add.w	r7, r0, #20
 8006428:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800642c:	1f2e      	subs	r6, r5, #4
 800642e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006432:	4620      	mov	r0, r4
 8006434:	f7ff fd48 	bl	8005ec8 <__hi0bits>
 8006438:	f1c0 0320 	rsb	r3, r0, #32
 800643c:	280a      	cmp	r0, #10
 800643e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80064bc <__b2d+0x9c>
 8006442:	600b      	str	r3, [r1, #0]
 8006444:	dc14      	bgt.n	8006470 <__b2d+0x50>
 8006446:	f1c0 0e0b 	rsb	lr, r0, #11
 800644a:	fa24 f10e 	lsr.w	r1, r4, lr
 800644e:	42b7      	cmp	r7, r6
 8006450:	ea41 030c 	orr.w	r3, r1, ip
 8006454:	bf34      	ite	cc
 8006456:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800645a:	2100      	movcs	r1, #0
 800645c:	3015      	adds	r0, #21
 800645e:	fa04 f000 	lsl.w	r0, r4, r0
 8006462:	fa21 f10e 	lsr.w	r1, r1, lr
 8006466:	ea40 0201 	orr.w	r2, r0, r1
 800646a:	ec43 2b10 	vmov	d0, r2, r3
 800646e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006470:	42b7      	cmp	r7, r6
 8006472:	bf3a      	itte	cc
 8006474:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006478:	f1a5 0608 	subcc.w	r6, r5, #8
 800647c:	2100      	movcs	r1, #0
 800647e:	380b      	subs	r0, #11
 8006480:	d017      	beq.n	80064b2 <__b2d+0x92>
 8006482:	f1c0 0c20 	rsb	ip, r0, #32
 8006486:	fa04 f500 	lsl.w	r5, r4, r0
 800648a:	42be      	cmp	r6, r7
 800648c:	fa21 f40c 	lsr.w	r4, r1, ip
 8006490:	ea45 0504 	orr.w	r5, r5, r4
 8006494:	bf8c      	ite	hi
 8006496:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800649a:	2400      	movls	r4, #0
 800649c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80064a0:	fa01 f000 	lsl.w	r0, r1, r0
 80064a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80064a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80064ac:	ea40 0204 	orr.w	r2, r0, r4
 80064b0:	e7db      	b.n	800646a <__b2d+0x4a>
 80064b2:	ea44 030c 	orr.w	r3, r4, ip
 80064b6:	460a      	mov	r2, r1
 80064b8:	e7d7      	b.n	800646a <__b2d+0x4a>
 80064ba:	bf00      	nop
 80064bc:	3ff00000 	.word	0x3ff00000

080064c0 <__d2b>:
 80064c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4689      	mov	r9, r1
 80064c6:	2101      	movs	r1, #1
 80064c8:	ec57 6b10 	vmov	r6, r7, d0
 80064cc:	4690      	mov	r8, r2
 80064ce:	f7ff fc09 	bl	8005ce4 <_Balloc>
 80064d2:	4604      	mov	r4, r0
 80064d4:	b930      	cbnz	r0, 80064e4 <__d2b+0x24>
 80064d6:	4602      	mov	r2, r0
 80064d8:	4b25      	ldr	r3, [pc, #148]	; (8006570 <__d2b+0xb0>)
 80064da:	4826      	ldr	r0, [pc, #152]	; (8006574 <__d2b+0xb4>)
 80064dc:	f240 310a 	movw	r1, #778	; 0x30a
 80064e0:	f000 fdbe 	bl	8007060 <__assert_func>
 80064e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80064e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064ec:	bb35      	cbnz	r5, 800653c <__d2b+0x7c>
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	d028      	beq.n	8006546 <__d2b+0x86>
 80064f4:	4668      	mov	r0, sp
 80064f6:	9600      	str	r6, [sp, #0]
 80064f8:	f7ff fd06 	bl	8005f08 <__lo0bits>
 80064fc:	9900      	ldr	r1, [sp, #0]
 80064fe:	b300      	cbz	r0, 8006542 <__d2b+0x82>
 8006500:	9a01      	ldr	r2, [sp, #4]
 8006502:	f1c0 0320 	rsb	r3, r0, #32
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	430b      	orrs	r3, r1
 800650c:	40c2      	lsrs	r2, r0
 800650e:	6163      	str	r3, [r4, #20]
 8006510:	9201      	str	r2, [sp, #4]
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	61a3      	str	r3, [r4, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	bf14      	ite	ne
 800651a:	2202      	movne	r2, #2
 800651c:	2201      	moveq	r2, #1
 800651e:	6122      	str	r2, [r4, #16]
 8006520:	b1d5      	cbz	r5, 8006558 <__d2b+0x98>
 8006522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006526:	4405      	add	r5, r0
 8006528:	f8c9 5000 	str.w	r5, [r9]
 800652c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006530:	f8c8 0000 	str.w	r0, [r8]
 8006534:	4620      	mov	r0, r4
 8006536:	b003      	add	sp, #12
 8006538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800653c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006540:	e7d5      	b.n	80064ee <__d2b+0x2e>
 8006542:	6161      	str	r1, [r4, #20]
 8006544:	e7e5      	b.n	8006512 <__d2b+0x52>
 8006546:	a801      	add	r0, sp, #4
 8006548:	f7ff fcde 	bl	8005f08 <__lo0bits>
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	6163      	str	r3, [r4, #20]
 8006550:	2201      	movs	r2, #1
 8006552:	6122      	str	r2, [r4, #16]
 8006554:	3020      	adds	r0, #32
 8006556:	e7e3      	b.n	8006520 <__d2b+0x60>
 8006558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800655c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006560:	f8c9 0000 	str.w	r0, [r9]
 8006564:	6918      	ldr	r0, [r3, #16]
 8006566:	f7ff fcaf 	bl	8005ec8 <__hi0bits>
 800656a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800656e:	e7df      	b.n	8006530 <__d2b+0x70>
 8006570:	08007798 	.word	0x08007798
 8006574:	08007888 	.word	0x08007888

08006578 <__ratio>:
 8006578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	4688      	mov	r8, r1
 800657e:	4669      	mov	r1, sp
 8006580:	4681      	mov	r9, r0
 8006582:	f7ff ff4d 	bl	8006420 <__b2d>
 8006586:	a901      	add	r1, sp, #4
 8006588:	4640      	mov	r0, r8
 800658a:	ec55 4b10 	vmov	r4, r5, d0
 800658e:	f7ff ff47 	bl	8006420 <__b2d>
 8006592:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006596:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800659a:	eba3 0c02 	sub.w	ip, r3, r2
 800659e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80065a2:	1a9b      	subs	r3, r3, r2
 80065a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80065a8:	ec51 0b10 	vmov	r0, r1, d0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bfd6      	itet	le
 80065b0:	460a      	movle	r2, r1
 80065b2:	462a      	movgt	r2, r5
 80065b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065b8:	468b      	mov	fp, r1
 80065ba:	462f      	mov	r7, r5
 80065bc:	bfd4      	ite	le
 80065be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80065c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80065c6:	4620      	mov	r0, r4
 80065c8:	ee10 2a10 	vmov	r2, s0
 80065cc:	465b      	mov	r3, fp
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7fa f93c 	bl	800084c <__aeabi_ddiv>
 80065d4:	ec41 0b10 	vmov	d0, r0, r1
 80065d8:	b003      	add	sp, #12
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065de <__copybits>:
 80065de:	3901      	subs	r1, #1
 80065e0:	b570      	push	{r4, r5, r6, lr}
 80065e2:	1149      	asrs	r1, r1, #5
 80065e4:	6914      	ldr	r4, [r2, #16]
 80065e6:	3101      	adds	r1, #1
 80065e8:	f102 0314 	add.w	r3, r2, #20
 80065ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065f4:	1f05      	subs	r5, r0, #4
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	d30c      	bcc.n	8006614 <__copybits+0x36>
 80065fa:	1aa3      	subs	r3, r4, r2
 80065fc:	3b11      	subs	r3, #17
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	3211      	adds	r2, #17
 8006604:	42a2      	cmp	r2, r4
 8006606:	bf88      	it	hi
 8006608:	2300      	movhi	r3, #0
 800660a:	4418      	add	r0, r3
 800660c:	2300      	movs	r3, #0
 800660e:	4288      	cmp	r0, r1
 8006610:	d305      	bcc.n	800661e <__copybits+0x40>
 8006612:	bd70      	pop	{r4, r5, r6, pc}
 8006614:	f853 6b04 	ldr.w	r6, [r3], #4
 8006618:	f845 6f04 	str.w	r6, [r5, #4]!
 800661c:	e7eb      	b.n	80065f6 <__copybits+0x18>
 800661e:	f840 3b04 	str.w	r3, [r0], #4
 8006622:	e7f4      	b.n	800660e <__copybits+0x30>

08006624 <__any_on>:
 8006624:	f100 0214 	add.w	r2, r0, #20
 8006628:	6900      	ldr	r0, [r0, #16]
 800662a:	114b      	asrs	r3, r1, #5
 800662c:	4298      	cmp	r0, r3
 800662e:	b510      	push	{r4, lr}
 8006630:	db11      	blt.n	8006656 <__any_on+0x32>
 8006632:	dd0a      	ble.n	800664a <__any_on+0x26>
 8006634:	f011 011f 	ands.w	r1, r1, #31
 8006638:	d007      	beq.n	800664a <__any_on+0x26>
 800663a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800663e:	fa24 f001 	lsr.w	r0, r4, r1
 8006642:	fa00 f101 	lsl.w	r1, r0, r1
 8006646:	428c      	cmp	r4, r1
 8006648:	d10b      	bne.n	8006662 <__any_on+0x3e>
 800664a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800664e:	4293      	cmp	r3, r2
 8006650:	d803      	bhi.n	800665a <__any_on+0x36>
 8006652:	2000      	movs	r0, #0
 8006654:	bd10      	pop	{r4, pc}
 8006656:	4603      	mov	r3, r0
 8006658:	e7f7      	b.n	800664a <__any_on+0x26>
 800665a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800665e:	2900      	cmp	r1, #0
 8006660:	d0f5      	beq.n	800664e <__any_on+0x2a>
 8006662:	2001      	movs	r0, #1
 8006664:	e7f6      	b.n	8006654 <__any_on+0x30>

08006666 <_calloc_r>:
 8006666:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006668:	fba1 2402 	umull	r2, r4, r1, r2
 800666c:	b94c      	cbnz	r4, 8006682 <_calloc_r+0x1c>
 800666e:	4611      	mov	r1, r2
 8006670:	9201      	str	r2, [sp, #4]
 8006672:	f000 f87b 	bl	800676c <_malloc_r>
 8006676:	9a01      	ldr	r2, [sp, #4]
 8006678:	4605      	mov	r5, r0
 800667a:	b930      	cbnz	r0, 800668a <_calloc_r+0x24>
 800667c:	4628      	mov	r0, r5
 800667e:	b003      	add	sp, #12
 8006680:	bd30      	pop	{r4, r5, pc}
 8006682:	220c      	movs	r2, #12
 8006684:	6002      	str	r2, [r0, #0]
 8006686:	2500      	movs	r5, #0
 8006688:	e7f8      	b.n	800667c <_calloc_r+0x16>
 800668a:	4621      	mov	r1, r4
 800668c:	f7fc faae 	bl	8002bec <memset>
 8006690:	e7f4      	b.n	800667c <_calloc_r+0x16>
	...

08006694 <_free_r>:
 8006694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006696:	2900      	cmp	r1, #0
 8006698:	d044      	beq.n	8006724 <_free_r+0x90>
 800669a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800669e:	9001      	str	r0, [sp, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f1a1 0404 	sub.w	r4, r1, #4
 80066a6:	bfb8      	it	lt
 80066a8:	18e4      	addlt	r4, r4, r3
 80066aa:	f000 fe6d 	bl	8007388 <__malloc_lock>
 80066ae:	4a1e      	ldr	r2, [pc, #120]	; (8006728 <_free_r+0x94>)
 80066b0:	9801      	ldr	r0, [sp, #4]
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	b933      	cbnz	r3, 80066c4 <_free_r+0x30>
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	6014      	str	r4, [r2, #0]
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80066c0:	f000 be68 	b.w	8007394 <__malloc_unlock>
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d908      	bls.n	80066da <_free_r+0x46>
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1961      	adds	r1, r4, r5
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf01      	itttt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	1949      	addeq	r1, r1, r5
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	e7ed      	b.n	80066b6 <_free_r+0x22>
 80066da:	461a      	mov	r2, r3
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	b10b      	cbz	r3, 80066e4 <_free_r+0x50>
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d9fa      	bls.n	80066da <_free_r+0x46>
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	1855      	adds	r5, r2, r1
 80066e8:	42a5      	cmp	r5, r4
 80066ea:	d10b      	bne.n	8006704 <_free_r+0x70>
 80066ec:	6824      	ldr	r4, [r4, #0]
 80066ee:	4421      	add	r1, r4
 80066f0:	1854      	adds	r4, r2, r1
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	d1e0      	bne.n	80066ba <_free_r+0x26>
 80066f8:	681c      	ldr	r4, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	6053      	str	r3, [r2, #4]
 80066fe:	4421      	add	r1, r4
 8006700:	6011      	str	r1, [r2, #0]
 8006702:	e7da      	b.n	80066ba <_free_r+0x26>
 8006704:	d902      	bls.n	800670c <_free_r+0x78>
 8006706:	230c      	movs	r3, #12
 8006708:	6003      	str	r3, [r0, #0]
 800670a:	e7d6      	b.n	80066ba <_free_r+0x26>
 800670c:	6825      	ldr	r5, [r4, #0]
 800670e:	1961      	adds	r1, r4, r5
 8006710:	428b      	cmp	r3, r1
 8006712:	bf04      	itt	eq
 8006714:	6819      	ldreq	r1, [r3, #0]
 8006716:	685b      	ldreq	r3, [r3, #4]
 8006718:	6063      	str	r3, [r4, #4]
 800671a:	bf04      	itt	eq
 800671c:	1949      	addeq	r1, r1, r5
 800671e:	6021      	streq	r1, [r4, #0]
 8006720:	6054      	str	r4, [r2, #4]
 8006722:	e7ca      	b.n	80066ba <_free_r+0x26>
 8006724:	b003      	add	sp, #12
 8006726:	bd30      	pop	{r4, r5, pc}
 8006728:	2000025c 	.word	0x2000025c

0800672c <sbrk_aligned>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	4e0e      	ldr	r6, [pc, #56]	; (8006768 <sbrk_aligned+0x3c>)
 8006730:	460c      	mov	r4, r1
 8006732:	6831      	ldr	r1, [r6, #0]
 8006734:	4605      	mov	r5, r0
 8006736:	b911      	cbnz	r1, 800673e <sbrk_aligned+0x12>
 8006738:	f000 fb4a 	bl	8006dd0 <_sbrk_r>
 800673c:	6030      	str	r0, [r6, #0]
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f000 fb45 	bl	8006dd0 <_sbrk_r>
 8006746:	1c43      	adds	r3, r0, #1
 8006748:	d00a      	beq.n	8006760 <sbrk_aligned+0x34>
 800674a:	1cc4      	adds	r4, r0, #3
 800674c:	f024 0403 	bic.w	r4, r4, #3
 8006750:	42a0      	cmp	r0, r4
 8006752:	d007      	beq.n	8006764 <sbrk_aligned+0x38>
 8006754:	1a21      	subs	r1, r4, r0
 8006756:	4628      	mov	r0, r5
 8006758:	f000 fb3a 	bl	8006dd0 <_sbrk_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d101      	bne.n	8006764 <sbrk_aligned+0x38>
 8006760:	f04f 34ff 	mov.w	r4, #4294967295
 8006764:	4620      	mov	r0, r4
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	20000260 	.word	0x20000260

0800676c <_malloc_r>:
 800676c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006770:	1ccd      	adds	r5, r1, #3
 8006772:	f025 0503 	bic.w	r5, r5, #3
 8006776:	3508      	adds	r5, #8
 8006778:	2d0c      	cmp	r5, #12
 800677a:	bf38      	it	cc
 800677c:	250c      	movcc	r5, #12
 800677e:	2d00      	cmp	r5, #0
 8006780:	4607      	mov	r7, r0
 8006782:	db01      	blt.n	8006788 <_malloc_r+0x1c>
 8006784:	42a9      	cmp	r1, r5
 8006786:	d905      	bls.n	8006794 <_malloc_r+0x28>
 8006788:	230c      	movs	r3, #12
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	2600      	movs	r6, #0
 800678e:	4630      	mov	r0, r6
 8006790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006794:	4e2e      	ldr	r6, [pc, #184]	; (8006850 <_malloc_r+0xe4>)
 8006796:	f000 fdf7 	bl	8007388 <__malloc_lock>
 800679a:	6833      	ldr	r3, [r6, #0]
 800679c:	461c      	mov	r4, r3
 800679e:	bb34      	cbnz	r4, 80067ee <_malloc_r+0x82>
 80067a0:	4629      	mov	r1, r5
 80067a2:	4638      	mov	r0, r7
 80067a4:	f7ff ffc2 	bl	800672c <sbrk_aligned>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	4604      	mov	r4, r0
 80067ac:	d14d      	bne.n	800684a <_malloc_r+0xde>
 80067ae:	6834      	ldr	r4, [r6, #0]
 80067b0:	4626      	mov	r6, r4
 80067b2:	2e00      	cmp	r6, #0
 80067b4:	d140      	bne.n	8006838 <_malloc_r+0xcc>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	4631      	mov	r1, r6
 80067ba:	4638      	mov	r0, r7
 80067bc:	eb04 0803 	add.w	r8, r4, r3
 80067c0:	f000 fb06 	bl	8006dd0 <_sbrk_r>
 80067c4:	4580      	cmp	r8, r0
 80067c6:	d13a      	bne.n	800683e <_malloc_r+0xd2>
 80067c8:	6821      	ldr	r1, [r4, #0]
 80067ca:	3503      	adds	r5, #3
 80067cc:	1a6d      	subs	r5, r5, r1
 80067ce:	f025 0503 	bic.w	r5, r5, #3
 80067d2:	3508      	adds	r5, #8
 80067d4:	2d0c      	cmp	r5, #12
 80067d6:	bf38      	it	cc
 80067d8:	250c      	movcc	r5, #12
 80067da:	4629      	mov	r1, r5
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff ffa5 	bl	800672c <sbrk_aligned>
 80067e2:	3001      	adds	r0, #1
 80067e4:	d02b      	beq.n	800683e <_malloc_r+0xd2>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	442b      	add	r3, r5
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	e00e      	b.n	800680c <_malloc_r+0xa0>
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	1b52      	subs	r2, r2, r5
 80067f2:	d41e      	bmi.n	8006832 <_malloc_r+0xc6>
 80067f4:	2a0b      	cmp	r2, #11
 80067f6:	d916      	bls.n	8006826 <_malloc_r+0xba>
 80067f8:	1961      	adds	r1, r4, r5
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	bf18      	it	ne
 8006800:	6059      	strne	r1, [r3, #4]
 8006802:	6863      	ldr	r3, [r4, #4]
 8006804:	bf08      	it	eq
 8006806:	6031      	streq	r1, [r6, #0]
 8006808:	5162      	str	r2, [r4, r5]
 800680a:	604b      	str	r3, [r1, #4]
 800680c:	4638      	mov	r0, r7
 800680e:	f104 060b 	add.w	r6, r4, #11
 8006812:	f000 fdbf 	bl	8007394 <__malloc_unlock>
 8006816:	f026 0607 	bic.w	r6, r6, #7
 800681a:	1d23      	adds	r3, r4, #4
 800681c:	1af2      	subs	r2, r6, r3
 800681e:	d0b6      	beq.n	800678e <_malloc_r+0x22>
 8006820:	1b9b      	subs	r3, r3, r6
 8006822:	50a3      	str	r3, [r4, r2]
 8006824:	e7b3      	b.n	800678e <_malloc_r+0x22>
 8006826:	6862      	ldr	r2, [r4, #4]
 8006828:	42a3      	cmp	r3, r4
 800682a:	bf0c      	ite	eq
 800682c:	6032      	streq	r2, [r6, #0]
 800682e:	605a      	strne	r2, [r3, #4]
 8006830:	e7ec      	b.n	800680c <_malloc_r+0xa0>
 8006832:	4623      	mov	r3, r4
 8006834:	6864      	ldr	r4, [r4, #4]
 8006836:	e7b2      	b.n	800679e <_malloc_r+0x32>
 8006838:	4634      	mov	r4, r6
 800683a:	6876      	ldr	r6, [r6, #4]
 800683c:	e7b9      	b.n	80067b2 <_malloc_r+0x46>
 800683e:	230c      	movs	r3, #12
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4638      	mov	r0, r7
 8006844:	f000 fda6 	bl	8007394 <__malloc_unlock>
 8006848:	e7a1      	b.n	800678e <_malloc_r+0x22>
 800684a:	6025      	str	r5, [r4, #0]
 800684c:	e7de      	b.n	800680c <_malloc_r+0xa0>
 800684e:	bf00      	nop
 8006850:	2000025c 	.word	0x2000025c

08006854 <__ssputs_r>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	688e      	ldr	r6, [r1, #8]
 800685a:	429e      	cmp	r6, r3
 800685c:	4682      	mov	sl, r0
 800685e:	460c      	mov	r4, r1
 8006860:	4690      	mov	r8, r2
 8006862:	461f      	mov	r7, r3
 8006864:	d838      	bhi.n	80068d8 <__ssputs_r+0x84>
 8006866:	898a      	ldrh	r2, [r1, #12]
 8006868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800686c:	d032      	beq.n	80068d4 <__ssputs_r+0x80>
 800686e:	6825      	ldr	r5, [r4, #0]
 8006870:	6909      	ldr	r1, [r1, #16]
 8006872:	eba5 0901 	sub.w	r9, r5, r1
 8006876:	6965      	ldr	r5, [r4, #20]
 8006878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800687c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006880:	3301      	adds	r3, #1
 8006882:	444b      	add	r3, r9
 8006884:	106d      	asrs	r5, r5, #1
 8006886:	429d      	cmp	r5, r3
 8006888:	bf38      	it	cc
 800688a:	461d      	movcc	r5, r3
 800688c:	0553      	lsls	r3, r2, #21
 800688e:	d531      	bpl.n	80068f4 <__ssputs_r+0xa0>
 8006890:	4629      	mov	r1, r5
 8006892:	f7ff ff6b 	bl	800676c <_malloc_r>
 8006896:	4606      	mov	r6, r0
 8006898:	b950      	cbnz	r0, 80068b0 <__ssputs_r+0x5c>
 800689a:	230c      	movs	r3, #12
 800689c:	f8ca 3000 	str.w	r3, [sl]
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a6:	81a3      	strh	r3, [r4, #12]
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b0:	6921      	ldr	r1, [r4, #16]
 80068b2:	464a      	mov	r2, r9
 80068b4:	f7ff fa08 	bl	8005cc8 <memcpy>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	6126      	str	r6, [r4, #16]
 80068c6:	6165      	str	r5, [r4, #20]
 80068c8:	444e      	add	r6, r9
 80068ca:	eba5 0509 	sub.w	r5, r5, r9
 80068ce:	6026      	str	r6, [r4, #0]
 80068d0:	60a5      	str	r5, [r4, #8]
 80068d2:	463e      	mov	r6, r7
 80068d4:	42be      	cmp	r6, r7
 80068d6:	d900      	bls.n	80068da <__ssputs_r+0x86>
 80068d8:	463e      	mov	r6, r7
 80068da:	6820      	ldr	r0, [r4, #0]
 80068dc:	4632      	mov	r2, r6
 80068de:	4641      	mov	r1, r8
 80068e0:	f000 fd38 	bl	8007354 <memmove>
 80068e4:	68a3      	ldr	r3, [r4, #8]
 80068e6:	1b9b      	subs	r3, r3, r6
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	4433      	add	r3, r6
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	2000      	movs	r0, #0
 80068f2:	e7db      	b.n	80068ac <__ssputs_r+0x58>
 80068f4:	462a      	mov	r2, r5
 80068f6:	f000 fd53 	bl	80073a0 <_realloc_r>
 80068fa:	4606      	mov	r6, r0
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d1e1      	bne.n	80068c4 <__ssputs_r+0x70>
 8006900:	6921      	ldr	r1, [r4, #16]
 8006902:	4650      	mov	r0, sl
 8006904:	f7ff fec6 	bl	8006694 <_free_r>
 8006908:	e7c7      	b.n	800689a <__ssputs_r+0x46>
	...

0800690c <_svfiprintf_r>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	4698      	mov	r8, r3
 8006912:	898b      	ldrh	r3, [r1, #12]
 8006914:	061b      	lsls	r3, r3, #24
 8006916:	b09d      	sub	sp, #116	; 0x74
 8006918:	4607      	mov	r7, r0
 800691a:	460d      	mov	r5, r1
 800691c:	4614      	mov	r4, r2
 800691e:	d50e      	bpl.n	800693e <_svfiprintf_r+0x32>
 8006920:	690b      	ldr	r3, [r1, #16]
 8006922:	b963      	cbnz	r3, 800693e <_svfiprintf_r+0x32>
 8006924:	2140      	movs	r1, #64	; 0x40
 8006926:	f7ff ff21 	bl	800676c <_malloc_r>
 800692a:	6028      	str	r0, [r5, #0]
 800692c:	6128      	str	r0, [r5, #16]
 800692e:	b920      	cbnz	r0, 800693a <_svfiprintf_r+0x2e>
 8006930:	230c      	movs	r3, #12
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	f04f 30ff 	mov.w	r0, #4294967295
 8006938:	e0d1      	b.n	8006ade <_svfiprintf_r+0x1d2>
 800693a:	2340      	movs	r3, #64	; 0x40
 800693c:	616b      	str	r3, [r5, #20]
 800693e:	2300      	movs	r3, #0
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	2320      	movs	r3, #32
 8006944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006948:	f8cd 800c 	str.w	r8, [sp, #12]
 800694c:	2330      	movs	r3, #48	; 0x30
 800694e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006af8 <_svfiprintf_r+0x1ec>
 8006952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006956:	f04f 0901 	mov.w	r9, #1
 800695a:	4623      	mov	r3, r4
 800695c:	469a      	mov	sl, r3
 800695e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006962:	b10a      	cbz	r2, 8006968 <_svfiprintf_r+0x5c>
 8006964:	2a25      	cmp	r2, #37	; 0x25
 8006966:	d1f9      	bne.n	800695c <_svfiprintf_r+0x50>
 8006968:	ebba 0b04 	subs.w	fp, sl, r4
 800696c:	d00b      	beq.n	8006986 <_svfiprintf_r+0x7a>
 800696e:	465b      	mov	r3, fp
 8006970:	4622      	mov	r2, r4
 8006972:	4629      	mov	r1, r5
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff6d 	bl	8006854 <__ssputs_r>
 800697a:	3001      	adds	r0, #1
 800697c:	f000 80aa 	beq.w	8006ad4 <_svfiprintf_r+0x1c8>
 8006980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006982:	445a      	add	r2, fp
 8006984:	9209      	str	r2, [sp, #36]	; 0x24
 8006986:	f89a 3000 	ldrb.w	r3, [sl]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 80a2 	beq.w	8006ad4 <_svfiprintf_r+0x1c8>
 8006990:	2300      	movs	r3, #0
 8006992:	f04f 32ff 	mov.w	r2, #4294967295
 8006996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800699a:	f10a 0a01 	add.w	sl, sl, #1
 800699e:	9304      	str	r3, [sp, #16]
 80069a0:	9307      	str	r3, [sp, #28]
 80069a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069a6:	931a      	str	r3, [sp, #104]	; 0x68
 80069a8:	4654      	mov	r4, sl
 80069aa:	2205      	movs	r2, #5
 80069ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069b0:	4851      	ldr	r0, [pc, #324]	; (8006af8 <_svfiprintf_r+0x1ec>)
 80069b2:	f7f9 fc15 	bl	80001e0 <memchr>
 80069b6:	9a04      	ldr	r2, [sp, #16]
 80069b8:	b9d8      	cbnz	r0, 80069f2 <_svfiprintf_r+0xe6>
 80069ba:	06d0      	lsls	r0, r2, #27
 80069bc:	bf44      	itt	mi
 80069be:	2320      	movmi	r3, #32
 80069c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069c4:	0711      	lsls	r1, r2, #28
 80069c6:	bf44      	itt	mi
 80069c8:	232b      	movmi	r3, #43	; 0x2b
 80069ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069ce:	f89a 3000 	ldrb.w	r3, [sl]
 80069d2:	2b2a      	cmp	r3, #42	; 0x2a
 80069d4:	d015      	beq.n	8006a02 <_svfiprintf_r+0xf6>
 80069d6:	9a07      	ldr	r2, [sp, #28]
 80069d8:	4654      	mov	r4, sl
 80069da:	2000      	movs	r0, #0
 80069dc:	f04f 0c0a 	mov.w	ip, #10
 80069e0:	4621      	mov	r1, r4
 80069e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069e6:	3b30      	subs	r3, #48	; 0x30
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	d94e      	bls.n	8006a8a <_svfiprintf_r+0x17e>
 80069ec:	b1b0      	cbz	r0, 8006a1c <_svfiprintf_r+0x110>
 80069ee:	9207      	str	r2, [sp, #28]
 80069f0:	e014      	b.n	8006a1c <_svfiprintf_r+0x110>
 80069f2:	eba0 0308 	sub.w	r3, r0, r8
 80069f6:	fa09 f303 	lsl.w	r3, r9, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	46a2      	mov	sl, r4
 8006a00:	e7d2      	b.n	80069a8 <_svfiprintf_r+0x9c>
 8006a02:	9b03      	ldr	r3, [sp, #12]
 8006a04:	1d19      	adds	r1, r3, #4
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	9103      	str	r1, [sp, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	bfbb      	ittet	lt
 8006a0e:	425b      	neglt	r3, r3
 8006a10:	f042 0202 	orrlt.w	r2, r2, #2
 8006a14:	9307      	strge	r3, [sp, #28]
 8006a16:	9307      	strlt	r3, [sp, #28]
 8006a18:	bfb8      	it	lt
 8006a1a:	9204      	strlt	r2, [sp, #16]
 8006a1c:	7823      	ldrb	r3, [r4, #0]
 8006a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a20:	d10c      	bne.n	8006a3c <_svfiprintf_r+0x130>
 8006a22:	7863      	ldrb	r3, [r4, #1]
 8006a24:	2b2a      	cmp	r3, #42	; 0x2a
 8006a26:	d135      	bne.n	8006a94 <_svfiprintf_r+0x188>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	1d1a      	adds	r2, r3, #4
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	9203      	str	r2, [sp, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bfb8      	it	lt
 8006a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a38:	3402      	adds	r4, #2
 8006a3a:	9305      	str	r3, [sp, #20]
 8006a3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006b08 <_svfiprintf_r+0x1fc>
 8006a40:	7821      	ldrb	r1, [r4, #0]
 8006a42:	2203      	movs	r2, #3
 8006a44:	4650      	mov	r0, sl
 8006a46:	f7f9 fbcb 	bl	80001e0 <memchr>
 8006a4a:	b140      	cbz	r0, 8006a5e <_svfiprintf_r+0x152>
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	eba0 000a 	sub.w	r0, r0, sl
 8006a52:	fa03 f000 	lsl.w	r0, r3, r0
 8006a56:	9b04      	ldr	r3, [sp, #16]
 8006a58:	4303      	orrs	r3, r0
 8006a5a:	3401      	adds	r4, #1
 8006a5c:	9304      	str	r3, [sp, #16]
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4826      	ldr	r0, [pc, #152]	; (8006afc <_svfiprintf_r+0x1f0>)
 8006a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a68:	2206      	movs	r2, #6
 8006a6a:	f7f9 fbb9 	bl	80001e0 <memchr>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d038      	beq.n	8006ae4 <_svfiprintf_r+0x1d8>
 8006a72:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <_svfiprintf_r+0x1f4>)
 8006a74:	bb1b      	cbnz	r3, 8006abe <_svfiprintf_r+0x1b2>
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	3307      	adds	r3, #7
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	3308      	adds	r3, #8
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a84:	4433      	add	r3, r6
 8006a86:	9309      	str	r3, [sp, #36]	; 0x24
 8006a88:	e767      	b.n	800695a <_svfiprintf_r+0x4e>
 8006a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a8e:	460c      	mov	r4, r1
 8006a90:	2001      	movs	r0, #1
 8006a92:	e7a5      	b.n	80069e0 <_svfiprintf_r+0xd4>
 8006a94:	2300      	movs	r3, #0
 8006a96:	3401      	adds	r4, #1
 8006a98:	9305      	str	r3, [sp, #20]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f04f 0c0a 	mov.w	ip, #10
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aa6:	3a30      	subs	r2, #48	; 0x30
 8006aa8:	2a09      	cmp	r2, #9
 8006aaa:	d903      	bls.n	8006ab4 <_svfiprintf_r+0x1a8>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d0c5      	beq.n	8006a3c <_svfiprintf_r+0x130>
 8006ab0:	9105      	str	r1, [sp, #20]
 8006ab2:	e7c3      	b.n	8006a3c <_svfiprintf_r+0x130>
 8006ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ab8:	4604      	mov	r4, r0
 8006aba:	2301      	movs	r3, #1
 8006abc:	e7f0      	b.n	8006aa0 <_svfiprintf_r+0x194>
 8006abe:	ab03      	add	r3, sp, #12
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	462a      	mov	r2, r5
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <_svfiprintf_r+0x1f8>)
 8006ac6:	a904      	add	r1, sp, #16
 8006ac8:	4638      	mov	r0, r7
 8006aca:	f7fc f937 	bl	8002d3c <_printf_float>
 8006ace:	1c42      	adds	r2, r0, #1
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	d1d6      	bne.n	8006a82 <_svfiprintf_r+0x176>
 8006ad4:	89ab      	ldrh	r3, [r5, #12]
 8006ad6:	065b      	lsls	r3, r3, #25
 8006ad8:	f53f af2c 	bmi.w	8006934 <_svfiprintf_r+0x28>
 8006adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ade:	b01d      	add	sp, #116	; 0x74
 8006ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae4:	ab03      	add	r3, sp, #12
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <_svfiprintf_r+0x1f8>)
 8006aec:	a904      	add	r1, sp, #16
 8006aee:	4638      	mov	r0, r7
 8006af0:	f7fc fbc8 	bl	8003284 <_printf_i>
 8006af4:	e7eb      	b.n	8006ace <_svfiprintf_r+0x1c2>
 8006af6:	bf00      	nop
 8006af8:	080079e4 	.word	0x080079e4
 8006afc:	080079ee 	.word	0x080079ee
 8006b00:	08002d3d 	.word	0x08002d3d
 8006b04:	08006855 	.word	0x08006855
 8006b08:	080079ea 	.word	0x080079ea

08006b0c <__sfputc_r>:
 8006b0c:	6893      	ldr	r3, [r2, #8]
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	b410      	push	{r4}
 8006b14:	6093      	str	r3, [r2, #8]
 8006b16:	da08      	bge.n	8006b2a <__sfputc_r+0x1e>
 8006b18:	6994      	ldr	r4, [r2, #24]
 8006b1a:	42a3      	cmp	r3, r4
 8006b1c:	db01      	blt.n	8006b22 <__sfputc_r+0x16>
 8006b1e:	290a      	cmp	r1, #10
 8006b20:	d103      	bne.n	8006b2a <__sfputc_r+0x1e>
 8006b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b26:	f000 b9bb 	b.w	8006ea0 <__swbuf_r>
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	1c58      	adds	r0, r3, #1
 8006b2e:	6010      	str	r0, [r2, #0]
 8006b30:	7019      	strb	r1, [r3, #0]
 8006b32:	4608      	mov	r0, r1
 8006b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <__sfputs_r>:
 8006b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	460f      	mov	r7, r1
 8006b40:	4614      	mov	r4, r2
 8006b42:	18d5      	adds	r5, r2, r3
 8006b44:	42ac      	cmp	r4, r5
 8006b46:	d101      	bne.n	8006b4c <__sfputs_r+0x12>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e007      	b.n	8006b5c <__sfputs_r+0x22>
 8006b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b50:	463a      	mov	r2, r7
 8006b52:	4630      	mov	r0, r6
 8006b54:	f7ff ffda 	bl	8006b0c <__sfputc_r>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d1f3      	bne.n	8006b44 <__sfputs_r+0xa>
 8006b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b60 <_vfiprintf_r>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	460d      	mov	r5, r1
 8006b66:	b09d      	sub	sp, #116	; 0x74
 8006b68:	4614      	mov	r4, r2
 8006b6a:	4698      	mov	r8, r3
 8006b6c:	4606      	mov	r6, r0
 8006b6e:	b118      	cbz	r0, 8006b78 <_vfiprintf_r+0x18>
 8006b70:	6983      	ldr	r3, [r0, #24]
 8006b72:	b90b      	cbnz	r3, 8006b78 <_vfiprintf_r+0x18>
 8006b74:	f7fe fc7a 	bl	800546c <__sinit>
 8006b78:	4b89      	ldr	r3, [pc, #548]	; (8006da0 <_vfiprintf_r+0x240>)
 8006b7a:	429d      	cmp	r5, r3
 8006b7c:	d11b      	bne.n	8006bb6 <_vfiprintf_r+0x56>
 8006b7e:	6875      	ldr	r5, [r6, #4]
 8006b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_vfiprintf_r+0x32>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	059a      	lsls	r2, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_vfiprintf_r+0x32>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b8e:	f7ff f87e 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	071b      	lsls	r3, r3, #28
 8006b96:	d501      	bpl.n	8006b9c <_vfiprintf_r+0x3c>
 8006b98:	692b      	ldr	r3, [r5, #16]
 8006b9a:	b9eb      	cbnz	r3, 8006bd8 <_vfiprintf_r+0x78>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 f9f0 	bl	8006f84 <__swsetup_r>
 8006ba4:	b1c0      	cbz	r0, 8006bd8 <_vfiprintf_r+0x78>
 8006ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba8:	07dc      	lsls	r4, r3, #31
 8006baa:	d50e      	bpl.n	8006bca <_vfiprintf_r+0x6a>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	b01d      	add	sp, #116	; 0x74
 8006bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb6:	4b7b      	ldr	r3, [pc, #492]	; (8006da4 <_vfiprintf_r+0x244>)
 8006bb8:	429d      	cmp	r5, r3
 8006bba:	d101      	bne.n	8006bc0 <_vfiprintf_r+0x60>
 8006bbc:	68b5      	ldr	r5, [r6, #8]
 8006bbe:	e7df      	b.n	8006b80 <_vfiprintf_r+0x20>
 8006bc0:	4b79      	ldr	r3, [pc, #484]	; (8006da8 <_vfiprintf_r+0x248>)
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	bf08      	it	eq
 8006bc6:	68f5      	ldreq	r5, [r6, #12]
 8006bc8:	e7da      	b.n	8006b80 <_vfiprintf_r+0x20>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	0598      	lsls	r0, r3, #22
 8006bce:	d4ed      	bmi.n	8006bac <_vfiprintf_r+0x4c>
 8006bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd2:	f7ff f85d 	bl	8005c90 <__retarget_lock_release_recursive>
 8006bd6:	e7e9      	b.n	8006bac <_vfiprintf_r+0x4c>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9309      	str	r3, [sp, #36]	; 0x24
 8006bdc:	2320      	movs	r3, #32
 8006bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006be6:	2330      	movs	r3, #48	; 0x30
 8006be8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006dac <_vfiprintf_r+0x24c>
 8006bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bf0:	f04f 0901 	mov.w	r9, #1
 8006bf4:	4623      	mov	r3, r4
 8006bf6:	469a      	mov	sl, r3
 8006bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bfc:	b10a      	cbz	r2, 8006c02 <_vfiprintf_r+0xa2>
 8006bfe:	2a25      	cmp	r2, #37	; 0x25
 8006c00:	d1f9      	bne.n	8006bf6 <_vfiprintf_r+0x96>
 8006c02:	ebba 0b04 	subs.w	fp, sl, r4
 8006c06:	d00b      	beq.n	8006c20 <_vfiprintf_r+0xc0>
 8006c08:	465b      	mov	r3, fp
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4630      	mov	r0, r6
 8006c10:	f7ff ff93 	bl	8006b3a <__sfputs_r>
 8006c14:	3001      	adds	r0, #1
 8006c16:	f000 80aa 	beq.w	8006d6e <_vfiprintf_r+0x20e>
 8006c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c1c:	445a      	add	r2, fp
 8006c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006c20:	f89a 3000 	ldrb.w	r3, [sl]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80a2 	beq.w	8006d6e <_vfiprintf_r+0x20e>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c34:	f10a 0a01 	add.w	sl, sl, #1
 8006c38:	9304      	str	r3, [sp, #16]
 8006c3a:	9307      	str	r3, [sp, #28]
 8006c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c40:	931a      	str	r3, [sp, #104]	; 0x68
 8006c42:	4654      	mov	r4, sl
 8006c44:	2205      	movs	r2, #5
 8006c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4a:	4858      	ldr	r0, [pc, #352]	; (8006dac <_vfiprintf_r+0x24c>)
 8006c4c:	f7f9 fac8 	bl	80001e0 <memchr>
 8006c50:	9a04      	ldr	r2, [sp, #16]
 8006c52:	b9d8      	cbnz	r0, 8006c8c <_vfiprintf_r+0x12c>
 8006c54:	06d1      	lsls	r1, r2, #27
 8006c56:	bf44      	itt	mi
 8006c58:	2320      	movmi	r3, #32
 8006c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c5e:	0713      	lsls	r3, r2, #28
 8006c60:	bf44      	itt	mi
 8006c62:	232b      	movmi	r3, #43	; 0x2b
 8006c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c68:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6e:	d015      	beq.n	8006c9c <_vfiprintf_r+0x13c>
 8006c70:	9a07      	ldr	r2, [sp, #28]
 8006c72:	4654      	mov	r4, sl
 8006c74:	2000      	movs	r0, #0
 8006c76:	f04f 0c0a 	mov.w	ip, #10
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c80:	3b30      	subs	r3, #48	; 0x30
 8006c82:	2b09      	cmp	r3, #9
 8006c84:	d94e      	bls.n	8006d24 <_vfiprintf_r+0x1c4>
 8006c86:	b1b0      	cbz	r0, 8006cb6 <_vfiprintf_r+0x156>
 8006c88:	9207      	str	r2, [sp, #28]
 8006c8a:	e014      	b.n	8006cb6 <_vfiprintf_r+0x156>
 8006c8c:	eba0 0308 	sub.w	r3, r0, r8
 8006c90:	fa09 f303 	lsl.w	r3, r9, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	9304      	str	r3, [sp, #16]
 8006c98:	46a2      	mov	sl, r4
 8006c9a:	e7d2      	b.n	8006c42 <_vfiprintf_r+0xe2>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	1d19      	adds	r1, r3, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	9103      	str	r1, [sp, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bfbb      	ittet	lt
 8006ca8:	425b      	neglt	r3, r3
 8006caa:	f042 0202 	orrlt.w	r2, r2, #2
 8006cae:	9307      	strge	r3, [sp, #28]
 8006cb0:	9307      	strlt	r3, [sp, #28]
 8006cb2:	bfb8      	it	lt
 8006cb4:	9204      	strlt	r2, [sp, #16]
 8006cb6:	7823      	ldrb	r3, [r4, #0]
 8006cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8006cba:	d10c      	bne.n	8006cd6 <_vfiprintf_r+0x176>
 8006cbc:	7863      	ldrb	r3, [r4, #1]
 8006cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8006cc0:	d135      	bne.n	8006d2e <_vfiprintf_r+0x1ce>
 8006cc2:	9b03      	ldr	r3, [sp, #12]
 8006cc4:	1d1a      	adds	r2, r3, #4
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	9203      	str	r2, [sp, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfb8      	it	lt
 8006cce:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cd2:	3402      	adds	r4, #2
 8006cd4:	9305      	str	r3, [sp, #20]
 8006cd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006dbc <_vfiprintf_r+0x25c>
 8006cda:	7821      	ldrb	r1, [r4, #0]
 8006cdc:	2203      	movs	r2, #3
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f7f9 fa7e 	bl	80001e0 <memchr>
 8006ce4:	b140      	cbz	r0, 8006cf8 <_vfiprintf_r+0x198>
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	eba0 000a 	sub.w	r0, r0, sl
 8006cec:	fa03 f000 	lsl.w	r0, r3, r0
 8006cf0:	9b04      	ldr	r3, [sp, #16]
 8006cf2:	4303      	orrs	r3, r0
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cfc:	482c      	ldr	r0, [pc, #176]	; (8006db0 <_vfiprintf_r+0x250>)
 8006cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d02:	2206      	movs	r2, #6
 8006d04:	f7f9 fa6c 	bl	80001e0 <memchr>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d03f      	beq.n	8006d8c <_vfiprintf_r+0x22c>
 8006d0c:	4b29      	ldr	r3, [pc, #164]	; (8006db4 <_vfiprintf_r+0x254>)
 8006d0e:	bb1b      	cbnz	r3, 8006d58 <_vfiprintf_r+0x1f8>
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	3307      	adds	r3, #7
 8006d14:	f023 0307 	bic.w	r3, r3, #7
 8006d18:	3308      	adds	r3, #8
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d1e:	443b      	add	r3, r7
 8006d20:	9309      	str	r3, [sp, #36]	; 0x24
 8006d22:	e767      	b.n	8006bf4 <_vfiprintf_r+0x94>
 8006d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d28:	460c      	mov	r4, r1
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e7a5      	b.n	8006c7a <_vfiprintf_r+0x11a>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	3401      	adds	r4, #1
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	4619      	mov	r1, r3
 8006d36:	f04f 0c0a 	mov.w	ip, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d40:	3a30      	subs	r2, #48	; 0x30
 8006d42:	2a09      	cmp	r2, #9
 8006d44:	d903      	bls.n	8006d4e <_vfiprintf_r+0x1ee>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c5      	beq.n	8006cd6 <_vfiprintf_r+0x176>
 8006d4a:	9105      	str	r1, [sp, #20]
 8006d4c:	e7c3      	b.n	8006cd6 <_vfiprintf_r+0x176>
 8006d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d52:	4604      	mov	r4, r0
 8006d54:	2301      	movs	r3, #1
 8006d56:	e7f0      	b.n	8006d3a <_vfiprintf_r+0x1da>
 8006d58:	ab03      	add	r3, sp, #12
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	462a      	mov	r2, r5
 8006d5e:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <_vfiprintf_r+0x258>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7fb ffea 	bl	8002d3c <_printf_float>
 8006d68:	4607      	mov	r7, r0
 8006d6a:	1c78      	adds	r0, r7, #1
 8006d6c:	d1d6      	bne.n	8006d1c <_vfiprintf_r+0x1bc>
 8006d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d70:	07d9      	lsls	r1, r3, #31
 8006d72:	d405      	bmi.n	8006d80 <_vfiprintf_r+0x220>
 8006d74:	89ab      	ldrh	r3, [r5, #12]
 8006d76:	059a      	lsls	r2, r3, #22
 8006d78:	d402      	bmi.n	8006d80 <_vfiprintf_r+0x220>
 8006d7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d7c:	f7fe ff88 	bl	8005c90 <__retarget_lock_release_recursive>
 8006d80:	89ab      	ldrh	r3, [r5, #12]
 8006d82:	065b      	lsls	r3, r3, #25
 8006d84:	f53f af12 	bmi.w	8006bac <_vfiprintf_r+0x4c>
 8006d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d8a:	e711      	b.n	8006bb0 <_vfiprintf_r+0x50>
 8006d8c:	ab03      	add	r3, sp, #12
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <_vfiprintf_r+0x258>)
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7fc fa74 	bl	8003284 <_printf_i>
 8006d9c:	e7e4      	b.n	8006d68 <_vfiprintf_r+0x208>
 8006d9e:	bf00      	nop
 8006da0:	080077cc 	.word	0x080077cc
 8006da4:	080077ec 	.word	0x080077ec
 8006da8:	080077ac 	.word	0x080077ac
 8006dac:	080079e4 	.word	0x080079e4
 8006db0:	080079ee 	.word	0x080079ee
 8006db4:	08002d3d 	.word	0x08002d3d
 8006db8:	08006b3b 	.word	0x08006b3b
 8006dbc:	080079ea 	.word	0x080079ea

08006dc0 <nan>:
 8006dc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006dc8 <nan+0x8>
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	00000000 	.word	0x00000000
 8006dcc:	7ff80000 	.word	0x7ff80000

08006dd0 <_sbrk_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4d06      	ldr	r5, [pc, #24]	; (8006dec <_sbrk_r+0x1c>)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f7fa fbac 	bl	8001538 <_sbrk>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_sbrk_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_sbrk_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20000264 	.word	0x20000264

08006df0 <__sread>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	460c      	mov	r4, r1
 8006df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df8:	f000 fb02 	bl	8007400 <_read_r>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	bfab      	itete	ge
 8006e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e02:	89a3      	ldrhlt	r3, [r4, #12]
 8006e04:	181b      	addge	r3, r3, r0
 8006e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e0a:	bfac      	ite	ge
 8006e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e0e:	81a3      	strhlt	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__swrite>:
 8006e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	461f      	mov	r7, r3
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4616      	mov	r6, r2
 8006e22:	d505      	bpl.n	8006e30 <__swrite+0x1e>
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	2302      	movs	r3, #2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 fa1a 	bl	8007264 <_lseek_r>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	f000 b88b 	b.w	8006f60 <_write_r>

08006e4a <__sseek>:
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e52:	f000 fa07 	bl	8007264 <_lseek_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	bf15      	itete	ne
 8006e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e66:	81a3      	strheq	r3, [r4, #12]
 8006e68:	bf18      	it	ne
 8006e6a:	81a3      	strhne	r3, [r4, #12]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__sclose>:
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 b913 	b.w	800709c <_close_r>

08006e76 <strncmp>:
 8006e76:	b510      	push	{r4, lr}
 8006e78:	b17a      	cbz	r2, 8006e9a <strncmp+0x24>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	3901      	subs	r1, #1
 8006e7e:	1884      	adds	r4, r0, r2
 8006e80:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006e84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e88:	4290      	cmp	r0, r2
 8006e8a:	d101      	bne.n	8006e90 <strncmp+0x1a>
 8006e8c:	42a3      	cmp	r3, r4
 8006e8e:	d101      	bne.n	8006e94 <strncmp+0x1e>
 8006e90:	1a80      	subs	r0, r0, r2
 8006e92:	bd10      	pop	{r4, pc}
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d1f3      	bne.n	8006e80 <strncmp+0xa>
 8006e98:	e7fa      	b.n	8006e90 <strncmp+0x1a>
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	e7f9      	b.n	8006e92 <strncmp+0x1c>
	...

08006ea0 <__swbuf_r>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	460e      	mov	r6, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b118      	cbz	r0, 8006eb2 <__swbuf_r+0x12>
 8006eaa:	6983      	ldr	r3, [r0, #24]
 8006eac:	b90b      	cbnz	r3, 8006eb2 <__swbuf_r+0x12>
 8006eae:	f7fe fadd 	bl	800546c <__sinit>
 8006eb2:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <__swbuf_r+0x98>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	d12b      	bne.n	8006f10 <__swbuf_r+0x70>
 8006eb8:	686c      	ldr	r4, [r5, #4]
 8006eba:	69a3      	ldr	r3, [r4, #24]
 8006ebc:	60a3      	str	r3, [r4, #8]
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	071a      	lsls	r2, r3, #28
 8006ec2:	d52f      	bpl.n	8006f24 <__swbuf_r+0x84>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	b36b      	cbz	r3, 8006f24 <__swbuf_r+0x84>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	6820      	ldr	r0, [r4, #0]
 8006ecc:	1ac0      	subs	r0, r0, r3
 8006ece:	6963      	ldr	r3, [r4, #20]
 8006ed0:	b2f6      	uxtb	r6, r6
 8006ed2:	4283      	cmp	r3, r0
 8006ed4:	4637      	mov	r7, r6
 8006ed6:	dc04      	bgt.n	8006ee2 <__swbuf_r+0x42>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 f974 	bl	80071c8 <_fflush_r>
 8006ee0:	bb30      	cbnz	r0, 8006f30 <__swbuf_r+0x90>
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	60a3      	str	r3, [r4, #8]
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	701e      	strb	r6, [r3, #0]
 8006ef0:	6963      	ldr	r3, [r4, #20]
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	d004      	beq.n	8006f02 <__swbuf_r+0x62>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d506      	bpl.n	8006f0c <__swbuf_r+0x6c>
 8006efe:	2e0a      	cmp	r6, #10
 8006f00:	d104      	bne.n	8006f0c <__swbuf_r+0x6c>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f000 f95f 	bl	80071c8 <_fflush_r>
 8006f0a:	b988      	cbnz	r0, 8006f30 <__swbuf_r+0x90>
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <__swbuf_r+0x9c>)
 8006f12:	429c      	cmp	r4, r3
 8006f14:	d101      	bne.n	8006f1a <__swbuf_r+0x7a>
 8006f16:	68ac      	ldr	r4, [r5, #8]
 8006f18:	e7cf      	b.n	8006eba <__swbuf_r+0x1a>
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <__swbuf_r+0xa0>)
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	bf08      	it	eq
 8006f20:	68ec      	ldreq	r4, [r5, #12]
 8006f22:	e7ca      	b.n	8006eba <__swbuf_r+0x1a>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4628      	mov	r0, r5
 8006f28:	f000 f82c 	bl	8006f84 <__swsetup_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d0cb      	beq.n	8006ec8 <__swbuf_r+0x28>
 8006f30:	f04f 37ff 	mov.w	r7, #4294967295
 8006f34:	e7ea      	b.n	8006f0c <__swbuf_r+0x6c>
 8006f36:	bf00      	nop
 8006f38:	080077cc 	.word	0x080077cc
 8006f3c:	080077ec 	.word	0x080077ec
 8006f40:	080077ac 	.word	0x080077ac

08006f44 <__ascii_wctomb>:
 8006f44:	b149      	cbz	r1, 8006f5a <__ascii_wctomb+0x16>
 8006f46:	2aff      	cmp	r2, #255	; 0xff
 8006f48:	bf85      	ittet	hi
 8006f4a:	238a      	movhi	r3, #138	; 0x8a
 8006f4c:	6003      	strhi	r3, [r0, #0]
 8006f4e:	700a      	strbls	r2, [r1, #0]
 8006f50:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f54:	bf98      	it	ls
 8006f56:	2001      	movls	r0, #1
 8006f58:	4770      	bx	lr
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4770      	bx	lr
	...

08006f60 <_write_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	; (8006f80 <_write_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa f869 	bl	8001046 <_write>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_write_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_write_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000264 	.word	0x20000264

08006f84 <__swsetup_r>:
 8006f84:	4b32      	ldr	r3, [pc, #200]	; (8007050 <__swsetup_r+0xcc>)
 8006f86:	b570      	push	{r4, r5, r6, lr}
 8006f88:	681d      	ldr	r5, [r3, #0]
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	b125      	cbz	r5, 8006f9a <__swsetup_r+0x16>
 8006f90:	69ab      	ldr	r3, [r5, #24]
 8006f92:	b913      	cbnz	r3, 8006f9a <__swsetup_r+0x16>
 8006f94:	4628      	mov	r0, r5
 8006f96:	f7fe fa69 	bl	800546c <__sinit>
 8006f9a:	4b2e      	ldr	r3, [pc, #184]	; (8007054 <__swsetup_r+0xd0>)
 8006f9c:	429c      	cmp	r4, r3
 8006f9e:	d10f      	bne.n	8006fc0 <__swsetup_r+0x3c>
 8006fa0:	686c      	ldr	r4, [r5, #4]
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fa8:	0719      	lsls	r1, r3, #28
 8006faa:	d42c      	bmi.n	8007006 <__swsetup_r+0x82>
 8006fac:	06dd      	lsls	r5, r3, #27
 8006fae:	d411      	bmi.n	8006fd4 <__swsetup_r+0x50>
 8006fb0:	2309      	movs	r3, #9
 8006fb2:	6033      	str	r3, [r6, #0]
 8006fb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbe:	e03e      	b.n	800703e <__swsetup_r+0xba>
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <__swsetup_r+0xd4>)
 8006fc2:	429c      	cmp	r4, r3
 8006fc4:	d101      	bne.n	8006fca <__swsetup_r+0x46>
 8006fc6:	68ac      	ldr	r4, [r5, #8]
 8006fc8:	e7eb      	b.n	8006fa2 <__swsetup_r+0x1e>
 8006fca:	4b24      	ldr	r3, [pc, #144]	; (800705c <__swsetup_r+0xd8>)
 8006fcc:	429c      	cmp	r4, r3
 8006fce:	bf08      	it	eq
 8006fd0:	68ec      	ldreq	r4, [r5, #12]
 8006fd2:	e7e6      	b.n	8006fa2 <__swsetup_r+0x1e>
 8006fd4:	0758      	lsls	r0, r3, #29
 8006fd6:	d512      	bpl.n	8006ffe <__swsetup_r+0x7a>
 8006fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fda:	b141      	cbz	r1, 8006fee <__swsetup_r+0x6a>
 8006fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe0:	4299      	cmp	r1, r3
 8006fe2:	d002      	beq.n	8006fea <__swsetup_r+0x66>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7ff fb55 	bl	8006694 <_free_r>
 8006fea:	2300      	movs	r3, #0
 8006fec:	6363      	str	r3, [r4, #52]	; 0x34
 8006fee:	89a3      	ldrh	r3, [r4, #12]
 8006ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	6063      	str	r3, [r4, #4]
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f043 0308 	orr.w	r3, r3, #8
 8007004:	81a3      	strh	r3, [r4, #12]
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	b94b      	cbnz	r3, 800701e <__swsetup_r+0x9a>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007014:	d003      	beq.n	800701e <__swsetup_r+0x9a>
 8007016:	4621      	mov	r1, r4
 8007018:	4630      	mov	r0, r6
 800701a:	f000 f95b 	bl	80072d4 <__smakebuf_r>
 800701e:	89a0      	ldrh	r0, [r4, #12]
 8007020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007024:	f010 0301 	ands.w	r3, r0, #1
 8007028:	d00a      	beq.n	8007040 <__swsetup_r+0xbc>
 800702a:	2300      	movs	r3, #0
 800702c:	60a3      	str	r3, [r4, #8]
 800702e:	6963      	ldr	r3, [r4, #20]
 8007030:	425b      	negs	r3, r3
 8007032:	61a3      	str	r3, [r4, #24]
 8007034:	6923      	ldr	r3, [r4, #16]
 8007036:	b943      	cbnz	r3, 800704a <__swsetup_r+0xc6>
 8007038:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800703c:	d1ba      	bne.n	8006fb4 <__swsetup_r+0x30>
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	0781      	lsls	r1, r0, #30
 8007042:	bf58      	it	pl
 8007044:	6963      	ldrpl	r3, [r4, #20]
 8007046:	60a3      	str	r3, [r4, #8]
 8007048:	e7f4      	b.n	8007034 <__swsetup_r+0xb0>
 800704a:	2000      	movs	r0, #0
 800704c:	e7f7      	b.n	800703e <__swsetup_r+0xba>
 800704e:	bf00      	nop
 8007050:	2000000c 	.word	0x2000000c
 8007054:	080077cc 	.word	0x080077cc
 8007058:	080077ec 	.word	0x080077ec
 800705c:	080077ac 	.word	0x080077ac

08007060 <__assert_func>:
 8007060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007062:	4614      	mov	r4, r2
 8007064:	461a      	mov	r2, r3
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <__assert_func+0x2c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4605      	mov	r5, r0
 800706c:	68d8      	ldr	r0, [r3, #12]
 800706e:	b14c      	cbz	r4, 8007084 <__assert_func+0x24>
 8007070:	4b07      	ldr	r3, [pc, #28]	; (8007090 <__assert_func+0x30>)
 8007072:	9100      	str	r1, [sp, #0]
 8007074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007078:	4906      	ldr	r1, [pc, #24]	; (8007094 <__assert_func+0x34>)
 800707a:	462b      	mov	r3, r5
 800707c:	f000 f8e0 	bl	8007240 <fiprintf>
 8007080:	f000 f9d0 	bl	8007424 <abort>
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <__assert_func+0x38>)
 8007086:	461c      	mov	r4, r3
 8007088:	e7f3      	b.n	8007072 <__assert_func+0x12>
 800708a:	bf00      	nop
 800708c:	2000000c 	.word	0x2000000c
 8007090:	080079f5 	.word	0x080079f5
 8007094:	08007a02 	.word	0x08007a02
 8007098:	08007a30 	.word	0x08007a30

0800709c <_close_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d06      	ldr	r5, [pc, #24]	; (80070b8 <_close_r+0x1c>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7fa fa11 	bl	80014ce <_close>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_close_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_close_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	20000264 	.word	0x20000264

080070bc <__sflush_r>:
 80070bc:	898a      	ldrh	r2, [r1, #12]
 80070be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c2:	4605      	mov	r5, r0
 80070c4:	0710      	lsls	r0, r2, #28
 80070c6:	460c      	mov	r4, r1
 80070c8:	d458      	bmi.n	800717c <__sflush_r+0xc0>
 80070ca:	684b      	ldr	r3, [r1, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dc05      	bgt.n	80070dc <__sflush_r+0x20>
 80070d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	dc02      	bgt.n	80070dc <__sflush_r+0x20>
 80070d6:	2000      	movs	r0, #0
 80070d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070de:	2e00      	cmp	r6, #0
 80070e0:	d0f9      	beq.n	80070d6 <__sflush_r+0x1a>
 80070e2:	2300      	movs	r3, #0
 80070e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070e8:	682f      	ldr	r7, [r5, #0]
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	d032      	beq.n	8007154 <__sflush_r+0x98>
 80070ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070f0:	89a3      	ldrh	r3, [r4, #12]
 80070f2:	075a      	lsls	r2, r3, #29
 80070f4:	d505      	bpl.n	8007102 <__sflush_r+0x46>
 80070f6:	6863      	ldr	r3, [r4, #4]
 80070f8:	1ac0      	subs	r0, r0, r3
 80070fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070fc:	b10b      	cbz	r3, 8007102 <__sflush_r+0x46>
 80070fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007100:	1ac0      	subs	r0, r0, r3
 8007102:	2300      	movs	r3, #0
 8007104:	4602      	mov	r2, r0
 8007106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007108:	6a21      	ldr	r1, [r4, #32]
 800710a:	4628      	mov	r0, r5
 800710c:	47b0      	blx	r6
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	d106      	bne.n	8007122 <__sflush_r+0x66>
 8007114:	6829      	ldr	r1, [r5, #0]
 8007116:	291d      	cmp	r1, #29
 8007118:	d82c      	bhi.n	8007174 <__sflush_r+0xb8>
 800711a:	4a2a      	ldr	r2, [pc, #168]	; (80071c4 <__sflush_r+0x108>)
 800711c:	40ca      	lsrs	r2, r1
 800711e:	07d6      	lsls	r6, r2, #31
 8007120:	d528      	bpl.n	8007174 <__sflush_r+0xb8>
 8007122:	2200      	movs	r2, #0
 8007124:	6062      	str	r2, [r4, #4]
 8007126:	04d9      	lsls	r1, r3, #19
 8007128:	6922      	ldr	r2, [r4, #16]
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	d504      	bpl.n	8007138 <__sflush_r+0x7c>
 800712e:	1c42      	adds	r2, r0, #1
 8007130:	d101      	bne.n	8007136 <__sflush_r+0x7a>
 8007132:	682b      	ldr	r3, [r5, #0]
 8007134:	b903      	cbnz	r3, 8007138 <__sflush_r+0x7c>
 8007136:	6560      	str	r0, [r4, #84]	; 0x54
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713a:	602f      	str	r7, [r5, #0]
 800713c:	2900      	cmp	r1, #0
 800713e:	d0ca      	beq.n	80070d6 <__sflush_r+0x1a>
 8007140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007144:	4299      	cmp	r1, r3
 8007146:	d002      	beq.n	800714e <__sflush_r+0x92>
 8007148:	4628      	mov	r0, r5
 800714a:	f7ff faa3 	bl	8006694 <_free_r>
 800714e:	2000      	movs	r0, #0
 8007150:	6360      	str	r0, [r4, #52]	; 0x34
 8007152:	e7c1      	b.n	80070d8 <__sflush_r+0x1c>
 8007154:	6a21      	ldr	r1, [r4, #32]
 8007156:	2301      	movs	r3, #1
 8007158:	4628      	mov	r0, r5
 800715a:	47b0      	blx	r6
 800715c:	1c41      	adds	r1, r0, #1
 800715e:	d1c7      	bne.n	80070f0 <__sflush_r+0x34>
 8007160:	682b      	ldr	r3, [r5, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0c4      	beq.n	80070f0 <__sflush_r+0x34>
 8007166:	2b1d      	cmp	r3, #29
 8007168:	d001      	beq.n	800716e <__sflush_r+0xb2>
 800716a:	2b16      	cmp	r3, #22
 800716c:	d101      	bne.n	8007172 <__sflush_r+0xb6>
 800716e:	602f      	str	r7, [r5, #0]
 8007170:	e7b1      	b.n	80070d6 <__sflush_r+0x1a>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	e7ad      	b.n	80070d8 <__sflush_r+0x1c>
 800717c:	690f      	ldr	r7, [r1, #16]
 800717e:	2f00      	cmp	r7, #0
 8007180:	d0a9      	beq.n	80070d6 <__sflush_r+0x1a>
 8007182:	0793      	lsls	r3, r2, #30
 8007184:	680e      	ldr	r6, [r1, #0]
 8007186:	bf08      	it	eq
 8007188:	694b      	ldreq	r3, [r1, #20]
 800718a:	600f      	str	r7, [r1, #0]
 800718c:	bf18      	it	ne
 800718e:	2300      	movne	r3, #0
 8007190:	eba6 0807 	sub.w	r8, r6, r7
 8007194:	608b      	str	r3, [r1, #8]
 8007196:	f1b8 0f00 	cmp.w	r8, #0
 800719a:	dd9c      	ble.n	80070d6 <__sflush_r+0x1a>
 800719c:	6a21      	ldr	r1, [r4, #32]
 800719e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80071a0:	4643      	mov	r3, r8
 80071a2:	463a      	mov	r2, r7
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b0      	blx	r6
 80071a8:	2800      	cmp	r0, #0
 80071aa:	dc06      	bgt.n	80071ba <__sflush_r+0xfe>
 80071ac:	89a3      	ldrh	r3, [r4, #12]
 80071ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071b2:	81a3      	strh	r3, [r4, #12]
 80071b4:	f04f 30ff 	mov.w	r0, #4294967295
 80071b8:	e78e      	b.n	80070d8 <__sflush_r+0x1c>
 80071ba:	4407      	add	r7, r0
 80071bc:	eba8 0800 	sub.w	r8, r8, r0
 80071c0:	e7e9      	b.n	8007196 <__sflush_r+0xda>
 80071c2:	bf00      	nop
 80071c4:	20400001 	.word	0x20400001

080071c8 <_fflush_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	690b      	ldr	r3, [r1, #16]
 80071cc:	4605      	mov	r5, r0
 80071ce:	460c      	mov	r4, r1
 80071d0:	b913      	cbnz	r3, 80071d8 <_fflush_r+0x10>
 80071d2:	2500      	movs	r5, #0
 80071d4:	4628      	mov	r0, r5
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	b118      	cbz	r0, 80071e2 <_fflush_r+0x1a>
 80071da:	6983      	ldr	r3, [r0, #24]
 80071dc:	b90b      	cbnz	r3, 80071e2 <_fflush_r+0x1a>
 80071de:	f7fe f945 	bl	800546c <__sinit>
 80071e2:	4b14      	ldr	r3, [pc, #80]	; (8007234 <_fflush_r+0x6c>)
 80071e4:	429c      	cmp	r4, r3
 80071e6:	d11b      	bne.n	8007220 <_fflush_r+0x58>
 80071e8:	686c      	ldr	r4, [r5, #4]
 80071ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ef      	beq.n	80071d2 <_fflush_r+0xa>
 80071f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071f4:	07d0      	lsls	r0, r2, #31
 80071f6:	d404      	bmi.n	8007202 <_fflush_r+0x3a>
 80071f8:	0599      	lsls	r1, r3, #22
 80071fa:	d402      	bmi.n	8007202 <_fflush_r+0x3a>
 80071fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fe:	f7fe fd46 	bl	8005c8e <__retarget_lock_acquire_recursive>
 8007202:	4628      	mov	r0, r5
 8007204:	4621      	mov	r1, r4
 8007206:	f7ff ff59 	bl	80070bc <__sflush_r>
 800720a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800720c:	07da      	lsls	r2, r3, #31
 800720e:	4605      	mov	r5, r0
 8007210:	d4e0      	bmi.n	80071d4 <_fflush_r+0xc>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	059b      	lsls	r3, r3, #22
 8007216:	d4dd      	bmi.n	80071d4 <_fflush_r+0xc>
 8007218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800721a:	f7fe fd39 	bl	8005c90 <__retarget_lock_release_recursive>
 800721e:	e7d9      	b.n	80071d4 <_fflush_r+0xc>
 8007220:	4b05      	ldr	r3, [pc, #20]	; (8007238 <_fflush_r+0x70>)
 8007222:	429c      	cmp	r4, r3
 8007224:	d101      	bne.n	800722a <_fflush_r+0x62>
 8007226:	68ac      	ldr	r4, [r5, #8]
 8007228:	e7df      	b.n	80071ea <_fflush_r+0x22>
 800722a:	4b04      	ldr	r3, [pc, #16]	; (800723c <_fflush_r+0x74>)
 800722c:	429c      	cmp	r4, r3
 800722e:	bf08      	it	eq
 8007230:	68ec      	ldreq	r4, [r5, #12]
 8007232:	e7da      	b.n	80071ea <_fflush_r+0x22>
 8007234:	080077cc 	.word	0x080077cc
 8007238:	080077ec 	.word	0x080077ec
 800723c:	080077ac 	.word	0x080077ac

08007240 <fiprintf>:
 8007240:	b40e      	push	{r1, r2, r3}
 8007242:	b503      	push	{r0, r1, lr}
 8007244:	4601      	mov	r1, r0
 8007246:	ab03      	add	r3, sp, #12
 8007248:	4805      	ldr	r0, [pc, #20]	; (8007260 <fiprintf+0x20>)
 800724a:	f853 2b04 	ldr.w	r2, [r3], #4
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	f7ff fc85 	bl	8006b60 <_vfiprintf_r>
 8007256:	b002      	add	sp, #8
 8007258:	f85d eb04 	ldr.w	lr, [sp], #4
 800725c:	b003      	add	sp, #12
 800725e:	4770      	bx	lr
 8007260:	2000000c 	.word	0x2000000c

08007264 <_lseek_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	; (8007284 <_lseek_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7fa f952 	bl	800151c <_lseek>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_lseek_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_lseek_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	20000264 	.word	0x20000264

08007288 <__swhatbuf_r>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	460e      	mov	r6, r1
 800728c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007290:	2900      	cmp	r1, #0
 8007292:	b096      	sub	sp, #88	; 0x58
 8007294:	4614      	mov	r4, r2
 8007296:	461d      	mov	r5, r3
 8007298:	da08      	bge.n	80072ac <__swhatbuf_r+0x24>
 800729a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	061a      	lsls	r2, r3, #24
 80072a4:	d410      	bmi.n	80072c8 <__swhatbuf_r+0x40>
 80072a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072aa:	e00e      	b.n	80072ca <__swhatbuf_r+0x42>
 80072ac:	466a      	mov	r2, sp
 80072ae:	f000 f8c1 	bl	8007434 <_fstat_r>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	dbf1      	blt.n	800729a <__swhatbuf_r+0x12>
 80072b6:	9a01      	ldr	r2, [sp, #4]
 80072b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072c0:	425a      	negs	r2, r3
 80072c2:	415a      	adcs	r2, r3
 80072c4:	602a      	str	r2, [r5, #0]
 80072c6:	e7ee      	b.n	80072a6 <__swhatbuf_r+0x1e>
 80072c8:	2340      	movs	r3, #64	; 0x40
 80072ca:	2000      	movs	r0, #0
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	b016      	add	sp, #88	; 0x58
 80072d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080072d4 <__smakebuf_r>:
 80072d4:	898b      	ldrh	r3, [r1, #12]
 80072d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072d8:	079d      	lsls	r5, r3, #30
 80072da:	4606      	mov	r6, r0
 80072dc:	460c      	mov	r4, r1
 80072de:	d507      	bpl.n	80072f0 <__smakebuf_r+0x1c>
 80072e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	6123      	str	r3, [r4, #16]
 80072e8:	2301      	movs	r3, #1
 80072ea:	6163      	str	r3, [r4, #20]
 80072ec:	b002      	add	sp, #8
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	ab01      	add	r3, sp, #4
 80072f2:	466a      	mov	r2, sp
 80072f4:	f7ff ffc8 	bl	8007288 <__swhatbuf_r>
 80072f8:	9900      	ldr	r1, [sp, #0]
 80072fa:	4605      	mov	r5, r0
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff fa35 	bl	800676c <_malloc_r>
 8007302:	b948      	cbnz	r0, 8007318 <__smakebuf_r+0x44>
 8007304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007308:	059a      	lsls	r2, r3, #22
 800730a:	d4ef      	bmi.n	80072ec <__smakebuf_r+0x18>
 800730c:	f023 0303 	bic.w	r3, r3, #3
 8007310:	f043 0302 	orr.w	r3, r3, #2
 8007314:	81a3      	strh	r3, [r4, #12]
 8007316:	e7e3      	b.n	80072e0 <__smakebuf_r+0xc>
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <__smakebuf_r+0x7c>)
 800731a:	62b3      	str	r3, [r6, #40]	; 0x28
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	6020      	str	r0, [r4, #0]
 8007320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	9b00      	ldr	r3, [sp, #0]
 8007328:	6163      	str	r3, [r4, #20]
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	6120      	str	r0, [r4, #16]
 800732e:	b15b      	cbz	r3, 8007348 <__smakebuf_r+0x74>
 8007330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007334:	4630      	mov	r0, r6
 8007336:	f000 f88f 	bl	8007458 <_isatty_r>
 800733a:	b128      	cbz	r0, 8007348 <__smakebuf_r+0x74>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	81a3      	strh	r3, [r4, #12]
 8007348:	89a0      	ldrh	r0, [r4, #12]
 800734a:	4305      	orrs	r5, r0
 800734c:	81a5      	strh	r5, [r4, #12]
 800734e:	e7cd      	b.n	80072ec <__smakebuf_r+0x18>
 8007350:	08005405 	.word	0x08005405

08007354 <memmove>:
 8007354:	4288      	cmp	r0, r1
 8007356:	b510      	push	{r4, lr}
 8007358:	eb01 0402 	add.w	r4, r1, r2
 800735c:	d902      	bls.n	8007364 <memmove+0x10>
 800735e:	4284      	cmp	r4, r0
 8007360:	4623      	mov	r3, r4
 8007362:	d807      	bhi.n	8007374 <memmove+0x20>
 8007364:	1e43      	subs	r3, r0, #1
 8007366:	42a1      	cmp	r1, r4
 8007368:	d008      	beq.n	800737c <memmove+0x28>
 800736a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800736e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007372:	e7f8      	b.n	8007366 <memmove+0x12>
 8007374:	4402      	add	r2, r0
 8007376:	4601      	mov	r1, r0
 8007378:	428a      	cmp	r2, r1
 800737a:	d100      	bne.n	800737e <memmove+0x2a>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007386:	e7f7      	b.n	8007378 <memmove+0x24>

08007388 <__malloc_lock>:
 8007388:	4801      	ldr	r0, [pc, #4]	; (8007390 <__malloc_lock+0x8>)
 800738a:	f7fe bc80 	b.w	8005c8e <__retarget_lock_acquire_recursive>
 800738e:	bf00      	nop
 8007390:	20000258 	.word	0x20000258

08007394 <__malloc_unlock>:
 8007394:	4801      	ldr	r0, [pc, #4]	; (800739c <__malloc_unlock+0x8>)
 8007396:	f7fe bc7b 	b.w	8005c90 <__retarget_lock_release_recursive>
 800739a:	bf00      	nop
 800739c:	20000258 	.word	0x20000258

080073a0 <_realloc_r>:
 80073a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a4:	4680      	mov	r8, r0
 80073a6:	4614      	mov	r4, r2
 80073a8:	460e      	mov	r6, r1
 80073aa:	b921      	cbnz	r1, 80073b6 <_realloc_r+0x16>
 80073ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b0:	4611      	mov	r1, r2
 80073b2:	f7ff b9db 	b.w	800676c <_malloc_r>
 80073b6:	b92a      	cbnz	r2, 80073c4 <_realloc_r+0x24>
 80073b8:	f7ff f96c 	bl	8006694 <_free_r>
 80073bc:	4625      	mov	r5, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c4:	f000 f858 	bl	8007478 <_malloc_usable_size_r>
 80073c8:	4284      	cmp	r4, r0
 80073ca:	4607      	mov	r7, r0
 80073cc:	d802      	bhi.n	80073d4 <_realloc_r+0x34>
 80073ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073d2:	d812      	bhi.n	80073fa <_realloc_r+0x5a>
 80073d4:	4621      	mov	r1, r4
 80073d6:	4640      	mov	r0, r8
 80073d8:	f7ff f9c8 	bl	800676c <_malloc_r>
 80073dc:	4605      	mov	r5, r0
 80073de:	2800      	cmp	r0, #0
 80073e0:	d0ed      	beq.n	80073be <_realloc_r+0x1e>
 80073e2:	42bc      	cmp	r4, r7
 80073e4:	4622      	mov	r2, r4
 80073e6:	4631      	mov	r1, r6
 80073e8:	bf28      	it	cs
 80073ea:	463a      	movcs	r2, r7
 80073ec:	f7fe fc6c 	bl	8005cc8 <memcpy>
 80073f0:	4631      	mov	r1, r6
 80073f2:	4640      	mov	r0, r8
 80073f4:	f7ff f94e 	bl	8006694 <_free_r>
 80073f8:	e7e1      	b.n	80073be <_realloc_r+0x1e>
 80073fa:	4635      	mov	r5, r6
 80073fc:	e7df      	b.n	80073be <_realloc_r+0x1e>
	...

08007400 <_read_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4d07      	ldr	r5, [pc, #28]	; (8007420 <_read_r+0x20>)
 8007404:	4604      	mov	r4, r0
 8007406:	4608      	mov	r0, r1
 8007408:	4611      	mov	r1, r2
 800740a:	2200      	movs	r2, #0
 800740c:	602a      	str	r2, [r5, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	f7fa f840 	bl	8001494 <_read>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_read_r+0x1e>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_read_r+0x1e>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20000264 	.word	0x20000264

08007424 <abort>:
 8007424:	b508      	push	{r3, lr}
 8007426:	2006      	movs	r0, #6
 8007428:	f000 f856 	bl	80074d8 <raise>
 800742c:	2001      	movs	r0, #1
 800742e:	f7fa f827 	bl	8001480 <_exit>
	...

08007434 <_fstat_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d07      	ldr	r5, [pc, #28]	; (8007454 <_fstat_r+0x20>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	f7fa f850 	bl	80014e6 <_fstat>
 8007446:	1c43      	adds	r3, r0, #1
 8007448:	d102      	bne.n	8007450 <_fstat_r+0x1c>
 800744a:	682b      	ldr	r3, [r5, #0]
 800744c:	b103      	cbz	r3, 8007450 <_fstat_r+0x1c>
 800744e:	6023      	str	r3, [r4, #0]
 8007450:	bd38      	pop	{r3, r4, r5, pc}
 8007452:	bf00      	nop
 8007454:	20000264 	.word	0x20000264

08007458 <_isatty_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_isatty_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fa f84f 	bl	8001506 <_isatty>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_isatty_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_isatty_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20000264 	.word	0x20000264

08007478 <_malloc_usable_size_r>:
 8007478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800747c:	1f18      	subs	r0, r3, #4
 800747e:	2b00      	cmp	r3, #0
 8007480:	bfbc      	itt	lt
 8007482:	580b      	ldrlt	r3, [r1, r0]
 8007484:	18c0      	addlt	r0, r0, r3
 8007486:	4770      	bx	lr

08007488 <_raise_r>:
 8007488:	291f      	cmp	r1, #31
 800748a:	b538      	push	{r3, r4, r5, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	460d      	mov	r5, r1
 8007490:	d904      	bls.n	800749c <_raise_r+0x14>
 8007492:	2316      	movs	r3, #22
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	f04f 30ff 	mov.w	r0, #4294967295
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800749e:	b112      	cbz	r2, 80074a6 <_raise_r+0x1e>
 80074a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074a4:	b94b      	cbnz	r3, 80074ba <_raise_r+0x32>
 80074a6:	4620      	mov	r0, r4
 80074a8:	f000 f830 	bl	800750c <_getpid_r>
 80074ac:	462a      	mov	r2, r5
 80074ae:	4601      	mov	r1, r0
 80074b0:	4620      	mov	r0, r4
 80074b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b6:	f000 b817 	b.w	80074e8 <_kill_r>
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d00a      	beq.n	80074d4 <_raise_r+0x4c>
 80074be:	1c59      	adds	r1, r3, #1
 80074c0:	d103      	bne.n	80074ca <_raise_r+0x42>
 80074c2:	2316      	movs	r3, #22
 80074c4:	6003      	str	r3, [r0, #0]
 80074c6:	2001      	movs	r0, #1
 80074c8:	e7e7      	b.n	800749a <_raise_r+0x12>
 80074ca:	2400      	movs	r4, #0
 80074cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074d0:	4628      	mov	r0, r5
 80074d2:	4798      	blx	r3
 80074d4:	2000      	movs	r0, #0
 80074d6:	e7e0      	b.n	800749a <_raise_r+0x12>

080074d8 <raise>:
 80074d8:	4b02      	ldr	r3, [pc, #8]	; (80074e4 <raise+0xc>)
 80074da:	4601      	mov	r1, r0
 80074dc:	6818      	ldr	r0, [r3, #0]
 80074de:	f7ff bfd3 	b.w	8007488 <_raise_r>
 80074e2:	bf00      	nop
 80074e4:	2000000c 	.word	0x2000000c

080074e8 <_kill_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	; (8007508 <_kill_r+0x20>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f7f9 ffb3 	bl	8001460 <_kill>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d102      	bne.n	8007504 <_kill_r+0x1c>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b103      	cbz	r3, 8007504 <_kill_r+0x1c>
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	bf00      	nop
 8007508:	20000264 	.word	0x20000264

0800750c <_getpid_r>:
 800750c:	f7f9 bfa0 	b.w	8001450 <_getpid>

08007510 <_init>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr

0800751c <_fini>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr
