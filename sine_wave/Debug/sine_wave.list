
sine_wave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009358  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  080094e8  080094e8  000194e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b00  08009b00  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b08  08009b08  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000b90  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d64  20000d64  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b420  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f44  00000000  00000000  0002b667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c20  00000000  00000000  0002d5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000944  00000000  00000000  0002e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ea4  00000000  00000000  0002eb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d898  00000000  00000000  000509b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc3b9  00000000  00000000  0005e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004960  00000000  00000000  0012a60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0012ef6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094d0 	.word	0x080094d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080094d0 	.word	0x080094d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_GPIO_EXTI_Callback>:
static void MX_DAC_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
uint8_t mode =0;
uint8_t n;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ffe:	f000 fea7 	bl	8001d50 <HAL_DAC_Stop_DMA>

	mode = mode +1;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 800100c:	701a      	strb	r2, [r3, #0]
	if (mode>2)
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d902      	bls.n	800101c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		mode=0;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
	}
	if (mode == 0){
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <HAL_GPIO_EXTI_Callback+0x3a>
		n=1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_GPIO_EXTI_Callback+0x68>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
	}
	if (mode == 1){
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0x48>
		n=3;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_GPIO_EXTI_Callback+0x68>)
 8001034:	2203      	movs	r2, #3
 8001036:	701a      	strb	r2, [r3, #0]
	}
	if (mode == 2){
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_GPIO_EXTI_Callback+0x64>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d102      	bne.n	8001046 <HAL_GPIO_EXTI_Callback+0x56>
		n=6;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_GPIO_EXTI_Callback+0x68>)
 8001042:	2206      	movs	r2, #6
 8001044:	701a      	strb	r2, [r3, #0]
	}
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001f0 	.word	0x200001f0
 8001054:	200002ac 	.word	0x200002ac
 8001058:	200002ad 	.word	0x200002ad
 800105c:	00000000 	.word	0x00000000

08001060 <get_sineval>:
uint32_t sine_val[600];
#define  PI  3.1415936

void get_sineval()

{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
unsigned int i;
for(i =0; i<600;i++)
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e04a      	b.n	8001102 <get_sineval+0xa2>
{
sine_val[i]= (sin(i*2*PI*n/600))*4096/2;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa47 	bl	8000504 <__aeabi_ui2d>
 8001076:	a32c      	add	r3, pc, #176	; (adr r3, 8001128 <get_sineval+0xc8>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fabc 	bl	80005f8 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4614      	mov	r4, r2
 8001086:	461d      	mov	r5, r3
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <get_sineval+0xb8>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa49 	bl	8000524 <__aeabi_i2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff faad 	bl	80005f8 <__aeabi_dmul>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <get_sineval+0xbc>)
 80010ac:	f7ff fbce 	bl	800084c <__aeabi_ddiv>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	ec43 2b17 	vmov	d7, r2, r3
 80010b8:	eeb0 0a47 	vmov.f32	s0, s14
 80010bc:	eef0 0a67 	vmov.f32	s1, s15
 80010c0:	f007 f9c6 	bl	8008450 <sin>
 80010c4:	ec51 0b10 	vmov	r0, r1, d0
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <get_sineval+0xc0>)
 80010ce:	f7ff fa93 	bl	80005f8 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd5b 	bl	8000ba8 <__aeabi_d2uiz>
 80010f2:	4602      	mov	r2, r0
 80010f4:	490b      	ldr	r1, [pc, #44]	; (8001124 <get_sineval+0xc4>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
for(i =0; i<600;i++)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001108:	d3b0      	bcc.n	800106c <get_sineval+0xc>
}

}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bdb0      	pop	{r4, r5, r7, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	200002ad 	.word	0x200002ad
 800111c:	4082c000 	.word	0x4082c000
 8001120:	40b00000 	.word	0x40b00000
 8001124:	200002b0 	.word	0x200002b0
 8001128:	d34a9550 	.word	0xd34a9550
 800112c:	400921fb 	.word	0x400921fb

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001136:	f000 fb97 	bl	8001868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113a:	f000 f81d 	bl	8001178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113e:	f000 f91b 	bl	8001378 <MX_GPIO_Init>
  MX_DMA_Init();
 8001142:	f000 f8f9 	bl	8001338 <MX_DMA_Init>
  MX_DAC_Init();
 8001146:	f000 f881 	bl	800124c <MX_DAC_Init>
  MX_TIM2_Init();
 800114a:	f000 f8a9 	bl	80012a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <main+0x3c>)
 8001150:	f002 f986 	bl	8003460 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_sineval();
 8001154:	f7ff ff84 	bl	8001060 <get_sineval>
	  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, sine_val, 600, DAC_ALIGN_12B_R);
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <main+0x40>)
 8001162:	2100      	movs	r1, #0
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <main+0x44>)
 8001166:	f000 fd25 	bl	8001bb4 <HAL_DAC_Start_DMA>
	  get_sineval();
 800116a:	e7f3      	b.n	8001154 <main+0x24>
 800116c:	20000264 	.word	0x20000264
 8001170:	200002b0 	.word	0x200002b0
 8001174:	200001f0 	.word	0x200001f0

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fd27 	bl	8004bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b28      	ldr	r3, [pc, #160]	; (8001244 <SystemClock_Config+0xcc>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a27      	ldr	r2, [pc, #156]	; (8001244 <SystemClock_Config+0xcc>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b25      	ldr	r3, [pc, #148]	; (8001244 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <SystemClock_Config+0xd0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a21      	ldr	r2, [pc, #132]	; (8001248 <SystemClock_Config+0xd0>)
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011de:	2302      	movs	r3, #2
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ec:	23a8      	movs	r3, #168	; 0xa8
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011f4:	2307      	movs	r3, #7
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 fc7b 	bl	8002af8 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001208:	f000 f91a 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001218:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800121c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2105      	movs	r1, #5
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fedc 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001236:	f000 f903 	bl	8001440 <Error_Handler>
  }
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	; 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40007000 	.word	0x40007000

0800124c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_DAC_Init+0x4c>)
 800125c:	4a0f      	ldr	r2, [pc, #60]	; (800129c <MX_DAC_Init+0x50>)
 800125e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_DAC_Init+0x4c>)
 8001262:	f000 fc84 	bl	8001b6e <HAL_DAC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800126c:	f000 f8e8 	bl	8001440 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001270:	2324      	movs	r3, #36	; 0x24
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_DAC_Init+0x4c>)
 8001280:	f000 fdcc 	bl	8001e1c <HAL_DAC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800128a:	f000 f8d9 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001f0 	.word	0x200001f0
 800129c:	40007400 	.word	0x40007400

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM2_Init+0x94>)
 80012be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM2_Init+0x94>)
 80012c6:	2253      	movs	r2, #83	; 0x53
 80012c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM2_Init+0x94>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM2_Init+0x94>)
 80012d2:	2209      	movs	r2, #9
 80012d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_TIM2_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM2_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e2:	4814      	ldr	r0, [pc, #80]	; (8001334 <MX_TIM2_Init+0x94>)
 80012e4:	f002 f86c 	bl	80033c0 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80012ee:	f000 f8a7 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4619      	mov	r1, r3
 80012fe:	480d      	ldr	r0, [pc, #52]	; (8001334 <MX_TIM2_Init+0x94>)
 8001300:	f002 fa1e 	bl	8003740 <HAL_TIM_ConfigClockSource>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 f899 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800130e:	2320      	movs	r3, #32
 8001310:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001316:	463b      	mov	r3, r7
 8001318:	4619      	mov	r1, r3
 800131a:	4806      	ldr	r0, [pc, #24]	; (8001334 <MX_TIM2_Init+0x94>)
 800131c:	f002 fc44 	bl	8003ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001326:	f000 f88b 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000264 	.word	0x20000264

08001338 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_DMA_Init+0x3c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <MX_DMA_Init+0x3c>)
 8001348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_DMA_Init+0x3c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2010      	movs	r0, #16
 8001360:	f000 fbcf 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001364:	2010      	movs	r0, #16
 8001366:	f000 fbe8 	bl	8001b3a <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <MX_GPIO_Init+0xc0>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a28      	ldr	r2, [pc, #160]	; (8001438 <MX_GPIO_Init+0xc0>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <MX_GPIO_Init+0xc0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : sw_Pin */
  GPIO_InitStruct.Pin = sw_Pin;
 80013e2:	2301      	movs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sw_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	4619      	mov	r1, r3
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <MX_GPIO_Init+0xc4>)
 80013f8:	f001 f9ca 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800140e:	230a      	movs	r3, #10
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4619      	mov	r1, r3
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <MX_GPIO_Init+0xc4>)
 800141a:	f001 f9b9 	bl	8002790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	2006      	movs	r0, #6
 8001424:	f000 fb6d 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001428:	2006      	movs	r0, #6
 800142a:	f000 fb86 	bl	8001b3a <HAL_NVIC_EnableIRQ>

}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	e7fe      	b.n	8001448 <Error_Handler+0x8>
	...

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800148a:	2007      	movs	r0, #7
 800148c:	f000 fb2e 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <HAL_DAC_MspInit+0xdc>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d158      	bne.n	8001570 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_DAC_MspInit+0xe0>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a2d      	ldr	r2, [pc, #180]	; (800157c <HAL_DAC_MspInit+0xe0>)
 80014c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_DAC_MspInit+0xe0>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_DAC_MspInit+0xe0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a26      	ldr	r2, [pc, #152]	; (800157c <HAL_DAC_MspInit+0xe0>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b24      	ldr	r3, [pc, #144]	; (800157c <HAL_DAC_MspInit+0xe0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014f6:	2310      	movs	r3, #16
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	2303      	movs	r3, #3
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <HAL_DAC_MspInit+0xe4>)
 800150a:	f001 f941 	bl	8002790 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_DAC_MspInit+0xec>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001516:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800151a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 800151e:	2240      	movs	r2, #64	; 0x40
 8001520:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 800152a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001532:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001536:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 800153a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800153e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001546:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001554:	480b      	ldr	r0, [pc, #44]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001556:	f000 fd3b 	bl	8001fd0 <HAL_DMA_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001560:	f7ff ff6e 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_DAC_MspInit+0xe8>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40007400 	.word	0x40007400
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	20000204 	.word	0x20000204
 8001588:	40026088 	.word	0x40026088

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159c:	d115      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	201c      	movs	r0, #28
 80015c0:	f000 fa9f 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c4:	201c      	movs	r0, #28
 80015c6:	f000 fab8 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f972 	bl	800190c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sw_Pin);
 8001630:	2001      	movs	r0, #1
 8001632:	f001 fa49 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Stream5_IRQHandler+0x10>)
 8001642:	f000 fe3b 	bl	80022bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000204 	.word	0x20000204

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f001 ff6b 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000264 	.word	0x20000264

08001664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
	return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800167e:	f003 faff 	bl	8004c80 <__errno>
 8001682:	4603      	mov	r3, r0
 8001684:	2216      	movs	r2, #22
 8001686:	601a      	str	r2, [r3, #0]
	return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe7 	bl	8001674 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016a6:	e7fe      	b.n	80016a6 <_exit+0x12>

080016a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	e00a      	b.n	80016d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016ba:	f3af 8000 	nop.w
 80016be:	4601      	mov	r1, r0
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	b2ca      	uxtb	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbf0      	blt.n	80016ba <_read+0x12>
	}

return len;
 80016d8:	687b      	ldr	r3, [r7, #4]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	e009      	b.n	8001708 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697a      	ldr	r2, [r7, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	429a      	cmp	r2, r3
 800170e:	dbf1      	blt.n	80016f4 <_write+0x12>
	}
	return len;
 8001710:	687b      	ldr	r3, [r7, #4]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_close>:

int _close(int file)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
	return -1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001742:	605a      	str	r2, [r3, #4]
	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_isatty>:

int _isatty(int file)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
	return 1;
 800175a:	2301      	movs	r3, #1
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
	return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f003 fa64 	bl	8004c80 <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20020000 	.word	0x20020000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	20000c10 	.word	0x20000c10
 80017ec:	20000d68 	.word	0x20000d68

080017f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800184c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480d      	ldr	r0, [pc, #52]	; (8001850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181a:	490e      	ldr	r1, [pc, #56]	; (8001854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
 str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001830:	4c0b      	ldr	r4, [pc, #44]	; (8001860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800183e:	f7ff ffd7 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001842:	f003 fa23 	bl	8004c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7ff fc73 	bl	8001130 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800184c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001858:	08009b10 	.word	0x08009b10
  ldr r2, =_sbss
 800185c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001860:	20000d64 	.word	0x20000d64

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_Init+0x40>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001876:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_Init+0x40>)
 800187e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001882:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_Init+0x40>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001890:	2003      	movs	r0, #3
 8001892:	f000 f92b 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001896:	2000      	movs	r0, #0
 8001898:	f000 f808 	bl	80018ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800189c:	f7ff fdd6 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40023c00 	.word	0x40023c00

080018ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_InitTick+0x54>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x58>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f943 	bl	8001b56 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00e      	b.n	80018f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d80a      	bhi.n	80018f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f000 f90b 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ec:	4a06      	ldr	r2, [pc, #24]	; (8001908 <HAL_InitTick+0x5c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e000      	b.n	80018f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000000 	.word	0x20000000
 8001904:	20000008 	.word	0x20000008
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_IncTick+0x20>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x24>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_IncTick+0x24>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000008 	.word	0x20000008
 8001930:	20000c14 	.word	0x20000c14

08001934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return uwTick;
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <HAL_GetTick+0x14>)
 800193a:	681b      	ldr	r3, [r3, #0]
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000c14 	.word	0x20000c14

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff3e 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff8e 	bl	8001a40 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff31 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e014      	b.n	8001baa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fc83 	bl	800149c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	795b      	ldrb	r3, [r3, #5]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_DAC_Start_DMA+0x22>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0ab      	b.n	8001d2e <HAL_DAC_Start_DMA+0x17a>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2202      	movs	r2, #2
 8001be0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d12f      	bne.n	8001c48 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_DAC_Start_DMA+0x184>)
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	; (8001d3c <HAL_DAC_Start_DMA+0x188>)
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a50      	ldr	r2, [pc, #320]	; (8001d40 <HAL_DAC_Start_DMA+0x18c>)
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d013      	beq.n	8001c3e <HAL_DAC_Start_DMA+0x8a>
 8001c16:	6a3b      	ldr	r3, [r7, #32]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d845      	bhi.n	8001ca8 <HAL_DAC_Start_DMA+0xf4>
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_DAC_Start_DMA+0x76>
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d005      	beq.n	8001c34 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001c28:	e03e      	b.n	8001ca8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3308      	adds	r3, #8
 8001c30:	613b      	str	r3, [r7, #16]
        break;
 8001c32:	e03c      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	613b      	str	r3, [r7, #16]
        break;
 8001c3c:	e037      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3310      	adds	r3, #16
 8001c44:	613b      	str	r3, [r7, #16]
        break;
 8001c46:	e032      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a3d      	ldr	r2, [pc, #244]	; (8001d44 <HAL_DAC_Start_DMA+0x190>)
 8001c4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a3c      	ldr	r2, [pc, #240]	; (8001d48 <HAL_DAC_Start_DMA+0x194>)
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a3b      	ldr	r2, [pc, #236]	; (8001d4c <HAL_DAC_Start_DMA+0x198>)
 8001c5e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c6e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d013      	beq.n	8001c9e <HAL_DAC_Start_DMA+0xea>
 8001c76:	6a3b      	ldr	r3, [r7, #32]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d817      	bhi.n	8001cac <HAL_DAC_Start_DMA+0xf8>
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_DAC_Start_DMA+0xd6>
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d005      	beq.n	8001c94 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c88:	e010      	b.n	8001cac <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3314      	adds	r3, #20
 8001c90:	613b      	str	r3, [r7, #16]
        break;
 8001c92:	e00c      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3318      	adds	r3, #24
 8001c9a:	613b      	str	r3, [r7, #16]
        break;
 8001c9c:	e007      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	331c      	adds	r3, #28
 8001ca4:	613b      	str	r3, [r7, #16]
        break;
 8001ca6:	e002      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
        break;
 8001ca8:	bf00      	nop
 8001caa:	e000      	b.n	8001cae <HAL_DAC_Start_DMA+0xfa>
        break;
 8001cac:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d111      	bne.n	8001cd8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6898      	ldr	r0, [r3, #8]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	f000 fa2d 	bl	800212c <HAL_DMA_Start_IT>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
 8001cd6:	e010      	b.n	8001cfa <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68d8      	ldr	r0, [r3, #12]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	f000 fa1b 	bl	800212c <HAL_DMA_Start_IT>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6819      	ldr	r1, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2201      	movs	r2, #1
 8001d14:	409a      	lsls	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e005      	b.n	8001d2c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08001ebb 	.word	0x08001ebb
 8001d3c:	08001edd 	.word	0x08001edd
 8001d40:	08001ef9 	.word	0x08001ef9
 8001d44:	08001f63 	.word	0x08001f63
 8001d48:	08001f85 	.word	0x08001f85
 8001d4c:	08001fa1 	.word	0x08001fa1

08001d50 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	400a      	ands	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6819      	ldr	r1, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	2201      	movs	r2, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	400a      	ands	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10d      	bne.n	8001db6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fa1c 	bl	80021dc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e00c      	b.n	8001dd0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fa0e 	bl	80021dc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001dce:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	795b      	ldrb	r3, [r3, #5]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_DAC_ConfigChannel+0x18>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e03c      	b.n	8001eae <HAL_DAC_ConfigChannel+0x92>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	22c0      	movs	r2, #192	; 0xc0
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff ff89 	bl	8001de0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	711a      	strb	r2, [r3, #4]
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f7ff ff82 	bl	8001df4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f043 0204 	orr.w	r2, r3, #4
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7ff ff78 	bl	8001e08 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	711a      	strb	r2, [r3, #4]
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff ffd8 	bl	8001f26 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	711a      	strb	r2, [r3, #4]
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff ffd1 	bl	8001f3a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7ff ffc7 	bl	8001f4e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	711a      	strb	r2, [r3, #4]
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fdc:	f7ff fcaa 	bl	8001934 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e099      	b.n	8002120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800200c:	e00f      	b.n	800202e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200e:	f7ff fc91 	bl	8001934 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b05      	cmp	r3, #5
 800201a:	d908      	bls.n	800202e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2203      	movs	r2, #3
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e078      	b.n	8002120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1e8      	bne.n	800200e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <HAL_DMA_Init+0x158>)
 8002048:	4013      	ands	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800205a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	2b04      	cmp	r3, #4
 8002086:	d107      	bne.n	8002098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	4313      	orrs	r3, r2
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f023 0307 	bic.w	r3, r3, #7
 80020ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d117      	bne.n	80020f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fadf 	bl	8002698 <DMA_CheckFifoParam>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2240      	movs	r2, #64	; 0x40
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ee:	2301      	movs	r3, #1
 80020f0:	e016      	b.n	8002120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa96 	bl	800262c <DMA_CalcBaseAndBitshift>
 8002100:	4603      	mov	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	223f      	movs	r2, #63	; 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	f010803f 	.word	0xf010803f

0800212c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_DMA_Start_IT+0x26>
 800214e:	2302      	movs	r3, #2
 8002150:	e040      	b.n	80021d4 <HAL_DMA_Start_IT+0xa8>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b01      	cmp	r3, #1
 8002164:	d12f      	bne.n	80021c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2202      	movs	r2, #2
 800216a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fa28 	bl	80025d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	223f      	movs	r2, #63	; 0x3f
 8002186:	409a      	lsls	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0216 	orr.w	r2, r2, #22
 800219a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d007      	beq.n	80021b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0208 	orr.w	r2, r2, #8
 80021b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e005      	b.n	80021d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021ea:	f7ff fba3 	bl	8001934 <HAL_GetTick>
 80021ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d008      	beq.n	800220e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2280      	movs	r2, #128	; 0x80
 8002200:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e052      	b.n	80022b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0216 	bic.w	r2, r2, #22
 800221c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800222c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_DMA_Abort+0x62>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0208 	bic.w	r2, r2, #8
 800224c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225e:	e013      	b.n	8002288 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002260:	f7ff fb68 	bl	8001934 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b05      	cmp	r3, #5
 800226c:	d90c      	bls.n	8002288 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2203      	movs	r2, #3
 8002278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e015      	b.n	80022b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e4      	bne.n	8002260 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	223f      	movs	r2, #63	; 0x3f
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c8:	4b8e      	ldr	r3, [pc, #568]	; (8002504 <HAL_DMA_IRQHandler+0x248>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a8e      	ldr	r2, [pc, #568]	; (8002508 <HAL_DMA_IRQHandler+0x24c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	2208      	movs	r2, #8
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0204 	bic.w	r2, r2, #4
 800230e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2208      	movs	r2, #8
 8002316:	409a      	lsls	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d012      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2201      	movs	r2, #1
 800234c:	409a      	lsls	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2204      	movs	r2, #4
 8002364:	409a      	lsls	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d012      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00b      	beq.n	8002394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	2204      	movs	r2, #4
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0204 	orr.w	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2210      	movs	r2, #16
 800239a:	409a      	lsls	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d043      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03c      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2210      	movs	r2, #16
 80023b8:	409a      	lsls	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d108      	bne.n	80023ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d024      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
 80023ea:	e01f      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
 80023fc:	e016      	b.n	800242c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0208 	bic.w	r2, r2, #8
 800241a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2220      	movs	r2, #32
 8002432:	409a      	lsls	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4013      	ands	r3, r2
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 808f 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8087 	beq.w	800255c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	2220      	movs	r2, #32
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b05      	cmp	r3, #5
 8002464:	d136      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0216 	bic.w	r2, r2, #22
 8002474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_DMA_IRQHandler+0x1da>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0208 	bic.w	r2, r2, #8
 80024a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	223f      	movs	r2, #63	; 0x3f
 80024ac:	409a      	lsls	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07e      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
        }
        return;
 80024d2:	e079      	b.n	80025c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10d      	bne.n	800250c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d031      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
 8002500:	e02c      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000
 8002508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002510:	2b00      	cmp	r3, #0
 8002512:	d023      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	4798      	blx	r3
 800251c:	e01e      	b.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d10f      	bne.n	800254c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002560:	2b00      	cmp	r3, #0
 8002562:	d032      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2205      	movs	r2, #5
 8002574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3301      	adds	r3, #1
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	d307      	bcc.n	80025a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f2      	bne.n	8002588 <HAL_DMA_IRQHandler+0x2cc>
 80025a2:	e000      	b.n	80025a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80025a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e000      	b.n	80025ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80025c8:	bf00      	nop
    }
  }
}
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d108      	bne.n	8002610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800260e:	e007      	b.n	8002620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	60da      	str	r2, [r3, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3b10      	subs	r3, #16
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <DMA_CalcBaseAndBitshift+0x64>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002646:	4a13      	ldr	r2, [pc, #76]	; (8002694 <DMA_CalcBaseAndBitshift+0x68>)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b03      	cmp	r3, #3
 8002658:	d909      	bls.n	800266e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002662:	f023 0303 	bic.w	r3, r3, #3
 8002666:	1d1a      	adds	r2, r3, #4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
 800266c:	e007      	b.n	800267e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002682:	4618      	mov	r0, r3
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	aaaaaaab 	.word	0xaaaaaaab
 8002694:	080094f8 	.word	0x080094f8

08002698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d11f      	bne.n	80026f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d856      	bhi.n	8002766 <DMA_CheckFifoParam+0xce>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <DMA_CheckFifoParam+0x28>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026d1 	.word	0x080026d1
 80026cc:	08002767 	.word	0x08002767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d046      	beq.n	800276a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e0:	e043      	b.n	800276a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ea:	d140      	bne.n	800276e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f0:	e03d      	b.n	800276e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	d121      	bne.n	8002740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d837      	bhi.n	8002772 <DMA_CheckFifoParam+0xda>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <DMA_CheckFifoParam+0x70>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	08002719 	.word	0x08002719
 800270c:	0800271f 	.word	0x0800271f
 8002710:	08002719 	.word	0x08002719
 8002714:	08002731 	.word	0x08002731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
      break;
 800271c:	e030      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002722:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d025      	beq.n	8002776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272e:	e022      	b.n	8002776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002738:	d11f      	bne.n	800277a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800273e:	e01c      	b.n	800277a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d903      	bls.n	800274e <DMA_CheckFifoParam+0xb6>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d003      	beq.n	8002754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800274c:	e018      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	73fb      	strb	r3, [r7, #15]
      break;
 8002752:	e015      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00e      	beq.n	800277e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e00b      	b.n	800277e <DMA_CheckFifoParam+0xe6>
      break;
 8002766:	bf00      	nop
 8002768:	e00a      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;   
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
    }
  } 
  
  return status; 
 8002780:	7bfb      	ldrb	r3, [r7, #15]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e16b      	b.n	8002a84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 815a 	bne.w	8002a7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80b4 	beq.w	8002a7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a5f      	ldr	r2, [pc, #380]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b5d      	ldr	r3, [pc, #372]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a5b      	ldr	r2, [pc, #364]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_GPIO_Init+0x314>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02b      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a51      	ldr	r2, [pc, #324]	; (8002aa8 <HAL_GPIO_Init+0x318>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d025      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a50      	ldr	r2, [pc, #320]	; (8002aac <HAL_GPIO_Init+0x31c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d01f      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4e      	ldr	r2, [pc, #312]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_GPIO_Init+0x328>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x20a>
 8002996:	2307      	movs	r3, #7
 8002998:	e00e      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299a:	2308      	movs	r3, #8
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 800299e:	2306      	movs	r3, #6
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x228>
 80029b6:	2300      	movs	r3, #0
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029c8:	4935      	ldr	r1, [pc, #212]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4013      	ands	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fa:	4a32      	ldr	r2, [pc, #200]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_GPIO_Init+0x334>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	f67f ae90 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ade:	4a05      	ldr	r2, [pc, #20]	; (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fa82 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40013c00 	.word	0x40013c00

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e267      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e242      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a75      	ldr	r2, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6f      	ldr	r2, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6c      	ldr	r2, [pc, #432]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a68      	ldr	r2, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fec0 	bl	8001934 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe febc 	bl	8001934 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e207      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe feac 	bl	8001934 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fea8 	bl	8001934 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f3      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fe61 	bl	8001934 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe fe5d 	bl	8001934 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a8      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4925      	ldr	r1, [pc, #148]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fe40 	bl	8001934 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fe3c 	bl	8001934 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e187      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d036      	beq.n	8002d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fe20 	bl	8001934 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fe1c 	bl	8001934 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e167      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e01b      	b.n	8002d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fe09 	bl	8001934 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00e      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fe05 	bl	8001934 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d907      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e150      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470000 	.word	0x42470000
 8002d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ea      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8097 	beq.w	8002e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b77      	ldr	r3, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fdc5 	bl	8001934 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe fdc1 	bl	8001934 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e10c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2ea>
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x30c>
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5e      	ldr	r2, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a54      	ldr	r2, [pc, #336]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fd86 	bl	8001934 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fd82 	bl	8001934 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0cb      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ee      	beq.n	8002e2c <HAL_RCC_OscConfig+0x334>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe fd70 	bl	8001934 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fd6c 	bl	8001934 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0b5      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ee      	bne.n	8002e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a1 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d05c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d141      	bne.n	8002f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fd40 	bl	8001934 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fd3c 	bl	8001934 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e087      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe fd15 	bl	8001934 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fd11 	bl	8001934 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e05c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x416>
 8002f2c:	e054      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fcfe 	bl	8001934 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fcfa 	bl	8001934 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x444>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e038      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe fc2c 	bl	8001934 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe fc28 	bl	8001934 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fb8c 	bl	80018ac <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	080094e8 	.word	0x080094e8
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b094      	sub	sp, #80	; 0x50
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
 80031c0:	2300      	movs	r3, #0
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	2300      	movs	r3, #0
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f200 80e1 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031e6:	e0db      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031ec:	e0db      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b73      	ldr	r3, [pc, #460]	; (80033bc <HAL_RCC_GetSysClockFreq+0x208>)
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f2:	e0d8      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	2200      	movs	r2, #0
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
 8003214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4621      	mov	r1, r4
 8003240:	1a51      	subs	r1, r2, r1
 8003242:	6139      	str	r1, [r7, #16]
 8003244:	4629      	mov	r1, r5
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003258:	4659      	mov	r1, fp
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4651      	mov	r1, sl
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4651      	mov	r1, sl
 8003268:	ebb2 0801 	subs.w	r8, r2, r1
 800326c:	4659      	mov	r1, fp
 800326e:	eb63 0901 	sbc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	462b      	mov	r3, r5
 8003294:	eb49 0303 	adc.w	r3, r9, r3
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a6:	4629      	mov	r1, r5
 80032a8:	024b      	lsls	r3, r1, #9
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b0:	4621      	mov	r1, r4
 80032b2:	024a      	lsls	r2, r1, #9
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	2200      	movs	r2, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c4:	f7fd fce0 	bl	8000c88 <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4613      	mov	r3, r2
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	e058      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	2200      	movs	r2, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	4611      	mov	r1, r2
 80032de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	0159      	lsls	r1, r3, #5
 80032fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fe:	0150      	lsls	r0, r2, #5
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4641      	mov	r1, r8
 8003306:	ebb2 0a01 	subs.w	sl, r2, r1
 800330a:	4649      	mov	r1, r9
 800330c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800331c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003324:	ebb2 040a 	subs.w	r4, r2, sl
 8003328:	eb63 050b 	sbc.w	r5, r3, fp
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	464b      	mov	r3, r9
 8003348:	eb45 0303 	adc.w	r3, r5, r3
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335a:	4629      	mov	r1, r5
 800335c:	028b      	lsls	r3, r1, #10
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003364:	4621      	mov	r1, r4
 8003366:	028a      	lsls	r2, r1, #10
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	61fa      	str	r2, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	f7fd fc86 	bl	8000c88 <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4613      	mov	r3, r2
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3750      	adds	r7, #80	; 0x50
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	007a1200 	.word	0x007a1200

080033c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e041      	b.n	8003456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fe f8d0 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 fa98 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e046      	b.n	8003506 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_TIM_Base_Start+0xb4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d01d      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_TIM_Base_Start+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_TIM_Base_Start+0xbc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_TIM_Base_Start+0xc0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_TIM_Base_Start+0xc4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <HAL_TIM_Base_Start+0xc8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_TIM_Base_Start+0xcc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d010      	beq.n	8003504 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	e007      	b.n	8003504 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40010400 	.word	0x40010400
 8003528:	40014000 	.word	0x40014000
 800352c:	40001800 	.word	0x40001800

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0202 	mvn.w	r2, #2
 800355c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9bf 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9b1 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f9c2 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f995 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f987 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f998 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0208 	mvn.w	r2, #8
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2204      	movs	r2, #4
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f96b 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f95d 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f96e 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2208      	movs	r2, #8
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f941 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f933 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f944 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0201 	mvn.w	r2, #1
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f90d 	bl	80038ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 faea 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d107      	bne.n	800370c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f909 	bl	800391e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b20      	cmp	r3, #32
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b20      	cmp	r3, #32
 8003726:	d107      	bne.n	8003738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0220 	mvn.w	r2, #32
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fab4 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIM_ConfigClockSource+0x1c>
 8003758:	2302      	movs	r3, #2
 800375a:	e0b4      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x186>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800377a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003794:	d03e      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0xd4>
 8003796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379a:	f200 8087 	bhi.w	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	f000 8086 	beq.w	80038b2 <HAL_TIM_ConfigClockSource+0x172>
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	d87f      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b70      	cmp	r3, #112	; 0x70
 80037ae:	d01a      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0xa6>
 80037b0:	2b70      	cmp	r3, #112	; 0x70
 80037b2:	d87b      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b60      	cmp	r3, #96	; 0x60
 80037b6:	d050      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x11a>
 80037b8:	2b60      	cmp	r3, #96	; 0x60
 80037ba:	d877      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b50      	cmp	r3, #80	; 0x50
 80037be:	d03c      	beq.n	800383a <HAL_TIM_ConfigClockSource+0xfa>
 80037c0:	2b50      	cmp	r3, #80	; 0x50
 80037c2:	d873      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d058      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x13a>
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d86f      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b30      	cmp	r3, #48	; 0x30
 80037ce:	d064      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	2b30      	cmp	r3, #48	; 0x30
 80037d2:	d86b      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d060      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d867      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05c      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d05a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	e062      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f000 f9b7 	bl	8003b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	609a      	str	r2, [r3, #8]
      break;
 8003812:	e04f      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f000 f9a0 	bl	8003b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003836:	609a      	str	r2, [r3, #8]
      break;
 8003838:	e03c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 f914 	bl	8003a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2150      	movs	r1, #80	; 0x50
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f96d 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003858:	e02c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	f000 f933 	bl	8003ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2160      	movs	r1, #96	; 0x60
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f95d 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003878:	e01c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f000 f8f4 	bl	8003a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f94d 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003898:	e00c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f000 f944 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80038aa:	e003      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d027      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d023      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <TIM_Base_SetConfig+0x134>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_Base_SetConfig+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_Base_SetConfig+0x13c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40001800 	.word	0x40001800
 8003a6c:	40001c00 	.word	0x40001c00
 8003a70:	40002000 	.word	0x40002000

08003a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f043 0307 	orr.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e05a      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d01d      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <__cvt>:
 8003cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ccc:	ec55 4b10 	vmov	r4, r5, d0
 8003cd0:	2d00      	cmp	r5, #0
 8003cd2:	460e      	mov	r6, r1
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	462b      	mov	r3, r5
 8003cd8:	bfbb      	ittet	lt
 8003cda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003cde:	461d      	movlt	r5, r3
 8003ce0:	2300      	movge	r3, #0
 8003ce2:	232d      	movlt	r3, #45	; 0x2d
 8003ce4:	700b      	strb	r3, [r1, #0]
 8003ce6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ce8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003cec:	4691      	mov	r9, r2
 8003cee:	f023 0820 	bic.w	r8, r3, #32
 8003cf2:	bfbc      	itt	lt
 8003cf4:	4622      	movlt	r2, r4
 8003cf6:	4614      	movlt	r4, r2
 8003cf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cfc:	d005      	beq.n	8003d0a <__cvt+0x42>
 8003cfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003d02:	d100      	bne.n	8003d06 <__cvt+0x3e>
 8003d04:	3601      	adds	r6, #1
 8003d06:	2102      	movs	r1, #2
 8003d08:	e000      	b.n	8003d0c <__cvt+0x44>
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	ab03      	add	r3, sp, #12
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	ab02      	add	r3, sp, #8
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	ec45 4b10 	vmov	d0, r4, r5
 8003d18:	4653      	mov	r3, sl
 8003d1a:	4632      	mov	r2, r6
 8003d1c:	f001 f86c 	bl	8004df8 <_dtoa_r>
 8003d20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003d24:	4607      	mov	r7, r0
 8003d26:	d102      	bne.n	8003d2e <__cvt+0x66>
 8003d28:	f019 0f01 	tst.w	r9, #1
 8003d2c:	d022      	beq.n	8003d74 <__cvt+0xac>
 8003d2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003d32:	eb07 0906 	add.w	r9, r7, r6
 8003d36:	d110      	bne.n	8003d5a <__cvt+0x92>
 8003d38:	783b      	ldrb	r3, [r7, #0]
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d10a      	bne.n	8003d54 <__cvt+0x8c>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2300      	movs	r3, #0
 8003d42:	4620      	mov	r0, r4
 8003d44:	4629      	mov	r1, r5
 8003d46:	f7fc febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d4a:	b918      	cbnz	r0, 8003d54 <__cvt+0x8c>
 8003d4c:	f1c6 0601 	rsb	r6, r6, #1
 8003d50:	f8ca 6000 	str.w	r6, [sl]
 8003d54:	f8da 3000 	ldr.w	r3, [sl]
 8003d58:	4499      	add	r9, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	f7fc feb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d66:	b108      	cbz	r0, 8003d6c <__cvt+0xa4>
 8003d68:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d6c:	2230      	movs	r2, #48	; 0x30
 8003d6e:	9b03      	ldr	r3, [sp, #12]
 8003d70:	454b      	cmp	r3, r9
 8003d72:	d307      	bcc.n	8003d84 <__cvt+0xbc>
 8003d74:	9b03      	ldr	r3, [sp, #12]
 8003d76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d78:	1bdb      	subs	r3, r3, r7
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	b004      	add	sp, #16
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d84:	1c59      	adds	r1, r3, #1
 8003d86:	9103      	str	r1, [sp, #12]
 8003d88:	701a      	strb	r2, [r3, #0]
 8003d8a:	e7f0      	b.n	8003d6e <__cvt+0xa6>

08003d8c <__exponent>:
 8003d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2900      	cmp	r1, #0
 8003d92:	bfb8      	it	lt
 8003d94:	4249      	neglt	r1, r1
 8003d96:	f803 2b02 	strb.w	r2, [r3], #2
 8003d9a:	bfb4      	ite	lt
 8003d9c:	222d      	movlt	r2, #45	; 0x2d
 8003d9e:	222b      	movge	r2, #43	; 0x2b
 8003da0:	2909      	cmp	r1, #9
 8003da2:	7042      	strb	r2, [r0, #1]
 8003da4:	dd2a      	ble.n	8003dfc <__exponent+0x70>
 8003da6:	f10d 0207 	add.w	r2, sp, #7
 8003daa:	4617      	mov	r7, r2
 8003dac:	260a      	movs	r6, #10
 8003dae:	4694      	mov	ip, r2
 8003db0:	fb91 f5f6 	sdiv	r5, r1, r6
 8003db4:	fb06 1415 	mls	r4, r6, r5, r1
 8003db8:	3430      	adds	r4, #48	; 0x30
 8003dba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	2c63      	cmp	r4, #99	; 0x63
 8003dc2:	f102 32ff 	add.w	r2, r2, #4294967295
 8003dc6:	4629      	mov	r1, r5
 8003dc8:	dcf1      	bgt.n	8003dae <__exponent+0x22>
 8003dca:	3130      	adds	r1, #48	; 0x30
 8003dcc:	f1ac 0402 	sub.w	r4, ip, #2
 8003dd0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003dd4:	1c41      	adds	r1, r0, #1
 8003dd6:	4622      	mov	r2, r4
 8003dd8:	42ba      	cmp	r2, r7
 8003dda:	d30a      	bcc.n	8003df2 <__exponent+0x66>
 8003ddc:	f10d 0209 	add.w	r2, sp, #9
 8003de0:	eba2 020c 	sub.w	r2, r2, ip
 8003de4:	42bc      	cmp	r4, r7
 8003de6:	bf88      	it	hi
 8003de8:	2200      	movhi	r2, #0
 8003dea:	4413      	add	r3, r2
 8003dec:	1a18      	subs	r0, r3, r0
 8003dee:	b003      	add	sp, #12
 8003df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003df6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003dfa:	e7ed      	b.n	8003dd8 <__exponent+0x4c>
 8003dfc:	2330      	movs	r3, #48	; 0x30
 8003dfe:	3130      	adds	r1, #48	; 0x30
 8003e00:	7083      	strb	r3, [r0, #2]
 8003e02:	70c1      	strb	r1, [r0, #3]
 8003e04:	1d03      	adds	r3, r0, #4
 8003e06:	e7f1      	b.n	8003dec <__exponent+0x60>

08003e08 <_printf_float>:
 8003e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0c:	ed2d 8b02 	vpush	{d8}
 8003e10:	b08d      	sub	sp, #52	; 0x34
 8003e12:	460c      	mov	r4, r1
 8003e14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003e18:	4616      	mov	r6, r2
 8003e1a:	461f      	mov	r7, r3
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	f000 fee5 	bl	8004bec <_localeconv_r>
 8003e22:	f8d0 a000 	ldr.w	sl, [r0]
 8003e26:	4650      	mov	r0, sl
 8003e28:	f7fc fa22 	bl	8000270 <strlen>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	9305      	str	r3, [sp, #20]
 8003e34:	f8d8 3000 	ldr.w	r3, [r8]
 8003e38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003e3c:	3307      	adds	r3, #7
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	f103 0208 	add.w	r2, r3, #8
 8003e46:	f8c8 2000 	str.w	r2, [r8]
 8003e4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003e4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e52:	9307      	str	r3, [sp, #28]
 8003e54:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e58:	ee08 0a10 	vmov	s16, r0
 8003e5c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e64:	4b9e      	ldr	r3, [pc, #632]	; (80040e0 <_printf_float+0x2d8>)
 8003e66:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6a:	f7fc fe5f 	bl	8000b2c <__aeabi_dcmpun>
 8003e6e:	bb88      	cbnz	r0, 8003ed4 <_printf_float+0xcc>
 8003e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e74:	4b9a      	ldr	r3, [pc, #616]	; (80040e0 <_printf_float+0x2d8>)
 8003e76:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7a:	f7fc fe39 	bl	8000af0 <__aeabi_dcmple>
 8003e7e:	bb48      	cbnz	r0, 8003ed4 <_printf_float+0xcc>
 8003e80:	2200      	movs	r2, #0
 8003e82:	2300      	movs	r3, #0
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f7fc fe28 	bl	8000adc <__aeabi_dcmplt>
 8003e8c:	b110      	cbz	r0, 8003e94 <_printf_float+0x8c>
 8003e8e:	232d      	movs	r3, #45	; 0x2d
 8003e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e94:	4a93      	ldr	r2, [pc, #588]	; (80040e4 <_printf_float+0x2dc>)
 8003e96:	4b94      	ldr	r3, [pc, #592]	; (80040e8 <_printf_float+0x2e0>)
 8003e98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003e9c:	bf94      	ite	ls
 8003e9e:	4690      	movls	r8, r2
 8003ea0:	4698      	movhi	r8, r3
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	6123      	str	r3, [r4, #16]
 8003ea6:	9b05      	ldr	r3, [sp, #20]
 8003ea8:	f023 0304 	bic.w	r3, r3, #4
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	f04f 0900 	mov.w	r9, #0
 8003eb2:	9700      	str	r7, [sp, #0]
 8003eb4:	4633      	mov	r3, r6
 8003eb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 f9da 	bl	8004274 <_printf_common>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	f040 8090 	bne.w	8003fe6 <_printf_float+0x1de>
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	b00d      	add	sp, #52	; 0x34
 8003ecc:	ecbd 8b02 	vpop	{d8}
 8003ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	4640      	mov	r0, r8
 8003eda:	4649      	mov	r1, r9
 8003edc:	f7fc fe26 	bl	8000b2c <__aeabi_dcmpun>
 8003ee0:	b140      	cbz	r0, 8003ef4 <_printf_float+0xec>
 8003ee2:	464b      	mov	r3, r9
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bfbc      	itt	lt
 8003ee8:	232d      	movlt	r3, #45	; 0x2d
 8003eea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003eee:	4a7f      	ldr	r2, [pc, #508]	; (80040ec <_printf_float+0x2e4>)
 8003ef0:	4b7f      	ldr	r3, [pc, #508]	; (80040f0 <_printf_float+0x2e8>)
 8003ef2:	e7d1      	b.n	8003e98 <_printf_float+0x90>
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003efa:	9206      	str	r2, [sp, #24]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	d13f      	bne.n	8003f80 <_printf_float+0x178>
 8003f00:	2306      	movs	r3, #6
 8003f02:	6063      	str	r3, [r4, #4]
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	6861      	ldr	r1, [r4, #4]
 8003f08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	9303      	str	r3, [sp, #12]
 8003f10:	ab0a      	add	r3, sp, #40	; 0x28
 8003f12:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003f16:	ab09      	add	r3, sp, #36	; 0x24
 8003f18:	ec49 8b10 	vmov	d0, r8, r9
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	6022      	str	r2, [r4, #0]
 8003f20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f24:	4628      	mov	r0, r5
 8003f26:	f7ff fecf 	bl	8003cc8 <__cvt>
 8003f2a:	9b06      	ldr	r3, [sp, #24]
 8003f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f2e:	2b47      	cmp	r3, #71	; 0x47
 8003f30:	4680      	mov	r8, r0
 8003f32:	d108      	bne.n	8003f46 <_printf_float+0x13e>
 8003f34:	1cc8      	adds	r0, r1, #3
 8003f36:	db02      	blt.n	8003f3e <_printf_float+0x136>
 8003f38:	6863      	ldr	r3, [r4, #4]
 8003f3a:	4299      	cmp	r1, r3
 8003f3c:	dd41      	ble.n	8003fc2 <_printf_float+0x1ba>
 8003f3e:	f1ab 0302 	sub.w	r3, fp, #2
 8003f42:	fa5f fb83 	uxtb.w	fp, r3
 8003f46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003f4a:	d820      	bhi.n	8003f8e <_printf_float+0x186>
 8003f4c:	3901      	subs	r1, #1
 8003f4e:	465a      	mov	r2, fp
 8003f50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003f54:	9109      	str	r1, [sp, #36]	; 0x24
 8003f56:	f7ff ff19 	bl	8003d8c <__exponent>
 8003f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f5c:	1813      	adds	r3, r2, r0
 8003f5e:	2a01      	cmp	r2, #1
 8003f60:	4681      	mov	r9, r0
 8003f62:	6123      	str	r3, [r4, #16]
 8003f64:	dc02      	bgt.n	8003f6c <_printf_float+0x164>
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	07d2      	lsls	r2, r2, #31
 8003f6a:	d501      	bpl.n	8003f70 <_printf_float+0x168>
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	6123      	str	r3, [r4, #16]
 8003f70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d09c      	beq.n	8003eb2 <_printf_float+0xaa>
 8003f78:	232d      	movs	r3, #45	; 0x2d
 8003f7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f7e:	e798      	b.n	8003eb2 <_printf_float+0xaa>
 8003f80:	9a06      	ldr	r2, [sp, #24]
 8003f82:	2a47      	cmp	r2, #71	; 0x47
 8003f84:	d1be      	bne.n	8003f04 <_printf_float+0xfc>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1bc      	bne.n	8003f04 <_printf_float+0xfc>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e7b9      	b.n	8003f02 <_printf_float+0xfa>
 8003f8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003f92:	d118      	bne.n	8003fc6 <_printf_float+0x1be>
 8003f94:	2900      	cmp	r1, #0
 8003f96:	6863      	ldr	r3, [r4, #4]
 8003f98:	dd0b      	ble.n	8003fb2 <_printf_float+0x1aa>
 8003f9a:	6121      	str	r1, [r4, #16]
 8003f9c:	b913      	cbnz	r3, 8003fa4 <_printf_float+0x19c>
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	07d0      	lsls	r0, r2, #31
 8003fa2:	d502      	bpl.n	8003faa <_printf_float+0x1a2>
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	440b      	add	r3, r1
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	65a1      	str	r1, [r4, #88]	; 0x58
 8003fac:	f04f 0900 	mov.w	r9, #0
 8003fb0:	e7de      	b.n	8003f70 <_printf_float+0x168>
 8003fb2:	b913      	cbnz	r3, 8003fba <_printf_float+0x1b2>
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	07d2      	lsls	r2, r2, #31
 8003fb8:	d501      	bpl.n	8003fbe <_printf_float+0x1b6>
 8003fba:	3302      	adds	r3, #2
 8003fbc:	e7f4      	b.n	8003fa8 <_printf_float+0x1a0>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e7f2      	b.n	8003fa8 <_printf_float+0x1a0>
 8003fc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	db05      	blt.n	8003fd8 <_printf_float+0x1d0>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	6121      	str	r1, [r4, #16]
 8003fd0:	07d8      	lsls	r0, r3, #31
 8003fd2:	d5ea      	bpl.n	8003faa <_printf_float+0x1a2>
 8003fd4:	1c4b      	adds	r3, r1, #1
 8003fd6:	e7e7      	b.n	8003fa8 <_printf_float+0x1a0>
 8003fd8:	2900      	cmp	r1, #0
 8003fda:	bfd4      	ite	le
 8003fdc:	f1c1 0202 	rsble	r2, r1, #2
 8003fe0:	2201      	movgt	r2, #1
 8003fe2:	4413      	add	r3, r2
 8003fe4:	e7e0      	b.n	8003fa8 <_printf_float+0x1a0>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	055a      	lsls	r2, r3, #21
 8003fea:	d407      	bmi.n	8003ffc <_printf_float+0x1f4>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	4642      	mov	r2, r8
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	47b8      	blx	r7
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d12c      	bne.n	8004054 <_printf_float+0x24c>
 8003ffa:	e764      	b.n	8003ec6 <_printf_float+0xbe>
 8003ffc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004000:	f240 80e0 	bls.w	80041c4 <_printf_float+0x3bc>
 8004004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004008:	2200      	movs	r2, #0
 800400a:	2300      	movs	r3, #0
 800400c:	f7fc fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004010:	2800      	cmp	r0, #0
 8004012:	d034      	beq.n	800407e <_printf_float+0x276>
 8004014:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <_printf_float+0x2ec>)
 8004016:	2301      	movs	r3, #1
 8004018:	4631      	mov	r1, r6
 800401a:	4628      	mov	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	3001      	adds	r0, #1
 8004020:	f43f af51 	beq.w	8003ec6 <_printf_float+0xbe>
 8004024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004028:	429a      	cmp	r2, r3
 800402a:	db02      	blt.n	8004032 <_printf_float+0x22a>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	07d8      	lsls	r0, r3, #31
 8004030:	d510      	bpl.n	8004054 <_printf_float+0x24c>
 8004032:	ee18 3a10 	vmov	r3, s16
 8004036:	4652      	mov	r2, sl
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	f43f af41 	beq.w	8003ec6 <_printf_float+0xbe>
 8004044:	f04f 0800 	mov.w	r8, #0
 8004048:	f104 091a 	add.w	r9, r4, #26
 800404c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	4543      	cmp	r3, r8
 8004052:	dc09      	bgt.n	8004068 <_printf_float+0x260>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	079b      	lsls	r3, r3, #30
 8004058:	f100 8107 	bmi.w	800426a <_printf_float+0x462>
 800405c:	68e0      	ldr	r0, [r4, #12]
 800405e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004060:	4298      	cmp	r0, r3
 8004062:	bfb8      	it	lt
 8004064:	4618      	movlt	r0, r3
 8004066:	e730      	b.n	8003eca <_printf_float+0xc2>
 8004068:	2301      	movs	r3, #1
 800406a:	464a      	mov	r2, r9
 800406c:	4631      	mov	r1, r6
 800406e:	4628      	mov	r0, r5
 8004070:	47b8      	blx	r7
 8004072:	3001      	adds	r0, #1
 8004074:	f43f af27 	beq.w	8003ec6 <_printf_float+0xbe>
 8004078:	f108 0801 	add.w	r8, r8, #1
 800407c:	e7e6      	b.n	800404c <_printf_float+0x244>
 800407e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	dc39      	bgt.n	80040f8 <_printf_float+0x2f0>
 8004084:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <_printf_float+0x2ec>)
 8004086:	2301      	movs	r3, #1
 8004088:	4631      	mov	r1, r6
 800408a:	4628      	mov	r0, r5
 800408c:	47b8      	blx	r7
 800408e:	3001      	adds	r0, #1
 8004090:	f43f af19 	beq.w	8003ec6 <_printf_float+0xbe>
 8004094:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004098:	4313      	orrs	r3, r2
 800409a:	d102      	bne.n	80040a2 <_printf_float+0x29a>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	07d9      	lsls	r1, r3, #31
 80040a0:	d5d8      	bpl.n	8004054 <_printf_float+0x24c>
 80040a2:	ee18 3a10 	vmov	r3, s16
 80040a6:	4652      	mov	r2, sl
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	f43f af09 	beq.w	8003ec6 <_printf_float+0xbe>
 80040b4:	f04f 0900 	mov.w	r9, #0
 80040b8:	f104 0a1a 	add.w	sl, r4, #26
 80040bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040be:	425b      	negs	r3, r3
 80040c0:	454b      	cmp	r3, r9
 80040c2:	dc01      	bgt.n	80040c8 <_printf_float+0x2c0>
 80040c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c6:	e792      	b.n	8003fee <_printf_float+0x1e6>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4652      	mov	r2, sl
 80040cc:	4631      	mov	r1, r6
 80040ce:	4628      	mov	r0, r5
 80040d0:	47b8      	blx	r7
 80040d2:	3001      	adds	r0, #1
 80040d4:	f43f aef7 	beq.w	8003ec6 <_printf_float+0xbe>
 80040d8:	f109 0901 	add.w	r9, r9, #1
 80040dc:	e7ee      	b.n	80040bc <_printf_float+0x2b4>
 80040de:	bf00      	nop
 80040e0:	7fefffff 	.word	0x7fefffff
 80040e4:	08009500 	.word	0x08009500
 80040e8:	08009504 	.word	0x08009504
 80040ec:	08009508 	.word	0x08009508
 80040f0:	0800950c 	.word	0x0800950c
 80040f4:	08009510 	.word	0x08009510
 80040f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bfa8      	it	ge
 8004100:	461a      	movge	r2, r3
 8004102:	2a00      	cmp	r2, #0
 8004104:	4691      	mov	r9, r2
 8004106:	dc37      	bgt.n	8004178 <_printf_float+0x370>
 8004108:	f04f 0b00 	mov.w	fp, #0
 800410c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004110:	f104 021a 	add.w	r2, r4, #26
 8004114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004116:	9305      	str	r3, [sp, #20]
 8004118:	eba3 0309 	sub.w	r3, r3, r9
 800411c:	455b      	cmp	r3, fp
 800411e:	dc33      	bgt.n	8004188 <_printf_float+0x380>
 8004120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004124:	429a      	cmp	r2, r3
 8004126:	db3b      	blt.n	80041a0 <_printf_float+0x398>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	07da      	lsls	r2, r3, #31
 800412c:	d438      	bmi.n	80041a0 <_printf_float+0x398>
 800412e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004132:	eba2 0903 	sub.w	r9, r2, r3
 8004136:	9b05      	ldr	r3, [sp, #20]
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	4591      	cmp	r9, r2
 800413c:	bfa8      	it	ge
 800413e:	4691      	movge	r9, r2
 8004140:	f1b9 0f00 	cmp.w	r9, #0
 8004144:	dc35      	bgt.n	80041b2 <_printf_float+0x3aa>
 8004146:	f04f 0800 	mov.w	r8, #0
 800414a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800414e:	f104 0a1a 	add.w	sl, r4, #26
 8004152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	eba3 0309 	sub.w	r3, r3, r9
 800415c:	4543      	cmp	r3, r8
 800415e:	f77f af79 	ble.w	8004054 <_printf_float+0x24c>
 8004162:	2301      	movs	r3, #1
 8004164:	4652      	mov	r2, sl
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	f43f aeaa 	beq.w	8003ec6 <_printf_float+0xbe>
 8004172:	f108 0801 	add.w	r8, r8, #1
 8004176:	e7ec      	b.n	8004152 <_printf_float+0x34a>
 8004178:	4613      	mov	r3, r2
 800417a:	4631      	mov	r1, r6
 800417c:	4642      	mov	r2, r8
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	d1c0      	bne.n	8004108 <_printf_float+0x300>
 8004186:	e69e      	b.n	8003ec6 <_printf_float+0xbe>
 8004188:	2301      	movs	r3, #1
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	9205      	str	r2, [sp, #20]
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f ae97 	beq.w	8003ec6 <_printf_float+0xbe>
 8004198:	9a05      	ldr	r2, [sp, #20]
 800419a:	f10b 0b01 	add.w	fp, fp, #1
 800419e:	e7b9      	b.n	8004114 <_printf_float+0x30c>
 80041a0:	ee18 3a10 	vmov	r3, s16
 80041a4:	4652      	mov	r2, sl
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b8      	blx	r7
 80041ac:	3001      	adds	r0, #1
 80041ae:	d1be      	bne.n	800412e <_printf_float+0x326>
 80041b0:	e689      	b.n	8003ec6 <_printf_float+0xbe>
 80041b2:	9a05      	ldr	r2, [sp, #20]
 80041b4:	464b      	mov	r3, r9
 80041b6:	4442      	add	r2, r8
 80041b8:	4631      	mov	r1, r6
 80041ba:	4628      	mov	r0, r5
 80041bc:	47b8      	blx	r7
 80041be:	3001      	adds	r0, #1
 80041c0:	d1c1      	bne.n	8004146 <_printf_float+0x33e>
 80041c2:	e680      	b.n	8003ec6 <_printf_float+0xbe>
 80041c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041c6:	2a01      	cmp	r2, #1
 80041c8:	dc01      	bgt.n	80041ce <_printf_float+0x3c6>
 80041ca:	07db      	lsls	r3, r3, #31
 80041cc:	d53a      	bpl.n	8004244 <_printf_float+0x43c>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4642      	mov	r2, r8
 80041d2:	4631      	mov	r1, r6
 80041d4:	4628      	mov	r0, r5
 80041d6:	47b8      	blx	r7
 80041d8:	3001      	adds	r0, #1
 80041da:	f43f ae74 	beq.w	8003ec6 <_printf_float+0xbe>
 80041de:	ee18 3a10 	vmov	r3, s16
 80041e2:	4652      	mov	r2, sl
 80041e4:	4631      	mov	r1, r6
 80041e6:	4628      	mov	r0, r5
 80041e8:	47b8      	blx	r7
 80041ea:	3001      	adds	r0, #1
 80041ec:	f43f ae6b 	beq.w	8003ec6 <_printf_float+0xbe>
 80041f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041f4:	2200      	movs	r2, #0
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80041fc:	f7fc fc64 	bl	8000ac8 <__aeabi_dcmpeq>
 8004200:	b9d8      	cbnz	r0, 800423a <_printf_float+0x432>
 8004202:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004206:	f108 0201 	add.w	r2, r8, #1
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	d10e      	bne.n	8004232 <_printf_float+0x42a>
 8004214:	e657      	b.n	8003ec6 <_printf_float+0xbe>
 8004216:	2301      	movs	r3, #1
 8004218:	4652      	mov	r2, sl
 800421a:	4631      	mov	r1, r6
 800421c:	4628      	mov	r0, r5
 800421e:	47b8      	blx	r7
 8004220:	3001      	adds	r0, #1
 8004222:	f43f ae50 	beq.w	8003ec6 <_printf_float+0xbe>
 8004226:	f108 0801 	add.w	r8, r8, #1
 800422a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	4543      	cmp	r3, r8
 8004230:	dcf1      	bgt.n	8004216 <_printf_float+0x40e>
 8004232:	464b      	mov	r3, r9
 8004234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004238:	e6da      	b.n	8003ff0 <_printf_float+0x1e8>
 800423a:	f04f 0800 	mov.w	r8, #0
 800423e:	f104 0a1a 	add.w	sl, r4, #26
 8004242:	e7f2      	b.n	800422a <_printf_float+0x422>
 8004244:	2301      	movs	r3, #1
 8004246:	4642      	mov	r2, r8
 8004248:	e7df      	b.n	800420a <_printf_float+0x402>
 800424a:	2301      	movs	r3, #1
 800424c:	464a      	mov	r2, r9
 800424e:	4631      	mov	r1, r6
 8004250:	4628      	mov	r0, r5
 8004252:	47b8      	blx	r7
 8004254:	3001      	adds	r0, #1
 8004256:	f43f ae36 	beq.w	8003ec6 <_printf_float+0xbe>
 800425a:	f108 0801 	add.w	r8, r8, #1
 800425e:	68e3      	ldr	r3, [r4, #12]
 8004260:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004262:	1a5b      	subs	r3, r3, r1
 8004264:	4543      	cmp	r3, r8
 8004266:	dcf0      	bgt.n	800424a <_printf_float+0x442>
 8004268:	e6f8      	b.n	800405c <_printf_float+0x254>
 800426a:	f04f 0800 	mov.w	r8, #0
 800426e:	f104 0919 	add.w	r9, r4, #25
 8004272:	e7f4      	b.n	800425e <_printf_float+0x456>

08004274 <_printf_common>:
 8004274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004278:	4616      	mov	r6, r2
 800427a:	4699      	mov	r9, r3
 800427c:	688a      	ldr	r2, [r1, #8]
 800427e:	690b      	ldr	r3, [r1, #16]
 8004280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004284:	4293      	cmp	r3, r2
 8004286:	bfb8      	it	lt
 8004288:	4613      	movlt	r3, r2
 800428a:	6033      	str	r3, [r6, #0]
 800428c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004290:	4607      	mov	r7, r0
 8004292:	460c      	mov	r4, r1
 8004294:	b10a      	cbz	r2, 800429a <_printf_common+0x26>
 8004296:	3301      	adds	r3, #1
 8004298:	6033      	str	r3, [r6, #0]
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	0699      	lsls	r1, r3, #26
 800429e:	bf42      	ittt	mi
 80042a0:	6833      	ldrmi	r3, [r6, #0]
 80042a2:	3302      	addmi	r3, #2
 80042a4:	6033      	strmi	r3, [r6, #0]
 80042a6:	6825      	ldr	r5, [r4, #0]
 80042a8:	f015 0506 	ands.w	r5, r5, #6
 80042ac:	d106      	bne.n	80042bc <_printf_common+0x48>
 80042ae:	f104 0a19 	add.w	sl, r4, #25
 80042b2:	68e3      	ldr	r3, [r4, #12]
 80042b4:	6832      	ldr	r2, [r6, #0]
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	dc26      	bgt.n	800430a <_printf_common+0x96>
 80042bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042c0:	1e13      	subs	r3, r2, #0
 80042c2:	6822      	ldr	r2, [r4, #0]
 80042c4:	bf18      	it	ne
 80042c6:	2301      	movne	r3, #1
 80042c8:	0692      	lsls	r2, r2, #26
 80042ca:	d42b      	bmi.n	8004324 <_printf_common+0xb0>
 80042cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042d0:	4649      	mov	r1, r9
 80042d2:	4638      	mov	r0, r7
 80042d4:	47c0      	blx	r8
 80042d6:	3001      	adds	r0, #1
 80042d8:	d01e      	beq.n	8004318 <_printf_common+0xa4>
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	6922      	ldr	r2, [r4, #16]
 80042de:	f003 0306 	and.w	r3, r3, #6
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	bf02      	ittt	eq
 80042e6:	68e5      	ldreq	r5, [r4, #12]
 80042e8:	6833      	ldreq	r3, [r6, #0]
 80042ea:	1aed      	subeq	r5, r5, r3
 80042ec:	68a3      	ldr	r3, [r4, #8]
 80042ee:	bf0c      	ite	eq
 80042f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f4:	2500      	movne	r5, #0
 80042f6:	4293      	cmp	r3, r2
 80042f8:	bfc4      	itt	gt
 80042fa:	1a9b      	subgt	r3, r3, r2
 80042fc:	18ed      	addgt	r5, r5, r3
 80042fe:	2600      	movs	r6, #0
 8004300:	341a      	adds	r4, #26
 8004302:	42b5      	cmp	r5, r6
 8004304:	d11a      	bne.n	800433c <_printf_common+0xc8>
 8004306:	2000      	movs	r0, #0
 8004308:	e008      	b.n	800431c <_printf_common+0xa8>
 800430a:	2301      	movs	r3, #1
 800430c:	4652      	mov	r2, sl
 800430e:	4649      	mov	r1, r9
 8004310:	4638      	mov	r0, r7
 8004312:	47c0      	blx	r8
 8004314:	3001      	adds	r0, #1
 8004316:	d103      	bne.n	8004320 <_printf_common+0xac>
 8004318:	f04f 30ff 	mov.w	r0, #4294967295
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004320:	3501      	adds	r5, #1
 8004322:	e7c6      	b.n	80042b2 <_printf_common+0x3e>
 8004324:	18e1      	adds	r1, r4, r3
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	2030      	movs	r0, #48	; 0x30
 800432a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800432e:	4422      	add	r2, r4
 8004330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004338:	3302      	adds	r3, #2
 800433a:	e7c7      	b.n	80042cc <_printf_common+0x58>
 800433c:	2301      	movs	r3, #1
 800433e:	4622      	mov	r2, r4
 8004340:	4649      	mov	r1, r9
 8004342:	4638      	mov	r0, r7
 8004344:	47c0      	blx	r8
 8004346:	3001      	adds	r0, #1
 8004348:	d0e6      	beq.n	8004318 <_printf_common+0xa4>
 800434a:	3601      	adds	r6, #1
 800434c:	e7d9      	b.n	8004302 <_printf_common+0x8e>
	...

08004350 <_printf_i>:
 8004350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	7e0f      	ldrb	r7, [r1, #24]
 8004356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004358:	2f78      	cmp	r7, #120	; 0x78
 800435a:	4691      	mov	r9, r2
 800435c:	4680      	mov	r8, r0
 800435e:	460c      	mov	r4, r1
 8004360:	469a      	mov	sl, r3
 8004362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004366:	d807      	bhi.n	8004378 <_printf_i+0x28>
 8004368:	2f62      	cmp	r7, #98	; 0x62
 800436a:	d80a      	bhi.n	8004382 <_printf_i+0x32>
 800436c:	2f00      	cmp	r7, #0
 800436e:	f000 80d4 	beq.w	800451a <_printf_i+0x1ca>
 8004372:	2f58      	cmp	r7, #88	; 0x58
 8004374:	f000 80c0 	beq.w	80044f8 <_printf_i+0x1a8>
 8004378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800437c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004380:	e03a      	b.n	80043f8 <_printf_i+0xa8>
 8004382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004386:	2b15      	cmp	r3, #21
 8004388:	d8f6      	bhi.n	8004378 <_printf_i+0x28>
 800438a:	a101      	add	r1, pc, #4	; (adr r1, 8004390 <_printf_i+0x40>)
 800438c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004390:	080043e9 	.word	0x080043e9
 8004394:	080043fd 	.word	0x080043fd
 8004398:	08004379 	.word	0x08004379
 800439c:	08004379 	.word	0x08004379
 80043a0:	08004379 	.word	0x08004379
 80043a4:	08004379 	.word	0x08004379
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	08004379 	.word	0x08004379
 80043b0:	08004379 	.word	0x08004379
 80043b4:	08004379 	.word	0x08004379
 80043b8:	08004379 	.word	0x08004379
 80043bc:	08004501 	.word	0x08004501
 80043c0:	08004429 	.word	0x08004429
 80043c4:	080044bb 	.word	0x080044bb
 80043c8:	08004379 	.word	0x08004379
 80043cc:	08004379 	.word	0x08004379
 80043d0:	08004523 	.word	0x08004523
 80043d4:	08004379 	.word	0x08004379
 80043d8:	08004429 	.word	0x08004429
 80043dc:	08004379 	.word	0x08004379
 80043e0:	08004379 	.word	0x08004379
 80043e4:	080044c3 	.word	0x080044c3
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	1d1a      	adds	r2, r3, #4
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	602a      	str	r2, [r5, #0]
 80043f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043f8:	2301      	movs	r3, #1
 80043fa:	e09f      	b.n	800453c <_printf_i+0x1ec>
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	682b      	ldr	r3, [r5, #0]
 8004400:	0607      	lsls	r7, r0, #24
 8004402:	f103 0104 	add.w	r1, r3, #4
 8004406:	6029      	str	r1, [r5, #0]
 8004408:	d501      	bpl.n	800440e <_printf_i+0xbe>
 800440a:	681e      	ldr	r6, [r3, #0]
 800440c:	e003      	b.n	8004416 <_printf_i+0xc6>
 800440e:	0646      	lsls	r6, r0, #25
 8004410:	d5fb      	bpl.n	800440a <_printf_i+0xba>
 8004412:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004416:	2e00      	cmp	r6, #0
 8004418:	da03      	bge.n	8004422 <_printf_i+0xd2>
 800441a:	232d      	movs	r3, #45	; 0x2d
 800441c:	4276      	negs	r6, r6
 800441e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004422:	485a      	ldr	r0, [pc, #360]	; (800458c <_printf_i+0x23c>)
 8004424:	230a      	movs	r3, #10
 8004426:	e012      	b.n	800444e <_printf_i+0xfe>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	1d19      	adds	r1, r3, #4
 800442e:	6029      	str	r1, [r5, #0]
 8004430:	0605      	lsls	r5, r0, #24
 8004432:	d501      	bpl.n	8004438 <_printf_i+0xe8>
 8004434:	681e      	ldr	r6, [r3, #0]
 8004436:	e002      	b.n	800443e <_printf_i+0xee>
 8004438:	0641      	lsls	r1, r0, #25
 800443a:	d5fb      	bpl.n	8004434 <_printf_i+0xe4>
 800443c:	881e      	ldrh	r6, [r3, #0]
 800443e:	4853      	ldr	r0, [pc, #332]	; (800458c <_printf_i+0x23c>)
 8004440:	2f6f      	cmp	r7, #111	; 0x6f
 8004442:	bf0c      	ite	eq
 8004444:	2308      	moveq	r3, #8
 8004446:	230a      	movne	r3, #10
 8004448:	2100      	movs	r1, #0
 800444a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800444e:	6865      	ldr	r5, [r4, #4]
 8004450:	60a5      	str	r5, [r4, #8]
 8004452:	2d00      	cmp	r5, #0
 8004454:	bfa2      	ittt	ge
 8004456:	6821      	ldrge	r1, [r4, #0]
 8004458:	f021 0104 	bicge.w	r1, r1, #4
 800445c:	6021      	strge	r1, [r4, #0]
 800445e:	b90e      	cbnz	r6, 8004464 <_printf_i+0x114>
 8004460:	2d00      	cmp	r5, #0
 8004462:	d04b      	beq.n	80044fc <_printf_i+0x1ac>
 8004464:	4615      	mov	r5, r2
 8004466:	fbb6 f1f3 	udiv	r1, r6, r3
 800446a:	fb03 6711 	mls	r7, r3, r1, r6
 800446e:	5dc7      	ldrb	r7, [r0, r7]
 8004470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004474:	4637      	mov	r7, r6
 8004476:	42bb      	cmp	r3, r7
 8004478:	460e      	mov	r6, r1
 800447a:	d9f4      	bls.n	8004466 <_printf_i+0x116>
 800447c:	2b08      	cmp	r3, #8
 800447e:	d10b      	bne.n	8004498 <_printf_i+0x148>
 8004480:	6823      	ldr	r3, [r4, #0]
 8004482:	07de      	lsls	r6, r3, #31
 8004484:	d508      	bpl.n	8004498 <_printf_i+0x148>
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	6861      	ldr	r1, [r4, #4]
 800448a:	4299      	cmp	r1, r3
 800448c:	bfde      	ittt	le
 800448e:	2330      	movle	r3, #48	; 0x30
 8004490:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004494:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004498:	1b52      	subs	r2, r2, r5
 800449a:	6122      	str	r2, [r4, #16]
 800449c:	f8cd a000 	str.w	sl, [sp]
 80044a0:	464b      	mov	r3, r9
 80044a2:	aa03      	add	r2, sp, #12
 80044a4:	4621      	mov	r1, r4
 80044a6:	4640      	mov	r0, r8
 80044a8:	f7ff fee4 	bl	8004274 <_printf_common>
 80044ac:	3001      	adds	r0, #1
 80044ae:	d14a      	bne.n	8004546 <_printf_i+0x1f6>
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295
 80044b4:	b004      	add	sp, #16
 80044b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	4833      	ldr	r0, [pc, #204]	; (8004590 <_printf_i+0x240>)
 80044c4:	2778      	movs	r7, #120	; 0x78
 80044c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	6829      	ldr	r1, [r5, #0]
 80044ce:	061f      	lsls	r7, r3, #24
 80044d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80044d4:	d402      	bmi.n	80044dc <_printf_i+0x18c>
 80044d6:	065f      	lsls	r7, r3, #25
 80044d8:	bf48      	it	mi
 80044da:	b2b6      	uxthmi	r6, r6
 80044dc:	07df      	lsls	r7, r3, #31
 80044de:	bf48      	it	mi
 80044e0:	f043 0320 	orrmi.w	r3, r3, #32
 80044e4:	6029      	str	r1, [r5, #0]
 80044e6:	bf48      	it	mi
 80044e8:	6023      	strmi	r3, [r4, #0]
 80044ea:	b91e      	cbnz	r6, 80044f4 <_printf_i+0x1a4>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f023 0320 	bic.w	r3, r3, #32
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	2310      	movs	r3, #16
 80044f6:	e7a7      	b.n	8004448 <_printf_i+0xf8>
 80044f8:	4824      	ldr	r0, [pc, #144]	; (800458c <_printf_i+0x23c>)
 80044fa:	e7e4      	b.n	80044c6 <_printf_i+0x176>
 80044fc:	4615      	mov	r5, r2
 80044fe:	e7bd      	b.n	800447c <_printf_i+0x12c>
 8004500:	682b      	ldr	r3, [r5, #0]
 8004502:	6826      	ldr	r6, [r4, #0]
 8004504:	6961      	ldr	r1, [r4, #20]
 8004506:	1d18      	adds	r0, r3, #4
 8004508:	6028      	str	r0, [r5, #0]
 800450a:	0635      	lsls	r5, r6, #24
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	d501      	bpl.n	8004514 <_printf_i+0x1c4>
 8004510:	6019      	str	r1, [r3, #0]
 8004512:	e002      	b.n	800451a <_printf_i+0x1ca>
 8004514:	0670      	lsls	r0, r6, #25
 8004516:	d5fb      	bpl.n	8004510 <_printf_i+0x1c0>
 8004518:	8019      	strh	r1, [r3, #0]
 800451a:	2300      	movs	r3, #0
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	4615      	mov	r5, r2
 8004520:	e7bc      	b.n	800449c <_printf_i+0x14c>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	602a      	str	r2, [r5, #0]
 8004528:	681d      	ldr	r5, [r3, #0]
 800452a:	6862      	ldr	r2, [r4, #4]
 800452c:	2100      	movs	r1, #0
 800452e:	4628      	mov	r0, r5
 8004530:	f7fb fe4e 	bl	80001d0 <memchr>
 8004534:	b108      	cbz	r0, 800453a <_printf_i+0x1ea>
 8004536:	1b40      	subs	r0, r0, r5
 8004538:	6060      	str	r0, [r4, #4]
 800453a:	6863      	ldr	r3, [r4, #4]
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	2300      	movs	r3, #0
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004544:	e7aa      	b.n	800449c <_printf_i+0x14c>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	462a      	mov	r2, r5
 800454a:	4649      	mov	r1, r9
 800454c:	4640      	mov	r0, r8
 800454e:	47d0      	blx	sl
 8004550:	3001      	adds	r0, #1
 8004552:	d0ad      	beq.n	80044b0 <_printf_i+0x160>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	079b      	lsls	r3, r3, #30
 8004558:	d413      	bmi.n	8004582 <_printf_i+0x232>
 800455a:	68e0      	ldr	r0, [r4, #12]
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	4298      	cmp	r0, r3
 8004560:	bfb8      	it	lt
 8004562:	4618      	movlt	r0, r3
 8004564:	e7a6      	b.n	80044b4 <_printf_i+0x164>
 8004566:	2301      	movs	r3, #1
 8004568:	4632      	mov	r2, r6
 800456a:	4649      	mov	r1, r9
 800456c:	4640      	mov	r0, r8
 800456e:	47d0      	blx	sl
 8004570:	3001      	adds	r0, #1
 8004572:	d09d      	beq.n	80044b0 <_printf_i+0x160>
 8004574:	3501      	adds	r5, #1
 8004576:	68e3      	ldr	r3, [r4, #12]
 8004578:	9903      	ldr	r1, [sp, #12]
 800457a:	1a5b      	subs	r3, r3, r1
 800457c:	42ab      	cmp	r3, r5
 800457e:	dcf2      	bgt.n	8004566 <_printf_i+0x216>
 8004580:	e7eb      	b.n	800455a <_printf_i+0x20a>
 8004582:	2500      	movs	r5, #0
 8004584:	f104 0619 	add.w	r6, r4, #25
 8004588:	e7f5      	b.n	8004576 <_printf_i+0x226>
 800458a:	bf00      	nop
 800458c:	08009512 	.word	0x08009512
 8004590:	08009523 	.word	0x08009523

08004594 <_scanf_float>:
 8004594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004598:	b087      	sub	sp, #28
 800459a:	4617      	mov	r7, r2
 800459c:	9303      	str	r3, [sp, #12]
 800459e:	688b      	ldr	r3, [r1, #8]
 80045a0:	1e5a      	subs	r2, r3, #1
 80045a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80045a6:	bf83      	ittte	hi
 80045a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80045ac:	195b      	addhi	r3, r3, r5
 80045ae:	9302      	strhi	r3, [sp, #8]
 80045b0:	2300      	movls	r3, #0
 80045b2:	bf86      	itte	hi
 80045b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80045b8:	608b      	strhi	r3, [r1, #8]
 80045ba:	9302      	strls	r3, [sp, #8]
 80045bc:	680b      	ldr	r3, [r1, #0]
 80045be:	468b      	mov	fp, r1
 80045c0:	2500      	movs	r5, #0
 80045c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80045c6:	f84b 3b1c 	str.w	r3, [fp], #28
 80045ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80045ce:	4680      	mov	r8, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	465e      	mov	r6, fp
 80045d4:	46aa      	mov	sl, r5
 80045d6:	46a9      	mov	r9, r5
 80045d8:	9501      	str	r5, [sp, #4]
 80045da:	68a2      	ldr	r2, [r4, #8]
 80045dc:	b152      	cbz	r2, 80045f4 <_scanf_float+0x60>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b4e      	cmp	r3, #78	; 0x4e
 80045e4:	d864      	bhi.n	80046b0 <_scanf_float+0x11c>
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d83c      	bhi.n	8004664 <_scanf_float+0xd0>
 80045ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80045ee:	b2c8      	uxtb	r0, r1
 80045f0:	280e      	cmp	r0, #14
 80045f2:	d93a      	bls.n	800466a <_scanf_float+0xd6>
 80045f4:	f1b9 0f00 	cmp.w	r9, #0
 80045f8:	d003      	beq.n	8004602 <_scanf_float+0x6e>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004606:	f1ba 0f01 	cmp.w	sl, #1
 800460a:	f200 8113 	bhi.w	8004834 <_scanf_float+0x2a0>
 800460e:	455e      	cmp	r6, fp
 8004610:	f200 8105 	bhi.w	800481e <_scanf_float+0x28a>
 8004614:	2501      	movs	r5, #1
 8004616:	4628      	mov	r0, r5
 8004618:	b007      	add	sp, #28
 800461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004622:	2a0d      	cmp	r2, #13
 8004624:	d8e6      	bhi.n	80045f4 <_scanf_float+0x60>
 8004626:	a101      	add	r1, pc, #4	; (adr r1, 800462c <_scanf_float+0x98>)
 8004628:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800462c:	0800476b 	.word	0x0800476b
 8004630:	080045f5 	.word	0x080045f5
 8004634:	080045f5 	.word	0x080045f5
 8004638:	080045f5 	.word	0x080045f5
 800463c:	080047cb 	.word	0x080047cb
 8004640:	080047a3 	.word	0x080047a3
 8004644:	080045f5 	.word	0x080045f5
 8004648:	080045f5 	.word	0x080045f5
 800464c:	08004779 	.word	0x08004779
 8004650:	080045f5 	.word	0x080045f5
 8004654:	080045f5 	.word	0x080045f5
 8004658:	080045f5 	.word	0x080045f5
 800465c:	080045f5 	.word	0x080045f5
 8004660:	08004731 	.word	0x08004731
 8004664:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004668:	e7db      	b.n	8004622 <_scanf_float+0x8e>
 800466a:	290e      	cmp	r1, #14
 800466c:	d8c2      	bhi.n	80045f4 <_scanf_float+0x60>
 800466e:	a001      	add	r0, pc, #4	; (adr r0, 8004674 <_scanf_float+0xe0>)
 8004670:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004674:	08004723 	.word	0x08004723
 8004678:	080045f5 	.word	0x080045f5
 800467c:	08004723 	.word	0x08004723
 8004680:	080047b7 	.word	0x080047b7
 8004684:	080045f5 	.word	0x080045f5
 8004688:	080046d1 	.word	0x080046d1
 800468c:	0800470d 	.word	0x0800470d
 8004690:	0800470d 	.word	0x0800470d
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	0800470d 	.word	0x0800470d
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	2b6e      	cmp	r3, #110	; 0x6e
 80046b2:	d809      	bhi.n	80046c8 <_scanf_float+0x134>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d8b2      	bhi.n	800461e <_scanf_float+0x8a>
 80046b8:	2b54      	cmp	r3, #84	; 0x54
 80046ba:	d077      	beq.n	80047ac <_scanf_float+0x218>
 80046bc:	2b59      	cmp	r3, #89	; 0x59
 80046be:	d199      	bne.n	80045f4 <_scanf_float+0x60>
 80046c0:	2d07      	cmp	r5, #7
 80046c2:	d197      	bne.n	80045f4 <_scanf_float+0x60>
 80046c4:	2508      	movs	r5, #8
 80046c6:	e029      	b.n	800471c <_scanf_float+0x188>
 80046c8:	2b74      	cmp	r3, #116	; 0x74
 80046ca:	d06f      	beq.n	80047ac <_scanf_float+0x218>
 80046cc:	2b79      	cmp	r3, #121	; 0x79
 80046ce:	e7f6      	b.n	80046be <_scanf_float+0x12a>
 80046d0:	6821      	ldr	r1, [r4, #0]
 80046d2:	05c8      	lsls	r0, r1, #23
 80046d4:	d51a      	bpl.n	800470c <_scanf_float+0x178>
 80046d6:	9b02      	ldr	r3, [sp, #8]
 80046d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046dc:	6021      	str	r1, [r4, #0]
 80046de:	f109 0901 	add.w	r9, r9, #1
 80046e2:	b11b      	cbz	r3, 80046ec <_scanf_float+0x158>
 80046e4:	3b01      	subs	r3, #1
 80046e6:	3201      	adds	r2, #1
 80046e8:	9302      	str	r3, [sp, #8]
 80046ea:	60a2      	str	r2, [r4, #8]
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	60a3      	str	r3, [r4, #8]
 80046f2:	6923      	ldr	r3, [r4, #16]
 80046f4:	3301      	adds	r3, #1
 80046f6:	6123      	str	r3, [r4, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	f340 8084 	ble.w	800480c <_scanf_float+0x278>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	603b      	str	r3, [r7, #0]
 800470a:	e766      	b.n	80045da <_scanf_float+0x46>
 800470c:	eb1a 0f05 	cmn.w	sl, r5
 8004710:	f47f af70 	bne.w	80045f4 <_scanf_float+0x60>
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800471a:	6022      	str	r2, [r4, #0]
 800471c:	f806 3b01 	strb.w	r3, [r6], #1
 8004720:	e7e4      	b.n	80046ec <_scanf_float+0x158>
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	0610      	lsls	r0, r2, #24
 8004726:	f57f af65 	bpl.w	80045f4 <_scanf_float+0x60>
 800472a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472e:	e7f4      	b.n	800471a <_scanf_float+0x186>
 8004730:	f1ba 0f00 	cmp.w	sl, #0
 8004734:	d10e      	bne.n	8004754 <_scanf_float+0x1c0>
 8004736:	f1b9 0f00 	cmp.w	r9, #0
 800473a:	d10e      	bne.n	800475a <_scanf_float+0x1c6>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004742:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004746:	d108      	bne.n	800475a <_scanf_float+0x1c6>
 8004748:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	f04f 0a01 	mov.w	sl, #1
 8004752:	e7e3      	b.n	800471c <_scanf_float+0x188>
 8004754:	f1ba 0f02 	cmp.w	sl, #2
 8004758:	d055      	beq.n	8004806 <_scanf_float+0x272>
 800475a:	2d01      	cmp	r5, #1
 800475c:	d002      	beq.n	8004764 <_scanf_float+0x1d0>
 800475e:	2d04      	cmp	r5, #4
 8004760:	f47f af48 	bne.w	80045f4 <_scanf_float+0x60>
 8004764:	3501      	adds	r5, #1
 8004766:	b2ed      	uxtb	r5, r5
 8004768:	e7d8      	b.n	800471c <_scanf_float+0x188>
 800476a:	f1ba 0f01 	cmp.w	sl, #1
 800476e:	f47f af41 	bne.w	80045f4 <_scanf_float+0x60>
 8004772:	f04f 0a02 	mov.w	sl, #2
 8004776:	e7d1      	b.n	800471c <_scanf_float+0x188>
 8004778:	b97d      	cbnz	r5, 800479a <_scanf_float+0x206>
 800477a:	f1b9 0f00 	cmp.w	r9, #0
 800477e:	f47f af3c 	bne.w	80045fa <_scanf_float+0x66>
 8004782:	6822      	ldr	r2, [r4, #0]
 8004784:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004788:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800478c:	f47f af39 	bne.w	8004602 <_scanf_float+0x6e>
 8004790:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	2501      	movs	r5, #1
 8004798:	e7c0      	b.n	800471c <_scanf_float+0x188>
 800479a:	2d03      	cmp	r5, #3
 800479c:	d0e2      	beq.n	8004764 <_scanf_float+0x1d0>
 800479e:	2d05      	cmp	r5, #5
 80047a0:	e7de      	b.n	8004760 <_scanf_float+0x1cc>
 80047a2:	2d02      	cmp	r5, #2
 80047a4:	f47f af26 	bne.w	80045f4 <_scanf_float+0x60>
 80047a8:	2503      	movs	r5, #3
 80047aa:	e7b7      	b.n	800471c <_scanf_float+0x188>
 80047ac:	2d06      	cmp	r5, #6
 80047ae:	f47f af21 	bne.w	80045f4 <_scanf_float+0x60>
 80047b2:	2507      	movs	r5, #7
 80047b4:	e7b2      	b.n	800471c <_scanf_float+0x188>
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	0591      	lsls	r1, r2, #22
 80047ba:	f57f af1b 	bpl.w	80045f4 <_scanf_float+0x60>
 80047be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80047c2:	6022      	str	r2, [r4, #0]
 80047c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80047c8:	e7a8      	b.n	800471c <_scanf_float+0x188>
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80047d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80047d4:	d006      	beq.n	80047e4 <_scanf_float+0x250>
 80047d6:	0550      	lsls	r0, r2, #21
 80047d8:	f57f af0c 	bpl.w	80045f4 <_scanf_float+0x60>
 80047dc:	f1b9 0f00 	cmp.w	r9, #0
 80047e0:	f43f af0f 	beq.w	8004602 <_scanf_float+0x6e>
 80047e4:	0591      	lsls	r1, r2, #22
 80047e6:	bf58      	it	pl
 80047e8:	9901      	ldrpl	r1, [sp, #4]
 80047ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80047ee:	bf58      	it	pl
 80047f0:	eba9 0101 	subpl.w	r1, r9, r1
 80047f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80047f8:	bf58      	it	pl
 80047fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047fe:	6022      	str	r2, [r4, #0]
 8004800:	f04f 0900 	mov.w	r9, #0
 8004804:	e78a      	b.n	800471c <_scanf_float+0x188>
 8004806:	f04f 0a03 	mov.w	sl, #3
 800480a:	e787      	b.n	800471c <_scanf_float+0x188>
 800480c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004810:	4639      	mov	r1, r7
 8004812:	4640      	mov	r0, r8
 8004814:	4798      	blx	r3
 8004816:	2800      	cmp	r0, #0
 8004818:	f43f aedf 	beq.w	80045da <_scanf_float+0x46>
 800481c:	e6ea      	b.n	80045f4 <_scanf_float+0x60>
 800481e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004822:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004826:	463a      	mov	r2, r7
 8004828:	4640      	mov	r0, r8
 800482a:	4798      	blx	r3
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	3b01      	subs	r3, #1
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	e6ec      	b.n	800460e <_scanf_float+0x7a>
 8004834:	1e6b      	subs	r3, r5, #1
 8004836:	2b06      	cmp	r3, #6
 8004838:	d825      	bhi.n	8004886 <_scanf_float+0x2f2>
 800483a:	2d02      	cmp	r5, #2
 800483c:	d836      	bhi.n	80048ac <_scanf_float+0x318>
 800483e:	455e      	cmp	r6, fp
 8004840:	f67f aee8 	bls.w	8004614 <_scanf_float+0x80>
 8004844:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004848:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800484c:	463a      	mov	r2, r7
 800484e:	4640      	mov	r0, r8
 8004850:	4798      	blx	r3
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	3b01      	subs	r3, #1
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	e7f1      	b.n	800483e <_scanf_float+0x2aa>
 800485a:	9802      	ldr	r0, [sp, #8]
 800485c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004860:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004864:	9002      	str	r0, [sp, #8]
 8004866:	463a      	mov	r2, r7
 8004868:	4640      	mov	r0, r8
 800486a:	4798      	blx	r3
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	3b01      	subs	r3, #1
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004876:	fa5f fa8a 	uxtb.w	sl, sl
 800487a:	f1ba 0f02 	cmp.w	sl, #2
 800487e:	d1ec      	bne.n	800485a <_scanf_float+0x2c6>
 8004880:	3d03      	subs	r5, #3
 8004882:	b2ed      	uxtb	r5, r5
 8004884:	1b76      	subs	r6, r6, r5
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	05da      	lsls	r2, r3, #23
 800488a:	d52f      	bpl.n	80048ec <_scanf_float+0x358>
 800488c:	055b      	lsls	r3, r3, #21
 800488e:	d510      	bpl.n	80048b2 <_scanf_float+0x31e>
 8004890:	455e      	cmp	r6, fp
 8004892:	f67f aebf 	bls.w	8004614 <_scanf_float+0x80>
 8004896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800489a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800489e:	463a      	mov	r2, r7
 80048a0:	4640      	mov	r0, r8
 80048a2:	4798      	blx	r3
 80048a4:	6923      	ldr	r3, [r4, #16]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	6123      	str	r3, [r4, #16]
 80048aa:	e7f1      	b.n	8004890 <_scanf_float+0x2fc>
 80048ac:	46aa      	mov	sl, r5
 80048ae:	9602      	str	r6, [sp, #8]
 80048b0:	e7df      	b.n	8004872 <_scanf_float+0x2de>
 80048b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80048b6:	6923      	ldr	r3, [r4, #16]
 80048b8:	2965      	cmp	r1, #101	; 0x65
 80048ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80048be:	f106 35ff 	add.w	r5, r6, #4294967295
 80048c2:	6123      	str	r3, [r4, #16]
 80048c4:	d00c      	beq.n	80048e0 <_scanf_float+0x34c>
 80048c6:	2945      	cmp	r1, #69	; 0x45
 80048c8:	d00a      	beq.n	80048e0 <_scanf_float+0x34c>
 80048ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048ce:	463a      	mov	r2, r7
 80048d0:	4640      	mov	r0, r8
 80048d2:	4798      	blx	r3
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80048da:	3b01      	subs	r3, #1
 80048dc:	1eb5      	subs	r5, r6, #2
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048e4:	463a      	mov	r2, r7
 80048e6:	4640      	mov	r0, r8
 80048e8:	4798      	blx	r3
 80048ea:	462e      	mov	r6, r5
 80048ec:	6825      	ldr	r5, [r4, #0]
 80048ee:	f015 0510 	ands.w	r5, r5, #16
 80048f2:	d158      	bne.n	80049a6 <_scanf_float+0x412>
 80048f4:	7035      	strb	r5, [r6, #0]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004900:	d11c      	bne.n	800493c <_scanf_float+0x3a8>
 8004902:	9b01      	ldr	r3, [sp, #4]
 8004904:	454b      	cmp	r3, r9
 8004906:	eba3 0209 	sub.w	r2, r3, r9
 800490a:	d124      	bne.n	8004956 <_scanf_float+0x3c2>
 800490c:	2200      	movs	r2, #0
 800490e:	4659      	mov	r1, fp
 8004910:	4640      	mov	r0, r8
 8004912:	f002 fc1d 	bl	8007150 <_strtod_r>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	6821      	ldr	r1, [r4, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f011 0f02 	tst.w	r1, #2
 8004920:	ec57 6b10 	vmov	r6, r7, d0
 8004924:	f103 0204 	add.w	r2, r3, #4
 8004928:	d020      	beq.n	800496c <_scanf_float+0x3d8>
 800492a:	9903      	ldr	r1, [sp, #12]
 800492c:	600a      	str	r2, [r1, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	e9c3 6700 	strd	r6, r7, [r3]
 8004934:	68e3      	ldr	r3, [r4, #12]
 8004936:	3301      	adds	r3, #1
 8004938:	60e3      	str	r3, [r4, #12]
 800493a:	e66c      	b.n	8004616 <_scanf_float+0x82>
 800493c:	9b04      	ldr	r3, [sp, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0e4      	beq.n	800490c <_scanf_float+0x378>
 8004942:	9905      	ldr	r1, [sp, #20]
 8004944:	230a      	movs	r3, #10
 8004946:	462a      	mov	r2, r5
 8004948:	3101      	adds	r1, #1
 800494a:	4640      	mov	r0, r8
 800494c:	f002 fc88 	bl	8007260 <_strtol_r>
 8004950:	9b04      	ldr	r3, [sp, #16]
 8004952:	9e05      	ldr	r6, [sp, #20]
 8004954:	1ac2      	subs	r2, r0, r3
 8004956:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800495a:	429e      	cmp	r6, r3
 800495c:	bf28      	it	cs
 800495e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004962:	4912      	ldr	r1, [pc, #72]	; (80049ac <_scanf_float+0x418>)
 8004964:	4630      	mov	r0, r6
 8004966:	f000 f8d5 	bl	8004b14 <siprintf>
 800496a:	e7cf      	b.n	800490c <_scanf_float+0x378>
 800496c:	f011 0f04 	tst.w	r1, #4
 8004970:	9903      	ldr	r1, [sp, #12]
 8004972:	600a      	str	r2, [r1, #0]
 8004974:	d1db      	bne.n	800492e <_scanf_float+0x39a>
 8004976:	f8d3 8000 	ldr.w	r8, [r3]
 800497a:	ee10 2a10 	vmov	r2, s0
 800497e:	ee10 0a10 	vmov	r0, s0
 8004982:	463b      	mov	r3, r7
 8004984:	4639      	mov	r1, r7
 8004986:	f7fc f8d1 	bl	8000b2c <__aeabi_dcmpun>
 800498a:	b128      	cbz	r0, 8004998 <_scanf_float+0x404>
 800498c:	4808      	ldr	r0, [pc, #32]	; (80049b0 <_scanf_float+0x41c>)
 800498e:	f000 f9a3 	bl	8004cd8 <nanf>
 8004992:	ed88 0a00 	vstr	s0, [r8]
 8004996:	e7cd      	b.n	8004934 <_scanf_float+0x3a0>
 8004998:	4630      	mov	r0, r6
 800499a:	4639      	mov	r1, r7
 800499c:	f7fc f924 	bl	8000be8 <__aeabi_d2f>
 80049a0:	f8c8 0000 	str.w	r0, [r8]
 80049a4:	e7c6      	b.n	8004934 <_scanf_float+0x3a0>
 80049a6:	2500      	movs	r5, #0
 80049a8:	e635      	b.n	8004616 <_scanf_float+0x82>
 80049aa:	bf00      	nop
 80049ac:	08009534 	.word	0x08009534
 80049b0:	080098c5 	.word	0x080098c5

080049b4 <std>:
 80049b4:	2300      	movs	r3, #0
 80049b6:	b510      	push	{r4, lr}
 80049b8:	4604      	mov	r4, r0
 80049ba:	e9c0 3300 	strd	r3, r3, [r0]
 80049be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049c2:	6083      	str	r3, [r0, #8]
 80049c4:	8181      	strh	r1, [r0, #12]
 80049c6:	6643      	str	r3, [r0, #100]	; 0x64
 80049c8:	81c2      	strh	r2, [r0, #14]
 80049ca:	6183      	str	r3, [r0, #24]
 80049cc:	4619      	mov	r1, r3
 80049ce:	2208      	movs	r2, #8
 80049d0:	305c      	adds	r0, #92	; 0x5c
 80049d2:	f000 f902 	bl	8004bda <memset>
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x38>)
 80049d8:	6263      	str	r3, [r4, #36]	; 0x24
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <std+0x3c>)
 80049dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <std+0x40>)
 80049e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <std+0x44>)
 80049e4:	6224      	str	r4, [r4, #32]
 80049e6:	6323      	str	r3, [r4, #48]	; 0x30
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	bf00      	nop
 80049ec:	08004b55 	.word	0x08004b55
 80049f0:	08004b77 	.word	0x08004b77
 80049f4:	08004baf 	.word	0x08004baf
 80049f8:	08004bd3 	.word	0x08004bd3

080049fc <stdio_exit_handler>:
 80049fc:	4a02      	ldr	r2, [pc, #8]	; (8004a08 <stdio_exit_handler+0xc>)
 80049fe:	4903      	ldr	r1, [pc, #12]	; (8004a0c <stdio_exit_handler+0x10>)
 8004a00:	4803      	ldr	r0, [pc, #12]	; (8004a10 <stdio_exit_handler+0x14>)
 8004a02:	f000 b869 	b.w	8004ad8 <_fwalk_sglue>
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c
 8004a0c:	08007621 	.word	0x08007621
 8004a10:	20000018 	.word	0x20000018

08004a14 <cleanup_stdio>:
 8004a14:	6841      	ldr	r1, [r0, #4]
 8004a16:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <cleanup_stdio+0x34>)
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	d001      	beq.n	8004a24 <cleanup_stdio+0x10>
 8004a20:	f002 fdfe 	bl	8007620 <_fflush_r>
 8004a24:	68a1      	ldr	r1, [r4, #8]
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <cleanup_stdio+0x38>)
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	d002      	beq.n	8004a32 <cleanup_stdio+0x1e>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	f002 fdf7 	bl	8007620 <_fflush_r>
 8004a32:	68e1      	ldr	r1, [r4, #12]
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <cleanup_stdio+0x3c>)
 8004a36:	4299      	cmp	r1, r3
 8004a38:	d004      	beq.n	8004a44 <cleanup_stdio+0x30>
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a40:	f002 bdee 	b.w	8007620 <_fflush_r>
 8004a44:	bd10      	pop	{r4, pc}
 8004a46:	bf00      	nop
 8004a48:	20000c18 	.word	0x20000c18
 8004a4c:	20000c80 	.word	0x20000c80
 8004a50:	20000ce8 	.word	0x20000ce8

08004a54 <global_stdio_init.part.0>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <global_stdio_init.part.0+0x30>)
 8004a58:	4c0b      	ldr	r4, [pc, #44]	; (8004a88 <global_stdio_init.part.0+0x34>)
 8004a5a:	4a0c      	ldr	r2, [pc, #48]	; (8004a8c <global_stdio_init.part.0+0x38>)
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	4620      	mov	r0, r4
 8004a60:	2200      	movs	r2, #0
 8004a62:	2104      	movs	r1, #4
 8004a64:	f7ff ffa6 	bl	80049b4 <std>
 8004a68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	2109      	movs	r1, #9
 8004a70:	f7ff ffa0 	bl	80049b4 <std>
 8004a74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a78:	2202      	movs	r2, #2
 8004a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7e:	2112      	movs	r1, #18
 8004a80:	f7ff bf98 	b.w	80049b4 <std>
 8004a84:	20000d50 	.word	0x20000d50
 8004a88:	20000c18 	.word	0x20000c18
 8004a8c:	080049fd 	.word	0x080049fd

08004a90 <__sfp_lock_acquire>:
 8004a90:	4801      	ldr	r0, [pc, #4]	; (8004a98 <__sfp_lock_acquire+0x8>)
 8004a92:	f000 b91f 	b.w	8004cd4 <__retarget_lock_acquire_recursive>
 8004a96:	bf00      	nop
 8004a98:	20000d59 	.word	0x20000d59

08004a9c <__sfp_lock_release>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__sfp_lock_release+0x8>)
 8004a9e:	f000 b91a 	b.w	8004cd6 <__retarget_lock_release_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	20000d59 	.word	0x20000d59

08004aa8 <__sinit>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	4604      	mov	r4, r0
 8004aac:	f7ff fff0 	bl	8004a90 <__sfp_lock_acquire>
 8004ab0:	6a23      	ldr	r3, [r4, #32]
 8004ab2:	b11b      	cbz	r3, 8004abc <__sinit+0x14>
 8004ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ab8:	f7ff bff0 	b.w	8004a9c <__sfp_lock_release>
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <__sinit+0x28>)
 8004abe:	6223      	str	r3, [r4, #32]
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <__sinit+0x2c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f5      	bne.n	8004ab4 <__sinit+0xc>
 8004ac8:	f7ff ffc4 	bl	8004a54 <global_stdio_init.part.0>
 8004acc:	e7f2      	b.n	8004ab4 <__sinit+0xc>
 8004ace:	bf00      	nop
 8004ad0:	08004a15 	.word	0x08004a15
 8004ad4:	20000d50 	.word	0x20000d50

08004ad8 <_fwalk_sglue>:
 8004ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004adc:	4607      	mov	r7, r0
 8004ade:	4688      	mov	r8, r1
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8004aec:	d505      	bpl.n	8004afa <_fwalk_sglue+0x22>
 8004aee:	6824      	ldr	r4, [r4, #0]
 8004af0:	2c00      	cmp	r4, #0
 8004af2:	d1f7      	bne.n	8004ae4 <_fwalk_sglue+0xc>
 8004af4:	4630      	mov	r0, r6
 8004af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d907      	bls.n	8004b10 <_fwalk_sglue+0x38>
 8004b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b04:	3301      	adds	r3, #1
 8004b06:	d003      	beq.n	8004b10 <_fwalk_sglue+0x38>
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	47c0      	blx	r8
 8004b0e:	4306      	orrs	r6, r0
 8004b10:	3568      	adds	r5, #104	; 0x68
 8004b12:	e7e9      	b.n	8004ae8 <_fwalk_sglue+0x10>

08004b14 <siprintf>:
 8004b14:	b40e      	push	{r1, r2, r3}
 8004b16:	b500      	push	{lr}
 8004b18:	b09c      	sub	sp, #112	; 0x70
 8004b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	9006      	str	r0, [sp, #24]
 8004b20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b24:	4809      	ldr	r0, [pc, #36]	; (8004b4c <siprintf+0x38>)
 8004b26:	9107      	str	r1, [sp, #28]
 8004b28:	9104      	str	r1, [sp, #16]
 8004b2a:	4909      	ldr	r1, [pc, #36]	; (8004b50 <siprintf+0x3c>)
 8004b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b30:	9105      	str	r1, [sp, #20]
 8004b32:	6800      	ldr	r0, [r0, #0]
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	a902      	add	r1, sp, #8
 8004b38:	f002 fbee 	bl	8007318 <_svfiprintf_r>
 8004b3c:	9b02      	ldr	r3, [sp, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	b01c      	add	sp, #112	; 0x70
 8004b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b48:	b003      	add	sp, #12
 8004b4a:	4770      	bx	lr
 8004b4c:	20000064 	.word	0x20000064
 8004b50:	ffff0208 	.word	0xffff0208

08004b54 <__sread>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	460c      	mov	r4, r1
 8004b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b5c:	f000 f86c 	bl	8004c38 <_read_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	bfab      	itete	ge
 8004b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b66:	89a3      	ldrhlt	r3, [r4, #12]
 8004b68:	181b      	addge	r3, r3, r0
 8004b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b6e:	bfac      	ite	ge
 8004b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b72:	81a3      	strhlt	r3, [r4, #12]
 8004b74:	bd10      	pop	{r4, pc}

08004b76 <__swrite>:
 8004b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7a:	461f      	mov	r7, r3
 8004b7c:	898b      	ldrh	r3, [r1, #12]
 8004b7e:	05db      	lsls	r3, r3, #23
 8004b80:	4605      	mov	r5, r0
 8004b82:	460c      	mov	r4, r1
 8004b84:	4616      	mov	r6, r2
 8004b86:	d505      	bpl.n	8004b94 <__swrite+0x1e>
 8004b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f000 f840 	bl	8004c14 <_lseek_r>
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9e:	81a3      	strh	r3, [r4, #12]
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004baa:	f000 b857 	b.w	8004c5c <_write_r>

08004bae <__sseek>:
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb6:	f000 f82d 	bl	8004c14 <_lseek_r>
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	89a3      	ldrh	r3, [r4, #12]
 8004bbe:	bf15      	itete	ne
 8004bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bca:	81a3      	strheq	r3, [r4, #12]
 8004bcc:	bf18      	it	ne
 8004bce:	81a3      	strhne	r3, [r4, #12]
 8004bd0:	bd10      	pop	{r4, pc}

08004bd2 <__sclose>:
 8004bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd6:	f000 b80d 	b.w	8004bf4 <_close_r>

08004bda <memset>:
 8004bda:	4402      	add	r2, r0
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d100      	bne.n	8004be4 <memset+0xa>
 8004be2:	4770      	bx	lr
 8004be4:	f803 1b01 	strb.w	r1, [r3], #1
 8004be8:	e7f9      	b.n	8004bde <memset+0x4>
	...

08004bec <_localeconv_r>:
 8004bec:	4800      	ldr	r0, [pc, #0]	; (8004bf0 <_localeconv_r+0x4>)
 8004bee:	4770      	bx	lr
 8004bf0:	20000158 	.word	0x20000158

08004bf4 <_close_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d06      	ldr	r5, [pc, #24]	; (8004c10 <_close_r+0x1c>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fc fd8b 	bl	800171a <_close>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_close_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_close_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	20000d54 	.word	0x20000d54

08004c14 <_lseek_r>:
 8004c14:	b538      	push	{r3, r4, r5, lr}
 8004c16:	4d07      	ldr	r5, [pc, #28]	; (8004c34 <_lseek_r+0x20>)
 8004c18:	4604      	mov	r4, r0
 8004c1a:	4608      	mov	r0, r1
 8004c1c:	4611      	mov	r1, r2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	f7fc fda0 	bl	8001768 <_lseek>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d102      	bne.n	8004c32 <_lseek_r+0x1e>
 8004c2c:	682b      	ldr	r3, [r5, #0]
 8004c2e:	b103      	cbz	r3, 8004c32 <_lseek_r+0x1e>
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	bd38      	pop	{r3, r4, r5, pc}
 8004c34:	20000d54 	.word	0x20000d54

08004c38 <_read_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	4d07      	ldr	r5, [pc, #28]	; (8004c58 <_read_r+0x20>)
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	4608      	mov	r0, r1
 8004c40:	4611      	mov	r1, r2
 8004c42:	2200      	movs	r2, #0
 8004c44:	602a      	str	r2, [r5, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7fc fd2e 	bl	80016a8 <_read>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_read_r+0x1e>
 8004c50:	682b      	ldr	r3, [r5, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_read_r+0x1e>
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000d54 	.word	0x20000d54

08004c5c <_write_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4d07      	ldr	r5, [pc, #28]	; (8004c7c <_write_r+0x20>)
 8004c60:	4604      	mov	r4, r0
 8004c62:	4608      	mov	r0, r1
 8004c64:	4611      	mov	r1, r2
 8004c66:	2200      	movs	r2, #0
 8004c68:	602a      	str	r2, [r5, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fc fd39 	bl	80016e2 <_write>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_write_r+0x1e>
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_write_r+0x1e>
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	20000d54 	.word	0x20000d54

08004c80 <__errno>:
 8004c80:	4b01      	ldr	r3, [pc, #4]	; (8004c88 <__errno+0x8>)
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000064 	.word	0x20000064

08004c8c <__libc_init_array>:
 8004c8c:	b570      	push	{r4, r5, r6, lr}
 8004c8e:	4d0d      	ldr	r5, [pc, #52]	; (8004cc4 <__libc_init_array+0x38>)
 8004c90:	4c0d      	ldr	r4, [pc, #52]	; (8004cc8 <__libc_init_array+0x3c>)
 8004c92:	1b64      	subs	r4, r4, r5
 8004c94:	10a4      	asrs	r4, r4, #2
 8004c96:	2600      	movs	r6, #0
 8004c98:	42a6      	cmp	r6, r4
 8004c9a:	d109      	bne.n	8004cb0 <__libc_init_array+0x24>
 8004c9c:	4d0b      	ldr	r5, [pc, #44]	; (8004ccc <__libc_init_array+0x40>)
 8004c9e:	4c0c      	ldr	r4, [pc, #48]	; (8004cd0 <__libc_init_array+0x44>)
 8004ca0:	f004 fc16 	bl	80094d0 <_init>
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	2600      	movs	r6, #0
 8004caa:	42a6      	cmp	r6, r4
 8004cac:	d105      	bne.n	8004cba <__libc_init_array+0x2e>
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb4:	4798      	blx	r3
 8004cb6:	3601      	adds	r6, #1
 8004cb8:	e7ee      	b.n	8004c98 <__libc_init_array+0xc>
 8004cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cbe:	4798      	blx	r3
 8004cc0:	3601      	adds	r6, #1
 8004cc2:	e7f2      	b.n	8004caa <__libc_init_array+0x1e>
 8004cc4:	08009b08 	.word	0x08009b08
 8004cc8:	08009b08 	.word	0x08009b08
 8004ccc:	08009b08 	.word	0x08009b08
 8004cd0:	08009b0c 	.word	0x08009b0c

08004cd4 <__retarget_lock_acquire_recursive>:
 8004cd4:	4770      	bx	lr

08004cd6 <__retarget_lock_release_recursive>:
 8004cd6:	4770      	bx	lr

08004cd8 <nanf>:
 8004cd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ce0 <nanf+0x8>
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	7fc00000 	.word	0x7fc00000

08004ce4 <quorem>:
 8004ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	6903      	ldr	r3, [r0, #16]
 8004cea:	690c      	ldr	r4, [r1, #16]
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	4607      	mov	r7, r0
 8004cf0:	db7e      	blt.n	8004df0 <quorem+0x10c>
 8004cf2:	3c01      	subs	r4, #1
 8004cf4:	f101 0814 	add.w	r8, r1, #20
 8004cf8:	f100 0514 	add.w	r5, r0, #20
 8004cfc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d16:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d1a:	d331      	bcc.n	8004d80 <quorem+0x9c>
 8004d1c:	f04f 0e00 	mov.w	lr, #0
 8004d20:	4640      	mov	r0, r8
 8004d22:	46ac      	mov	ip, r5
 8004d24:	46f2      	mov	sl, lr
 8004d26:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d2a:	b293      	uxth	r3, r2
 8004d2c:	fb06 e303 	mla	r3, r6, r3, lr
 8004d30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d34:	0c1a      	lsrs	r2, r3, #16
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	ebaa 0303 	sub.w	r3, sl, r3
 8004d3c:	f8dc a000 	ldr.w	sl, [ip]
 8004d40:	fa13 f38a 	uxtah	r3, r3, sl
 8004d44:	fb06 220e 	mla	r2, r6, lr, r2
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	9b00      	ldr	r3, [sp, #0]
 8004d4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d50:	b292      	uxth	r2, r2
 8004d52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d5a:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d5e:	4581      	cmp	r9, r0
 8004d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d64:	f84c 3b04 	str.w	r3, [ip], #4
 8004d68:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d6c:	d2db      	bcs.n	8004d26 <quorem+0x42>
 8004d6e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d72:	b92b      	cbnz	r3, 8004d80 <quorem+0x9c>
 8004d74:	9b01      	ldr	r3, [sp, #4]
 8004d76:	3b04      	subs	r3, #4
 8004d78:	429d      	cmp	r5, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	d32c      	bcc.n	8004dd8 <quorem+0xf4>
 8004d7e:	613c      	str	r4, [r7, #16]
 8004d80:	4638      	mov	r0, r7
 8004d82:	f001 f9f1 	bl	8006168 <__mcmp>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	db22      	blt.n	8004dd0 <quorem+0xec>
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d94:	f8d1 c000 	ldr.w	ip, [r1]
 8004d98:	b293      	uxth	r3, r2
 8004d9a:	1ac3      	subs	r3, r0, r3
 8004d9c:	0c12      	lsrs	r2, r2, #16
 8004d9e:	fa13 f38c 	uxtah	r3, r3, ip
 8004da2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004da6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004db0:	45c1      	cmp	r9, r8
 8004db2:	f841 3b04 	str.w	r3, [r1], #4
 8004db6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004dba:	d2e9      	bcs.n	8004d90 <quorem+0xac>
 8004dbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dc4:	b922      	cbnz	r2, 8004dd0 <quorem+0xec>
 8004dc6:	3b04      	subs	r3, #4
 8004dc8:	429d      	cmp	r5, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	d30a      	bcc.n	8004de4 <quorem+0x100>
 8004dce:	613c      	str	r4, [r7, #16]
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	b003      	add	sp, #12
 8004dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d1ce      	bne.n	8004d7e <quorem+0x9a>
 8004de0:	3c01      	subs	r4, #1
 8004de2:	e7c9      	b.n	8004d78 <quorem+0x94>
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	3b04      	subs	r3, #4
 8004de8:	2a00      	cmp	r2, #0
 8004dea:	d1f0      	bne.n	8004dce <quorem+0xea>
 8004dec:	3c01      	subs	r4, #1
 8004dee:	e7eb      	b.n	8004dc8 <quorem+0xe4>
 8004df0:	2000      	movs	r0, #0
 8004df2:	e7ee      	b.n	8004dd2 <quorem+0xee>
 8004df4:	0000      	movs	r0, r0
	...

08004df8 <_dtoa_r>:
 8004df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	ed2d 8b04 	vpush	{d8-d9}
 8004e00:	69c5      	ldr	r5, [r0, #28]
 8004e02:	b093      	sub	sp, #76	; 0x4c
 8004e04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004e08:	ec57 6b10 	vmov	r6, r7, d0
 8004e0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e10:	9107      	str	r1, [sp, #28]
 8004e12:	4604      	mov	r4, r0
 8004e14:	920a      	str	r2, [sp, #40]	; 0x28
 8004e16:	930d      	str	r3, [sp, #52]	; 0x34
 8004e18:	b975      	cbnz	r5, 8004e38 <_dtoa_r+0x40>
 8004e1a:	2010      	movs	r0, #16
 8004e1c:	f000 fe2a 	bl	8005a74 <malloc>
 8004e20:	4602      	mov	r2, r0
 8004e22:	61e0      	str	r0, [r4, #28]
 8004e24:	b920      	cbnz	r0, 8004e30 <_dtoa_r+0x38>
 8004e26:	4bae      	ldr	r3, [pc, #696]	; (80050e0 <_dtoa_r+0x2e8>)
 8004e28:	21ef      	movs	r1, #239	; 0xef
 8004e2a:	48ae      	ldr	r0, [pc, #696]	; (80050e4 <_dtoa_r+0x2ec>)
 8004e2c:	f002 fc74 	bl	8007718 <__assert_func>
 8004e30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e34:	6005      	str	r5, [r0, #0]
 8004e36:	60c5      	str	r5, [r0, #12]
 8004e38:	69e3      	ldr	r3, [r4, #28]
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	b151      	cbz	r1, 8004e54 <_dtoa_r+0x5c>
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	604a      	str	r2, [r1, #4]
 8004e42:	2301      	movs	r3, #1
 8004e44:	4093      	lsls	r3, r2
 8004e46:	608b      	str	r3, [r1, #8]
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f000 ff07 	bl	8005c5c <_Bfree>
 8004e4e:	69e3      	ldr	r3, [r4, #28]
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	1e3b      	subs	r3, r7, #0
 8004e56:	bfbb      	ittet	lt
 8004e58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e5c:	9303      	strlt	r3, [sp, #12]
 8004e5e:	2300      	movge	r3, #0
 8004e60:	2201      	movlt	r2, #1
 8004e62:	bfac      	ite	ge
 8004e64:	f8c8 3000 	strge.w	r3, [r8]
 8004e68:	f8c8 2000 	strlt.w	r2, [r8]
 8004e6c:	4b9e      	ldr	r3, [pc, #632]	; (80050e8 <_dtoa_r+0x2f0>)
 8004e6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e72:	ea33 0308 	bics.w	r3, r3, r8
 8004e76:	d11b      	bne.n	8004eb0 <_dtoa_r+0xb8>
 8004e78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004e84:	4333      	orrs	r3, r6
 8004e86:	f000 8593 	beq.w	80059b0 <_dtoa_r+0xbb8>
 8004e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e8c:	b963      	cbnz	r3, 8004ea8 <_dtoa_r+0xb0>
 8004e8e:	4b97      	ldr	r3, [pc, #604]	; (80050ec <_dtoa_r+0x2f4>)
 8004e90:	e027      	b.n	8004ee2 <_dtoa_r+0xea>
 8004e92:	4b97      	ldr	r3, [pc, #604]	; (80050f0 <_dtoa_r+0x2f8>)
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	3308      	adds	r3, #8
 8004e98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	9800      	ldr	r0, [sp, #0]
 8004e9e:	b013      	add	sp, #76	; 0x4c
 8004ea0:	ecbd 8b04 	vpop	{d8-d9}
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	4b90      	ldr	r3, [pc, #576]	; (80050ec <_dtoa_r+0x2f4>)
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	3303      	adds	r3, #3
 8004eae:	e7f3      	b.n	8004e98 <_dtoa_r+0xa0>
 8004eb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	ec51 0b17 	vmov	r0, r1, d7
 8004eba:	eeb0 8a47 	vmov.f32	s16, s14
 8004ebe:	eef0 8a67 	vmov.f32	s17, s15
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	f7fb fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ec8:	4681      	mov	r9, r0
 8004eca:	b160      	cbz	r0, 8004ee6 <_dtoa_r+0xee>
 8004ecc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ece:	2301      	movs	r3, #1
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8568 	beq.w	80059aa <_dtoa_r+0xbb2>
 8004eda:	4b86      	ldr	r3, [pc, #536]	; (80050f4 <_dtoa_r+0x2fc>)
 8004edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	e7da      	b.n	8004e9c <_dtoa_r+0xa4>
 8004ee6:	aa10      	add	r2, sp, #64	; 0x40
 8004ee8:	a911      	add	r1, sp, #68	; 0x44
 8004eea:	4620      	mov	r0, r4
 8004eec:	eeb0 0a48 	vmov.f32	s0, s16
 8004ef0:	eef0 0a68 	vmov.f32	s1, s17
 8004ef4:	f001 fa4e 	bl	8006394 <__d2b>
 8004ef8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004efc:	4682      	mov	sl, r0
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	d07f      	beq.n	8005002 <_dtoa_r+0x20a>
 8004f02:	ee18 3a90 	vmov	r3, s17
 8004f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f0e:	ec51 0b18 	vmov	r0, r1, d8
 8004f12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f1e:	4619      	mov	r1, r3
 8004f20:	2200      	movs	r2, #0
 8004f22:	4b75      	ldr	r3, [pc, #468]	; (80050f8 <_dtoa_r+0x300>)
 8004f24:	f7fb f9b0 	bl	8000288 <__aeabi_dsub>
 8004f28:	a367      	add	r3, pc, #412	; (adr r3, 80050c8 <_dtoa_r+0x2d0>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fb63 	bl	80005f8 <__aeabi_dmul>
 8004f32:	a367      	add	r3, pc, #412	; (adr r3, 80050d0 <_dtoa_r+0x2d8>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f7fb f9a8 	bl	800028c <__adddf3>
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	460f      	mov	r7, r1
 8004f42:	f7fb faef 	bl	8000524 <__aeabi_i2d>
 8004f46:	a364      	add	r3, pc, #400	; (adr r3, 80050d8 <_dtoa_r+0x2e0>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb fb54 	bl	80005f8 <__aeabi_dmul>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb f998 	bl	800028c <__adddf3>
 8004f5c:	4606      	mov	r6, r0
 8004f5e:	460f      	mov	r7, r1
 8004f60:	f7fb fdfa 	bl	8000b58 <__aeabi_d2iz>
 8004f64:	2200      	movs	r2, #0
 8004f66:	4683      	mov	fp, r0
 8004f68:	2300      	movs	r3, #0
 8004f6a:	4630      	mov	r0, r6
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	f7fb fdb5 	bl	8000adc <__aeabi_dcmplt>
 8004f72:	b148      	cbz	r0, 8004f88 <_dtoa_r+0x190>
 8004f74:	4658      	mov	r0, fp
 8004f76:	f7fb fad5 	bl	8000524 <__aeabi_i2d>
 8004f7a:	4632      	mov	r2, r6
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	f7fb fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f82:	b908      	cbnz	r0, 8004f88 <_dtoa_r+0x190>
 8004f84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f88:	f1bb 0f16 	cmp.w	fp, #22
 8004f8c:	d857      	bhi.n	800503e <_dtoa_r+0x246>
 8004f8e:	4b5b      	ldr	r3, [pc, #364]	; (80050fc <_dtoa_r+0x304>)
 8004f90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	ec51 0b18 	vmov	r0, r1, d8
 8004f9c:	f7fb fd9e 	bl	8000adc <__aeabi_dcmplt>
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	d04e      	beq.n	8005042 <_dtoa_r+0x24a>
 8004fa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004fa8:	2300      	movs	r3, #0
 8004faa:	930c      	str	r3, [sp, #48]	; 0x30
 8004fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fae:	1b5b      	subs	r3, r3, r5
 8004fb0:	1e5a      	subs	r2, r3, #1
 8004fb2:	bf45      	ittet	mi
 8004fb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8004fb8:	9305      	strmi	r3, [sp, #20]
 8004fba:	2300      	movpl	r3, #0
 8004fbc:	2300      	movmi	r3, #0
 8004fbe:	9206      	str	r2, [sp, #24]
 8004fc0:	bf54      	ite	pl
 8004fc2:	9305      	strpl	r3, [sp, #20]
 8004fc4:	9306      	strmi	r3, [sp, #24]
 8004fc6:	f1bb 0f00 	cmp.w	fp, #0
 8004fca:	db3c      	blt.n	8005046 <_dtoa_r+0x24e>
 8004fcc:	9b06      	ldr	r3, [sp, #24]
 8004fce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004fd2:	445b      	add	r3, fp
 8004fd4:	9306      	str	r3, [sp, #24]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9308      	str	r3, [sp, #32]
 8004fda:	9b07      	ldr	r3, [sp, #28]
 8004fdc:	2b09      	cmp	r3, #9
 8004fde:	d868      	bhi.n	80050b2 <_dtoa_r+0x2ba>
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	bfc4      	itt	gt
 8004fe4:	3b04      	subgt	r3, #4
 8004fe6:	9307      	strgt	r3, [sp, #28]
 8004fe8:	9b07      	ldr	r3, [sp, #28]
 8004fea:	f1a3 0302 	sub.w	r3, r3, #2
 8004fee:	bfcc      	ite	gt
 8004ff0:	2500      	movgt	r5, #0
 8004ff2:	2501      	movle	r5, #1
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	f200 8085 	bhi.w	8005104 <_dtoa_r+0x30c>
 8004ffa:	e8df f003 	tbb	[pc, r3]
 8004ffe:	3b2e      	.short	0x3b2e
 8005000:	5839      	.short	0x5839
 8005002:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005006:	441d      	add	r5, r3
 8005008:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800500c:	2b20      	cmp	r3, #32
 800500e:	bfc1      	itttt	gt
 8005010:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005014:	fa08 f803 	lslgt.w	r8, r8, r3
 8005018:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800501c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005020:	bfd6      	itet	le
 8005022:	f1c3 0320 	rsble	r3, r3, #32
 8005026:	ea48 0003 	orrgt.w	r0, r8, r3
 800502a:	fa06 f003 	lslle.w	r0, r6, r3
 800502e:	f7fb fa69 	bl	8000504 <__aeabi_ui2d>
 8005032:	2201      	movs	r2, #1
 8005034:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005038:	3d01      	subs	r5, #1
 800503a:	920e      	str	r2, [sp, #56]	; 0x38
 800503c:	e76f      	b.n	8004f1e <_dtoa_r+0x126>
 800503e:	2301      	movs	r3, #1
 8005040:	e7b3      	b.n	8004faa <_dtoa_r+0x1b2>
 8005042:	900c      	str	r0, [sp, #48]	; 0x30
 8005044:	e7b2      	b.n	8004fac <_dtoa_r+0x1b4>
 8005046:	9b05      	ldr	r3, [sp, #20]
 8005048:	eba3 030b 	sub.w	r3, r3, fp
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	f1cb 0300 	rsb	r3, fp, #0
 8005052:	9308      	str	r3, [sp, #32]
 8005054:	2300      	movs	r3, #0
 8005056:	930b      	str	r3, [sp, #44]	; 0x2c
 8005058:	e7bf      	b.n	8004fda <_dtoa_r+0x1e2>
 800505a:	2300      	movs	r3, #0
 800505c:	9309      	str	r3, [sp, #36]	; 0x24
 800505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005060:	2b00      	cmp	r3, #0
 8005062:	dc52      	bgt.n	800510a <_dtoa_r+0x312>
 8005064:	2301      	movs	r3, #1
 8005066:	9301      	str	r3, [sp, #4]
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	461a      	mov	r2, r3
 800506c:	920a      	str	r2, [sp, #40]	; 0x28
 800506e:	e00b      	b.n	8005088 <_dtoa_r+0x290>
 8005070:	2301      	movs	r3, #1
 8005072:	e7f3      	b.n	800505c <_dtoa_r+0x264>
 8005074:	2300      	movs	r3, #0
 8005076:	9309      	str	r3, [sp, #36]	; 0x24
 8005078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800507a:	445b      	add	r3, fp
 800507c:	9301      	str	r3, [sp, #4]
 800507e:	3301      	adds	r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	9304      	str	r3, [sp, #16]
 8005084:	bfb8      	it	lt
 8005086:	2301      	movlt	r3, #1
 8005088:	69e0      	ldr	r0, [r4, #28]
 800508a:	2100      	movs	r1, #0
 800508c:	2204      	movs	r2, #4
 800508e:	f102 0614 	add.w	r6, r2, #20
 8005092:	429e      	cmp	r6, r3
 8005094:	d93d      	bls.n	8005112 <_dtoa_r+0x31a>
 8005096:	6041      	str	r1, [r0, #4]
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fd9f 	bl	8005bdc <_Balloc>
 800509e:	9000      	str	r0, [sp, #0]
 80050a0:	2800      	cmp	r0, #0
 80050a2:	d139      	bne.n	8005118 <_dtoa_r+0x320>
 80050a4:	4b16      	ldr	r3, [pc, #88]	; (8005100 <_dtoa_r+0x308>)
 80050a6:	4602      	mov	r2, r0
 80050a8:	f240 11af 	movw	r1, #431	; 0x1af
 80050ac:	e6bd      	b.n	8004e2a <_dtoa_r+0x32>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e7e1      	b.n	8005076 <_dtoa_r+0x27e>
 80050b2:	2501      	movs	r5, #1
 80050b4:	2300      	movs	r3, #0
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	9509      	str	r5, [sp, #36]	; 0x24
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	2200      	movs	r2, #0
 80050c4:	2312      	movs	r3, #18
 80050c6:	e7d1      	b.n	800506c <_dtoa_r+0x274>
 80050c8:	636f4361 	.word	0x636f4361
 80050cc:	3fd287a7 	.word	0x3fd287a7
 80050d0:	8b60c8b3 	.word	0x8b60c8b3
 80050d4:	3fc68a28 	.word	0x3fc68a28
 80050d8:	509f79fb 	.word	0x509f79fb
 80050dc:	3fd34413 	.word	0x3fd34413
 80050e0:	08009546 	.word	0x08009546
 80050e4:	0800955d 	.word	0x0800955d
 80050e8:	7ff00000 	.word	0x7ff00000
 80050ec:	08009542 	.word	0x08009542
 80050f0:	08009539 	.word	0x08009539
 80050f4:	08009511 	.word	0x08009511
 80050f8:	3ff80000 	.word	0x3ff80000
 80050fc:	08009648 	.word	0x08009648
 8005100:	080095b5 	.word	0x080095b5
 8005104:	2301      	movs	r3, #1
 8005106:	9309      	str	r3, [sp, #36]	; 0x24
 8005108:	e7d7      	b.n	80050ba <_dtoa_r+0x2c2>
 800510a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	9304      	str	r3, [sp, #16]
 8005110:	e7ba      	b.n	8005088 <_dtoa_r+0x290>
 8005112:	3101      	adds	r1, #1
 8005114:	0052      	lsls	r2, r2, #1
 8005116:	e7ba      	b.n	800508e <_dtoa_r+0x296>
 8005118:	69e3      	ldr	r3, [r4, #28]
 800511a:	9a00      	ldr	r2, [sp, #0]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	2b0e      	cmp	r3, #14
 8005122:	f200 80a8 	bhi.w	8005276 <_dtoa_r+0x47e>
 8005126:	2d00      	cmp	r5, #0
 8005128:	f000 80a5 	beq.w	8005276 <_dtoa_r+0x47e>
 800512c:	f1bb 0f00 	cmp.w	fp, #0
 8005130:	dd38      	ble.n	80051a4 <_dtoa_r+0x3ac>
 8005132:	4bc0      	ldr	r3, [pc, #768]	; (8005434 <_dtoa_r+0x63c>)
 8005134:	f00b 020f 	and.w	r2, fp, #15
 8005138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800513c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005140:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005144:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005148:	d019      	beq.n	800517e <_dtoa_r+0x386>
 800514a:	4bbb      	ldr	r3, [pc, #748]	; (8005438 <_dtoa_r+0x640>)
 800514c:	ec51 0b18 	vmov	r0, r1, d8
 8005150:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005154:	f7fb fb7a 	bl	800084c <__aeabi_ddiv>
 8005158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800515c:	f008 080f 	and.w	r8, r8, #15
 8005160:	2503      	movs	r5, #3
 8005162:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005438 <_dtoa_r+0x640>
 8005166:	f1b8 0f00 	cmp.w	r8, #0
 800516a:	d10a      	bne.n	8005182 <_dtoa_r+0x38a>
 800516c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005170:	4632      	mov	r2, r6
 8005172:	463b      	mov	r3, r7
 8005174:	f7fb fb6a 	bl	800084c <__aeabi_ddiv>
 8005178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800517c:	e02b      	b.n	80051d6 <_dtoa_r+0x3de>
 800517e:	2502      	movs	r5, #2
 8005180:	e7ef      	b.n	8005162 <_dtoa_r+0x36a>
 8005182:	f018 0f01 	tst.w	r8, #1
 8005186:	d008      	beq.n	800519a <_dtoa_r+0x3a2>
 8005188:	4630      	mov	r0, r6
 800518a:	4639      	mov	r1, r7
 800518c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005190:	f7fb fa32 	bl	80005f8 <__aeabi_dmul>
 8005194:	3501      	adds	r5, #1
 8005196:	4606      	mov	r6, r0
 8005198:	460f      	mov	r7, r1
 800519a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800519e:	f109 0908 	add.w	r9, r9, #8
 80051a2:	e7e0      	b.n	8005166 <_dtoa_r+0x36e>
 80051a4:	f000 809f 	beq.w	80052e6 <_dtoa_r+0x4ee>
 80051a8:	f1cb 0600 	rsb	r6, fp, #0
 80051ac:	4ba1      	ldr	r3, [pc, #644]	; (8005434 <_dtoa_r+0x63c>)
 80051ae:	4fa2      	ldr	r7, [pc, #648]	; (8005438 <_dtoa_r+0x640>)
 80051b0:	f006 020f 	and.w	r2, r6, #15
 80051b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	ec51 0b18 	vmov	r0, r1, d8
 80051c0:	f7fb fa1a 	bl	80005f8 <__aeabi_dmul>
 80051c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c8:	1136      	asrs	r6, r6, #4
 80051ca:	2300      	movs	r3, #0
 80051cc:	2502      	movs	r5, #2
 80051ce:	2e00      	cmp	r6, #0
 80051d0:	d17e      	bne.n	80052d0 <_dtoa_r+0x4d8>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1d0      	bne.n	8005178 <_dtoa_r+0x380>
 80051d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8084 	beq.w	80052ea <_dtoa_r+0x4f2>
 80051e2:	4b96      	ldr	r3, [pc, #600]	; (800543c <_dtoa_r+0x644>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	4640      	mov	r0, r8
 80051e8:	4649      	mov	r1, r9
 80051ea:	f7fb fc77 	bl	8000adc <__aeabi_dcmplt>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d07b      	beq.n	80052ea <_dtoa_r+0x4f2>
 80051f2:	9b04      	ldr	r3, [sp, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d078      	beq.n	80052ea <_dtoa_r+0x4f2>
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd39      	ble.n	8005272 <_dtoa_r+0x47a>
 80051fe:	4b90      	ldr	r3, [pc, #576]	; (8005440 <_dtoa_r+0x648>)
 8005200:	2200      	movs	r2, #0
 8005202:	4640      	mov	r0, r8
 8005204:	4649      	mov	r1, r9
 8005206:	f7fb f9f7 	bl	80005f8 <__aeabi_dmul>
 800520a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800520e:	9e01      	ldr	r6, [sp, #4]
 8005210:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005214:	3501      	adds	r5, #1
 8005216:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800521a:	4628      	mov	r0, r5
 800521c:	f7fb f982 	bl	8000524 <__aeabi_i2d>
 8005220:	4642      	mov	r2, r8
 8005222:	464b      	mov	r3, r9
 8005224:	f7fb f9e8 	bl	80005f8 <__aeabi_dmul>
 8005228:	4b86      	ldr	r3, [pc, #536]	; (8005444 <_dtoa_r+0x64c>)
 800522a:	2200      	movs	r2, #0
 800522c:	f7fb f82e 	bl	800028c <__adddf3>
 8005230:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005238:	9303      	str	r3, [sp, #12]
 800523a:	2e00      	cmp	r6, #0
 800523c:	d158      	bne.n	80052f0 <_dtoa_r+0x4f8>
 800523e:	4b82      	ldr	r3, [pc, #520]	; (8005448 <_dtoa_r+0x650>)
 8005240:	2200      	movs	r2, #0
 8005242:	4640      	mov	r0, r8
 8005244:	4649      	mov	r1, r9
 8005246:	f7fb f81f 	bl	8000288 <__aeabi_dsub>
 800524a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800524e:	4680      	mov	r8, r0
 8005250:	4689      	mov	r9, r1
 8005252:	f7fb fc61 	bl	8000b18 <__aeabi_dcmpgt>
 8005256:	2800      	cmp	r0, #0
 8005258:	f040 8296 	bne.w	8005788 <_dtoa_r+0x990>
 800525c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005260:	4640      	mov	r0, r8
 8005262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005266:	4649      	mov	r1, r9
 8005268:	f7fb fc38 	bl	8000adc <__aeabi_dcmplt>
 800526c:	2800      	cmp	r0, #0
 800526e:	f040 8289 	bne.w	8005784 <_dtoa_r+0x98c>
 8005272:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005276:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005278:	2b00      	cmp	r3, #0
 800527a:	f2c0 814e 	blt.w	800551a <_dtoa_r+0x722>
 800527e:	f1bb 0f0e 	cmp.w	fp, #14
 8005282:	f300 814a 	bgt.w	800551a <_dtoa_r+0x722>
 8005286:	4b6b      	ldr	r3, [pc, #428]	; (8005434 <_dtoa_r+0x63c>)
 8005288:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800528c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	f280 80dc 	bge.w	8005450 <_dtoa_r+0x658>
 8005298:	9b04      	ldr	r3, [sp, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	f300 80d8 	bgt.w	8005450 <_dtoa_r+0x658>
 80052a0:	f040 826f 	bne.w	8005782 <_dtoa_r+0x98a>
 80052a4:	4b68      	ldr	r3, [pc, #416]	; (8005448 <_dtoa_r+0x650>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	4640      	mov	r0, r8
 80052aa:	4649      	mov	r1, r9
 80052ac:	f7fb f9a4 	bl	80005f8 <__aeabi_dmul>
 80052b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052b4:	f7fb fc26 	bl	8000b04 <__aeabi_dcmpge>
 80052b8:	9e04      	ldr	r6, [sp, #16]
 80052ba:	4637      	mov	r7, r6
 80052bc:	2800      	cmp	r0, #0
 80052be:	f040 8245 	bne.w	800574c <_dtoa_r+0x954>
 80052c2:	9d00      	ldr	r5, [sp, #0]
 80052c4:	2331      	movs	r3, #49	; 0x31
 80052c6:	f805 3b01 	strb.w	r3, [r5], #1
 80052ca:	f10b 0b01 	add.w	fp, fp, #1
 80052ce:	e241      	b.n	8005754 <_dtoa_r+0x95c>
 80052d0:	07f2      	lsls	r2, r6, #31
 80052d2:	d505      	bpl.n	80052e0 <_dtoa_r+0x4e8>
 80052d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d8:	f7fb f98e 	bl	80005f8 <__aeabi_dmul>
 80052dc:	3501      	adds	r5, #1
 80052de:	2301      	movs	r3, #1
 80052e0:	1076      	asrs	r6, r6, #1
 80052e2:	3708      	adds	r7, #8
 80052e4:	e773      	b.n	80051ce <_dtoa_r+0x3d6>
 80052e6:	2502      	movs	r5, #2
 80052e8:	e775      	b.n	80051d6 <_dtoa_r+0x3de>
 80052ea:	9e04      	ldr	r6, [sp, #16]
 80052ec:	465f      	mov	r7, fp
 80052ee:	e792      	b.n	8005216 <_dtoa_r+0x41e>
 80052f0:	9900      	ldr	r1, [sp, #0]
 80052f2:	4b50      	ldr	r3, [pc, #320]	; (8005434 <_dtoa_r+0x63c>)
 80052f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80052f8:	4431      	add	r1, r6
 80052fa:	9102      	str	r1, [sp, #8]
 80052fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052fe:	eeb0 9a47 	vmov.f32	s18, s14
 8005302:	eef0 9a67 	vmov.f32	s19, s15
 8005306:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800530a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800530e:	2900      	cmp	r1, #0
 8005310:	d044      	beq.n	800539c <_dtoa_r+0x5a4>
 8005312:	494e      	ldr	r1, [pc, #312]	; (800544c <_dtoa_r+0x654>)
 8005314:	2000      	movs	r0, #0
 8005316:	f7fb fa99 	bl	800084c <__aeabi_ddiv>
 800531a:	ec53 2b19 	vmov	r2, r3, d9
 800531e:	f7fa ffb3 	bl	8000288 <__aeabi_dsub>
 8005322:	9d00      	ldr	r5, [sp, #0]
 8005324:	ec41 0b19 	vmov	d9, r0, r1
 8005328:	4649      	mov	r1, r9
 800532a:	4640      	mov	r0, r8
 800532c:	f7fb fc14 	bl	8000b58 <__aeabi_d2iz>
 8005330:	4606      	mov	r6, r0
 8005332:	f7fb f8f7 	bl	8000524 <__aeabi_i2d>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4640      	mov	r0, r8
 800533c:	4649      	mov	r1, r9
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	3630      	adds	r6, #48	; 0x30
 8005344:	f805 6b01 	strb.w	r6, [r5], #1
 8005348:	ec53 2b19 	vmov	r2, r3, d9
 800534c:	4680      	mov	r8, r0
 800534e:	4689      	mov	r9, r1
 8005350:	f7fb fbc4 	bl	8000adc <__aeabi_dcmplt>
 8005354:	2800      	cmp	r0, #0
 8005356:	d164      	bne.n	8005422 <_dtoa_r+0x62a>
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	4937      	ldr	r1, [pc, #220]	; (800543c <_dtoa_r+0x644>)
 800535e:	2000      	movs	r0, #0
 8005360:	f7fa ff92 	bl	8000288 <__aeabi_dsub>
 8005364:	ec53 2b19 	vmov	r2, r3, d9
 8005368:	f7fb fbb8 	bl	8000adc <__aeabi_dcmplt>
 800536c:	2800      	cmp	r0, #0
 800536e:	f040 80b6 	bne.w	80054de <_dtoa_r+0x6e6>
 8005372:	9b02      	ldr	r3, [sp, #8]
 8005374:	429d      	cmp	r5, r3
 8005376:	f43f af7c 	beq.w	8005272 <_dtoa_r+0x47a>
 800537a:	4b31      	ldr	r3, [pc, #196]	; (8005440 <_dtoa_r+0x648>)
 800537c:	ec51 0b19 	vmov	r0, r1, d9
 8005380:	2200      	movs	r2, #0
 8005382:	f7fb f939 	bl	80005f8 <__aeabi_dmul>
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <_dtoa_r+0x648>)
 8005388:	ec41 0b19 	vmov	d9, r0, r1
 800538c:	2200      	movs	r2, #0
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fb f931 	bl	80005f8 <__aeabi_dmul>
 8005396:	4680      	mov	r8, r0
 8005398:	4689      	mov	r9, r1
 800539a:	e7c5      	b.n	8005328 <_dtoa_r+0x530>
 800539c:	ec51 0b17 	vmov	r0, r1, d7
 80053a0:	f7fb f92a 	bl	80005f8 <__aeabi_dmul>
 80053a4:	9b02      	ldr	r3, [sp, #8]
 80053a6:	9d00      	ldr	r5, [sp, #0]
 80053a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80053aa:	ec41 0b19 	vmov	d9, r0, r1
 80053ae:	4649      	mov	r1, r9
 80053b0:	4640      	mov	r0, r8
 80053b2:	f7fb fbd1 	bl	8000b58 <__aeabi_d2iz>
 80053b6:	4606      	mov	r6, r0
 80053b8:	f7fb f8b4 	bl	8000524 <__aeabi_i2d>
 80053bc:	3630      	adds	r6, #48	; 0x30
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4640      	mov	r0, r8
 80053c4:	4649      	mov	r1, r9
 80053c6:	f7fa ff5f 	bl	8000288 <__aeabi_dsub>
 80053ca:	f805 6b01 	strb.w	r6, [r5], #1
 80053ce:	9b02      	ldr	r3, [sp, #8]
 80053d0:	429d      	cmp	r5, r3
 80053d2:	4680      	mov	r8, r0
 80053d4:	4689      	mov	r9, r1
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	d124      	bne.n	8005426 <_dtoa_r+0x62e>
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <_dtoa_r+0x654>)
 80053de:	ec51 0b19 	vmov	r0, r1, d9
 80053e2:	f7fa ff53 	bl	800028c <__adddf3>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	f7fb fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d173      	bne.n	80054de <_dtoa_r+0x6e6>
 80053f6:	ec53 2b19 	vmov	r2, r3, d9
 80053fa:	4914      	ldr	r1, [pc, #80]	; (800544c <_dtoa_r+0x654>)
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7fa ff43 	bl	8000288 <__aeabi_dsub>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4640      	mov	r0, r8
 8005408:	4649      	mov	r1, r9
 800540a:	f7fb fb67 	bl	8000adc <__aeabi_dcmplt>
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f af2f 	beq.w	8005272 <_dtoa_r+0x47a>
 8005414:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005416:	1e6b      	subs	r3, r5, #1
 8005418:	930f      	str	r3, [sp, #60]	; 0x3c
 800541a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	d0f8      	beq.n	8005414 <_dtoa_r+0x61c>
 8005422:	46bb      	mov	fp, r7
 8005424:	e04a      	b.n	80054bc <_dtoa_r+0x6c4>
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <_dtoa_r+0x648>)
 8005428:	f7fb f8e6 	bl	80005f8 <__aeabi_dmul>
 800542c:	4680      	mov	r8, r0
 800542e:	4689      	mov	r9, r1
 8005430:	e7bd      	b.n	80053ae <_dtoa_r+0x5b6>
 8005432:	bf00      	nop
 8005434:	08009648 	.word	0x08009648
 8005438:	08009620 	.word	0x08009620
 800543c:	3ff00000 	.word	0x3ff00000
 8005440:	40240000 	.word	0x40240000
 8005444:	401c0000 	.word	0x401c0000
 8005448:	40140000 	.word	0x40140000
 800544c:	3fe00000 	.word	0x3fe00000
 8005450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005454:	9d00      	ldr	r5, [sp, #0]
 8005456:	4642      	mov	r2, r8
 8005458:	464b      	mov	r3, r9
 800545a:	4630      	mov	r0, r6
 800545c:	4639      	mov	r1, r7
 800545e:	f7fb f9f5 	bl	800084c <__aeabi_ddiv>
 8005462:	f7fb fb79 	bl	8000b58 <__aeabi_d2iz>
 8005466:	9001      	str	r0, [sp, #4]
 8005468:	f7fb f85c 	bl	8000524 <__aeabi_i2d>
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	f7fb f8c2 	bl	80005f8 <__aeabi_dmul>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4630      	mov	r0, r6
 800547a:	4639      	mov	r1, r7
 800547c:	f7fa ff04 	bl	8000288 <__aeabi_dsub>
 8005480:	9e01      	ldr	r6, [sp, #4]
 8005482:	9f04      	ldr	r7, [sp, #16]
 8005484:	3630      	adds	r6, #48	; 0x30
 8005486:	f805 6b01 	strb.w	r6, [r5], #1
 800548a:	9e00      	ldr	r6, [sp, #0]
 800548c:	1bae      	subs	r6, r5, r6
 800548e:	42b7      	cmp	r7, r6
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	d134      	bne.n	8005500 <_dtoa_r+0x708>
 8005496:	f7fa fef9 	bl	800028c <__adddf3>
 800549a:	4642      	mov	r2, r8
 800549c:	464b      	mov	r3, r9
 800549e:	4606      	mov	r6, r0
 80054a0:	460f      	mov	r7, r1
 80054a2:	f7fb fb39 	bl	8000b18 <__aeabi_dcmpgt>
 80054a6:	b9c8      	cbnz	r0, 80054dc <_dtoa_r+0x6e4>
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	4630      	mov	r0, r6
 80054ae:	4639      	mov	r1, r7
 80054b0:	f7fb fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80054b4:	b110      	cbz	r0, 80054bc <_dtoa_r+0x6c4>
 80054b6:	9b01      	ldr	r3, [sp, #4]
 80054b8:	07db      	lsls	r3, r3, #31
 80054ba:	d40f      	bmi.n	80054dc <_dtoa_r+0x6e4>
 80054bc:	4651      	mov	r1, sl
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 fbcc 	bl	8005c5c <_Bfree>
 80054c4:	2300      	movs	r3, #0
 80054c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80054c8:	702b      	strb	r3, [r5, #0]
 80054ca:	f10b 0301 	add.w	r3, fp, #1
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f43f ace2 	beq.w	8004e9c <_dtoa_r+0xa4>
 80054d8:	601d      	str	r5, [r3, #0]
 80054da:	e4df      	b.n	8004e9c <_dtoa_r+0xa4>
 80054dc:	465f      	mov	r7, fp
 80054de:	462b      	mov	r3, r5
 80054e0:	461d      	mov	r5, r3
 80054e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054e6:	2a39      	cmp	r2, #57	; 0x39
 80054e8:	d106      	bne.n	80054f8 <_dtoa_r+0x700>
 80054ea:	9a00      	ldr	r2, [sp, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d1f7      	bne.n	80054e0 <_dtoa_r+0x6e8>
 80054f0:	9900      	ldr	r1, [sp, #0]
 80054f2:	2230      	movs	r2, #48	; 0x30
 80054f4:	3701      	adds	r7, #1
 80054f6:	700a      	strb	r2, [r1, #0]
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	3201      	adds	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e790      	b.n	8005422 <_dtoa_r+0x62a>
 8005500:	4ba3      	ldr	r3, [pc, #652]	; (8005790 <_dtoa_r+0x998>)
 8005502:	2200      	movs	r2, #0
 8005504:	f7fb f878 	bl	80005f8 <__aeabi_dmul>
 8005508:	2200      	movs	r2, #0
 800550a:	2300      	movs	r3, #0
 800550c:	4606      	mov	r6, r0
 800550e:	460f      	mov	r7, r1
 8005510:	f7fb fada 	bl	8000ac8 <__aeabi_dcmpeq>
 8005514:	2800      	cmp	r0, #0
 8005516:	d09e      	beq.n	8005456 <_dtoa_r+0x65e>
 8005518:	e7d0      	b.n	80054bc <_dtoa_r+0x6c4>
 800551a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800551c:	2a00      	cmp	r2, #0
 800551e:	f000 80ca 	beq.w	80056b6 <_dtoa_r+0x8be>
 8005522:	9a07      	ldr	r2, [sp, #28]
 8005524:	2a01      	cmp	r2, #1
 8005526:	f300 80ad 	bgt.w	8005684 <_dtoa_r+0x88c>
 800552a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800552c:	2a00      	cmp	r2, #0
 800552e:	f000 80a5 	beq.w	800567c <_dtoa_r+0x884>
 8005532:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005536:	9e08      	ldr	r6, [sp, #32]
 8005538:	9d05      	ldr	r5, [sp, #20]
 800553a:	9a05      	ldr	r2, [sp, #20]
 800553c:	441a      	add	r2, r3
 800553e:	9205      	str	r2, [sp, #20]
 8005540:	9a06      	ldr	r2, [sp, #24]
 8005542:	2101      	movs	r1, #1
 8005544:	441a      	add	r2, r3
 8005546:	4620      	mov	r0, r4
 8005548:	9206      	str	r2, [sp, #24]
 800554a:	f000 fc87 	bl	8005e5c <__i2b>
 800554e:	4607      	mov	r7, r0
 8005550:	b165      	cbz	r5, 800556c <_dtoa_r+0x774>
 8005552:	9b06      	ldr	r3, [sp, #24]
 8005554:	2b00      	cmp	r3, #0
 8005556:	dd09      	ble.n	800556c <_dtoa_r+0x774>
 8005558:	42ab      	cmp	r3, r5
 800555a:	9a05      	ldr	r2, [sp, #20]
 800555c:	bfa8      	it	ge
 800555e:	462b      	movge	r3, r5
 8005560:	1ad2      	subs	r2, r2, r3
 8005562:	9205      	str	r2, [sp, #20]
 8005564:	9a06      	ldr	r2, [sp, #24]
 8005566:	1aed      	subs	r5, r5, r3
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	9306      	str	r3, [sp, #24]
 800556c:	9b08      	ldr	r3, [sp, #32]
 800556e:	b1f3      	cbz	r3, 80055ae <_dtoa_r+0x7b6>
 8005570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80a3 	beq.w	80056be <_dtoa_r+0x8c6>
 8005578:	2e00      	cmp	r6, #0
 800557a:	dd10      	ble.n	800559e <_dtoa_r+0x7a6>
 800557c:	4639      	mov	r1, r7
 800557e:	4632      	mov	r2, r6
 8005580:	4620      	mov	r0, r4
 8005582:	f000 fd2b 	bl	8005fdc <__pow5mult>
 8005586:	4652      	mov	r2, sl
 8005588:	4601      	mov	r1, r0
 800558a:	4607      	mov	r7, r0
 800558c:	4620      	mov	r0, r4
 800558e:	f000 fc7b 	bl	8005e88 <__multiply>
 8005592:	4651      	mov	r1, sl
 8005594:	4680      	mov	r8, r0
 8005596:	4620      	mov	r0, r4
 8005598:	f000 fb60 	bl	8005c5c <_Bfree>
 800559c:	46c2      	mov	sl, r8
 800559e:	9b08      	ldr	r3, [sp, #32]
 80055a0:	1b9a      	subs	r2, r3, r6
 80055a2:	d004      	beq.n	80055ae <_dtoa_r+0x7b6>
 80055a4:	4651      	mov	r1, sl
 80055a6:	4620      	mov	r0, r4
 80055a8:	f000 fd18 	bl	8005fdc <__pow5mult>
 80055ac:	4682      	mov	sl, r0
 80055ae:	2101      	movs	r1, #1
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fc53 	bl	8005e5c <__i2b>
 80055b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	4606      	mov	r6, r0
 80055bc:	f340 8081 	ble.w	80056c2 <_dtoa_r+0x8ca>
 80055c0:	461a      	mov	r2, r3
 80055c2:	4601      	mov	r1, r0
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 fd09 	bl	8005fdc <__pow5mult>
 80055ca:	9b07      	ldr	r3, [sp, #28]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	4606      	mov	r6, r0
 80055d0:	dd7a      	ble.n	80056c8 <_dtoa_r+0x8d0>
 80055d2:	f04f 0800 	mov.w	r8, #0
 80055d6:	6933      	ldr	r3, [r6, #16]
 80055d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055dc:	6918      	ldr	r0, [r3, #16]
 80055de:	f000 fbef 	bl	8005dc0 <__hi0bits>
 80055e2:	f1c0 0020 	rsb	r0, r0, #32
 80055e6:	9b06      	ldr	r3, [sp, #24]
 80055e8:	4418      	add	r0, r3
 80055ea:	f010 001f 	ands.w	r0, r0, #31
 80055ee:	f000 8094 	beq.w	800571a <_dtoa_r+0x922>
 80055f2:	f1c0 0320 	rsb	r3, r0, #32
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	f340 8085 	ble.w	8005706 <_dtoa_r+0x90e>
 80055fc:	9b05      	ldr	r3, [sp, #20]
 80055fe:	f1c0 001c 	rsb	r0, r0, #28
 8005602:	4403      	add	r3, r0
 8005604:	9305      	str	r3, [sp, #20]
 8005606:	9b06      	ldr	r3, [sp, #24]
 8005608:	4403      	add	r3, r0
 800560a:	4405      	add	r5, r0
 800560c:	9306      	str	r3, [sp, #24]
 800560e:	9b05      	ldr	r3, [sp, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	dd05      	ble.n	8005620 <_dtoa_r+0x828>
 8005614:	4651      	mov	r1, sl
 8005616:	461a      	mov	r2, r3
 8005618:	4620      	mov	r0, r4
 800561a:	f000 fd39 	bl	8006090 <__lshift>
 800561e:	4682      	mov	sl, r0
 8005620:	9b06      	ldr	r3, [sp, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	dd05      	ble.n	8005632 <_dtoa_r+0x83a>
 8005626:	4631      	mov	r1, r6
 8005628:	461a      	mov	r2, r3
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fd30 	bl	8006090 <__lshift>
 8005630:	4606      	mov	r6, r0
 8005632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005634:	2b00      	cmp	r3, #0
 8005636:	d072      	beq.n	800571e <_dtoa_r+0x926>
 8005638:	4631      	mov	r1, r6
 800563a:	4650      	mov	r0, sl
 800563c:	f000 fd94 	bl	8006168 <__mcmp>
 8005640:	2800      	cmp	r0, #0
 8005642:	da6c      	bge.n	800571e <_dtoa_r+0x926>
 8005644:	2300      	movs	r3, #0
 8005646:	4651      	mov	r1, sl
 8005648:	220a      	movs	r2, #10
 800564a:	4620      	mov	r0, r4
 800564c:	f000 fb28 	bl	8005ca0 <__multadd>
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005656:	4682      	mov	sl, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 81b0 	beq.w	80059be <_dtoa_r+0xbc6>
 800565e:	2300      	movs	r3, #0
 8005660:	4639      	mov	r1, r7
 8005662:	220a      	movs	r2, #10
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fb1b 	bl	8005ca0 <__multadd>
 800566a:	9b01      	ldr	r3, [sp, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	4607      	mov	r7, r0
 8005670:	f300 8096 	bgt.w	80057a0 <_dtoa_r+0x9a8>
 8005674:	9b07      	ldr	r3, [sp, #28]
 8005676:	2b02      	cmp	r3, #2
 8005678:	dc59      	bgt.n	800572e <_dtoa_r+0x936>
 800567a:	e091      	b.n	80057a0 <_dtoa_r+0x9a8>
 800567c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800567e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005682:	e758      	b.n	8005536 <_dtoa_r+0x73e>
 8005684:	9b04      	ldr	r3, [sp, #16]
 8005686:	1e5e      	subs	r6, r3, #1
 8005688:	9b08      	ldr	r3, [sp, #32]
 800568a:	42b3      	cmp	r3, r6
 800568c:	bfbf      	itttt	lt
 800568e:	9b08      	ldrlt	r3, [sp, #32]
 8005690:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005692:	9608      	strlt	r6, [sp, #32]
 8005694:	1af3      	sublt	r3, r6, r3
 8005696:	bfb4      	ite	lt
 8005698:	18d2      	addlt	r2, r2, r3
 800569a:	1b9e      	subge	r6, r3, r6
 800569c:	9b04      	ldr	r3, [sp, #16]
 800569e:	bfbc      	itt	lt
 80056a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80056a2:	2600      	movlt	r6, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	bfb7      	itett	lt
 80056a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80056ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80056b0:	1a9d      	sublt	r5, r3, r2
 80056b2:	2300      	movlt	r3, #0
 80056b4:	e741      	b.n	800553a <_dtoa_r+0x742>
 80056b6:	9e08      	ldr	r6, [sp, #32]
 80056b8:	9d05      	ldr	r5, [sp, #20]
 80056ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056bc:	e748      	b.n	8005550 <_dtoa_r+0x758>
 80056be:	9a08      	ldr	r2, [sp, #32]
 80056c0:	e770      	b.n	80055a4 <_dtoa_r+0x7ac>
 80056c2:	9b07      	ldr	r3, [sp, #28]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	dc19      	bgt.n	80056fc <_dtoa_r+0x904>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	b9bb      	cbnz	r3, 80056fc <_dtoa_r+0x904>
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d2:	b99b      	cbnz	r3, 80056fc <_dtoa_r+0x904>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056da:	0d1b      	lsrs	r3, r3, #20
 80056dc:	051b      	lsls	r3, r3, #20
 80056de:	b183      	cbz	r3, 8005702 <_dtoa_r+0x90a>
 80056e0:	9b05      	ldr	r3, [sp, #20]
 80056e2:	3301      	adds	r3, #1
 80056e4:	9305      	str	r3, [sp, #20]
 80056e6:	9b06      	ldr	r3, [sp, #24]
 80056e8:	3301      	adds	r3, #1
 80056ea:	9306      	str	r3, [sp, #24]
 80056ec:	f04f 0801 	mov.w	r8, #1
 80056f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f47f af6f 	bne.w	80055d6 <_dtoa_r+0x7de>
 80056f8:	2001      	movs	r0, #1
 80056fa:	e774      	b.n	80055e6 <_dtoa_r+0x7ee>
 80056fc:	f04f 0800 	mov.w	r8, #0
 8005700:	e7f6      	b.n	80056f0 <_dtoa_r+0x8f8>
 8005702:	4698      	mov	r8, r3
 8005704:	e7f4      	b.n	80056f0 <_dtoa_r+0x8f8>
 8005706:	d082      	beq.n	800560e <_dtoa_r+0x816>
 8005708:	9a05      	ldr	r2, [sp, #20]
 800570a:	331c      	adds	r3, #28
 800570c:	441a      	add	r2, r3
 800570e:	9205      	str	r2, [sp, #20]
 8005710:	9a06      	ldr	r2, [sp, #24]
 8005712:	441a      	add	r2, r3
 8005714:	441d      	add	r5, r3
 8005716:	9206      	str	r2, [sp, #24]
 8005718:	e779      	b.n	800560e <_dtoa_r+0x816>
 800571a:	4603      	mov	r3, r0
 800571c:	e7f4      	b.n	8005708 <_dtoa_r+0x910>
 800571e:	9b04      	ldr	r3, [sp, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	dc37      	bgt.n	8005794 <_dtoa_r+0x99c>
 8005724:	9b07      	ldr	r3, [sp, #28]
 8005726:	2b02      	cmp	r3, #2
 8005728:	dd34      	ble.n	8005794 <_dtoa_r+0x99c>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	b963      	cbnz	r3, 800574c <_dtoa_r+0x954>
 8005732:	4631      	mov	r1, r6
 8005734:	2205      	movs	r2, #5
 8005736:	4620      	mov	r0, r4
 8005738:	f000 fab2 	bl	8005ca0 <__multadd>
 800573c:	4601      	mov	r1, r0
 800573e:	4606      	mov	r6, r0
 8005740:	4650      	mov	r0, sl
 8005742:	f000 fd11 	bl	8006168 <__mcmp>
 8005746:	2800      	cmp	r0, #0
 8005748:	f73f adbb 	bgt.w	80052c2 <_dtoa_r+0x4ca>
 800574c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800574e:	9d00      	ldr	r5, [sp, #0]
 8005750:	ea6f 0b03 	mvn.w	fp, r3
 8005754:	f04f 0800 	mov.w	r8, #0
 8005758:	4631      	mov	r1, r6
 800575a:	4620      	mov	r0, r4
 800575c:	f000 fa7e 	bl	8005c5c <_Bfree>
 8005760:	2f00      	cmp	r7, #0
 8005762:	f43f aeab 	beq.w	80054bc <_dtoa_r+0x6c4>
 8005766:	f1b8 0f00 	cmp.w	r8, #0
 800576a:	d005      	beq.n	8005778 <_dtoa_r+0x980>
 800576c:	45b8      	cmp	r8, r7
 800576e:	d003      	beq.n	8005778 <_dtoa_r+0x980>
 8005770:	4641      	mov	r1, r8
 8005772:	4620      	mov	r0, r4
 8005774:	f000 fa72 	bl	8005c5c <_Bfree>
 8005778:	4639      	mov	r1, r7
 800577a:	4620      	mov	r0, r4
 800577c:	f000 fa6e 	bl	8005c5c <_Bfree>
 8005780:	e69c      	b.n	80054bc <_dtoa_r+0x6c4>
 8005782:	2600      	movs	r6, #0
 8005784:	4637      	mov	r7, r6
 8005786:	e7e1      	b.n	800574c <_dtoa_r+0x954>
 8005788:	46bb      	mov	fp, r7
 800578a:	4637      	mov	r7, r6
 800578c:	e599      	b.n	80052c2 <_dtoa_r+0x4ca>
 800578e:	bf00      	nop
 8005790:	40240000 	.word	0x40240000
 8005794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80c8 	beq.w	800592c <_dtoa_r+0xb34>
 800579c:	9b04      	ldr	r3, [sp, #16]
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	dd05      	ble.n	80057b0 <_dtoa_r+0x9b8>
 80057a4:	4639      	mov	r1, r7
 80057a6:	462a      	mov	r2, r5
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fc71 	bl	8006090 <__lshift>
 80057ae:	4607      	mov	r7, r0
 80057b0:	f1b8 0f00 	cmp.w	r8, #0
 80057b4:	d05b      	beq.n	800586e <_dtoa_r+0xa76>
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fa0f 	bl	8005bdc <_Balloc>
 80057be:	4605      	mov	r5, r0
 80057c0:	b928      	cbnz	r0, 80057ce <_dtoa_r+0x9d6>
 80057c2:	4b83      	ldr	r3, [pc, #524]	; (80059d0 <_dtoa_r+0xbd8>)
 80057c4:	4602      	mov	r2, r0
 80057c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80057ca:	f7ff bb2e 	b.w	8004e2a <_dtoa_r+0x32>
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	3202      	adds	r2, #2
 80057d2:	0092      	lsls	r2, r2, #2
 80057d4:	f107 010c 	add.w	r1, r7, #12
 80057d8:	300c      	adds	r0, #12
 80057da:	f001 ff85 	bl	80076e8 <memcpy>
 80057de:	2201      	movs	r2, #1
 80057e0:	4629      	mov	r1, r5
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 fc54 	bl	8006090 <__lshift>
 80057e8:	9b00      	ldr	r3, [sp, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	9304      	str	r3, [sp, #16]
 80057ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f2:	4413      	add	r3, r2
 80057f4:	9308      	str	r3, [sp, #32]
 80057f6:	9b02      	ldr	r3, [sp, #8]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	46b8      	mov	r8, r7
 80057fe:	9306      	str	r3, [sp, #24]
 8005800:	4607      	mov	r7, r0
 8005802:	9b04      	ldr	r3, [sp, #16]
 8005804:	4631      	mov	r1, r6
 8005806:	3b01      	subs	r3, #1
 8005808:	4650      	mov	r0, sl
 800580a:	9301      	str	r3, [sp, #4]
 800580c:	f7ff fa6a 	bl	8004ce4 <quorem>
 8005810:	4641      	mov	r1, r8
 8005812:	9002      	str	r0, [sp, #8]
 8005814:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005818:	4650      	mov	r0, sl
 800581a:	f000 fca5 	bl	8006168 <__mcmp>
 800581e:	463a      	mov	r2, r7
 8005820:	9005      	str	r0, [sp, #20]
 8005822:	4631      	mov	r1, r6
 8005824:	4620      	mov	r0, r4
 8005826:	f000 fcbb 	bl	80061a0 <__mdiff>
 800582a:	68c2      	ldr	r2, [r0, #12]
 800582c:	4605      	mov	r5, r0
 800582e:	bb02      	cbnz	r2, 8005872 <_dtoa_r+0xa7a>
 8005830:	4601      	mov	r1, r0
 8005832:	4650      	mov	r0, sl
 8005834:	f000 fc98 	bl	8006168 <__mcmp>
 8005838:	4602      	mov	r2, r0
 800583a:	4629      	mov	r1, r5
 800583c:	4620      	mov	r0, r4
 800583e:	9209      	str	r2, [sp, #36]	; 0x24
 8005840:	f000 fa0c 	bl	8005c5c <_Bfree>
 8005844:	9b07      	ldr	r3, [sp, #28]
 8005846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005848:	9d04      	ldr	r5, [sp, #16]
 800584a:	ea43 0102 	orr.w	r1, r3, r2
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	4319      	orrs	r1, r3
 8005852:	d110      	bne.n	8005876 <_dtoa_r+0xa7e>
 8005854:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005858:	d029      	beq.n	80058ae <_dtoa_r+0xab6>
 800585a:	9b05      	ldr	r3, [sp, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd02      	ble.n	8005866 <_dtoa_r+0xa6e>
 8005860:	9b02      	ldr	r3, [sp, #8]
 8005862:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005866:	9b01      	ldr	r3, [sp, #4]
 8005868:	f883 9000 	strb.w	r9, [r3]
 800586c:	e774      	b.n	8005758 <_dtoa_r+0x960>
 800586e:	4638      	mov	r0, r7
 8005870:	e7ba      	b.n	80057e8 <_dtoa_r+0x9f0>
 8005872:	2201      	movs	r2, #1
 8005874:	e7e1      	b.n	800583a <_dtoa_r+0xa42>
 8005876:	9b05      	ldr	r3, [sp, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	db04      	blt.n	8005886 <_dtoa_r+0xa8e>
 800587c:	9907      	ldr	r1, [sp, #28]
 800587e:	430b      	orrs	r3, r1
 8005880:	9906      	ldr	r1, [sp, #24]
 8005882:	430b      	orrs	r3, r1
 8005884:	d120      	bne.n	80058c8 <_dtoa_r+0xad0>
 8005886:	2a00      	cmp	r2, #0
 8005888:	dded      	ble.n	8005866 <_dtoa_r+0xa6e>
 800588a:	4651      	mov	r1, sl
 800588c:	2201      	movs	r2, #1
 800588e:	4620      	mov	r0, r4
 8005890:	f000 fbfe 	bl	8006090 <__lshift>
 8005894:	4631      	mov	r1, r6
 8005896:	4682      	mov	sl, r0
 8005898:	f000 fc66 	bl	8006168 <__mcmp>
 800589c:	2800      	cmp	r0, #0
 800589e:	dc03      	bgt.n	80058a8 <_dtoa_r+0xab0>
 80058a0:	d1e1      	bne.n	8005866 <_dtoa_r+0xa6e>
 80058a2:	f019 0f01 	tst.w	r9, #1
 80058a6:	d0de      	beq.n	8005866 <_dtoa_r+0xa6e>
 80058a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058ac:	d1d8      	bne.n	8005860 <_dtoa_r+0xa68>
 80058ae:	9a01      	ldr	r2, [sp, #4]
 80058b0:	2339      	movs	r3, #57	; 0x39
 80058b2:	7013      	strb	r3, [r2, #0]
 80058b4:	462b      	mov	r3, r5
 80058b6:	461d      	mov	r5, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058be:	2a39      	cmp	r2, #57	; 0x39
 80058c0:	d06c      	beq.n	800599c <_dtoa_r+0xba4>
 80058c2:	3201      	adds	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e747      	b.n	8005758 <_dtoa_r+0x960>
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	dd07      	ble.n	80058dc <_dtoa_r+0xae4>
 80058cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058d0:	d0ed      	beq.n	80058ae <_dtoa_r+0xab6>
 80058d2:	9a01      	ldr	r2, [sp, #4]
 80058d4:	f109 0301 	add.w	r3, r9, #1
 80058d8:	7013      	strb	r3, [r2, #0]
 80058da:	e73d      	b.n	8005758 <_dtoa_r+0x960>
 80058dc:	9b04      	ldr	r3, [sp, #16]
 80058de:	9a08      	ldr	r2, [sp, #32]
 80058e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d043      	beq.n	8005970 <_dtoa_r+0xb78>
 80058e8:	4651      	mov	r1, sl
 80058ea:	2300      	movs	r3, #0
 80058ec:	220a      	movs	r2, #10
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 f9d6 	bl	8005ca0 <__multadd>
 80058f4:	45b8      	cmp	r8, r7
 80058f6:	4682      	mov	sl, r0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	f04f 020a 	mov.w	r2, #10
 8005900:	4641      	mov	r1, r8
 8005902:	4620      	mov	r0, r4
 8005904:	d107      	bne.n	8005916 <_dtoa_r+0xb1e>
 8005906:	f000 f9cb 	bl	8005ca0 <__multadd>
 800590a:	4680      	mov	r8, r0
 800590c:	4607      	mov	r7, r0
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	3301      	adds	r3, #1
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	e775      	b.n	8005802 <_dtoa_r+0xa0a>
 8005916:	f000 f9c3 	bl	8005ca0 <__multadd>
 800591a:	4639      	mov	r1, r7
 800591c:	4680      	mov	r8, r0
 800591e:	2300      	movs	r3, #0
 8005920:	220a      	movs	r2, #10
 8005922:	4620      	mov	r0, r4
 8005924:	f000 f9bc 	bl	8005ca0 <__multadd>
 8005928:	4607      	mov	r7, r0
 800592a:	e7f0      	b.n	800590e <_dtoa_r+0xb16>
 800592c:	9b04      	ldr	r3, [sp, #16]
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	9d00      	ldr	r5, [sp, #0]
 8005932:	4631      	mov	r1, r6
 8005934:	4650      	mov	r0, sl
 8005936:	f7ff f9d5 	bl	8004ce4 <quorem>
 800593a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800593e:	9b00      	ldr	r3, [sp, #0]
 8005940:	f805 9b01 	strb.w	r9, [r5], #1
 8005944:	1aea      	subs	r2, r5, r3
 8005946:	9b01      	ldr	r3, [sp, #4]
 8005948:	4293      	cmp	r3, r2
 800594a:	dd07      	ble.n	800595c <_dtoa_r+0xb64>
 800594c:	4651      	mov	r1, sl
 800594e:	2300      	movs	r3, #0
 8005950:	220a      	movs	r2, #10
 8005952:	4620      	mov	r0, r4
 8005954:	f000 f9a4 	bl	8005ca0 <__multadd>
 8005958:	4682      	mov	sl, r0
 800595a:	e7ea      	b.n	8005932 <_dtoa_r+0xb3a>
 800595c:	9b01      	ldr	r3, [sp, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	bfc8      	it	gt
 8005962:	461d      	movgt	r5, r3
 8005964:	9b00      	ldr	r3, [sp, #0]
 8005966:	bfd8      	it	le
 8005968:	2501      	movle	r5, #1
 800596a:	441d      	add	r5, r3
 800596c:	f04f 0800 	mov.w	r8, #0
 8005970:	4651      	mov	r1, sl
 8005972:	2201      	movs	r2, #1
 8005974:	4620      	mov	r0, r4
 8005976:	f000 fb8b 	bl	8006090 <__lshift>
 800597a:	4631      	mov	r1, r6
 800597c:	4682      	mov	sl, r0
 800597e:	f000 fbf3 	bl	8006168 <__mcmp>
 8005982:	2800      	cmp	r0, #0
 8005984:	dc96      	bgt.n	80058b4 <_dtoa_r+0xabc>
 8005986:	d102      	bne.n	800598e <_dtoa_r+0xb96>
 8005988:	f019 0f01 	tst.w	r9, #1
 800598c:	d192      	bne.n	80058b4 <_dtoa_r+0xabc>
 800598e:	462b      	mov	r3, r5
 8005990:	461d      	mov	r5, r3
 8005992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005996:	2a30      	cmp	r2, #48	; 0x30
 8005998:	d0fa      	beq.n	8005990 <_dtoa_r+0xb98>
 800599a:	e6dd      	b.n	8005758 <_dtoa_r+0x960>
 800599c:	9a00      	ldr	r2, [sp, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d189      	bne.n	80058b6 <_dtoa_r+0xabe>
 80059a2:	f10b 0b01 	add.w	fp, fp, #1
 80059a6:	2331      	movs	r3, #49	; 0x31
 80059a8:	e796      	b.n	80058d8 <_dtoa_r+0xae0>
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <_dtoa_r+0xbdc>)
 80059ac:	f7ff ba99 	b.w	8004ee2 <_dtoa_r+0xea>
 80059b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f47f aa6d 	bne.w	8004e92 <_dtoa_r+0x9a>
 80059b8:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <_dtoa_r+0xbe0>)
 80059ba:	f7ff ba92 	b.w	8004ee2 <_dtoa_r+0xea>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	dcb5      	bgt.n	8005930 <_dtoa_r+0xb38>
 80059c4:	9b07      	ldr	r3, [sp, #28]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	f73f aeb1 	bgt.w	800572e <_dtoa_r+0x936>
 80059cc:	e7b0      	b.n	8005930 <_dtoa_r+0xb38>
 80059ce:	bf00      	nop
 80059d0:	080095b5 	.word	0x080095b5
 80059d4:	08009510 	.word	0x08009510
 80059d8:	08009539 	.word	0x08009539

080059dc <_free_r>:
 80059dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059de:	2900      	cmp	r1, #0
 80059e0:	d044      	beq.n	8005a6c <_free_r+0x90>
 80059e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059e6:	9001      	str	r0, [sp, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f1a1 0404 	sub.w	r4, r1, #4
 80059ee:	bfb8      	it	lt
 80059f0:	18e4      	addlt	r4, r4, r3
 80059f2:	f000 f8e7 	bl	8005bc4 <__malloc_lock>
 80059f6:	4a1e      	ldr	r2, [pc, #120]	; (8005a70 <_free_r+0x94>)
 80059f8:	9801      	ldr	r0, [sp, #4]
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	b933      	cbnz	r3, 8005a0c <_free_r+0x30>
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	6014      	str	r4, [r2, #0]
 8005a02:	b003      	add	sp, #12
 8005a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a08:	f000 b8e2 	b.w	8005bd0 <__malloc_unlock>
 8005a0c:	42a3      	cmp	r3, r4
 8005a0e:	d908      	bls.n	8005a22 <_free_r+0x46>
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	428b      	cmp	r3, r1
 8005a16:	bf01      	itttt	eq
 8005a18:	6819      	ldreq	r1, [r3, #0]
 8005a1a:	685b      	ldreq	r3, [r3, #4]
 8005a1c:	1949      	addeq	r1, r1, r5
 8005a1e:	6021      	streq	r1, [r4, #0]
 8005a20:	e7ed      	b.n	80059fe <_free_r+0x22>
 8005a22:	461a      	mov	r2, r3
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	b10b      	cbz	r3, 8005a2c <_free_r+0x50>
 8005a28:	42a3      	cmp	r3, r4
 8005a2a:	d9fa      	bls.n	8005a22 <_free_r+0x46>
 8005a2c:	6811      	ldr	r1, [r2, #0]
 8005a2e:	1855      	adds	r5, r2, r1
 8005a30:	42a5      	cmp	r5, r4
 8005a32:	d10b      	bne.n	8005a4c <_free_r+0x70>
 8005a34:	6824      	ldr	r4, [r4, #0]
 8005a36:	4421      	add	r1, r4
 8005a38:	1854      	adds	r4, r2, r1
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	6011      	str	r1, [r2, #0]
 8005a3e:	d1e0      	bne.n	8005a02 <_free_r+0x26>
 8005a40:	681c      	ldr	r4, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	6053      	str	r3, [r2, #4]
 8005a46:	440c      	add	r4, r1
 8005a48:	6014      	str	r4, [r2, #0]
 8005a4a:	e7da      	b.n	8005a02 <_free_r+0x26>
 8005a4c:	d902      	bls.n	8005a54 <_free_r+0x78>
 8005a4e:	230c      	movs	r3, #12
 8005a50:	6003      	str	r3, [r0, #0]
 8005a52:	e7d6      	b.n	8005a02 <_free_r+0x26>
 8005a54:	6825      	ldr	r5, [r4, #0]
 8005a56:	1961      	adds	r1, r4, r5
 8005a58:	428b      	cmp	r3, r1
 8005a5a:	bf04      	itt	eq
 8005a5c:	6819      	ldreq	r1, [r3, #0]
 8005a5e:	685b      	ldreq	r3, [r3, #4]
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	bf04      	itt	eq
 8005a64:	1949      	addeq	r1, r1, r5
 8005a66:	6021      	streq	r1, [r4, #0]
 8005a68:	6054      	str	r4, [r2, #4]
 8005a6a:	e7ca      	b.n	8005a02 <_free_r+0x26>
 8005a6c:	b003      	add	sp, #12
 8005a6e:	bd30      	pop	{r4, r5, pc}
 8005a70:	20000d5c 	.word	0x20000d5c

08005a74 <malloc>:
 8005a74:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <malloc+0xc>)
 8005a76:	4601      	mov	r1, r0
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	f000 b823 	b.w	8005ac4 <_malloc_r>
 8005a7e:	bf00      	nop
 8005a80:	20000064 	.word	0x20000064

08005a84 <sbrk_aligned>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	4e0e      	ldr	r6, [pc, #56]	; (8005ac0 <sbrk_aligned+0x3c>)
 8005a88:	460c      	mov	r4, r1
 8005a8a:	6831      	ldr	r1, [r6, #0]
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b911      	cbnz	r1, 8005a96 <sbrk_aligned+0x12>
 8005a90:	f001 fe1a 	bl	80076c8 <_sbrk_r>
 8005a94:	6030      	str	r0, [r6, #0]
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f001 fe15 	bl	80076c8 <_sbrk_r>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d00a      	beq.n	8005ab8 <sbrk_aligned+0x34>
 8005aa2:	1cc4      	adds	r4, r0, #3
 8005aa4:	f024 0403 	bic.w	r4, r4, #3
 8005aa8:	42a0      	cmp	r0, r4
 8005aaa:	d007      	beq.n	8005abc <sbrk_aligned+0x38>
 8005aac:	1a21      	subs	r1, r4, r0
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f001 fe0a 	bl	80076c8 <_sbrk_r>
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	d101      	bne.n	8005abc <sbrk_aligned+0x38>
 8005ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8005abc:	4620      	mov	r0, r4
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	20000d60 	.word	0x20000d60

08005ac4 <_malloc_r>:
 8005ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac8:	1ccd      	adds	r5, r1, #3
 8005aca:	f025 0503 	bic.w	r5, r5, #3
 8005ace:	3508      	adds	r5, #8
 8005ad0:	2d0c      	cmp	r5, #12
 8005ad2:	bf38      	it	cc
 8005ad4:	250c      	movcc	r5, #12
 8005ad6:	2d00      	cmp	r5, #0
 8005ad8:	4607      	mov	r7, r0
 8005ada:	db01      	blt.n	8005ae0 <_malloc_r+0x1c>
 8005adc:	42a9      	cmp	r1, r5
 8005ade:	d905      	bls.n	8005aec <_malloc_r+0x28>
 8005ae0:	230c      	movs	r3, #12
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bc0 <_malloc_r+0xfc>
 8005af0:	f000 f868 	bl	8005bc4 <__malloc_lock>
 8005af4:	f8d8 3000 	ldr.w	r3, [r8]
 8005af8:	461c      	mov	r4, r3
 8005afa:	bb5c      	cbnz	r4, 8005b54 <_malloc_r+0x90>
 8005afc:	4629      	mov	r1, r5
 8005afe:	4638      	mov	r0, r7
 8005b00:	f7ff ffc0 	bl	8005a84 <sbrk_aligned>
 8005b04:	1c43      	adds	r3, r0, #1
 8005b06:	4604      	mov	r4, r0
 8005b08:	d155      	bne.n	8005bb6 <_malloc_r+0xf2>
 8005b0a:	f8d8 4000 	ldr.w	r4, [r8]
 8005b0e:	4626      	mov	r6, r4
 8005b10:	2e00      	cmp	r6, #0
 8005b12:	d145      	bne.n	8005ba0 <_malloc_r+0xdc>
 8005b14:	2c00      	cmp	r4, #0
 8005b16:	d048      	beq.n	8005baa <_malloc_r+0xe6>
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	4638      	mov	r0, r7
 8005b1e:	eb04 0903 	add.w	r9, r4, r3
 8005b22:	f001 fdd1 	bl	80076c8 <_sbrk_r>
 8005b26:	4581      	cmp	r9, r0
 8005b28:	d13f      	bne.n	8005baa <_malloc_r+0xe6>
 8005b2a:	6821      	ldr	r1, [r4, #0]
 8005b2c:	1a6d      	subs	r5, r5, r1
 8005b2e:	4629      	mov	r1, r5
 8005b30:	4638      	mov	r0, r7
 8005b32:	f7ff ffa7 	bl	8005a84 <sbrk_aligned>
 8005b36:	3001      	adds	r0, #1
 8005b38:	d037      	beq.n	8005baa <_malloc_r+0xe6>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	442b      	add	r3, r5
 8005b3e:	6023      	str	r3, [r4, #0]
 8005b40:	f8d8 3000 	ldr.w	r3, [r8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d038      	beq.n	8005bba <_malloc_r+0xf6>
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	42a2      	cmp	r2, r4
 8005b4c:	d12b      	bne.n	8005ba6 <_malloc_r+0xe2>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	e00f      	b.n	8005b74 <_malloc_r+0xb0>
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	1b52      	subs	r2, r2, r5
 8005b58:	d41f      	bmi.n	8005b9a <_malloc_r+0xd6>
 8005b5a:	2a0b      	cmp	r2, #11
 8005b5c:	d917      	bls.n	8005b8e <_malloc_r+0xca>
 8005b5e:	1961      	adds	r1, r4, r5
 8005b60:	42a3      	cmp	r3, r4
 8005b62:	6025      	str	r5, [r4, #0]
 8005b64:	bf18      	it	ne
 8005b66:	6059      	strne	r1, [r3, #4]
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	bf08      	it	eq
 8005b6c:	f8c8 1000 	streq.w	r1, [r8]
 8005b70:	5162      	str	r2, [r4, r5]
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	4638      	mov	r0, r7
 8005b76:	f104 060b 	add.w	r6, r4, #11
 8005b7a:	f000 f829 	bl	8005bd0 <__malloc_unlock>
 8005b7e:	f026 0607 	bic.w	r6, r6, #7
 8005b82:	1d23      	adds	r3, r4, #4
 8005b84:	1af2      	subs	r2, r6, r3
 8005b86:	d0ae      	beq.n	8005ae6 <_malloc_r+0x22>
 8005b88:	1b9b      	subs	r3, r3, r6
 8005b8a:	50a3      	str	r3, [r4, r2]
 8005b8c:	e7ab      	b.n	8005ae6 <_malloc_r+0x22>
 8005b8e:	42a3      	cmp	r3, r4
 8005b90:	6862      	ldr	r2, [r4, #4]
 8005b92:	d1dd      	bne.n	8005b50 <_malloc_r+0x8c>
 8005b94:	f8c8 2000 	str.w	r2, [r8]
 8005b98:	e7ec      	b.n	8005b74 <_malloc_r+0xb0>
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	6864      	ldr	r4, [r4, #4]
 8005b9e:	e7ac      	b.n	8005afa <_malloc_r+0x36>
 8005ba0:	4634      	mov	r4, r6
 8005ba2:	6876      	ldr	r6, [r6, #4]
 8005ba4:	e7b4      	b.n	8005b10 <_malloc_r+0x4c>
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	e7cc      	b.n	8005b44 <_malloc_r+0x80>
 8005baa:	230c      	movs	r3, #12
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f000 f80e 	bl	8005bd0 <__malloc_unlock>
 8005bb4:	e797      	b.n	8005ae6 <_malloc_r+0x22>
 8005bb6:	6025      	str	r5, [r4, #0]
 8005bb8:	e7dc      	b.n	8005b74 <_malloc_r+0xb0>
 8005bba:	605b      	str	r3, [r3, #4]
 8005bbc:	deff      	udf	#255	; 0xff
 8005bbe:	bf00      	nop
 8005bc0:	20000d5c 	.word	0x20000d5c

08005bc4 <__malloc_lock>:
 8005bc4:	4801      	ldr	r0, [pc, #4]	; (8005bcc <__malloc_lock+0x8>)
 8005bc6:	f7ff b885 	b.w	8004cd4 <__retarget_lock_acquire_recursive>
 8005bca:	bf00      	nop
 8005bcc:	20000d58 	.word	0x20000d58

08005bd0 <__malloc_unlock>:
 8005bd0:	4801      	ldr	r0, [pc, #4]	; (8005bd8 <__malloc_unlock+0x8>)
 8005bd2:	f7ff b880 	b.w	8004cd6 <__retarget_lock_release_recursive>
 8005bd6:	bf00      	nop
 8005bd8:	20000d58 	.word	0x20000d58

08005bdc <_Balloc>:
 8005bdc:	b570      	push	{r4, r5, r6, lr}
 8005bde:	69c6      	ldr	r6, [r0, #28]
 8005be0:	4604      	mov	r4, r0
 8005be2:	460d      	mov	r5, r1
 8005be4:	b976      	cbnz	r6, 8005c04 <_Balloc+0x28>
 8005be6:	2010      	movs	r0, #16
 8005be8:	f7ff ff44 	bl	8005a74 <malloc>
 8005bec:	4602      	mov	r2, r0
 8005bee:	61e0      	str	r0, [r4, #28]
 8005bf0:	b920      	cbnz	r0, 8005bfc <_Balloc+0x20>
 8005bf2:	4b18      	ldr	r3, [pc, #96]	; (8005c54 <_Balloc+0x78>)
 8005bf4:	4818      	ldr	r0, [pc, #96]	; (8005c58 <_Balloc+0x7c>)
 8005bf6:	216b      	movs	r1, #107	; 0x6b
 8005bf8:	f001 fd8e 	bl	8007718 <__assert_func>
 8005bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c00:	6006      	str	r6, [r0, #0]
 8005c02:	60c6      	str	r6, [r0, #12]
 8005c04:	69e6      	ldr	r6, [r4, #28]
 8005c06:	68f3      	ldr	r3, [r6, #12]
 8005c08:	b183      	cbz	r3, 8005c2c <_Balloc+0x50>
 8005c0a:	69e3      	ldr	r3, [r4, #28]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c12:	b9b8      	cbnz	r0, 8005c44 <_Balloc+0x68>
 8005c14:	2101      	movs	r1, #1
 8005c16:	fa01 f605 	lsl.w	r6, r1, r5
 8005c1a:	1d72      	adds	r2, r6, #5
 8005c1c:	0092      	lsls	r2, r2, #2
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f001 fd98 	bl	8007754 <_calloc_r>
 8005c24:	b160      	cbz	r0, 8005c40 <_Balloc+0x64>
 8005c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c2a:	e00e      	b.n	8005c4a <_Balloc+0x6e>
 8005c2c:	2221      	movs	r2, #33	; 0x21
 8005c2e:	2104      	movs	r1, #4
 8005c30:	4620      	mov	r0, r4
 8005c32:	f001 fd8f 	bl	8007754 <_calloc_r>
 8005c36:	69e3      	ldr	r3, [r4, #28]
 8005c38:	60f0      	str	r0, [r6, #12]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <_Balloc+0x2e>
 8005c40:	2000      	movs	r0, #0
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	6802      	ldr	r2, [r0, #0]
 8005c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c50:	e7f7      	b.n	8005c42 <_Balloc+0x66>
 8005c52:	bf00      	nop
 8005c54:	08009546 	.word	0x08009546
 8005c58:	080095c6 	.word	0x080095c6

08005c5c <_Bfree>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	69c6      	ldr	r6, [r0, #28]
 8005c60:	4605      	mov	r5, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	b976      	cbnz	r6, 8005c84 <_Bfree+0x28>
 8005c66:	2010      	movs	r0, #16
 8005c68:	f7ff ff04 	bl	8005a74 <malloc>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	61e8      	str	r0, [r5, #28]
 8005c70:	b920      	cbnz	r0, 8005c7c <_Bfree+0x20>
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <_Bfree+0x3c>)
 8005c74:	4809      	ldr	r0, [pc, #36]	; (8005c9c <_Bfree+0x40>)
 8005c76:	218f      	movs	r1, #143	; 0x8f
 8005c78:	f001 fd4e 	bl	8007718 <__assert_func>
 8005c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c80:	6006      	str	r6, [r0, #0]
 8005c82:	60c6      	str	r6, [r0, #12]
 8005c84:	b13c      	cbz	r4, 8005c96 <_Bfree+0x3a>
 8005c86:	69eb      	ldr	r3, [r5, #28]
 8005c88:	6862      	ldr	r2, [r4, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c90:	6021      	str	r1, [r4, #0]
 8005c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	08009546 	.word	0x08009546
 8005c9c:	080095c6 	.word	0x080095c6

08005ca0 <__multadd>:
 8005ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca4:	690d      	ldr	r5, [r1, #16]
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	460c      	mov	r4, r1
 8005caa:	461e      	mov	r6, r3
 8005cac:	f101 0c14 	add.w	ip, r1, #20
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8005cb6:	b299      	uxth	r1, r3
 8005cb8:	fb02 6101 	mla	r1, r2, r1, r6
 8005cbc:	0c1e      	lsrs	r6, r3, #16
 8005cbe:	0c0b      	lsrs	r3, r1, #16
 8005cc0:	fb02 3306 	mla	r3, r2, r6, r3
 8005cc4:	b289      	uxth	r1, r1
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ccc:	4285      	cmp	r5, r0
 8005cce:	f84c 1b04 	str.w	r1, [ip], #4
 8005cd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cd6:	dcec      	bgt.n	8005cb2 <__multadd+0x12>
 8005cd8:	b30e      	cbz	r6, 8005d1e <__multadd+0x7e>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dc19      	bgt.n	8005d14 <__multadd+0x74>
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	f7ff ff79 	bl	8005bdc <_Balloc>
 8005cea:	4680      	mov	r8, r0
 8005cec:	b928      	cbnz	r0, 8005cfa <__multadd+0x5a>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <__multadd+0x84>)
 8005cf2:	480d      	ldr	r0, [pc, #52]	; (8005d28 <__multadd+0x88>)
 8005cf4:	21ba      	movs	r1, #186	; 0xba
 8005cf6:	f001 fd0f 	bl	8007718 <__assert_func>
 8005cfa:	6922      	ldr	r2, [r4, #16]
 8005cfc:	3202      	adds	r2, #2
 8005cfe:	f104 010c 	add.w	r1, r4, #12
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	300c      	adds	r0, #12
 8005d06:	f001 fcef 	bl	80076e8 <memcpy>
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f7ff ffa5 	bl	8005c5c <_Bfree>
 8005d12:	4644      	mov	r4, r8
 8005d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d18:	3501      	adds	r5, #1
 8005d1a:	615e      	str	r6, [r3, #20]
 8005d1c:	6125      	str	r5, [r4, #16]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d24:	080095b5 	.word	0x080095b5
 8005d28:	080095c6 	.word	0x080095c6

08005d2c <__s2b>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	460c      	mov	r4, r1
 8005d32:	4615      	mov	r5, r2
 8005d34:	461f      	mov	r7, r3
 8005d36:	2209      	movs	r2, #9
 8005d38:	3308      	adds	r3, #8
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d40:	2100      	movs	r1, #0
 8005d42:	2201      	movs	r2, #1
 8005d44:	429a      	cmp	r2, r3
 8005d46:	db09      	blt.n	8005d5c <__s2b+0x30>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	f7ff ff47 	bl	8005bdc <_Balloc>
 8005d4e:	b940      	cbnz	r0, 8005d62 <__s2b+0x36>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b19      	ldr	r3, [pc, #100]	; (8005db8 <__s2b+0x8c>)
 8005d54:	4819      	ldr	r0, [pc, #100]	; (8005dbc <__s2b+0x90>)
 8005d56:	21d3      	movs	r1, #211	; 0xd3
 8005d58:	f001 fcde 	bl	8007718 <__assert_func>
 8005d5c:	0052      	lsls	r2, r2, #1
 8005d5e:	3101      	adds	r1, #1
 8005d60:	e7f0      	b.n	8005d44 <__s2b+0x18>
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	6143      	str	r3, [r0, #20]
 8005d66:	2d09      	cmp	r5, #9
 8005d68:	f04f 0301 	mov.w	r3, #1
 8005d6c:	6103      	str	r3, [r0, #16]
 8005d6e:	dd16      	ble.n	8005d9e <__s2b+0x72>
 8005d70:	f104 0909 	add.w	r9, r4, #9
 8005d74:	46c8      	mov	r8, r9
 8005d76:	442c      	add	r4, r5
 8005d78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	3b30      	subs	r3, #48	; 0x30
 8005d80:	220a      	movs	r2, #10
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ff8c 	bl	8005ca0 <__multadd>
 8005d88:	45a0      	cmp	r8, r4
 8005d8a:	d1f5      	bne.n	8005d78 <__s2b+0x4c>
 8005d8c:	f1a5 0408 	sub.w	r4, r5, #8
 8005d90:	444c      	add	r4, r9
 8005d92:	1b2d      	subs	r5, r5, r4
 8005d94:	1963      	adds	r3, r4, r5
 8005d96:	42bb      	cmp	r3, r7
 8005d98:	db04      	blt.n	8005da4 <__s2b+0x78>
 8005d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d9e:	340a      	adds	r4, #10
 8005da0:	2509      	movs	r5, #9
 8005da2:	e7f6      	b.n	8005d92 <__s2b+0x66>
 8005da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005da8:	4601      	mov	r1, r0
 8005daa:	3b30      	subs	r3, #48	; 0x30
 8005dac:	220a      	movs	r2, #10
 8005dae:	4630      	mov	r0, r6
 8005db0:	f7ff ff76 	bl	8005ca0 <__multadd>
 8005db4:	e7ee      	b.n	8005d94 <__s2b+0x68>
 8005db6:	bf00      	nop
 8005db8:	080095b5 	.word	0x080095b5
 8005dbc:	080095c6 	.word	0x080095c6

08005dc0 <__hi0bits>:
 8005dc0:	0c03      	lsrs	r3, r0, #16
 8005dc2:	041b      	lsls	r3, r3, #16
 8005dc4:	b9d3      	cbnz	r3, 8005dfc <__hi0bits+0x3c>
 8005dc6:	0400      	lsls	r0, r0, #16
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005dce:	bf04      	itt	eq
 8005dd0:	0200      	lsleq	r0, r0, #8
 8005dd2:	3308      	addeq	r3, #8
 8005dd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005dd8:	bf04      	itt	eq
 8005dda:	0100      	lsleq	r0, r0, #4
 8005ddc:	3304      	addeq	r3, #4
 8005dde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005de2:	bf04      	itt	eq
 8005de4:	0080      	lsleq	r0, r0, #2
 8005de6:	3302      	addeq	r3, #2
 8005de8:	2800      	cmp	r0, #0
 8005dea:	db05      	blt.n	8005df8 <__hi0bits+0x38>
 8005dec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005df0:	f103 0301 	add.w	r3, r3, #1
 8005df4:	bf08      	it	eq
 8005df6:	2320      	moveq	r3, #32
 8005df8:	4618      	mov	r0, r3
 8005dfa:	4770      	bx	lr
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e7e4      	b.n	8005dca <__hi0bits+0xa>

08005e00 <__lo0bits>:
 8005e00:	6803      	ldr	r3, [r0, #0]
 8005e02:	f013 0207 	ands.w	r2, r3, #7
 8005e06:	d00c      	beq.n	8005e22 <__lo0bits+0x22>
 8005e08:	07d9      	lsls	r1, r3, #31
 8005e0a:	d422      	bmi.n	8005e52 <__lo0bits+0x52>
 8005e0c:	079a      	lsls	r2, r3, #30
 8005e0e:	bf49      	itett	mi
 8005e10:	085b      	lsrmi	r3, r3, #1
 8005e12:	089b      	lsrpl	r3, r3, #2
 8005e14:	6003      	strmi	r3, [r0, #0]
 8005e16:	2201      	movmi	r2, #1
 8005e18:	bf5c      	itt	pl
 8005e1a:	6003      	strpl	r3, [r0, #0]
 8005e1c:	2202      	movpl	r2, #2
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4770      	bx	lr
 8005e22:	b299      	uxth	r1, r3
 8005e24:	b909      	cbnz	r1, 8005e2a <__lo0bits+0x2a>
 8005e26:	0c1b      	lsrs	r3, r3, #16
 8005e28:	2210      	movs	r2, #16
 8005e2a:	b2d9      	uxtb	r1, r3
 8005e2c:	b909      	cbnz	r1, 8005e32 <__lo0bits+0x32>
 8005e2e:	3208      	adds	r2, #8
 8005e30:	0a1b      	lsrs	r3, r3, #8
 8005e32:	0719      	lsls	r1, r3, #28
 8005e34:	bf04      	itt	eq
 8005e36:	091b      	lsreq	r3, r3, #4
 8005e38:	3204      	addeq	r2, #4
 8005e3a:	0799      	lsls	r1, r3, #30
 8005e3c:	bf04      	itt	eq
 8005e3e:	089b      	lsreq	r3, r3, #2
 8005e40:	3202      	addeq	r2, #2
 8005e42:	07d9      	lsls	r1, r3, #31
 8005e44:	d403      	bmi.n	8005e4e <__lo0bits+0x4e>
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	f102 0201 	add.w	r2, r2, #1
 8005e4c:	d003      	beq.n	8005e56 <__lo0bits+0x56>
 8005e4e:	6003      	str	r3, [r0, #0]
 8005e50:	e7e5      	b.n	8005e1e <__lo0bits+0x1e>
 8005e52:	2200      	movs	r2, #0
 8005e54:	e7e3      	b.n	8005e1e <__lo0bits+0x1e>
 8005e56:	2220      	movs	r2, #32
 8005e58:	e7e1      	b.n	8005e1e <__lo0bits+0x1e>
	...

08005e5c <__i2b>:
 8005e5c:	b510      	push	{r4, lr}
 8005e5e:	460c      	mov	r4, r1
 8005e60:	2101      	movs	r1, #1
 8005e62:	f7ff febb 	bl	8005bdc <_Balloc>
 8005e66:	4602      	mov	r2, r0
 8005e68:	b928      	cbnz	r0, 8005e76 <__i2b+0x1a>
 8005e6a:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <__i2b+0x24>)
 8005e6c:	4805      	ldr	r0, [pc, #20]	; (8005e84 <__i2b+0x28>)
 8005e6e:	f240 1145 	movw	r1, #325	; 0x145
 8005e72:	f001 fc51 	bl	8007718 <__assert_func>
 8005e76:	2301      	movs	r3, #1
 8005e78:	6144      	str	r4, [r0, #20]
 8005e7a:	6103      	str	r3, [r0, #16]
 8005e7c:	bd10      	pop	{r4, pc}
 8005e7e:	bf00      	nop
 8005e80:	080095b5 	.word	0x080095b5
 8005e84:	080095c6 	.word	0x080095c6

08005e88 <__multiply>:
 8005e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8c:	4691      	mov	r9, r2
 8005e8e:	690a      	ldr	r2, [r1, #16]
 8005e90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	bfb8      	it	lt
 8005e98:	460b      	movlt	r3, r1
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	bfbc      	itt	lt
 8005e9e:	464c      	movlt	r4, r9
 8005ea0:	4699      	movlt	r9, r3
 8005ea2:	6927      	ldr	r7, [r4, #16]
 8005ea4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ea8:	68a3      	ldr	r3, [r4, #8]
 8005eaa:	6861      	ldr	r1, [r4, #4]
 8005eac:	eb07 060a 	add.w	r6, r7, sl
 8005eb0:	42b3      	cmp	r3, r6
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	bfb8      	it	lt
 8005eb6:	3101      	addlt	r1, #1
 8005eb8:	f7ff fe90 	bl	8005bdc <_Balloc>
 8005ebc:	b930      	cbnz	r0, 8005ecc <__multiply+0x44>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	4b44      	ldr	r3, [pc, #272]	; (8005fd4 <__multiply+0x14c>)
 8005ec2:	4845      	ldr	r0, [pc, #276]	; (8005fd8 <__multiply+0x150>)
 8005ec4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005ec8:	f001 fc26 	bl	8007718 <__assert_func>
 8005ecc:	f100 0514 	add.w	r5, r0, #20
 8005ed0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ed4:	462b      	mov	r3, r5
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	4543      	cmp	r3, r8
 8005eda:	d321      	bcc.n	8005f20 <__multiply+0x98>
 8005edc:	f104 0314 	add.w	r3, r4, #20
 8005ee0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ee4:	f109 0314 	add.w	r3, r9, #20
 8005ee8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005eec:	9202      	str	r2, [sp, #8]
 8005eee:	1b3a      	subs	r2, r7, r4
 8005ef0:	3a15      	subs	r2, #21
 8005ef2:	f022 0203 	bic.w	r2, r2, #3
 8005ef6:	3204      	adds	r2, #4
 8005ef8:	f104 0115 	add.w	r1, r4, #21
 8005efc:	428f      	cmp	r7, r1
 8005efe:	bf38      	it	cc
 8005f00:	2204      	movcc	r2, #4
 8005f02:	9201      	str	r2, [sp, #4]
 8005f04:	9a02      	ldr	r2, [sp, #8]
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d80c      	bhi.n	8005f26 <__multiply+0x9e>
 8005f0c:	2e00      	cmp	r6, #0
 8005f0e:	dd03      	ble.n	8005f18 <__multiply+0x90>
 8005f10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d05b      	beq.n	8005fd0 <__multiply+0x148>
 8005f18:	6106      	str	r6, [r0, #16]
 8005f1a:	b005      	add	sp, #20
 8005f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f20:	f843 2b04 	str.w	r2, [r3], #4
 8005f24:	e7d8      	b.n	8005ed8 <__multiply+0x50>
 8005f26:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f2a:	f1ba 0f00 	cmp.w	sl, #0
 8005f2e:	d024      	beq.n	8005f7a <__multiply+0xf2>
 8005f30:	f104 0e14 	add.w	lr, r4, #20
 8005f34:	46a9      	mov	r9, r5
 8005f36:	f04f 0c00 	mov.w	ip, #0
 8005f3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f3e:	f8d9 1000 	ldr.w	r1, [r9]
 8005f42:	fa1f fb82 	uxth.w	fp, r2
 8005f46:	b289      	uxth	r1, r1
 8005f48:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f50:	f8d9 2000 	ldr.w	r2, [r9]
 8005f54:	4461      	add	r1, ip
 8005f56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f62:	b289      	uxth	r1, r1
 8005f64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f68:	4577      	cmp	r7, lr
 8005f6a:	f849 1b04 	str.w	r1, [r9], #4
 8005f6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f72:	d8e2      	bhi.n	8005f3a <__multiply+0xb2>
 8005f74:	9a01      	ldr	r2, [sp, #4]
 8005f76:	f845 c002 	str.w	ip, [r5, r2]
 8005f7a:	9a03      	ldr	r2, [sp, #12]
 8005f7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f80:	3304      	adds	r3, #4
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	d021      	beq.n	8005fcc <__multiply+0x144>
 8005f88:	6829      	ldr	r1, [r5, #0]
 8005f8a:	f104 0c14 	add.w	ip, r4, #20
 8005f8e:	46ae      	mov	lr, r5
 8005f90:	f04f 0a00 	mov.w	sl, #0
 8005f94:	f8bc b000 	ldrh.w	fp, [ip]
 8005f98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f9c:	fb09 220b 	mla	r2, r9, fp, r2
 8005fa0:	4452      	add	r2, sl
 8005fa2:	b289      	uxth	r1, r1
 8005fa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fa8:	f84e 1b04 	str.w	r1, [lr], #4
 8005fac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fb4:	f8be 1000 	ldrh.w	r1, [lr]
 8005fb8:	fb09 110a 	mla	r1, r9, sl, r1
 8005fbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005fc0:	4567      	cmp	r7, ip
 8005fc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fc6:	d8e5      	bhi.n	8005f94 <__multiply+0x10c>
 8005fc8:	9a01      	ldr	r2, [sp, #4]
 8005fca:	50a9      	str	r1, [r5, r2]
 8005fcc:	3504      	adds	r5, #4
 8005fce:	e799      	b.n	8005f04 <__multiply+0x7c>
 8005fd0:	3e01      	subs	r6, #1
 8005fd2:	e79b      	b.n	8005f0c <__multiply+0x84>
 8005fd4:	080095b5 	.word	0x080095b5
 8005fd8:	080095c6 	.word	0x080095c6

08005fdc <__pow5mult>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	f012 0203 	ands.w	r2, r2, #3
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	d007      	beq.n	8005ffc <__pow5mult+0x20>
 8005fec:	4c25      	ldr	r4, [pc, #148]	; (8006084 <__pow5mult+0xa8>)
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ff6:	f7ff fe53 	bl	8005ca0 <__multadd>
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	10ad      	asrs	r5, r5, #2
 8005ffe:	d03d      	beq.n	800607c <__pow5mult+0xa0>
 8006000:	69f4      	ldr	r4, [r6, #28]
 8006002:	b97c      	cbnz	r4, 8006024 <__pow5mult+0x48>
 8006004:	2010      	movs	r0, #16
 8006006:	f7ff fd35 	bl	8005a74 <malloc>
 800600a:	4602      	mov	r2, r0
 800600c:	61f0      	str	r0, [r6, #28]
 800600e:	b928      	cbnz	r0, 800601c <__pow5mult+0x40>
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <__pow5mult+0xac>)
 8006012:	481e      	ldr	r0, [pc, #120]	; (800608c <__pow5mult+0xb0>)
 8006014:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006018:	f001 fb7e 	bl	8007718 <__assert_func>
 800601c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006020:	6004      	str	r4, [r0, #0]
 8006022:	60c4      	str	r4, [r0, #12]
 8006024:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006028:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800602c:	b94c      	cbnz	r4, 8006042 <__pow5mult+0x66>
 800602e:	f240 2171 	movw	r1, #625	; 0x271
 8006032:	4630      	mov	r0, r6
 8006034:	f7ff ff12 	bl	8005e5c <__i2b>
 8006038:	2300      	movs	r3, #0
 800603a:	f8c8 0008 	str.w	r0, [r8, #8]
 800603e:	4604      	mov	r4, r0
 8006040:	6003      	str	r3, [r0, #0]
 8006042:	f04f 0900 	mov.w	r9, #0
 8006046:	07eb      	lsls	r3, r5, #31
 8006048:	d50a      	bpl.n	8006060 <__pow5mult+0x84>
 800604a:	4639      	mov	r1, r7
 800604c:	4622      	mov	r2, r4
 800604e:	4630      	mov	r0, r6
 8006050:	f7ff ff1a 	bl	8005e88 <__multiply>
 8006054:	4639      	mov	r1, r7
 8006056:	4680      	mov	r8, r0
 8006058:	4630      	mov	r0, r6
 800605a:	f7ff fdff 	bl	8005c5c <_Bfree>
 800605e:	4647      	mov	r7, r8
 8006060:	106d      	asrs	r5, r5, #1
 8006062:	d00b      	beq.n	800607c <__pow5mult+0xa0>
 8006064:	6820      	ldr	r0, [r4, #0]
 8006066:	b938      	cbnz	r0, 8006078 <__pow5mult+0x9c>
 8006068:	4622      	mov	r2, r4
 800606a:	4621      	mov	r1, r4
 800606c:	4630      	mov	r0, r6
 800606e:	f7ff ff0b 	bl	8005e88 <__multiply>
 8006072:	6020      	str	r0, [r4, #0]
 8006074:	f8c0 9000 	str.w	r9, [r0]
 8006078:	4604      	mov	r4, r0
 800607a:	e7e4      	b.n	8006046 <__pow5mult+0x6a>
 800607c:	4638      	mov	r0, r7
 800607e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006082:	bf00      	nop
 8006084:	08009710 	.word	0x08009710
 8006088:	08009546 	.word	0x08009546
 800608c:	080095c6 	.word	0x080095c6

08006090 <__lshift>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	460c      	mov	r4, r1
 8006096:	6849      	ldr	r1, [r1, #4]
 8006098:	6923      	ldr	r3, [r4, #16]
 800609a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800609e:	68a3      	ldr	r3, [r4, #8]
 80060a0:	4607      	mov	r7, r0
 80060a2:	4691      	mov	r9, r2
 80060a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060a8:	f108 0601 	add.w	r6, r8, #1
 80060ac:	42b3      	cmp	r3, r6
 80060ae:	db0b      	blt.n	80060c8 <__lshift+0x38>
 80060b0:	4638      	mov	r0, r7
 80060b2:	f7ff fd93 	bl	8005bdc <_Balloc>
 80060b6:	4605      	mov	r5, r0
 80060b8:	b948      	cbnz	r0, 80060ce <__lshift+0x3e>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4b28      	ldr	r3, [pc, #160]	; (8006160 <__lshift+0xd0>)
 80060be:	4829      	ldr	r0, [pc, #164]	; (8006164 <__lshift+0xd4>)
 80060c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80060c4:	f001 fb28 	bl	8007718 <__assert_func>
 80060c8:	3101      	adds	r1, #1
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	e7ee      	b.n	80060ac <__lshift+0x1c>
 80060ce:	2300      	movs	r3, #0
 80060d0:	f100 0114 	add.w	r1, r0, #20
 80060d4:	f100 0210 	add.w	r2, r0, #16
 80060d8:	4618      	mov	r0, r3
 80060da:	4553      	cmp	r3, sl
 80060dc:	db33      	blt.n	8006146 <__lshift+0xb6>
 80060de:	6920      	ldr	r0, [r4, #16]
 80060e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060e4:	f104 0314 	add.w	r3, r4, #20
 80060e8:	f019 091f 	ands.w	r9, r9, #31
 80060ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060f4:	d02b      	beq.n	800614e <__lshift+0xbe>
 80060f6:	f1c9 0e20 	rsb	lr, r9, #32
 80060fa:	468a      	mov	sl, r1
 80060fc:	2200      	movs	r2, #0
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	fa00 f009 	lsl.w	r0, r0, r9
 8006104:	4310      	orrs	r0, r2
 8006106:	f84a 0b04 	str.w	r0, [sl], #4
 800610a:	f853 2b04 	ldr.w	r2, [r3], #4
 800610e:	459c      	cmp	ip, r3
 8006110:	fa22 f20e 	lsr.w	r2, r2, lr
 8006114:	d8f3      	bhi.n	80060fe <__lshift+0x6e>
 8006116:	ebac 0304 	sub.w	r3, ip, r4
 800611a:	3b15      	subs	r3, #21
 800611c:	f023 0303 	bic.w	r3, r3, #3
 8006120:	3304      	adds	r3, #4
 8006122:	f104 0015 	add.w	r0, r4, #21
 8006126:	4584      	cmp	ip, r0
 8006128:	bf38      	it	cc
 800612a:	2304      	movcc	r3, #4
 800612c:	50ca      	str	r2, [r1, r3]
 800612e:	b10a      	cbz	r2, 8006134 <__lshift+0xa4>
 8006130:	f108 0602 	add.w	r6, r8, #2
 8006134:	3e01      	subs	r6, #1
 8006136:	4638      	mov	r0, r7
 8006138:	612e      	str	r6, [r5, #16]
 800613a:	4621      	mov	r1, r4
 800613c:	f7ff fd8e 	bl	8005c5c <_Bfree>
 8006140:	4628      	mov	r0, r5
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	f842 0f04 	str.w	r0, [r2, #4]!
 800614a:	3301      	adds	r3, #1
 800614c:	e7c5      	b.n	80060da <__lshift+0x4a>
 800614e:	3904      	subs	r1, #4
 8006150:	f853 2b04 	ldr.w	r2, [r3], #4
 8006154:	f841 2f04 	str.w	r2, [r1, #4]!
 8006158:	459c      	cmp	ip, r3
 800615a:	d8f9      	bhi.n	8006150 <__lshift+0xc0>
 800615c:	e7ea      	b.n	8006134 <__lshift+0xa4>
 800615e:	bf00      	nop
 8006160:	080095b5 	.word	0x080095b5
 8006164:	080095c6 	.word	0x080095c6

08006168 <__mcmp>:
 8006168:	b530      	push	{r4, r5, lr}
 800616a:	6902      	ldr	r2, [r0, #16]
 800616c:	690c      	ldr	r4, [r1, #16]
 800616e:	1b12      	subs	r2, r2, r4
 8006170:	d10e      	bne.n	8006190 <__mcmp+0x28>
 8006172:	f100 0314 	add.w	r3, r0, #20
 8006176:	3114      	adds	r1, #20
 8006178:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800617c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006180:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006184:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006188:	42a5      	cmp	r5, r4
 800618a:	d003      	beq.n	8006194 <__mcmp+0x2c>
 800618c:	d305      	bcc.n	800619a <__mcmp+0x32>
 800618e:	2201      	movs	r2, #1
 8006190:	4610      	mov	r0, r2
 8006192:	bd30      	pop	{r4, r5, pc}
 8006194:	4283      	cmp	r3, r0
 8006196:	d3f3      	bcc.n	8006180 <__mcmp+0x18>
 8006198:	e7fa      	b.n	8006190 <__mcmp+0x28>
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	e7f7      	b.n	8006190 <__mcmp+0x28>

080061a0 <__mdiff>:
 80061a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	4606      	mov	r6, r0
 80061a8:	4611      	mov	r1, r2
 80061aa:	4620      	mov	r0, r4
 80061ac:	4690      	mov	r8, r2
 80061ae:	f7ff ffdb 	bl	8006168 <__mcmp>
 80061b2:	1e05      	subs	r5, r0, #0
 80061b4:	d110      	bne.n	80061d8 <__mdiff+0x38>
 80061b6:	4629      	mov	r1, r5
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff fd0f 	bl	8005bdc <_Balloc>
 80061be:	b930      	cbnz	r0, 80061ce <__mdiff+0x2e>
 80061c0:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <__mdiff+0x10c>)
 80061c2:	4602      	mov	r2, r0
 80061c4:	f240 2137 	movw	r1, #567	; 0x237
 80061c8:	4839      	ldr	r0, [pc, #228]	; (80062b0 <__mdiff+0x110>)
 80061ca:	f001 faa5 	bl	8007718 <__assert_func>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d8:	bfa4      	itt	ge
 80061da:	4643      	movge	r3, r8
 80061dc:	46a0      	movge	r8, r4
 80061de:	4630      	mov	r0, r6
 80061e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061e4:	bfa6      	itte	ge
 80061e6:	461c      	movge	r4, r3
 80061e8:	2500      	movge	r5, #0
 80061ea:	2501      	movlt	r5, #1
 80061ec:	f7ff fcf6 	bl	8005bdc <_Balloc>
 80061f0:	b920      	cbnz	r0, 80061fc <__mdiff+0x5c>
 80061f2:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <__mdiff+0x10c>)
 80061f4:	4602      	mov	r2, r0
 80061f6:	f240 2145 	movw	r1, #581	; 0x245
 80061fa:	e7e5      	b.n	80061c8 <__mdiff+0x28>
 80061fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006200:	6926      	ldr	r6, [r4, #16]
 8006202:	60c5      	str	r5, [r0, #12]
 8006204:	f104 0914 	add.w	r9, r4, #20
 8006208:	f108 0514 	add.w	r5, r8, #20
 800620c:	f100 0e14 	add.w	lr, r0, #20
 8006210:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006214:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006218:	f108 0210 	add.w	r2, r8, #16
 800621c:	46f2      	mov	sl, lr
 800621e:	2100      	movs	r1, #0
 8006220:	f859 3b04 	ldr.w	r3, [r9], #4
 8006224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006228:	fa11 f88b 	uxtah	r8, r1, fp
 800622c:	b299      	uxth	r1, r3
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	eba8 0801 	sub.w	r8, r8, r1
 8006234:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006238:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800623c:	fa1f f888 	uxth.w	r8, r8
 8006240:	1419      	asrs	r1, r3, #16
 8006242:	454e      	cmp	r6, r9
 8006244:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006248:	f84a 3b04 	str.w	r3, [sl], #4
 800624c:	d8e8      	bhi.n	8006220 <__mdiff+0x80>
 800624e:	1b33      	subs	r3, r6, r4
 8006250:	3b15      	subs	r3, #21
 8006252:	f023 0303 	bic.w	r3, r3, #3
 8006256:	3304      	adds	r3, #4
 8006258:	3415      	adds	r4, #21
 800625a:	42a6      	cmp	r6, r4
 800625c:	bf38      	it	cc
 800625e:	2304      	movcc	r3, #4
 8006260:	441d      	add	r5, r3
 8006262:	4473      	add	r3, lr
 8006264:	469e      	mov	lr, r3
 8006266:	462e      	mov	r6, r5
 8006268:	4566      	cmp	r6, ip
 800626a:	d30e      	bcc.n	800628a <__mdiff+0xea>
 800626c:	f10c 0203 	add.w	r2, ip, #3
 8006270:	1b52      	subs	r2, r2, r5
 8006272:	f022 0203 	bic.w	r2, r2, #3
 8006276:	3d03      	subs	r5, #3
 8006278:	45ac      	cmp	ip, r5
 800627a:	bf38      	it	cc
 800627c:	2200      	movcc	r2, #0
 800627e:	4413      	add	r3, r2
 8006280:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006284:	b17a      	cbz	r2, 80062a6 <__mdiff+0x106>
 8006286:	6107      	str	r7, [r0, #16]
 8006288:	e7a4      	b.n	80061d4 <__mdiff+0x34>
 800628a:	f856 8b04 	ldr.w	r8, [r6], #4
 800628e:	fa11 f288 	uxtah	r2, r1, r8
 8006292:	1414      	asrs	r4, r2, #16
 8006294:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006298:	b292      	uxth	r2, r2
 800629a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800629e:	f84e 2b04 	str.w	r2, [lr], #4
 80062a2:	1421      	asrs	r1, r4, #16
 80062a4:	e7e0      	b.n	8006268 <__mdiff+0xc8>
 80062a6:	3f01      	subs	r7, #1
 80062a8:	e7ea      	b.n	8006280 <__mdiff+0xe0>
 80062aa:	bf00      	nop
 80062ac:	080095b5 	.word	0x080095b5
 80062b0:	080095c6 	.word	0x080095c6

080062b4 <__ulp>:
 80062b4:	b082      	sub	sp, #8
 80062b6:	ed8d 0b00 	vstr	d0, [sp]
 80062ba:	9a01      	ldr	r2, [sp, #4]
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <__ulp+0x48>)
 80062be:	4013      	ands	r3, r2
 80062c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dc08      	bgt.n	80062da <__ulp+0x26>
 80062c8:	425b      	negs	r3, r3
 80062ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80062ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062d2:	da04      	bge.n	80062de <__ulp+0x2a>
 80062d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80062d8:	4113      	asrs	r3, r2
 80062da:	2200      	movs	r2, #0
 80062dc:	e008      	b.n	80062f0 <__ulp+0x3c>
 80062de:	f1a2 0314 	sub.w	r3, r2, #20
 80062e2:	2b1e      	cmp	r3, #30
 80062e4:	bfda      	itte	le
 80062e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80062ea:	40da      	lsrle	r2, r3
 80062ec:	2201      	movgt	r2, #1
 80062ee:	2300      	movs	r3, #0
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	ec41 0b10 	vmov	d0, r0, r1
 80062f8:	b002      	add	sp, #8
 80062fa:	4770      	bx	lr
 80062fc:	7ff00000 	.word	0x7ff00000

08006300 <__b2d>:
 8006300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006304:	6906      	ldr	r6, [r0, #16]
 8006306:	f100 0814 	add.w	r8, r0, #20
 800630a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800630e:	1f37      	subs	r7, r6, #4
 8006310:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006314:	4610      	mov	r0, r2
 8006316:	f7ff fd53 	bl	8005dc0 <__hi0bits>
 800631a:	f1c0 0320 	rsb	r3, r0, #32
 800631e:	280a      	cmp	r0, #10
 8006320:	600b      	str	r3, [r1, #0]
 8006322:	491b      	ldr	r1, [pc, #108]	; (8006390 <__b2d+0x90>)
 8006324:	dc15      	bgt.n	8006352 <__b2d+0x52>
 8006326:	f1c0 0c0b 	rsb	ip, r0, #11
 800632a:	fa22 f30c 	lsr.w	r3, r2, ip
 800632e:	45b8      	cmp	r8, r7
 8006330:	ea43 0501 	orr.w	r5, r3, r1
 8006334:	bf34      	ite	cc
 8006336:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800633a:	2300      	movcs	r3, #0
 800633c:	3015      	adds	r0, #21
 800633e:	fa02 f000 	lsl.w	r0, r2, r0
 8006342:	fa23 f30c 	lsr.w	r3, r3, ip
 8006346:	4303      	orrs	r3, r0
 8006348:	461c      	mov	r4, r3
 800634a:	ec45 4b10 	vmov	d0, r4, r5
 800634e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006352:	45b8      	cmp	r8, r7
 8006354:	bf3a      	itte	cc
 8006356:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800635a:	f1a6 0708 	subcc.w	r7, r6, #8
 800635e:	2300      	movcs	r3, #0
 8006360:	380b      	subs	r0, #11
 8006362:	d012      	beq.n	800638a <__b2d+0x8a>
 8006364:	f1c0 0120 	rsb	r1, r0, #32
 8006368:	fa23 f401 	lsr.w	r4, r3, r1
 800636c:	4082      	lsls	r2, r0
 800636e:	4322      	orrs	r2, r4
 8006370:	4547      	cmp	r7, r8
 8006372:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006376:	bf8c      	ite	hi
 8006378:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800637c:	2200      	movls	r2, #0
 800637e:	4083      	lsls	r3, r0
 8006380:	40ca      	lsrs	r2, r1
 8006382:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006386:	4313      	orrs	r3, r2
 8006388:	e7de      	b.n	8006348 <__b2d+0x48>
 800638a:	ea42 0501 	orr.w	r5, r2, r1
 800638e:	e7db      	b.n	8006348 <__b2d+0x48>
 8006390:	3ff00000 	.word	0x3ff00000

08006394 <__d2b>:
 8006394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006398:	460f      	mov	r7, r1
 800639a:	2101      	movs	r1, #1
 800639c:	ec59 8b10 	vmov	r8, r9, d0
 80063a0:	4616      	mov	r6, r2
 80063a2:	f7ff fc1b 	bl	8005bdc <_Balloc>
 80063a6:	4604      	mov	r4, r0
 80063a8:	b930      	cbnz	r0, 80063b8 <__d2b+0x24>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b24      	ldr	r3, [pc, #144]	; (8006440 <__d2b+0xac>)
 80063ae:	4825      	ldr	r0, [pc, #148]	; (8006444 <__d2b+0xb0>)
 80063b0:	f240 310f 	movw	r1, #783	; 0x30f
 80063b4:	f001 f9b0 	bl	8007718 <__assert_func>
 80063b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063c0:	bb2d      	cbnz	r5, 800640e <__d2b+0x7a>
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	f1b8 0300 	subs.w	r3, r8, #0
 80063c8:	d026      	beq.n	8006418 <__d2b+0x84>
 80063ca:	4668      	mov	r0, sp
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	f7ff fd17 	bl	8005e00 <__lo0bits>
 80063d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063d6:	b1e8      	cbz	r0, 8006414 <__d2b+0x80>
 80063d8:	f1c0 0320 	rsb	r3, r0, #32
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	430b      	orrs	r3, r1
 80063e2:	40c2      	lsrs	r2, r0
 80063e4:	6163      	str	r3, [r4, #20]
 80063e6:	9201      	str	r2, [sp, #4]
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	61a3      	str	r3, [r4, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf14      	ite	ne
 80063f0:	2202      	movne	r2, #2
 80063f2:	2201      	moveq	r2, #1
 80063f4:	6122      	str	r2, [r4, #16]
 80063f6:	b1bd      	cbz	r5, 8006428 <__d2b+0x94>
 80063f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063fc:	4405      	add	r5, r0
 80063fe:	603d      	str	r5, [r7, #0]
 8006400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006404:	6030      	str	r0, [r6, #0]
 8006406:	4620      	mov	r0, r4
 8006408:	b003      	add	sp, #12
 800640a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800640e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006412:	e7d6      	b.n	80063c2 <__d2b+0x2e>
 8006414:	6161      	str	r1, [r4, #20]
 8006416:	e7e7      	b.n	80063e8 <__d2b+0x54>
 8006418:	a801      	add	r0, sp, #4
 800641a:	f7ff fcf1 	bl	8005e00 <__lo0bits>
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	6163      	str	r3, [r4, #20]
 8006422:	3020      	adds	r0, #32
 8006424:	2201      	movs	r2, #1
 8006426:	e7e5      	b.n	80063f4 <__d2b+0x60>
 8006428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800642c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006430:	6038      	str	r0, [r7, #0]
 8006432:	6918      	ldr	r0, [r3, #16]
 8006434:	f7ff fcc4 	bl	8005dc0 <__hi0bits>
 8006438:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800643c:	e7e2      	b.n	8006404 <__d2b+0x70>
 800643e:	bf00      	nop
 8006440:	080095b5 	.word	0x080095b5
 8006444:	080095c6 	.word	0x080095c6

08006448 <__ratio>:
 8006448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	4688      	mov	r8, r1
 800644e:	4669      	mov	r1, sp
 8006450:	4681      	mov	r9, r0
 8006452:	f7ff ff55 	bl	8006300 <__b2d>
 8006456:	a901      	add	r1, sp, #4
 8006458:	4640      	mov	r0, r8
 800645a:	ec55 4b10 	vmov	r4, r5, d0
 800645e:	f7ff ff4f 	bl	8006300 <__b2d>
 8006462:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006466:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800646a:	eba3 0c02 	sub.w	ip, r3, r2
 800646e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006478:	ec51 0b10 	vmov	r0, r1, d0
 800647c:	2b00      	cmp	r3, #0
 800647e:	bfd6      	itet	le
 8006480:	460a      	movle	r2, r1
 8006482:	462a      	movgt	r2, r5
 8006484:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006488:	468b      	mov	fp, r1
 800648a:	462f      	mov	r7, r5
 800648c:	bfd4      	ite	le
 800648e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006492:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006496:	4620      	mov	r0, r4
 8006498:	ee10 2a10 	vmov	r2, s0
 800649c:	465b      	mov	r3, fp
 800649e:	4639      	mov	r1, r7
 80064a0:	f7fa f9d4 	bl	800084c <__aeabi_ddiv>
 80064a4:	ec41 0b10 	vmov	d0, r0, r1
 80064a8:	b003      	add	sp, #12
 80064aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064ae <__copybits>:
 80064ae:	3901      	subs	r1, #1
 80064b0:	b570      	push	{r4, r5, r6, lr}
 80064b2:	1149      	asrs	r1, r1, #5
 80064b4:	6914      	ldr	r4, [r2, #16]
 80064b6:	3101      	adds	r1, #1
 80064b8:	f102 0314 	add.w	r3, r2, #20
 80064bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064c4:	1f05      	subs	r5, r0, #4
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	d30c      	bcc.n	80064e4 <__copybits+0x36>
 80064ca:	1aa3      	subs	r3, r4, r2
 80064cc:	3b11      	subs	r3, #17
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	3211      	adds	r2, #17
 80064d4:	42a2      	cmp	r2, r4
 80064d6:	bf88      	it	hi
 80064d8:	2300      	movhi	r3, #0
 80064da:	4418      	add	r0, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	4288      	cmp	r0, r1
 80064e0:	d305      	bcc.n	80064ee <__copybits+0x40>
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80064e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80064ec:	e7eb      	b.n	80064c6 <__copybits+0x18>
 80064ee:	f840 3b04 	str.w	r3, [r0], #4
 80064f2:	e7f4      	b.n	80064de <__copybits+0x30>

080064f4 <__any_on>:
 80064f4:	f100 0214 	add.w	r2, r0, #20
 80064f8:	6900      	ldr	r0, [r0, #16]
 80064fa:	114b      	asrs	r3, r1, #5
 80064fc:	4298      	cmp	r0, r3
 80064fe:	b510      	push	{r4, lr}
 8006500:	db11      	blt.n	8006526 <__any_on+0x32>
 8006502:	dd0a      	ble.n	800651a <__any_on+0x26>
 8006504:	f011 011f 	ands.w	r1, r1, #31
 8006508:	d007      	beq.n	800651a <__any_on+0x26>
 800650a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800650e:	fa24 f001 	lsr.w	r0, r4, r1
 8006512:	fa00 f101 	lsl.w	r1, r0, r1
 8006516:	428c      	cmp	r4, r1
 8006518:	d10b      	bne.n	8006532 <__any_on+0x3e>
 800651a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800651e:	4293      	cmp	r3, r2
 8006520:	d803      	bhi.n	800652a <__any_on+0x36>
 8006522:	2000      	movs	r0, #0
 8006524:	bd10      	pop	{r4, pc}
 8006526:	4603      	mov	r3, r0
 8006528:	e7f7      	b.n	800651a <__any_on+0x26>
 800652a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800652e:	2900      	cmp	r1, #0
 8006530:	d0f5      	beq.n	800651e <__any_on+0x2a>
 8006532:	2001      	movs	r0, #1
 8006534:	e7f6      	b.n	8006524 <__any_on+0x30>

08006536 <sulp>:
 8006536:	b570      	push	{r4, r5, r6, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	ec45 4b10 	vmov	d0, r4, r5
 8006540:	4616      	mov	r6, r2
 8006542:	f7ff feb7 	bl	80062b4 <__ulp>
 8006546:	ec51 0b10 	vmov	r0, r1, d0
 800654a:	b17e      	cbz	r6, 800656c <sulp+0x36>
 800654c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006550:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006554:	2b00      	cmp	r3, #0
 8006556:	dd09      	ble.n	800656c <sulp+0x36>
 8006558:	051b      	lsls	r3, r3, #20
 800655a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800655e:	2400      	movs	r4, #0
 8006560:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006564:	4622      	mov	r2, r4
 8006566:	462b      	mov	r3, r5
 8006568:	f7fa f846 	bl	80005f8 <__aeabi_dmul>
 800656c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006570 <_strtod_l>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	ed2d 8b02 	vpush	{d8}
 8006578:	b09b      	sub	sp, #108	; 0x6c
 800657a:	4604      	mov	r4, r0
 800657c:	9213      	str	r2, [sp, #76]	; 0x4c
 800657e:	2200      	movs	r2, #0
 8006580:	9216      	str	r2, [sp, #88]	; 0x58
 8006582:	460d      	mov	r5, r1
 8006584:	f04f 0800 	mov.w	r8, #0
 8006588:	f04f 0900 	mov.w	r9, #0
 800658c:	460a      	mov	r2, r1
 800658e:	9215      	str	r2, [sp, #84]	; 0x54
 8006590:	7811      	ldrb	r1, [r2, #0]
 8006592:	292b      	cmp	r1, #43	; 0x2b
 8006594:	d04c      	beq.n	8006630 <_strtod_l+0xc0>
 8006596:	d83a      	bhi.n	800660e <_strtod_l+0x9e>
 8006598:	290d      	cmp	r1, #13
 800659a:	d834      	bhi.n	8006606 <_strtod_l+0x96>
 800659c:	2908      	cmp	r1, #8
 800659e:	d834      	bhi.n	800660a <_strtod_l+0x9a>
 80065a0:	2900      	cmp	r1, #0
 80065a2:	d03d      	beq.n	8006620 <_strtod_l+0xb0>
 80065a4:	2200      	movs	r2, #0
 80065a6:	920a      	str	r2, [sp, #40]	; 0x28
 80065a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80065aa:	7832      	ldrb	r2, [r6, #0]
 80065ac:	2a30      	cmp	r2, #48	; 0x30
 80065ae:	f040 80b4 	bne.w	800671a <_strtod_l+0x1aa>
 80065b2:	7872      	ldrb	r2, [r6, #1]
 80065b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80065b8:	2a58      	cmp	r2, #88	; 0x58
 80065ba:	d170      	bne.n	800669e <_strtod_l+0x12e>
 80065bc:	9302      	str	r3, [sp, #8]
 80065be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	ab16      	add	r3, sp, #88	; 0x58
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	4a8e      	ldr	r2, [pc, #568]	; (8006800 <_strtod_l+0x290>)
 80065c8:	ab17      	add	r3, sp, #92	; 0x5c
 80065ca:	a915      	add	r1, sp, #84	; 0x54
 80065cc:	4620      	mov	r0, r4
 80065ce:	f001 f93f 	bl	8007850 <__gethex>
 80065d2:	f010 070f 	ands.w	r7, r0, #15
 80065d6:	4605      	mov	r5, r0
 80065d8:	d005      	beq.n	80065e6 <_strtod_l+0x76>
 80065da:	2f06      	cmp	r7, #6
 80065dc:	d12a      	bne.n	8006634 <_strtod_l+0xc4>
 80065de:	3601      	adds	r6, #1
 80065e0:	2300      	movs	r3, #0
 80065e2:	9615      	str	r6, [sp, #84]	; 0x54
 80065e4:	930a      	str	r3, [sp, #40]	; 0x28
 80065e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f040 857f 	bne.w	80070ec <_strtod_l+0xb7c>
 80065ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f0:	b1db      	cbz	r3, 800662a <_strtod_l+0xba>
 80065f2:	4642      	mov	r2, r8
 80065f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80065f8:	ec43 2b10 	vmov	d0, r2, r3
 80065fc:	b01b      	add	sp, #108	; 0x6c
 80065fe:	ecbd 8b02 	vpop	{d8}
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	2920      	cmp	r1, #32
 8006608:	d1cc      	bne.n	80065a4 <_strtod_l+0x34>
 800660a:	3201      	adds	r2, #1
 800660c:	e7bf      	b.n	800658e <_strtod_l+0x1e>
 800660e:	292d      	cmp	r1, #45	; 0x2d
 8006610:	d1c8      	bne.n	80065a4 <_strtod_l+0x34>
 8006612:	2101      	movs	r1, #1
 8006614:	910a      	str	r1, [sp, #40]	; 0x28
 8006616:	1c51      	adds	r1, r2, #1
 8006618:	9115      	str	r1, [sp, #84]	; 0x54
 800661a:	7852      	ldrb	r2, [r2, #1]
 800661c:	2a00      	cmp	r2, #0
 800661e:	d1c3      	bne.n	80065a8 <_strtod_l+0x38>
 8006620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006622:	9515      	str	r5, [sp, #84]	; 0x54
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 855f 	bne.w	80070e8 <_strtod_l+0xb78>
 800662a:	4642      	mov	r2, r8
 800662c:	464b      	mov	r3, r9
 800662e:	e7e3      	b.n	80065f8 <_strtod_l+0x88>
 8006630:	2100      	movs	r1, #0
 8006632:	e7ef      	b.n	8006614 <_strtod_l+0xa4>
 8006634:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006636:	b13a      	cbz	r2, 8006648 <_strtod_l+0xd8>
 8006638:	2135      	movs	r1, #53	; 0x35
 800663a:	a818      	add	r0, sp, #96	; 0x60
 800663c:	f7ff ff37 	bl	80064ae <__copybits>
 8006640:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fb0a 	bl	8005c5c <_Bfree>
 8006648:	3f01      	subs	r7, #1
 800664a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800664c:	2f04      	cmp	r7, #4
 800664e:	d806      	bhi.n	800665e <_strtod_l+0xee>
 8006650:	e8df f007 	tbb	[pc, r7]
 8006654:	201d0314 	.word	0x201d0314
 8006658:	14          	.byte	0x14
 8006659:	00          	.byte	0x00
 800665a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800665e:	05e9      	lsls	r1, r5, #23
 8006660:	bf48      	it	mi
 8006662:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800666a:	0d1b      	lsrs	r3, r3, #20
 800666c:	051b      	lsls	r3, r3, #20
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1b9      	bne.n	80065e6 <_strtod_l+0x76>
 8006672:	f7fe fb05 	bl	8004c80 <__errno>
 8006676:	2322      	movs	r3, #34	; 0x22
 8006678:	6003      	str	r3, [r0, #0]
 800667a:	e7b4      	b.n	80065e6 <_strtod_l+0x76>
 800667c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006680:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006684:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006688:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800668c:	e7e7      	b.n	800665e <_strtod_l+0xee>
 800668e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006808 <_strtod_l+0x298>
 8006692:	e7e4      	b.n	800665e <_strtod_l+0xee>
 8006694:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006698:	f04f 38ff 	mov.w	r8, #4294967295
 800669c:	e7df      	b.n	800665e <_strtod_l+0xee>
 800669e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	9215      	str	r2, [sp, #84]	; 0x54
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	2b30      	cmp	r3, #48	; 0x30
 80066a8:	d0f9      	beq.n	800669e <_strtod_l+0x12e>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d09b      	beq.n	80065e6 <_strtod_l+0x76>
 80066ae:	2301      	movs	r3, #1
 80066b0:	f04f 0a00 	mov.w	sl, #0
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80066be:	46d3      	mov	fp, sl
 80066c0:	220a      	movs	r2, #10
 80066c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80066c4:	7806      	ldrb	r6, [r0, #0]
 80066c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80066ca:	b2d9      	uxtb	r1, r3
 80066cc:	2909      	cmp	r1, #9
 80066ce:	d926      	bls.n	800671e <_strtod_l+0x1ae>
 80066d0:	494c      	ldr	r1, [pc, #304]	; (8006804 <_strtod_l+0x294>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	f000 ffe6 	bl	80076a4 <strncmp>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d030      	beq.n	800673e <_strtod_l+0x1ce>
 80066dc:	2000      	movs	r0, #0
 80066de:	4632      	mov	r2, r6
 80066e0:	9005      	str	r0, [sp, #20]
 80066e2:	465e      	mov	r6, fp
 80066e4:	4603      	mov	r3, r0
 80066e6:	2a65      	cmp	r2, #101	; 0x65
 80066e8:	d001      	beq.n	80066ee <_strtod_l+0x17e>
 80066ea:	2a45      	cmp	r2, #69	; 0x45
 80066ec:	d113      	bne.n	8006716 <_strtod_l+0x1a6>
 80066ee:	b91e      	cbnz	r6, 80066f8 <_strtod_l+0x188>
 80066f0:	9a04      	ldr	r2, [sp, #16]
 80066f2:	4302      	orrs	r2, r0
 80066f4:	d094      	beq.n	8006620 <_strtod_l+0xb0>
 80066f6:	2600      	movs	r6, #0
 80066f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80066fa:	1c6a      	adds	r2, r5, #1
 80066fc:	9215      	str	r2, [sp, #84]	; 0x54
 80066fe:	786a      	ldrb	r2, [r5, #1]
 8006700:	2a2b      	cmp	r2, #43	; 0x2b
 8006702:	d074      	beq.n	80067ee <_strtod_l+0x27e>
 8006704:	2a2d      	cmp	r2, #45	; 0x2d
 8006706:	d078      	beq.n	80067fa <_strtod_l+0x28a>
 8006708:	f04f 0c00 	mov.w	ip, #0
 800670c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006710:	2909      	cmp	r1, #9
 8006712:	d97f      	bls.n	8006814 <_strtod_l+0x2a4>
 8006714:	9515      	str	r5, [sp, #84]	; 0x54
 8006716:	2700      	movs	r7, #0
 8006718:	e09e      	b.n	8006858 <_strtod_l+0x2e8>
 800671a:	2300      	movs	r3, #0
 800671c:	e7c8      	b.n	80066b0 <_strtod_l+0x140>
 800671e:	f1bb 0f08 	cmp.w	fp, #8
 8006722:	bfd8      	it	le
 8006724:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006726:	f100 0001 	add.w	r0, r0, #1
 800672a:	bfda      	itte	le
 800672c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006730:	9309      	strle	r3, [sp, #36]	; 0x24
 8006732:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006736:	f10b 0b01 	add.w	fp, fp, #1
 800673a:	9015      	str	r0, [sp, #84]	; 0x54
 800673c:	e7c1      	b.n	80066c2 <_strtod_l+0x152>
 800673e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	9215      	str	r2, [sp, #84]	; 0x54
 8006744:	785a      	ldrb	r2, [r3, #1]
 8006746:	f1bb 0f00 	cmp.w	fp, #0
 800674a:	d037      	beq.n	80067bc <_strtod_l+0x24c>
 800674c:	9005      	str	r0, [sp, #20]
 800674e:	465e      	mov	r6, fp
 8006750:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006754:	2b09      	cmp	r3, #9
 8006756:	d912      	bls.n	800677e <_strtod_l+0x20e>
 8006758:	2301      	movs	r3, #1
 800675a:	e7c4      	b.n	80066e6 <_strtod_l+0x176>
 800675c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	9215      	str	r2, [sp, #84]	; 0x54
 8006762:	785a      	ldrb	r2, [r3, #1]
 8006764:	3001      	adds	r0, #1
 8006766:	2a30      	cmp	r2, #48	; 0x30
 8006768:	d0f8      	beq.n	800675c <_strtod_l+0x1ec>
 800676a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800676e:	2b08      	cmp	r3, #8
 8006770:	f200 84c1 	bhi.w	80070f6 <_strtod_l+0xb86>
 8006774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006776:	9005      	str	r0, [sp, #20]
 8006778:	2000      	movs	r0, #0
 800677a:	930b      	str	r3, [sp, #44]	; 0x2c
 800677c:	4606      	mov	r6, r0
 800677e:	3a30      	subs	r2, #48	; 0x30
 8006780:	f100 0301 	add.w	r3, r0, #1
 8006784:	d014      	beq.n	80067b0 <_strtod_l+0x240>
 8006786:	9905      	ldr	r1, [sp, #20]
 8006788:	4419      	add	r1, r3
 800678a:	9105      	str	r1, [sp, #20]
 800678c:	4633      	mov	r3, r6
 800678e:	eb00 0c06 	add.w	ip, r0, r6
 8006792:	210a      	movs	r1, #10
 8006794:	4563      	cmp	r3, ip
 8006796:	d113      	bne.n	80067c0 <_strtod_l+0x250>
 8006798:	1833      	adds	r3, r6, r0
 800679a:	2b08      	cmp	r3, #8
 800679c:	f106 0601 	add.w	r6, r6, #1
 80067a0:	4406      	add	r6, r0
 80067a2:	dc1a      	bgt.n	80067da <_strtod_l+0x26a>
 80067a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a6:	230a      	movs	r3, #10
 80067a8:	fb03 2301 	mla	r3, r3, r1, r2
 80067ac:	9309      	str	r3, [sp, #36]	; 0x24
 80067ae:	2300      	movs	r3, #0
 80067b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067b2:	1c51      	adds	r1, r2, #1
 80067b4:	9115      	str	r1, [sp, #84]	; 0x54
 80067b6:	7852      	ldrb	r2, [r2, #1]
 80067b8:	4618      	mov	r0, r3
 80067ba:	e7c9      	b.n	8006750 <_strtod_l+0x1e0>
 80067bc:	4658      	mov	r0, fp
 80067be:	e7d2      	b.n	8006766 <_strtod_l+0x1f6>
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	f103 0301 	add.w	r3, r3, #1
 80067c6:	dc03      	bgt.n	80067d0 <_strtod_l+0x260>
 80067c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80067ca:	434f      	muls	r7, r1
 80067cc:	9709      	str	r7, [sp, #36]	; 0x24
 80067ce:	e7e1      	b.n	8006794 <_strtod_l+0x224>
 80067d0:	2b10      	cmp	r3, #16
 80067d2:	bfd8      	it	le
 80067d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80067d8:	e7dc      	b.n	8006794 <_strtod_l+0x224>
 80067da:	2e10      	cmp	r6, #16
 80067dc:	bfdc      	itt	le
 80067de:	230a      	movle	r3, #10
 80067e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80067e4:	e7e3      	b.n	80067ae <_strtod_l+0x23e>
 80067e6:	2300      	movs	r3, #0
 80067e8:	9305      	str	r3, [sp, #20]
 80067ea:	2301      	movs	r3, #1
 80067ec:	e780      	b.n	80066f0 <_strtod_l+0x180>
 80067ee:	f04f 0c00 	mov.w	ip, #0
 80067f2:	1caa      	adds	r2, r5, #2
 80067f4:	9215      	str	r2, [sp, #84]	; 0x54
 80067f6:	78aa      	ldrb	r2, [r5, #2]
 80067f8:	e788      	b.n	800670c <_strtod_l+0x19c>
 80067fa:	f04f 0c01 	mov.w	ip, #1
 80067fe:	e7f8      	b.n	80067f2 <_strtod_l+0x282>
 8006800:	08009720 	.word	0x08009720
 8006804:	0800971c 	.word	0x0800971c
 8006808:	7ff00000 	.word	0x7ff00000
 800680c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800680e:	1c51      	adds	r1, r2, #1
 8006810:	9115      	str	r1, [sp, #84]	; 0x54
 8006812:	7852      	ldrb	r2, [r2, #1]
 8006814:	2a30      	cmp	r2, #48	; 0x30
 8006816:	d0f9      	beq.n	800680c <_strtod_l+0x29c>
 8006818:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800681c:	2908      	cmp	r1, #8
 800681e:	f63f af7a 	bhi.w	8006716 <_strtod_l+0x1a6>
 8006822:	3a30      	subs	r2, #48	; 0x30
 8006824:	9208      	str	r2, [sp, #32]
 8006826:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006828:	920c      	str	r2, [sp, #48]	; 0x30
 800682a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800682c:	1c57      	adds	r7, r2, #1
 800682e:	9715      	str	r7, [sp, #84]	; 0x54
 8006830:	7852      	ldrb	r2, [r2, #1]
 8006832:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006836:	f1be 0f09 	cmp.w	lr, #9
 800683a:	d938      	bls.n	80068ae <_strtod_l+0x33e>
 800683c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800683e:	1a7f      	subs	r7, r7, r1
 8006840:	2f08      	cmp	r7, #8
 8006842:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006846:	dc03      	bgt.n	8006850 <_strtod_l+0x2e0>
 8006848:	9908      	ldr	r1, [sp, #32]
 800684a:	428f      	cmp	r7, r1
 800684c:	bfa8      	it	ge
 800684e:	460f      	movge	r7, r1
 8006850:	f1bc 0f00 	cmp.w	ip, #0
 8006854:	d000      	beq.n	8006858 <_strtod_l+0x2e8>
 8006856:	427f      	negs	r7, r7
 8006858:	2e00      	cmp	r6, #0
 800685a:	d14f      	bne.n	80068fc <_strtod_l+0x38c>
 800685c:	9904      	ldr	r1, [sp, #16]
 800685e:	4301      	orrs	r1, r0
 8006860:	f47f aec1 	bne.w	80065e6 <_strtod_l+0x76>
 8006864:	2b00      	cmp	r3, #0
 8006866:	f47f aedb 	bne.w	8006620 <_strtod_l+0xb0>
 800686a:	2a69      	cmp	r2, #105	; 0x69
 800686c:	d029      	beq.n	80068c2 <_strtod_l+0x352>
 800686e:	dc26      	bgt.n	80068be <_strtod_l+0x34e>
 8006870:	2a49      	cmp	r2, #73	; 0x49
 8006872:	d026      	beq.n	80068c2 <_strtod_l+0x352>
 8006874:	2a4e      	cmp	r2, #78	; 0x4e
 8006876:	f47f aed3 	bne.w	8006620 <_strtod_l+0xb0>
 800687a:	499b      	ldr	r1, [pc, #620]	; (8006ae8 <_strtod_l+0x578>)
 800687c:	a815      	add	r0, sp, #84	; 0x54
 800687e:	f001 fa27 	bl	8007cd0 <__match>
 8006882:	2800      	cmp	r0, #0
 8006884:	f43f aecc 	beq.w	8006620 <_strtod_l+0xb0>
 8006888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b28      	cmp	r3, #40	; 0x28
 800688e:	d12f      	bne.n	80068f0 <_strtod_l+0x380>
 8006890:	4996      	ldr	r1, [pc, #600]	; (8006aec <_strtod_l+0x57c>)
 8006892:	aa18      	add	r2, sp, #96	; 0x60
 8006894:	a815      	add	r0, sp, #84	; 0x54
 8006896:	f001 fa2f 	bl	8007cf8 <__hexnan>
 800689a:	2805      	cmp	r0, #5
 800689c:	d128      	bne.n	80068f0 <_strtod_l+0x380>
 800689e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80068a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068ac:	e69b      	b.n	80065e6 <_strtod_l+0x76>
 80068ae:	9f08      	ldr	r7, [sp, #32]
 80068b0:	210a      	movs	r1, #10
 80068b2:	fb01 2107 	mla	r1, r1, r7, r2
 80068b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80068ba:	9208      	str	r2, [sp, #32]
 80068bc:	e7b5      	b.n	800682a <_strtod_l+0x2ba>
 80068be:	2a6e      	cmp	r2, #110	; 0x6e
 80068c0:	e7d9      	b.n	8006876 <_strtod_l+0x306>
 80068c2:	498b      	ldr	r1, [pc, #556]	; (8006af0 <_strtod_l+0x580>)
 80068c4:	a815      	add	r0, sp, #84	; 0x54
 80068c6:	f001 fa03 	bl	8007cd0 <__match>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f43f aea8 	beq.w	8006620 <_strtod_l+0xb0>
 80068d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068d2:	4988      	ldr	r1, [pc, #544]	; (8006af4 <_strtod_l+0x584>)
 80068d4:	3b01      	subs	r3, #1
 80068d6:	a815      	add	r0, sp, #84	; 0x54
 80068d8:	9315      	str	r3, [sp, #84]	; 0x54
 80068da:	f001 f9f9 	bl	8007cd0 <__match>
 80068de:	b910      	cbnz	r0, 80068e6 <_strtod_l+0x376>
 80068e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e2:	3301      	adds	r3, #1
 80068e4:	9315      	str	r3, [sp, #84]	; 0x54
 80068e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006b04 <_strtod_l+0x594>
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	e67a      	b.n	80065e6 <_strtod_l+0x76>
 80068f0:	4881      	ldr	r0, [pc, #516]	; (8006af8 <_strtod_l+0x588>)
 80068f2:	f000 ff09 	bl	8007708 <nan>
 80068f6:	ec59 8b10 	vmov	r8, r9, d0
 80068fa:	e674      	b.n	80065e6 <_strtod_l+0x76>
 80068fc:	9b05      	ldr	r3, [sp, #20]
 80068fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006900:	1afb      	subs	r3, r7, r3
 8006902:	f1bb 0f00 	cmp.w	fp, #0
 8006906:	bf08      	it	eq
 8006908:	46b3      	moveq	fp, r6
 800690a:	2e10      	cmp	r6, #16
 800690c:	9308      	str	r3, [sp, #32]
 800690e:	4635      	mov	r5, r6
 8006910:	bfa8      	it	ge
 8006912:	2510      	movge	r5, #16
 8006914:	f7f9 fdf6 	bl	8000504 <__aeabi_ui2d>
 8006918:	2e09      	cmp	r6, #9
 800691a:	4680      	mov	r8, r0
 800691c:	4689      	mov	r9, r1
 800691e:	dd13      	ble.n	8006948 <_strtod_l+0x3d8>
 8006920:	4b76      	ldr	r3, [pc, #472]	; (8006afc <_strtod_l+0x58c>)
 8006922:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006926:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800692a:	f7f9 fe65 	bl	80005f8 <__aeabi_dmul>
 800692e:	4680      	mov	r8, r0
 8006930:	4650      	mov	r0, sl
 8006932:	4689      	mov	r9, r1
 8006934:	f7f9 fde6 	bl	8000504 <__aeabi_ui2d>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f7f9 fca4 	bl	800028c <__adddf3>
 8006944:	4680      	mov	r8, r0
 8006946:	4689      	mov	r9, r1
 8006948:	2e0f      	cmp	r6, #15
 800694a:	dc38      	bgt.n	80069be <_strtod_l+0x44e>
 800694c:	9b08      	ldr	r3, [sp, #32]
 800694e:	2b00      	cmp	r3, #0
 8006950:	f43f ae49 	beq.w	80065e6 <_strtod_l+0x76>
 8006954:	dd24      	ble.n	80069a0 <_strtod_l+0x430>
 8006956:	2b16      	cmp	r3, #22
 8006958:	dc0b      	bgt.n	8006972 <_strtod_l+0x402>
 800695a:	4968      	ldr	r1, [pc, #416]	; (8006afc <_strtod_l+0x58c>)
 800695c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	e639      	b.n	80065e6 <_strtod_l+0x76>
 8006972:	9a08      	ldr	r2, [sp, #32]
 8006974:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006978:	4293      	cmp	r3, r2
 800697a:	db20      	blt.n	80069be <_strtod_l+0x44e>
 800697c:	4c5f      	ldr	r4, [pc, #380]	; (8006afc <_strtod_l+0x58c>)
 800697e:	f1c6 060f 	rsb	r6, r6, #15
 8006982:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006986:	4642      	mov	r2, r8
 8006988:	464b      	mov	r3, r9
 800698a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698e:	f7f9 fe33 	bl	80005f8 <__aeabi_dmul>
 8006992:	9b08      	ldr	r3, [sp, #32]
 8006994:	1b9e      	subs	r6, r3, r6
 8006996:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800699a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800699e:	e7e3      	b.n	8006968 <_strtod_l+0x3f8>
 80069a0:	9b08      	ldr	r3, [sp, #32]
 80069a2:	3316      	adds	r3, #22
 80069a4:	db0b      	blt.n	80069be <_strtod_l+0x44e>
 80069a6:	9b05      	ldr	r3, [sp, #20]
 80069a8:	1bdf      	subs	r7, r3, r7
 80069aa:	4b54      	ldr	r3, [pc, #336]	; (8006afc <_strtod_l+0x58c>)
 80069ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7f9 ff48 	bl	800084c <__aeabi_ddiv>
 80069bc:	e7d6      	b.n	800696c <_strtod_l+0x3fc>
 80069be:	9b08      	ldr	r3, [sp, #32]
 80069c0:	1b75      	subs	r5, r6, r5
 80069c2:	441d      	add	r5, r3
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	dd70      	ble.n	8006aaa <_strtod_l+0x53a>
 80069c8:	f015 030f 	ands.w	r3, r5, #15
 80069cc:	d00a      	beq.n	80069e4 <_strtod_l+0x474>
 80069ce:	494b      	ldr	r1, [pc, #300]	; (8006afc <_strtod_l+0x58c>)
 80069d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069dc:	f7f9 fe0c 	bl	80005f8 <__aeabi_dmul>
 80069e0:	4680      	mov	r8, r0
 80069e2:	4689      	mov	r9, r1
 80069e4:	f035 050f 	bics.w	r5, r5, #15
 80069e8:	d04d      	beq.n	8006a86 <_strtod_l+0x516>
 80069ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80069ee:	dd22      	ble.n	8006a36 <_strtod_l+0x4c6>
 80069f0:	2500      	movs	r5, #0
 80069f2:	46ab      	mov	fp, r5
 80069f4:	9509      	str	r5, [sp, #36]	; 0x24
 80069f6:	9505      	str	r5, [sp, #20]
 80069f8:	2322      	movs	r3, #34	; 0x22
 80069fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006b04 <_strtod_l+0x594>
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	f04f 0800 	mov.w	r8, #0
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f43f aded 	beq.w	80065e6 <_strtod_l+0x76>
 8006a0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff f924 	bl	8005c5c <_Bfree>
 8006a14:	9905      	ldr	r1, [sp, #20]
 8006a16:	4620      	mov	r0, r4
 8006a18:	f7ff f920 	bl	8005c5c <_Bfree>
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f7ff f91c 	bl	8005c5c <_Bfree>
 8006a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7ff f918 	bl	8005c5c <_Bfree>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff f914 	bl	8005c5c <_Bfree>
 8006a34:	e5d7      	b.n	80065e6 <_strtod_l+0x76>
 8006a36:	4b32      	ldr	r3, [pc, #200]	; (8006b00 <_strtod_l+0x590>)
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	112d      	asrs	r5, r5, #4
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	469a      	mov	sl, r3
 8006a44:	2d01      	cmp	r5, #1
 8006a46:	dc21      	bgt.n	8006a8c <_strtod_l+0x51c>
 8006a48:	b10b      	cbz	r3, 8006a4e <_strtod_l+0x4de>
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	492c      	ldr	r1, [pc, #176]	; (8006b00 <_strtod_l+0x590>)
 8006a50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a54:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a60:	f7f9 fdca 	bl	80005f8 <__aeabi_dmul>
 8006a64:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <_strtod_l+0x594>)
 8006a66:	460a      	mov	r2, r1
 8006a68:	400b      	ands	r3, r1
 8006a6a:	4927      	ldr	r1, [pc, #156]	; (8006b08 <_strtod_l+0x598>)
 8006a6c:	428b      	cmp	r3, r1
 8006a6e:	4680      	mov	r8, r0
 8006a70:	d8be      	bhi.n	80069f0 <_strtod_l+0x480>
 8006a72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006a76:	428b      	cmp	r3, r1
 8006a78:	bf86      	itte	hi
 8006a7a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006b0c <_strtod_l+0x59c>
 8006a7e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006a82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006a86:	2300      	movs	r3, #0
 8006a88:	9304      	str	r3, [sp, #16]
 8006a8a:	e07b      	b.n	8006b84 <_strtod_l+0x614>
 8006a8c:	07ea      	lsls	r2, r5, #31
 8006a8e:	d505      	bpl.n	8006a9c <_strtod_l+0x52c>
 8006a90:	9b04      	ldr	r3, [sp, #16]
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f7f9 fdaf 	bl	80005f8 <__aeabi_dmul>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	9a04      	ldr	r2, [sp, #16]
 8006a9e:	3208      	adds	r2, #8
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	106d      	asrs	r5, r5, #1
 8006aa6:	9204      	str	r2, [sp, #16]
 8006aa8:	e7cc      	b.n	8006a44 <_strtod_l+0x4d4>
 8006aaa:	d0ec      	beq.n	8006a86 <_strtod_l+0x516>
 8006aac:	426d      	negs	r5, r5
 8006aae:	f015 020f 	ands.w	r2, r5, #15
 8006ab2:	d00a      	beq.n	8006aca <_strtod_l+0x55a>
 8006ab4:	4b11      	ldr	r3, [pc, #68]	; (8006afc <_strtod_l+0x58c>)
 8006ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006aba:	4640      	mov	r0, r8
 8006abc:	4649      	mov	r1, r9
 8006abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac2:	f7f9 fec3 	bl	800084c <__aeabi_ddiv>
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	4689      	mov	r9, r1
 8006aca:	112d      	asrs	r5, r5, #4
 8006acc:	d0db      	beq.n	8006a86 <_strtod_l+0x516>
 8006ace:	2d1f      	cmp	r5, #31
 8006ad0:	dd1e      	ble.n	8006b10 <_strtod_l+0x5a0>
 8006ad2:	2500      	movs	r5, #0
 8006ad4:	46ab      	mov	fp, r5
 8006ad6:	9509      	str	r5, [sp, #36]	; 0x24
 8006ad8:	9505      	str	r5, [sp, #20]
 8006ada:	2322      	movs	r3, #34	; 0x22
 8006adc:	f04f 0800 	mov.w	r8, #0
 8006ae0:	f04f 0900 	mov.w	r9, #0
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	e78d      	b.n	8006a04 <_strtod_l+0x494>
 8006ae8:	0800950d 	.word	0x0800950d
 8006aec:	08009734 	.word	0x08009734
 8006af0:	08009505 	.word	0x08009505
 8006af4:	0800953c 	.word	0x0800953c
 8006af8:	080098c5 	.word	0x080098c5
 8006afc:	08009648 	.word	0x08009648
 8006b00:	08009620 	.word	0x08009620
 8006b04:	7ff00000 	.word	0x7ff00000
 8006b08:	7ca00000 	.word	0x7ca00000
 8006b0c:	7fefffff 	.word	0x7fefffff
 8006b10:	f015 0310 	ands.w	r3, r5, #16
 8006b14:	bf18      	it	ne
 8006b16:	236a      	movne	r3, #106	; 0x6a
 8006b18:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8006ebc <_strtod_l+0x94c>
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	4640      	mov	r0, r8
 8006b20:	4649      	mov	r1, r9
 8006b22:	2300      	movs	r3, #0
 8006b24:	07ea      	lsls	r2, r5, #31
 8006b26:	d504      	bpl.n	8006b32 <_strtod_l+0x5c2>
 8006b28:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	2301      	movs	r3, #1
 8006b32:	106d      	asrs	r5, r5, #1
 8006b34:	f10a 0a08 	add.w	sl, sl, #8
 8006b38:	d1f4      	bne.n	8006b24 <_strtod_l+0x5b4>
 8006b3a:	b10b      	cbz	r3, 8006b40 <_strtod_l+0x5d0>
 8006b3c:	4680      	mov	r8, r0
 8006b3e:	4689      	mov	r9, r1
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	b1bb      	cbz	r3, 8006b74 <_strtod_l+0x604>
 8006b44:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b48:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	4649      	mov	r1, r9
 8006b50:	dd10      	ble.n	8006b74 <_strtod_l+0x604>
 8006b52:	2b1f      	cmp	r3, #31
 8006b54:	f340 811e 	ble.w	8006d94 <_strtod_l+0x824>
 8006b58:	2b34      	cmp	r3, #52	; 0x34
 8006b5a:	bfde      	ittt	le
 8006b5c:	f04f 33ff 	movle.w	r3, #4294967295
 8006b60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006b64:	4093      	lslle	r3, r2
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	bfcc      	ite	gt
 8006b6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006b70:	ea03 0901 	andle.w	r9, r3, r1
 8006b74:	2200      	movs	r2, #0
 8006b76:	2300      	movs	r3, #0
 8006b78:	4640      	mov	r0, r8
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	f7f9 ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d1a6      	bne.n	8006ad2 <_strtod_l+0x562>
 8006b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b8a:	4633      	mov	r3, r6
 8006b8c:	465a      	mov	r2, fp
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f7ff f8cc 	bl	8005d2c <__s2b>
 8006b94:	9009      	str	r0, [sp, #36]	; 0x24
 8006b96:	2800      	cmp	r0, #0
 8006b98:	f43f af2a 	beq.w	80069f0 <_strtod_l+0x480>
 8006b9c:	9a08      	ldr	r2, [sp, #32]
 8006b9e:	9b05      	ldr	r3, [sp, #20]
 8006ba0:	2a00      	cmp	r2, #0
 8006ba2:	eba3 0307 	sub.w	r3, r3, r7
 8006ba6:	bfa8      	it	ge
 8006ba8:	2300      	movge	r3, #0
 8006baa:	930c      	str	r3, [sp, #48]	; 0x30
 8006bac:	2500      	movs	r5, #0
 8006bae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006bb2:	9312      	str	r3, [sp, #72]	; 0x48
 8006bb4:	46ab      	mov	fp, r5
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	4620      	mov	r0, r4
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	f7ff f80e 	bl	8005bdc <_Balloc>
 8006bc0:	9005      	str	r0, [sp, #20]
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f43f af18 	beq.w	80069f8 <_strtod_l+0x488>
 8006bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	3202      	adds	r2, #2
 8006bce:	f103 010c 	add.w	r1, r3, #12
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	300c      	adds	r0, #12
 8006bd6:	f000 fd87 	bl	80076e8 <memcpy>
 8006bda:	ec49 8b10 	vmov	d0, r8, r9
 8006bde:	aa18      	add	r2, sp, #96	; 0x60
 8006be0:	a917      	add	r1, sp, #92	; 0x5c
 8006be2:	4620      	mov	r0, r4
 8006be4:	f7ff fbd6 	bl	8006394 <__d2b>
 8006be8:	ec49 8b18 	vmov	d8, r8, r9
 8006bec:	9016      	str	r0, [sp, #88]	; 0x58
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f43f af02 	beq.w	80069f8 <_strtod_l+0x488>
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f7ff f930 	bl	8005e5c <__i2b>
 8006bfc:	4683      	mov	fp, r0
 8006bfe:	2800      	cmp	r0, #0
 8006c00:	f43f aefa 	beq.w	80069f8 <_strtod_l+0x488>
 8006c04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006c06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	bfab      	itete	ge
 8006c0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006c0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006c10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006c12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006c16:	bfac      	ite	ge
 8006c18:	eb06 0a03 	addge.w	sl, r6, r3
 8006c1c:	1b9f      	sublt	r7, r3, r6
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	1af6      	subs	r6, r6, r3
 8006c22:	4416      	add	r6, r2
 8006c24:	4ba0      	ldr	r3, [pc, #640]	; (8006ea8 <_strtod_l+0x938>)
 8006c26:	3e01      	subs	r6, #1
 8006c28:	429e      	cmp	r6, r3
 8006c2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c2e:	f280 80c4 	bge.w	8006dba <_strtod_l+0x84a>
 8006c32:	1b9b      	subs	r3, r3, r6
 8006c34:	2b1f      	cmp	r3, #31
 8006c36:	eba2 0203 	sub.w	r2, r2, r3
 8006c3a:	f04f 0101 	mov.w	r1, #1
 8006c3e:	f300 80b0 	bgt.w	8006da2 <_strtod_l+0x832>
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	930e      	str	r3, [sp, #56]	; 0x38
 8006c48:	2300      	movs	r3, #0
 8006c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8006c4c:	eb0a 0602 	add.w	r6, sl, r2
 8006c50:	9b04      	ldr	r3, [sp, #16]
 8006c52:	45b2      	cmp	sl, r6
 8006c54:	4417      	add	r7, r2
 8006c56:	441f      	add	r7, r3
 8006c58:	4653      	mov	r3, sl
 8006c5a:	bfa8      	it	ge
 8006c5c:	4633      	movge	r3, r6
 8006c5e:	42bb      	cmp	r3, r7
 8006c60:	bfa8      	it	ge
 8006c62:	463b      	movge	r3, r7
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfc2      	ittt	gt
 8006c68:	1af6      	subgt	r6, r6, r3
 8006c6a:	1aff      	subgt	r7, r7, r3
 8006c6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dd17      	ble.n	8006ca6 <_strtod_l+0x736>
 8006c76:	4659      	mov	r1, fp
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f7ff f9ae 	bl	8005fdc <__pow5mult>
 8006c80:	4683      	mov	fp, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f43f aeb8 	beq.w	80069f8 <_strtod_l+0x488>
 8006c88:	4601      	mov	r1, r0
 8006c8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f7ff f8fb 	bl	8005e88 <__multiply>
 8006c92:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f43f aeaf 	beq.w	80069f8 <_strtod_l+0x488>
 8006c9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f7fe ffdd 	bl	8005c5c <_Bfree>
 8006ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ca4:	9316      	str	r3, [sp, #88]	; 0x58
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	f300 808c 	bgt.w	8006dc4 <_strtod_l+0x854>
 8006cac:	9b08      	ldr	r3, [sp, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd08      	ble.n	8006cc4 <_strtod_l+0x754>
 8006cb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006cb4:	9905      	ldr	r1, [sp, #20]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff f990 	bl	8005fdc <__pow5mult>
 8006cbc:	9005      	str	r0, [sp, #20]
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f43f ae9a 	beq.w	80069f8 <_strtod_l+0x488>
 8006cc4:	2f00      	cmp	r7, #0
 8006cc6:	dd08      	ble.n	8006cda <_strtod_l+0x76a>
 8006cc8:	9905      	ldr	r1, [sp, #20]
 8006cca:	463a      	mov	r2, r7
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff f9df 	bl	8006090 <__lshift>
 8006cd2:	9005      	str	r0, [sp, #20]
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f43f ae8f 	beq.w	80069f8 <_strtod_l+0x488>
 8006cda:	f1ba 0f00 	cmp.w	sl, #0
 8006cde:	dd08      	ble.n	8006cf2 <_strtod_l+0x782>
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	4652      	mov	r2, sl
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7ff f9d3 	bl	8006090 <__lshift>
 8006cea:	4683      	mov	fp, r0
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f43f ae83 	beq.w	80069f8 <_strtod_l+0x488>
 8006cf2:	9a05      	ldr	r2, [sp, #20]
 8006cf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	f7ff fa52 	bl	80061a0 <__mdiff>
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	f43f ae7a 	beq.w	80069f8 <_strtod_l+0x488>
 8006d04:	68c3      	ldr	r3, [r0, #12]
 8006d06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60c3      	str	r3, [r0, #12]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	f7ff fa2b 	bl	8006168 <__mcmp>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	da60      	bge.n	8006dd8 <_strtod_l+0x868>
 8006d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d18:	ea53 0308 	orrs.w	r3, r3, r8
 8006d1c:	f040 8084 	bne.w	8006e28 <_strtod_l+0x8b8>
 8006d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d17f      	bne.n	8006e28 <_strtod_l+0x8b8>
 8006d28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2c:	0d1b      	lsrs	r3, r3, #20
 8006d2e:	051b      	lsls	r3, r3, #20
 8006d30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d34:	d978      	bls.n	8006e28 <_strtod_l+0x8b8>
 8006d36:	696b      	ldr	r3, [r5, #20]
 8006d38:	b913      	cbnz	r3, 8006d40 <_strtod_l+0x7d0>
 8006d3a:	692b      	ldr	r3, [r5, #16]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	dd73      	ble.n	8006e28 <_strtod_l+0x8b8>
 8006d40:	4629      	mov	r1, r5
 8006d42:	2201      	movs	r2, #1
 8006d44:	4620      	mov	r0, r4
 8006d46:	f7ff f9a3 	bl	8006090 <__lshift>
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	f7ff fa0b 	bl	8006168 <__mcmp>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	dd68      	ble.n	8006e28 <_strtod_l+0x8b8>
 8006d56:	9904      	ldr	r1, [sp, #16]
 8006d58:	4a54      	ldr	r2, [pc, #336]	; (8006eac <_strtod_l+0x93c>)
 8006d5a:	464b      	mov	r3, r9
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	f000 8084 	beq.w	8006e6a <_strtod_l+0x8fa>
 8006d62:	ea02 0109 	and.w	r1, r2, r9
 8006d66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006d6a:	dc7e      	bgt.n	8006e6a <_strtod_l+0x8fa>
 8006d6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006d70:	f77f aeb3 	ble.w	8006ada <_strtod_l+0x56a>
 8006d74:	4b4e      	ldr	r3, [pc, #312]	; (8006eb0 <_strtod_l+0x940>)
 8006d76:	4640      	mov	r0, r8
 8006d78:	4649      	mov	r1, r9
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f7f9 fc3c 	bl	80005f8 <__aeabi_dmul>
 8006d80:	4b4a      	ldr	r3, [pc, #296]	; (8006eac <_strtod_l+0x93c>)
 8006d82:	400b      	ands	r3, r1
 8006d84:	4680      	mov	r8, r0
 8006d86:	4689      	mov	r9, r1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f47f ae3f 	bne.w	8006a0c <_strtod_l+0x49c>
 8006d8e:	2322      	movs	r3, #34	; 0x22
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	e63b      	b.n	8006a0c <_strtod_l+0x49c>
 8006d94:	f04f 32ff 	mov.w	r2, #4294967295
 8006d98:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9c:	ea03 0808 	and.w	r8, r3, r8
 8006da0:	e6e8      	b.n	8006b74 <_strtod_l+0x604>
 8006da2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006da6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006daa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006dae:	36e2      	adds	r6, #226	; 0xe2
 8006db0:	fa01 f306 	lsl.w	r3, r1, r6
 8006db4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006db8:	e748      	b.n	8006c4c <_strtod_l+0x6dc>
 8006dba:	2100      	movs	r1, #0
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006dc2:	e743      	b.n	8006c4c <_strtod_l+0x6dc>
 8006dc4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff f961 	bl	8006090 <__lshift>
 8006dce:	9016      	str	r0, [sp, #88]	; 0x58
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	f47f af6b 	bne.w	8006cac <_strtod_l+0x73c>
 8006dd6:	e60f      	b.n	80069f8 <_strtod_l+0x488>
 8006dd8:	46ca      	mov	sl, r9
 8006dda:	d171      	bne.n	8006ec0 <_strtod_l+0x950>
 8006ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006de2:	b352      	cbz	r2, 8006e3a <_strtod_l+0x8ca>
 8006de4:	4a33      	ldr	r2, [pc, #204]	; (8006eb4 <_strtod_l+0x944>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d12a      	bne.n	8006e40 <_strtod_l+0x8d0>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	4641      	mov	r1, r8
 8006dee:	b1fb      	cbz	r3, 8006e30 <_strtod_l+0x8c0>
 8006df0:	4b2e      	ldr	r3, [pc, #184]	; (8006eac <_strtod_l+0x93c>)
 8006df2:	ea09 0303 	and.w	r3, r9, r3
 8006df6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfe:	d81a      	bhi.n	8006e36 <_strtod_l+0x8c6>
 8006e00:	0d1b      	lsrs	r3, r3, #20
 8006e02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e06:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	d118      	bne.n	8006e40 <_strtod_l+0x8d0>
 8006e0e:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <_strtod_l+0x948>)
 8006e10:	459a      	cmp	sl, r3
 8006e12:	d102      	bne.n	8006e1a <_strtod_l+0x8aa>
 8006e14:	3101      	adds	r1, #1
 8006e16:	f43f adef 	beq.w	80069f8 <_strtod_l+0x488>
 8006e1a:	4b24      	ldr	r3, [pc, #144]	; (8006eac <_strtod_l+0x93c>)
 8006e1c:	ea0a 0303 	and.w	r3, sl, r3
 8006e20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	9b04      	ldr	r3, [sp, #16]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1a2      	bne.n	8006d74 <_strtod_l+0x804>
 8006e2e:	e5ed      	b.n	8006a0c <_strtod_l+0x49c>
 8006e30:	f04f 33ff 	mov.w	r3, #4294967295
 8006e34:	e7e9      	b.n	8006e0a <_strtod_l+0x89a>
 8006e36:	4613      	mov	r3, r2
 8006e38:	e7e7      	b.n	8006e0a <_strtod_l+0x89a>
 8006e3a:	ea53 0308 	orrs.w	r3, r3, r8
 8006e3e:	d08a      	beq.n	8006d56 <_strtod_l+0x7e6>
 8006e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e42:	b1e3      	cbz	r3, 8006e7e <_strtod_l+0x90e>
 8006e44:	ea13 0f0a 	tst.w	r3, sl
 8006e48:	d0ee      	beq.n	8006e28 <_strtod_l+0x8b8>
 8006e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e4c:	9a04      	ldr	r2, [sp, #16]
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4649      	mov	r1, r9
 8006e52:	b1c3      	cbz	r3, 8006e86 <_strtod_l+0x916>
 8006e54:	f7ff fb6f 	bl	8006536 <sulp>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	ec51 0b18 	vmov	r0, r1, d8
 8006e60:	f7f9 fa14 	bl	800028c <__adddf3>
 8006e64:	4680      	mov	r8, r0
 8006e66:	4689      	mov	r9, r1
 8006e68:	e7de      	b.n	8006e28 <_strtod_l+0x8b8>
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006e70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006e74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006e78:	f04f 38ff 	mov.w	r8, #4294967295
 8006e7c:	e7d4      	b.n	8006e28 <_strtod_l+0x8b8>
 8006e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e80:	ea13 0f08 	tst.w	r3, r8
 8006e84:	e7e0      	b.n	8006e48 <_strtod_l+0x8d8>
 8006e86:	f7ff fb56 	bl	8006536 <sulp>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	ec51 0b18 	vmov	r0, r1, d8
 8006e92:	f7f9 f9f9 	bl	8000288 <__aeabi_dsub>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2300      	movs	r3, #0
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	4689      	mov	r9, r1
 8006e9e:	f7f9 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d0c0      	beq.n	8006e28 <_strtod_l+0x8b8>
 8006ea6:	e618      	b.n	8006ada <_strtod_l+0x56a>
 8006ea8:	fffffc02 	.word	0xfffffc02
 8006eac:	7ff00000 	.word	0x7ff00000
 8006eb0:	39500000 	.word	0x39500000
 8006eb4:	000fffff 	.word	0x000fffff
 8006eb8:	7fefffff 	.word	0x7fefffff
 8006ebc:	08009748 	.word	0x08009748
 8006ec0:	4659      	mov	r1, fp
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f7ff fac0 	bl	8006448 <__ratio>
 8006ec8:	ec57 6b10 	vmov	r6, r7, d0
 8006ecc:	ee10 0a10 	vmov	r0, s0
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ed6:	4639      	mov	r1, r7
 8006ed8:	f7f9 fe0a 	bl	8000af0 <__aeabi_dcmple>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d071      	beq.n	8006fc4 <_strtod_l+0xa54>
 8006ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d17c      	bne.n	8006fe0 <_strtod_l+0xa70>
 8006ee6:	f1b8 0f00 	cmp.w	r8, #0
 8006eea:	d15a      	bne.n	8006fa2 <_strtod_l+0xa32>
 8006eec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d15d      	bne.n	8006fb0 <_strtod_l+0xa40>
 8006ef4:	4b90      	ldr	r3, [pc, #576]	; (8007138 <_strtod_l+0xbc8>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	4639      	mov	r1, r7
 8006efc:	f7f9 fdee 	bl	8000adc <__aeabi_dcmplt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d15c      	bne.n	8006fbe <_strtod_l+0xa4e>
 8006f04:	4630      	mov	r0, r6
 8006f06:	4639      	mov	r1, r7
 8006f08:	4b8c      	ldr	r3, [pc, #560]	; (800713c <_strtod_l+0xbcc>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f7f9 fb74 	bl	80005f8 <__aeabi_dmul>
 8006f10:	4606      	mov	r6, r0
 8006f12:	460f      	mov	r7, r1
 8006f14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f18:	9606      	str	r6, [sp, #24]
 8006f1a:	9307      	str	r3, [sp, #28]
 8006f1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006f24:	4b86      	ldr	r3, [pc, #536]	; (8007140 <_strtod_l+0xbd0>)
 8006f26:	ea0a 0303 	and.w	r3, sl, r3
 8006f2a:	930d      	str	r3, [sp, #52]	; 0x34
 8006f2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f2e:	4b85      	ldr	r3, [pc, #532]	; (8007144 <_strtod_l+0xbd4>)
 8006f30:	429a      	cmp	r2, r3
 8006f32:	f040 8090 	bne.w	8007056 <_strtod_l+0xae6>
 8006f36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006f3a:	ec49 8b10 	vmov	d0, r8, r9
 8006f3e:	f7ff f9b9 	bl	80062b4 <__ulp>
 8006f42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f46:	ec51 0b10 	vmov	r0, r1, d0
 8006f4a:	f7f9 fb55 	bl	80005f8 <__aeabi_dmul>
 8006f4e:	4642      	mov	r2, r8
 8006f50:	464b      	mov	r3, r9
 8006f52:	f7f9 f99b 	bl	800028c <__adddf3>
 8006f56:	460b      	mov	r3, r1
 8006f58:	4979      	ldr	r1, [pc, #484]	; (8007140 <_strtod_l+0xbd0>)
 8006f5a:	4a7b      	ldr	r2, [pc, #492]	; (8007148 <_strtod_l+0xbd8>)
 8006f5c:	4019      	ands	r1, r3
 8006f5e:	4291      	cmp	r1, r2
 8006f60:	4680      	mov	r8, r0
 8006f62:	d944      	bls.n	8006fee <_strtod_l+0xa7e>
 8006f64:	ee18 2a90 	vmov	r2, s17
 8006f68:	4b78      	ldr	r3, [pc, #480]	; (800714c <_strtod_l+0xbdc>)
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d104      	bne.n	8006f78 <_strtod_l+0xa08>
 8006f6e:	ee18 3a10 	vmov	r3, s16
 8006f72:	3301      	adds	r3, #1
 8006f74:	f43f ad40 	beq.w	80069f8 <_strtod_l+0x488>
 8006f78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800714c <_strtod_l+0xbdc>
 8006f7c:	f04f 38ff 	mov.w	r8, #4294967295
 8006f80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7fe fe6a 	bl	8005c5c <_Bfree>
 8006f88:	9905      	ldr	r1, [sp, #20]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f7fe fe66 	bl	8005c5c <_Bfree>
 8006f90:	4659      	mov	r1, fp
 8006f92:	4620      	mov	r0, r4
 8006f94:	f7fe fe62 	bl	8005c5c <_Bfree>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f7fe fe5e 	bl	8005c5c <_Bfree>
 8006fa0:	e609      	b.n	8006bb6 <_strtod_l+0x646>
 8006fa2:	f1b8 0f01 	cmp.w	r8, #1
 8006fa6:	d103      	bne.n	8006fb0 <_strtod_l+0xa40>
 8006fa8:	f1b9 0f00 	cmp.w	r9, #0
 8006fac:	f43f ad95 	beq.w	8006ada <_strtod_l+0x56a>
 8006fb0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007108 <_strtod_l+0xb98>
 8006fb4:	4f60      	ldr	r7, [pc, #384]	; (8007138 <_strtod_l+0xbc8>)
 8006fb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fba:	2600      	movs	r6, #0
 8006fbc:	e7ae      	b.n	8006f1c <_strtod_l+0x9ac>
 8006fbe:	4f5f      	ldr	r7, [pc, #380]	; (800713c <_strtod_l+0xbcc>)
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	e7a7      	b.n	8006f14 <_strtod_l+0x9a4>
 8006fc4:	4b5d      	ldr	r3, [pc, #372]	; (800713c <_strtod_l+0xbcc>)
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4639      	mov	r1, r7
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f7f9 fb14 	bl	80005f8 <__aeabi_dmul>
 8006fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460f      	mov	r7, r1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d09c      	beq.n	8006f14 <_strtod_l+0x9a4>
 8006fda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006fde:	e79d      	b.n	8006f1c <_strtod_l+0x9ac>
 8006fe0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007110 <_strtod_l+0xba0>
 8006fe4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006fe8:	ec57 6b17 	vmov	r6, r7, d7
 8006fec:	e796      	b.n	8006f1c <_strtod_l+0x9ac>
 8006fee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	46ca      	mov	sl, r9
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1c2      	bne.n	8006f80 <_strtod_l+0xa10>
 8006ffa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007000:	0d1b      	lsrs	r3, r3, #20
 8007002:	051b      	lsls	r3, r3, #20
 8007004:	429a      	cmp	r2, r3
 8007006:	d1bb      	bne.n	8006f80 <_strtod_l+0xa10>
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	f7f9 fe54 	bl	8000cb8 <__aeabi_d2lz>
 8007010:	f7f9 fac4 	bl	800059c <__aeabi_l2d>
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 f934 	bl	8000288 <__aeabi_dsub>
 8007020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007022:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007026:	ea43 0308 	orr.w	r3, r3, r8
 800702a:	4313      	orrs	r3, r2
 800702c:	4606      	mov	r6, r0
 800702e:	460f      	mov	r7, r1
 8007030:	d054      	beq.n	80070dc <_strtod_l+0xb6c>
 8007032:	a339      	add	r3, pc, #228	; (adr r3, 8007118 <_strtod_l+0xba8>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f7f9 fd50 	bl	8000adc <__aeabi_dcmplt>
 800703c:	2800      	cmp	r0, #0
 800703e:	f47f ace5 	bne.w	8006a0c <_strtod_l+0x49c>
 8007042:	a337      	add	r3, pc, #220	; (adr r3, 8007120 <_strtod_l+0xbb0>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	4630      	mov	r0, r6
 800704a:	4639      	mov	r1, r7
 800704c:	f7f9 fd64 	bl	8000b18 <__aeabi_dcmpgt>
 8007050:	2800      	cmp	r0, #0
 8007052:	d095      	beq.n	8006f80 <_strtod_l+0xa10>
 8007054:	e4da      	b.n	8006a0c <_strtod_l+0x49c>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	b333      	cbz	r3, 80070a8 <_strtod_l+0xb38>
 800705a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800705c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007060:	d822      	bhi.n	80070a8 <_strtod_l+0xb38>
 8007062:	a331      	add	r3, pc, #196	; (adr r3, 8007128 <_strtod_l+0xbb8>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 fd40 	bl	8000af0 <__aeabi_dcmple>
 8007070:	b1a0      	cbz	r0, 800709c <_strtod_l+0xb2c>
 8007072:	4639      	mov	r1, r7
 8007074:	4630      	mov	r0, r6
 8007076:	f7f9 fd97 	bl	8000ba8 <__aeabi_d2uiz>
 800707a:	2801      	cmp	r0, #1
 800707c:	bf38      	it	cc
 800707e:	2001      	movcc	r0, #1
 8007080:	f7f9 fa40 	bl	8000504 <__aeabi_ui2d>
 8007084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007086:	4606      	mov	r6, r0
 8007088:	460f      	mov	r7, r1
 800708a:	bb23      	cbnz	r3, 80070d6 <_strtod_l+0xb66>
 800708c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007090:	9010      	str	r0, [sp, #64]	; 0x40
 8007092:	9311      	str	r3, [sp, #68]	; 0x44
 8007094:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007098:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800709c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800709e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070ac:	eeb0 0a48 	vmov.f32	s0, s16
 80070b0:	eef0 0a68 	vmov.f32	s1, s17
 80070b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80070b8:	f7ff f8fc 	bl	80062b4 <__ulp>
 80070bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80070c0:	ec53 2b10 	vmov	r2, r3, d0
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	ec53 2b18 	vmov	r2, r3, d8
 80070cc:	f7f9 f8de 	bl	800028c <__adddf3>
 80070d0:	4680      	mov	r8, r0
 80070d2:	4689      	mov	r9, r1
 80070d4:	e78d      	b.n	8006ff2 <_strtod_l+0xa82>
 80070d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80070da:	e7db      	b.n	8007094 <_strtod_l+0xb24>
 80070dc:	a314      	add	r3, pc, #80	; (adr r3, 8007130 <_strtod_l+0xbc0>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 fcfb 	bl	8000adc <__aeabi_dcmplt>
 80070e6:	e7b3      	b.n	8007050 <_strtod_l+0xae0>
 80070e8:	2300      	movs	r3, #0
 80070ea:	930a      	str	r3, [sp, #40]	; 0x28
 80070ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	f7ff ba7c 	b.w	80065ee <_strtod_l+0x7e>
 80070f6:	2a65      	cmp	r2, #101	; 0x65
 80070f8:	f43f ab75 	beq.w	80067e6 <_strtod_l+0x276>
 80070fc:	2a45      	cmp	r2, #69	; 0x45
 80070fe:	f43f ab72 	beq.w	80067e6 <_strtod_l+0x276>
 8007102:	2301      	movs	r3, #1
 8007104:	f7ff bbaa 	b.w	800685c <_strtod_l+0x2ec>
 8007108:	00000000 	.word	0x00000000
 800710c:	bff00000 	.word	0xbff00000
 8007110:	00000000 	.word	0x00000000
 8007114:	3ff00000 	.word	0x3ff00000
 8007118:	94a03595 	.word	0x94a03595
 800711c:	3fdfffff 	.word	0x3fdfffff
 8007120:	35afe535 	.word	0x35afe535
 8007124:	3fe00000 	.word	0x3fe00000
 8007128:	ffc00000 	.word	0xffc00000
 800712c:	41dfffff 	.word	0x41dfffff
 8007130:	94a03595 	.word	0x94a03595
 8007134:	3fcfffff 	.word	0x3fcfffff
 8007138:	3ff00000 	.word	0x3ff00000
 800713c:	3fe00000 	.word	0x3fe00000
 8007140:	7ff00000 	.word	0x7ff00000
 8007144:	7fe00000 	.word	0x7fe00000
 8007148:	7c9fffff 	.word	0x7c9fffff
 800714c:	7fefffff 	.word	0x7fefffff

08007150 <_strtod_r>:
 8007150:	4b01      	ldr	r3, [pc, #4]	; (8007158 <_strtod_r+0x8>)
 8007152:	f7ff ba0d 	b.w	8006570 <_strtod_l>
 8007156:	bf00      	nop
 8007158:	20000068 	.word	0x20000068

0800715c <_strtol_l.constprop.0>:
 800715c:	2b01      	cmp	r3, #1
 800715e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007162:	d001      	beq.n	8007168 <_strtol_l.constprop.0+0xc>
 8007164:	2b24      	cmp	r3, #36	; 0x24
 8007166:	d906      	bls.n	8007176 <_strtol_l.constprop.0+0x1a>
 8007168:	f7fd fd8a 	bl	8004c80 <__errno>
 800716c:	2316      	movs	r3, #22
 800716e:	6003      	str	r3, [r0, #0]
 8007170:	2000      	movs	r0, #0
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800725c <_strtol_l.constprop.0+0x100>
 800717a:	460d      	mov	r5, r1
 800717c:	462e      	mov	r6, r5
 800717e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007182:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007186:	f017 0708 	ands.w	r7, r7, #8
 800718a:	d1f7      	bne.n	800717c <_strtol_l.constprop.0+0x20>
 800718c:	2c2d      	cmp	r4, #45	; 0x2d
 800718e:	d132      	bne.n	80071f6 <_strtol_l.constprop.0+0x9a>
 8007190:	782c      	ldrb	r4, [r5, #0]
 8007192:	2701      	movs	r7, #1
 8007194:	1cb5      	adds	r5, r6, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d05b      	beq.n	8007252 <_strtol_l.constprop.0+0xf6>
 800719a:	2b10      	cmp	r3, #16
 800719c:	d109      	bne.n	80071b2 <_strtol_l.constprop.0+0x56>
 800719e:	2c30      	cmp	r4, #48	; 0x30
 80071a0:	d107      	bne.n	80071b2 <_strtol_l.constprop.0+0x56>
 80071a2:	782c      	ldrb	r4, [r5, #0]
 80071a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80071a8:	2c58      	cmp	r4, #88	; 0x58
 80071aa:	d14d      	bne.n	8007248 <_strtol_l.constprop.0+0xec>
 80071ac:	786c      	ldrb	r4, [r5, #1]
 80071ae:	2310      	movs	r3, #16
 80071b0:	3502      	adds	r5, #2
 80071b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80071b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80071ba:	f04f 0e00 	mov.w	lr, #0
 80071be:	fbb8 f9f3 	udiv	r9, r8, r3
 80071c2:	4676      	mov	r6, lr
 80071c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80071c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80071cc:	f1bc 0f09 	cmp.w	ip, #9
 80071d0:	d816      	bhi.n	8007200 <_strtol_l.constprop.0+0xa4>
 80071d2:	4664      	mov	r4, ip
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	dd24      	ble.n	8007222 <_strtol_l.constprop.0+0xc6>
 80071d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80071dc:	d008      	beq.n	80071f0 <_strtol_l.constprop.0+0x94>
 80071de:	45b1      	cmp	r9, r6
 80071e0:	d31c      	bcc.n	800721c <_strtol_l.constprop.0+0xc0>
 80071e2:	d101      	bne.n	80071e8 <_strtol_l.constprop.0+0x8c>
 80071e4:	45a2      	cmp	sl, r4
 80071e6:	db19      	blt.n	800721c <_strtol_l.constprop.0+0xc0>
 80071e8:	fb06 4603 	mla	r6, r6, r3, r4
 80071ec:	f04f 0e01 	mov.w	lr, #1
 80071f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071f4:	e7e8      	b.n	80071c8 <_strtol_l.constprop.0+0x6c>
 80071f6:	2c2b      	cmp	r4, #43	; 0x2b
 80071f8:	bf04      	itt	eq
 80071fa:	782c      	ldrbeq	r4, [r5, #0]
 80071fc:	1cb5      	addeq	r5, r6, #2
 80071fe:	e7ca      	b.n	8007196 <_strtol_l.constprop.0+0x3a>
 8007200:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007204:	f1bc 0f19 	cmp.w	ip, #25
 8007208:	d801      	bhi.n	800720e <_strtol_l.constprop.0+0xb2>
 800720a:	3c37      	subs	r4, #55	; 0x37
 800720c:	e7e2      	b.n	80071d4 <_strtol_l.constprop.0+0x78>
 800720e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007212:	f1bc 0f19 	cmp.w	ip, #25
 8007216:	d804      	bhi.n	8007222 <_strtol_l.constprop.0+0xc6>
 8007218:	3c57      	subs	r4, #87	; 0x57
 800721a:	e7db      	b.n	80071d4 <_strtol_l.constprop.0+0x78>
 800721c:	f04f 3eff 	mov.w	lr, #4294967295
 8007220:	e7e6      	b.n	80071f0 <_strtol_l.constprop.0+0x94>
 8007222:	f1be 3fff 	cmp.w	lr, #4294967295
 8007226:	d105      	bne.n	8007234 <_strtol_l.constprop.0+0xd8>
 8007228:	2322      	movs	r3, #34	; 0x22
 800722a:	6003      	str	r3, [r0, #0]
 800722c:	4646      	mov	r6, r8
 800722e:	b942      	cbnz	r2, 8007242 <_strtol_l.constprop.0+0xe6>
 8007230:	4630      	mov	r0, r6
 8007232:	e79e      	b.n	8007172 <_strtol_l.constprop.0+0x16>
 8007234:	b107      	cbz	r7, 8007238 <_strtol_l.constprop.0+0xdc>
 8007236:	4276      	negs	r6, r6
 8007238:	2a00      	cmp	r2, #0
 800723a:	d0f9      	beq.n	8007230 <_strtol_l.constprop.0+0xd4>
 800723c:	f1be 0f00 	cmp.w	lr, #0
 8007240:	d000      	beq.n	8007244 <_strtol_l.constprop.0+0xe8>
 8007242:	1e69      	subs	r1, r5, #1
 8007244:	6011      	str	r1, [r2, #0]
 8007246:	e7f3      	b.n	8007230 <_strtol_l.constprop.0+0xd4>
 8007248:	2430      	movs	r4, #48	; 0x30
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1b1      	bne.n	80071b2 <_strtol_l.constprop.0+0x56>
 800724e:	2308      	movs	r3, #8
 8007250:	e7af      	b.n	80071b2 <_strtol_l.constprop.0+0x56>
 8007252:	2c30      	cmp	r4, #48	; 0x30
 8007254:	d0a5      	beq.n	80071a2 <_strtol_l.constprop.0+0x46>
 8007256:	230a      	movs	r3, #10
 8007258:	e7ab      	b.n	80071b2 <_strtol_l.constprop.0+0x56>
 800725a:	bf00      	nop
 800725c:	08009771 	.word	0x08009771

08007260 <_strtol_r>:
 8007260:	f7ff bf7c 	b.w	800715c <_strtol_l.constprop.0>

08007264 <__ssputs_r>:
 8007264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007268:	688e      	ldr	r6, [r1, #8]
 800726a:	461f      	mov	r7, r3
 800726c:	42be      	cmp	r6, r7
 800726e:	680b      	ldr	r3, [r1, #0]
 8007270:	4682      	mov	sl, r0
 8007272:	460c      	mov	r4, r1
 8007274:	4690      	mov	r8, r2
 8007276:	d82c      	bhi.n	80072d2 <__ssputs_r+0x6e>
 8007278:	898a      	ldrh	r2, [r1, #12]
 800727a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800727e:	d026      	beq.n	80072ce <__ssputs_r+0x6a>
 8007280:	6965      	ldr	r5, [r4, #20]
 8007282:	6909      	ldr	r1, [r1, #16]
 8007284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007288:	eba3 0901 	sub.w	r9, r3, r1
 800728c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007290:	1c7b      	adds	r3, r7, #1
 8007292:	444b      	add	r3, r9
 8007294:	106d      	asrs	r5, r5, #1
 8007296:	429d      	cmp	r5, r3
 8007298:	bf38      	it	cc
 800729a:	461d      	movcc	r5, r3
 800729c:	0553      	lsls	r3, r2, #21
 800729e:	d527      	bpl.n	80072f0 <__ssputs_r+0x8c>
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7fe fc0f 	bl	8005ac4 <_malloc_r>
 80072a6:	4606      	mov	r6, r0
 80072a8:	b360      	cbz	r0, 8007304 <__ssputs_r+0xa0>
 80072aa:	6921      	ldr	r1, [r4, #16]
 80072ac:	464a      	mov	r2, r9
 80072ae:	f000 fa1b 	bl	80076e8 <memcpy>
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072bc:	81a3      	strh	r3, [r4, #12]
 80072be:	6126      	str	r6, [r4, #16]
 80072c0:	6165      	str	r5, [r4, #20]
 80072c2:	444e      	add	r6, r9
 80072c4:	eba5 0509 	sub.w	r5, r5, r9
 80072c8:	6026      	str	r6, [r4, #0]
 80072ca:	60a5      	str	r5, [r4, #8]
 80072cc:	463e      	mov	r6, r7
 80072ce:	42be      	cmp	r6, r7
 80072d0:	d900      	bls.n	80072d4 <__ssputs_r+0x70>
 80072d2:	463e      	mov	r6, r7
 80072d4:	6820      	ldr	r0, [r4, #0]
 80072d6:	4632      	mov	r2, r6
 80072d8:	4641      	mov	r1, r8
 80072da:	f000 f9c9 	bl	8007670 <memmove>
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	1b9b      	subs	r3, r3, r6
 80072e2:	60a3      	str	r3, [r4, #8]
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	4433      	add	r3, r6
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	2000      	movs	r0, #0
 80072ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f0:	462a      	mov	r2, r5
 80072f2:	f000 fdae 	bl	8007e52 <_realloc_r>
 80072f6:	4606      	mov	r6, r0
 80072f8:	2800      	cmp	r0, #0
 80072fa:	d1e0      	bne.n	80072be <__ssputs_r+0x5a>
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	4650      	mov	r0, sl
 8007300:	f7fe fb6c 	bl	80059dc <_free_r>
 8007304:	230c      	movs	r3, #12
 8007306:	f8ca 3000 	str.w	r3, [sl]
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	f04f 30ff 	mov.w	r0, #4294967295
 8007316:	e7e9      	b.n	80072ec <__ssputs_r+0x88>

08007318 <_svfiprintf_r>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	4698      	mov	r8, r3
 800731e:	898b      	ldrh	r3, [r1, #12]
 8007320:	061b      	lsls	r3, r3, #24
 8007322:	b09d      	sub	sp, #116	; 0x74
 8007324:	4607      	mov	r7, r0
 8007326:	460d      	mov	r5, r1
 8007328:	4614      	mov	r4, r2
 800732a:	d50e      	bpl.n	800734a <_svfiprintf_r+0x32>
 800732c:	690b      	ldr	r3, [r1, #16]
 800732e:	b963      	cbnz	r3, 800734a <_svfiprintf_r+0x32>
 8007330:	2140      	movs	r1, #64	; 0x40
 8007332:	f7fe fbc7 	bl	8005ac4 <_malloc_r>
 8007336:	6028      	str	r0, [r5, #0]
 8007338:	6128      	str	r0, [r5, #16]
 800733a:	b920      	cbnz	r0, 8007346 <_svfiprintf_r+0x2e>
 800733c:	230c      	movs	r3, #12
 800733e:	603b      	str	r3, [r7, #0]
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	e0d0      	b.n	80074e8 <_svfiprintf_r+0x1d0>
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	616b      	str	r3, [r5, #20]
 800734a:	2300      	movs	r3, #0
 800734c:	9309      	str	r3, [sp, #36]	; 0x24
 800734e:	2320      	movs	r3, #32
 8007350:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007354:	f8cd 800c 	str.w	r8, [sp, #12]
 8007358:	2330      	movs	r3, #48	; 0x30
 800735a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007500 <_svfiprintf_r+0x1e8>
 800735e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007362:	f04f 0901 	mov.w	r9, #1
 8007366:	4623      	mov	r3, r4
 8007368:	469a      	mov	sl, r3
 800736a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800736e:	b10a      	cbz	r2, 8007374 <_svfiprintf_r+0x5c>
 8007370:	2a25      	cmp	r2, #37	; 0x25
 8007372:	d1f9      	bne.n	8007368 <_svfiprintf_r+0x50>
 8007374:	ebba 0b04 	subs.w	fp, sl, r4
 8007378:	d00b      	beq.n	8007392 <_svfiprintf_r+0x7a>
 800737a:	465b      	mov	r3, fp
 800737c:	4622      	mov	r2, r4
 800737e:	4629      	mov	r1, r5
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ff6f 	bl	8007264 <__ssputs_r>
 8007386:	3001      	adds	r0, #1
 8007388:	f000 80a9 	beq.w	80074de <_svfiprintf_r+0x1c6>
 800738c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800738e:	445a      	add	r2, fp
 8007390:	9209      	str	r2, [sp, #36]	; 0x24
 8007392:	f89a 3000 	ldrb.w	r3, [sl]
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 80a1 	beq.w	80074de <_svfiprintf_r+0x1c6>
 800739c:	2300      	movs	r3, #0
 800739e:	f04f 32ff 	mov.w	r2, #4294967295
 80073a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a6:	f10a 0a01 	add.w	sl, sl, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073b2:	931a      	str	r3, [sp, #104]	; 0x68
 80073b4:	4654      	mov	r4, sl
 80073b6:	2205      	movs	r2, #5
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	4850      	ldr	r0, [pc, #320]	; (8007500 <_svfiprintf_r+0x1e8>)
 80073be:	f7f8 ff07 	bl	80001d0 <memchr>
 80073c2:	9a04      	ldr	r2, [sp, #16]
 80073c4:	b9d8      	cbnz	r0, 80073fe <_svfiprintf_r+0xe6>
 80073c6:	06d0      	lsls	r0, r2, #27
 80073c8:	bf44      	itt	mi
 80073ca:	2320      	movmi	r3, #32
 80073cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d0:	0711      	lsls	r1, r2, #28
 80073d2:	bf44      	itt	mi
 80073d4:	232b      	movmi	r3, #43	; 0x2b
 80073d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073da:	f89a 3000 	ldrb.w	r3, [sl]
 80073de:	2b2a      	cmp	r3, #42	; 0x2a
 80073e0:	d015      	beq.n	800740e <_svfiprintf_r+0xf6>
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	4654      	mov	r4, sl
 80073e6:	2000      	movs	r0, #0
 80073e8:	f04f 0c0a 	mov.w	ip, #10
 80073ec:	4621      	mov	r1, r4
 80073ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f2:	3b30      	subs	r3, #48	; 0x30
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d94d      	bls.n	8007494 <_svfiprintf_r+0x17c>
 80073f8:	b1b0      	cbz	r0, 8007428 <_svfiprintf_r+0x110>
 80073fa:	9207      	str	r2, [sp, #28]
 80073fc:	e014      	b.n	8007428 <_svfiprintf_r+0x110>
 80073fe:	eba0 0308 	sub.w	r3, r0, r8
 8007402:	fa09 f303 	lsl.w	r3, r9, r3
 8007406:	4313      	orrs	r3, r2
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	46a2      	mov	sl, r4
 800740c:	e7d2      	b.n	80073b4 <_svfiprintf_r+0x9c>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	1d19      	adds	r1, r3, #4
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	9103      	str	r1, [sp, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfbb      	ittet	lt
 800741a:	425b      	neglt	r3, r3
 800741c:	f042 0202 	orrlt.w	r2, r2, #2
 8007420:	9307      	strge	r3, [sp, #28]
 8007422:	9307      	strlt	r3, [sp, #28]
 8007424:	bfb8      	it	lt
 8007426:	9204      	strlt	r2, [sp, #16]
 8007428:	7823      	ldrb	r3, [r4, #0]
 800742a:	2b2e      	cmp	r3, #46	; 0x2e
 800742c:	d10c      	bne.n	8007448 <_svfiprintf_r+0x130>
 800742e:	7863      	ldrb	r3, [r4, #1]
 8007430:	2b2a      	cmp	r3, #42	; 0x2a
 8007432:	d134      	bne.n	800749e <_svfiprintf_r+0x186>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	1d1a      	adds	r2, r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	9203      	str	r2, [sp, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfb8      	it	lt
 8007440:	f04f 33ff 	movlt.w	r3, #4294967295
 8007444:	3402      	adds	r4, #2
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007510 <_svfiprintf_r+0x1f8>
 800744c:	7821      	ldrb	r1, [r4, #0]
 800744e:	2203      	movs	r2, #3
 8007450:	4650      	mov	r0, sl
 8007452:	f7f8 febd 	bl	80001d0 <memchr>
 8007456:	b138      	cbz	r0, 8007468 <_svfiprintf_r+0x150>
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	eba0 000a 	sub.w	r0, r0, sl
 800745e:	2240      	movs	r2, #64	; 0x40
 8007460:	4082      	lsls	r2, r0
 8007462:	4313      	orrs	r3, r2
 8007464:	3401      	adds	r4, #1
 8007466:	9304      	str	r3, [sp, #16]
 8007468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746c:	4825      	ldr	r0, [pc, #148]	; (8007504 <_svfiprintf_r+0x1ec>)
 800746e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007472:	2206      	movs	r2, #6
 8007474:	f7f8 feac 	bl	80001d0 <memchr>
 8007478:	2800      	cmp	r0, #0
 800747a:	d038      	beq.n	80074ee <_svfiprintf_r+0x1d6>
 800747c:	4b22      	ldr	r3, [pc, #136]	; (8007508 <_svfiprintf_r+0x1f0>)
 800747e:	bb1b      	cbnz	r3, 80074c8 <_svfiprintf_r+0x1b0>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	3307      	adds	r3, #7
 8007484:	f023 0307 	bic.w	r3, r3, #7
 8007488:	3308      	adds	r3, #8
 800748a:	9303      	str	r3, [sp, #12]
 800748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748e:	4433      	add	r3, r6
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	e768      	b.n	8007366 <_svfiprintf_r+0x4e>
 8007494:	fb0c 3202 	mla	r2, ip, r2, r3
 8007498:	460c      	mov	r4, r1
 800749a:	2001      	movs	r0, #1
 800749c:	e7a6      	b.n	80073ec <_svfiprintf_r+0xd4>
 800749e:	2300      	movs	r3, #0
 80074a0:	3401      	adds	r4, #1
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	4619      	mov	r1, r3
 80074a6:	f04f 0c0a 	mov.w	ip, #10
 80074aa:	4620      	mov	r0, r4
 80074ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074b0:	3a30      	subs	r2, #48	; 0x30
 80074b2:	2a09      	cmp	r2, #9
 80074b4:	d903      	bls.n	80074be <_svfiprintf_r+0x1a6>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0c6      	beq.n	8007448 <_svfiprintf_r+0x130>
 80074ba:	9105      	str	r1, [sp, #20]
 80074bc:	e7c4      	b.n	8007448 <_svfiprintf_r+0x130>
 80074be:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c2:	4604      	mov	r4, r0
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7f0      	b.n	80074aa <_svfiprintf_r+0x192>
 80074c8:	ab03      	add	r3, sp, #12
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	462a      	mov	r2, r5
 80074ce:	4b0f      	ldr	r3, [pc, #60]	; (800750c <_svfiprintf_r+0x1f4>)
 80074d0:	a904      	add	r1, sp, #16
 80074d2:	4638      	mov	r0, r7
 80074d4:	f7fc fc98 	bl	8003e08 <_printf_float>
 80074d8:	1c42      	adds	r2, r0, #1
 80074da:	4606      	mov	r6, r0
 80074dc:	d1d6      	bne.n	800748c <_svfiprintf_r+0x174>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	065b      	lsls	r3, r3, #25
 80074e2:	f53f af2d 	bmi.w	8007340 <_svfiprintf_r+0x28>
 80074e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074e8:	b01d      	add	sp, #116	; 0x74
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	ab03      	add	r3, sp, #12
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	462a      	mov	r2, r5
 80074f4:	4b05      	ldr	r3, [pc, #20]	; (800750c <_svfiprintf_r+0x1f4>)
 80074f6:	a904      	add	r1, sp, #16
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7fc ff29 	bl	8004350 <_printf_i>
 80074fe:	e7eb      	b.n	80074d8 <_svfiprintf_r+0x1c0>
 8007500:	08009871 	.word	0x08009871
 8007504:	0800987b 	.word	0x0800987b
 8007508:	08003e09 	.word	0x08003e09
 800750c:	08007265 	.word	0x08007265
 8007510:	08009877 	.word	0x08009877

08007514 <__sflush_r>:
 8007514:	898a      	ldrh	r2, [r1, #12]
 8007516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	4605      	mov	r5, r0
 800751c:	0710      	lsls	r0, r2, #28
 800751e:	460c      	mov	r4, r1
 8007520:	d458      	bmi.n	80075d4 <__sflush_r+0xc0>
 8007522:	684b      	ldr	r3, [r1, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc05      	bgt.n	8007534 <__sflush_r+0x20>
 8007528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	dc02      	bgt.n	8007534 <__sflush_r+0x20>
 800752e:	2000      	movs	r0, #0
 8007530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007536:	2e00      	cmp	r6, #0
 8007538:	d0f9      	beq.n	800752e <__sflush_r+0x1a>
 800753a:	2300      	movs	r3, #0
 800753c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007540:	682f      	ldr	r7, [r5, #0]
 8007542:	6a21      	ldr	r1, [r4, #32]
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	d032      	beq.n	80075ae <__sflush_r+0x9a>
 8007548:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800754a:	89a3      	ldrh	r3, [r4, #12]
 800754c:	075a      	lsls	r2, r3, #29
 800754e:	d505      	bpl.n	800755c <__sflush_r+0x48>
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	1ac0      	subs	r0, r0, r3
 8007554:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007556:	b10b      	cbz	r3, 800755c <__sflush_r+0x48>
 8007558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800755a:	1ac0      	subs	r0, r0, r3
 800755c:	2300      	movs	r3, #0
 800755e:	4602      	mov	r2, r0
 8007560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007562:	6a21      	ldr	r1, [r4, #32]
 8007564:	4628      	mov	r0, r5
 8007566:	47b0      	blx	r6
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	d106      	bne.n	800757c <__sflush_r+0x68>
 800756e:	6829      	ldr	r1, [r5, #0]
 8007570:	291d      	cmp	r1, #29
 8007572:	d82b      	bhi.n	80075cc <__sflush_r+0xb8>
 8007574:	4a29      	ldr	r2, [pc, #164]	; (800761c <__sflush_r+0x108>)
 8007576:	410a      	asrs	r2, r1
 8007578:	07d6      	lsls	r6, r2, #31
 800757a:	d427      	bmi.n	80075cc <__sflush_r+0xb8>
 800757c:	2200      	movs	r2, #0
 800757e:	6062      	str	r2, [r4, #4]
 8007580:	04d9      	lsls	r1, r3, #19
 8007582:	6922      	ldr	r2, [r4, #16]
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	d504      	bpl.n	8007592 <__sflush_r+0x7e>
 8007588:	1c42      	adds	r2, r0, #1
 800758a:	d101      	bne.n	8007590 <__sflush_r+0x7c>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b903      	cbnz	r3, 8007592 <__sflush_r+0x7e>
 8007590:	6560      	str	r0, [r4, #84]	; 0x54
 8007592:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007594:	602f      	str	r7, [r5, #0]
 8007596:	2900      	cmp	r1, #0
 8007598:	d0c9      	beq.n	800752e <__sflush_r+0x1a>
 800759a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800759e:	4299      	cmp	r1, r3
 80075a0:	d002      	beq.n	80075a8 <__sflush_r+0x94>
 80075a2:	4628      	mov	r0, r5
 80075a4:	f7fe fa1a 	bl	80059dc <_free_r>
 80075a8:	2000      	movs	r0, #0
 80075aa:	6360      	str	r0, [r4, #52]	; 0x34
 80075ac:	e7c0      	b.n	8007530 <__sflush_r+0x1c>
 80075ae:	2301      	movs	r3, #1
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b0      	blx	r6
 80075b4:	1c41      	adds	r1, r0, #1
 80075b6:	d1c8      	bne.n	800754a <__sflush_r+0x36>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0c5      	beq.n	800754a <__sflush_r+0x36>
 80075be:	2b1d      	cmp	r3, #29
 80075c0:	d001      	beq.n	80075c6 <__sflush_r+0xb2>
 80075c2:	2b16      	cmp	r3, #22
 80075c4:	d101      	bne.n	80075ca <__sflush_r+0xb6>
 80075c6:	602f      	str	r7, [r5, #0]
 80075c8:	e7b1      	b.n	800752e <__sflush_r+0x1a>
 80075ca:	89a3      	ldrh	r3, [r4, #12]
 80075cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d0:	81a3      	strh	r3, [r4, #12]
 80075d2:	e7ad      	b.n	8007530 <__sflush_r+0x1c>
 80075d4:	690f      	ldr	r7, [r1, #16]
 80075d6:	2f00      	cmp	r7, #0
 80075d8:	d0a9      	beq.n	800752e <__sflush_r+0x1a>
 80075da:	0793      	lsls	r3, r2, #30
 80075dc:	680e      	ldr	r6, [r1, #0]
 80075de:	bf08      	it	eq
 80075e0:	694b      	ldreq	r3, [r1, #20]
 80075e2:	600f      	str	r7, [r1, #0]
 80075e4:	bf18      	it	ne
 80075e6:	2300      	movne	r3, #0
 80075e8:	eba6 0807 	sub.w	r8, r6, r7
 80075ec:	608b      	str	r3, [r1, #8]
 80075ee:	f1b8 0f00 	cmp.w	r8, #0
 80075f2:	dd9c      	ble.n	800752e <__sflush_r+0x1a>
 80075f4:	6a21      	ldr	r1, [r4, #32]
 80075f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075f8:	4643      	mov	r3, r8
 80075fa:	463a      	mov	r2, r7
 80075fc:	4628      	mov	r0, r5
 80075fe:	47b0      	blx	r6
 8007600:	2800      	cmp	r0, #0
 8007602:	dc06      	bgt.n	8007612 <__sflush_r+0xfe>
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	e78e      	b.n	8007530 <__sflush_r+0x1c>
 8007612:	4407      	add	r7, r0
 8007614:	eba8 0800 	sub.w	r8, r8, r0
 8007618:	e7e9      	b.n	80075ee <__sflush_r+0xda>
 800761a:	bf00      	nop
 800761c:	dfbffffe 	.word	0xdfbffffe

08007620 <_fflush_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	690b      	ldr	r3, [r1, #16]
 8007624:	4605      	mov	r5, r0
 8007626:	460c      	mov	r4, r1
 8007628:	b913      	cbnz	r3, 8007630 <_fflush_r+0x10>
 800762a:	2500      	movs	r5, #0
 800762c:	4628      	mov	r0, r5
 800762e:	bd38      	pop	{r3, r4, r5, pc}
 8007630:	b118      	cbz	r0, 800763a <_fflush_r+0x1a>
 8007632:	6a03      	ldr	r3, [r0, #32]
 8007634:	b90b      	cbnz	r3, 800763a <_fflush_r+0x1a>
 8007636:	f7fd fa37 	bl	8004aa8 <__sinit>
 800763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d0f3      	beq.n	800762a <_fflush_r+0xa>
 8007642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007644:	07d0      	lsls	r0, r2, #31
 8007646:	d404      	bmi.n	8007652 <_fflush_r+0x32>
 8007648:	0599      	lsls	r1, r3, #22
 800764a:	d402      	bmi.n	8007652 <_fflush_r+0x32>
 800764c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764e:	f7fd fb41 	bl	8004cd4 <__retarget_lock_acquire_recursive>
 8007652:	4628      	mov	r0, r5
 8007654:	4621      	mov	r1, r4
 8007656:	f7ff ff5d 	bl	8007514 <__sflush_r>
 800765a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800765c:	07da      	lsls	r2, r3, #31
 800765e:	4605      	mov	r5, r0
 8007660:	d4e4      	bmi.n	800762c <_fflush_r+0xc>
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	059b      	lsls	r3, r3, #22
 8007666:	d4e1      	bmi.n	800762c <_fflush_r+0xc>
 8007668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766a:	f7fd fb34 	bl	8004cd6 <__retarget_lock_release_recursive>
 800766e:	e7dd      	b.n	800762c <_fflush_r+0xc>

08007670 <memmove>:
 8007670:	4288      	cmp	r0, r1
 8007672:	b510      	push	{r4, lr}
 8007674:	eb01 0402 	add.w	r4, r1, r2
 8007678:	d902      	bls.n	8007680 <memmove+0x10>
 800767a:	4284      	cmp	r4, r0
 800767c:	4623      	mov	r3, r4
 800767e:	d807      	bhi.n	8007690 <memmove+0x20>
 8007680:	1e43      	subs	r3, r0, #1
 8007682:	42a1      	cmp	r1, r4
 8007684:	d008      	beq.n	8007698 <memmove+0x28>
 8007686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800768a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800768e:	e7f8      	b.n	8007682 <memmove+0x12>
 8007690:	4402      	add	r2, r0
 8007692:	4601      	mov	r1, r0
 8007694:	428a      	cmp	r2, r1
 8007696:	d100      	bne.n	800769a <memmove+0x2a>
 8007698:	bd10      	pop	{r4, pc}
 800769a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800769e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076a2:	e7f7      	b.n	8007694 <memmove+0x24>

080076a4 <strncmp>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	b16a      	cbz	r2, 80076c4 <strncmp+0x20>
 80076a8:	3901      	subs	r1, #1
 80076aa:	1884      	adds	r4, r0, r2
 80076ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d103      	bne.n	80076c0 <strncmp+0x1c>
 80076b8:	42a0      	cmp	r0, r4
 80076ba:	d001      	beq.n	80076c0 <strncmp+0x1c>
 80076bc:	2a00      	cmp	r2, #0
 80076be:	d1f5      	bne.n	80076ac <strncmp+0x8>
 80076c0:	1ad0      	subs	r0, r2, r3
 80076c2:	bd10      	pop	{r4, pc}
 80076c4:	4610      	mov	r0, r2
 80076c6:	e7fc      	b.n	80076c2 <strncmp+0x1e>

080076c8 <_sbrk_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d06      	ldr	r5, [pc, #24]	; (80076e4 <_sbrk_r+0x1c>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	f7fa f856 	bl	8001784 <_sbrk>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_sbrk_r+0x1a>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_sbrk_r+0x1a>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	20000d54 	.word	0x20000d54

080076e8 <memcpy>:
 80076e8:	440a      	add	r2, r1
 80076ea:	4291      	cmp	r1, r2
 80076ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80076f0:	d100      	bne.n	80076f4 <memcpy+0xc>
 80076f2:	4770      	bx	lr
 80076f4:	b510      	push	{r4, lr}
 80076f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076fe:	4291      	cmp	r1, r2
 8007700:	d1f9      	bne.n	80076f6 <memcpy+0xe>
 8007702:	bd10      	pop	{r4, pc}
 8007704:	0000      	movs	r0, r0
	...

08007708 <nan>:
 8007708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007710 <nan+0x8>
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	00000000 	.word	0x00000000
 8007714:	7ff80000 	.word	0x7ff80000

08007718 <__assert_func>:
 8007718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800771a:	4614      	mov	r4, r2
 800771c:	461a      	mov	r2, r3
 800771e:	4b09      	ldr	r3, [pc, #36]	; (8007744 <__assert_func+0x2c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4605      	mov	r5, r0
 8007724:	68d8      	ldr	r0, [r3, #12]
 8007726:	b14c      	cbz	r4, 800773c <__assert_func+0x24>
 8007728:	4b07      	ldr	r3, [pc, #28]	; (8007748 <__assert_func+0x30>)
 800772a:	9100      	str	r1, [sp, #0]
 800772c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007730:	4906      	ldr	r1, [pc, #24]	; (800774c <__assert_func+0x34>)
 8007732:	462b      	mov	r3, r5
 8007734:	f000 fbca 	bl	8007ecc <fiprintf>
 8007738:	f000 fbda 	bl	8007ef0 <abort>
 800773c:	4b04      	ldr	r3, [pc, #16]	; (8007750 <__assert_func+0x38>)
 800773e:	461c      	mov	r4, r3
 8007740:	e7f3      	b.n	800772a <__assert_func+0x12>
 8007742:	bf00      	nop
 8007744:	20000064 	.word	0x20000064
 8007748:	0800988a 	.word	0x0800988a
 800774c:	08009897 	.word	0x08009897
 8007750:	080098c5 	.word	0x080098c5

08007754 <_calloc_r>:
 8007754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007756:	fba1 2402 	umull	r2, r4, r1, r2
 800775a:	b94c      	cbnz	r4, 8007770 <_calloc_r+0x1c>
 800775c:	4611      	mov	r1, r2
 800775e:	9201      	str	r2, [sp, #4]
 8007760:	f7fe f9b0 	bl	8005ac4 <_malloc_r>
 8007764:	9a01      	ldr	r2, [sp, #4]
 8007766:	4605      	mov	r5, r0
 8007768:	b930      	cbnz	r0, 8007778 <_calloc_r+0x24>
 800776a:	4628      	mov	r0, r5
 800776c:	b003      	add	sp, #12
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	220c      	movs	r2, #12
 8007772:	6002      	str	r2, [r0, #0]
 8007774:	2500      	movs	r5, #0
 8007776:	e7f8      	b.n	800776a <_calloc_r+0x16>
 8007778:	4621      	mov	r1, r4
 800777a:	f7fd fa2e 	bl	8004bda <memset>
 800777e:	e7f4      	b.n	800776a <_calloc_r+0x16>

08007780 <rshift>:
 8007780:	6903      	ldr	r3, [r0, #16]
 8007782:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800778a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800778e:	f100 0414 	add.w	r4, r0, #20
 8007792:	dd45      	ble.n	8007820 <rshift+0xa0>
 8007794:	f011 011f 	ands.w	r1, r1, #31
 8007798:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800779c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077a0:	d10c      	bne.n	80077bc <rshift+0x3c>
 80077a2:	f100 0710 	add.w	r7, r0, #16
 80077a6:	4629      	mov	r1, r5
 80077a8:	42b1      	cmp	r1, r6
 80077aa:	d334      	bcc.n	8007816 <rshift+0x96>
 80077ac:	1a9b      	subs	r3, r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	1eea      	subs	r2, r5, #3
 80077b2:	4296      	cmp	r6, r2
 80077b4:	bf38      	it	cc
 80077b6:	2300      	movcc	r3, #0
 80077b8:	4423      	add	r3, r4
 80077ba:	e015      	b.n	80077e8 <rshift+0x68>
 80077bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077c0:	f1c1 0820 	rsb	r8, r1, #32
 80077c4:	40cf      	lsrs	r7, r1
 80077c6:	f105 0e04 	add.w	lr, r5, #4
 80077ca:	46a1      	mov	r9, r4
 80077cc:	4576      	cmp	r6, lr
 80077ce:	46f4      	mov	ip, lr
 80077d0:	d815      	bhi.n	80077fe <rshift+0x7e>
 80077d2:	1a9a      	subs	r2, r3, r2
 80077d4:	0092      	lsls	r2, r2, #2
 80077d6:	3a04      	subs	r2, #4
 80077d8:	3501      	adds	r5, #1
 80077da:	42ae      	cmp	r6, r5
 80077dc:	bf38      	it	cc
 80077de:	2200      	movcc	r2, #0
 80077e0:	18a3      	adds	r3, r4, r2
 80077e2:	50a7      	str	r7, [r4, r2]
 80077e4:	b107      	cbz	r7, 80077e8 <rshift+0x68>
 80077e6:	3304      	adds	r3, #4
 80077e8:	1b1a      	subs	r2, r3, r4
 80077ea:	42a3      	cmp	r3, r4
 80077ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80077f0:	bf08      	it	eq
 80077f2:	2300      	moveq	r3, #0
 80077f4:	6102      	str	r2, [r0, #16]
 80077f6:	bf08      	it	eq
 80077f8:	6143      	streq	r3, [r0, #20]
 80077fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077fe:	f8dc c000 	ldr.w	ip, [ip]
 8007802:	fa0c fc08 	lsl.w	ip, ip, r8
 8007806:	ea4c 0707 	orr.w	r7, ip, r7
 800780a:	f849 7b04 	str.w	r7, [r9], #4
 800780e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007812:	40cf      	lsrs	r7, r1
 8007814:	e7da      	b.n	80077cc <rshift+0x4c>
 8007816:	f851 cb04 	ldr.w	ip, [r1], #4
 800781a:	f847 cf04 	str.w	ip, [r7, #4]!
 800781e:	e7c3      	b.n	80077a8 <rshift+0x28>
 8007820:	4623      	mov	r3, r4
 8007822:	e7e1      	b.n	80077e8 <rshift+0x68>

08007824 <__hexdig_fun>:
 8007824:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007828:	2b09      	cmp	r3, #9
 800782a:	d802      	bhi.n	8007832 <__hexdig_fun+0xe>
 800782c:	3820      	subs	r0, #32
 800782e:	b2c0      	uxtb	r0, r0
 8007830:	4770      	bx	lr
 8007832:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007836:	2b05      	cmp	r3, #5
 8007838:	d801      	bhi.n	800783e <__hexdig_fun+0x1a>
 800783a:	3847      	subs	r0, #71	; 0x47
 800783c:	e7f7      	b.n	800782e <__hexdig_fun+0xa>
 800783e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007842:	2b05      	cmp	r3, #5
 8007844:	d801      	bhi.n	800784a <__hexdig_fun+0x26>
 8007846:	3827      	subs	r0, #39	; 0x27
 8007848:	e7f1      	b.n	800782e <__hexdig_fun+0xa>
 800784a:	2000      	movs	r0, #0
 800784c:	4770      	bx	lr
	...

08007850 <__gethex>:
 8007850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007854:	4617      	mov	r7, r2
 8007856:	680a      	ldr	r2, [r1, #0]
 8007858:	b085      	sub	sp, #20
 800785a:	f102 0b02 	add.w	fp, r2, #2
 800785e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007862:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007866:	4681      	mov	r9, r0
 8007868:	468a      	mov	sl, r1
 800786a:	9302      	str	r3, [sp, #8]
 800786c:	32fe      	adds	r2, #254	; 0xfe
 800786e:	eb02 030b 	add.w	r3, r2, fp
 8007872:	46d8      	mov	r8, fp
 8007874:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	2830      	cmp	r0, #48	; 0x30
 800787c:	d0f7      	beq.n	800786e <__gethex+0x1e>
 800787e:	f7ff ffd1 	bl	8007824 <__hexdig_fun>
 8007882:	4604      	mov	r4, r0
 8007884:	2800      	cmp	r0, #0
 8007886:	d138      	bne.n	80078fa <__gethex+0xaa>
 8007888:	49a7      	ldr	r1, [pc, #668]	; (8007b28 <__gethex+0x2d8>)
 800788a:	2201      	movs	r2, #1
 800788c:	4640      	mov	r0, r8
 800788e:	f7ff ff09 	bl	80076a4 <strncmp>
 8007892:	4606      	mov	r6, r0
 8007894:	2800      	cmp	r0, #0
 8007896:	d169      	bne.n	800796c <__gethex+0x11c>
 8007898:	f898 0001 	ldrb.w	r0, [r8, #1]
 800789c:	465d      	mov	r5, fp
 800789e:	f7ff ffc1 	bl	8007824 <__hexdig_fun>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d064      	beq.n	8007970 <__gethex+0x120>
 80078a6:	465a      	mov	r2, fp
 80078a8:	7810      	ldrb	r0, [r2, #0]
 80078aa:	2830      	cmp	r0, #48	; 0x30
 80078ac:	4690      	mov	r8, r2
 80078ae:	f102 0201 	add.w	r2, r2, #1
 80078b2:	d0f9      	beq.n	80078a8 <__gethex+0x58>
 80078b4:	f7ff ffb6 	bl	8007824 <__hexdig_fun>
 80078b8:	2301      	movs	r3, #1
 80078ba:	fab0 f480 	clz	r4, r0
 80078be:	0964      	lsrs	r4, r4, #5
 80078c0:	465e      	mov	r6, fp
 80078c2:	9301      	str	r3, [sp, #4]
 80078c4:	4642      	mov	r2, r8
 80078c6:	4615      	mov	r5, r2
 80078c8:	3201      	adds	r2, #1
 80078ca:	7828      	ldrb	r0, [r5, #0]
 80078cc:	f7ff ffaa 	bl	8007824 <__hexdig_fun>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d1f8      	bne.n	80078c6 <__gethex+0x76>
 80078d4:	4994      	ldr	r1, [pc, #592]	; (8007b28 <__gethex+0x2d8>)
 80078d6:	2201      	movs	r2, #1
 80078d8:	4628      	mov	r0, r5
 80078da:	f7ff fee3 	bl	80076a4 <strncmp>
 80078de:	b978      	cbnz	r0, 8007900 <__gethex+0xb0>
 80078e0:	b946      	cbnz	r6, 80078f4 <__gethex+0xa4>
 80078e2:	1c6e      	adds	r6, r5, #1
 80078e4:	4632      	mov	r2, r6
 80078e6:	4615      	mov	r5, r2
 80078e8:	3201      	adds	r2, #1
 80078ea:	7828      	ldrb	r0, [r5, #0]
 80078ec:	f7ff ff9a 	bl	8007824 <__hexdig_fun>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d1f8      	bne.n	80078e6 <__gethex+0x96>
 80078f4:	1b73      	subs	r3, r6, r5
 80078f6:	009e      	lsls	r6, r3, #2
 80078f8:	e004      	b.n	8007904 <__gethex+0xb4>
 80078fa:	2400      	movs	r4, #0
 80078fc:	4626      	mov	r6, r4
 80078fe:	e7e1      	b.n	80078c4 <__gethex+0x74>
 8007900:	2e00      	cmp	r6, #0
 8007902:	d1f7      	bne.n	80078f4 <__gethex+0xa4>
 8007904:	782b      	ldrb	r3, [r5, #0]
 8007906:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800790a:	2b50      	cmp	r3, #80	; 0x50
 800790c:	d13d      	bne.n	800798a <__gethex+0x13a>
 800790e:	786b      	ldrb	r3, [r5, #1]
 8007910:	2b2b      	cmp	r3, #43	; 0x2b
 8007912:	d02f      	beq.n	8007974 <__gethex+0x124>
 8007914:	2b2d      	cmp	r3, #45	; 0x2d
 8007916:	d031      	beq.n	800797c <__gethex+0x12c>
 8007918:	1c69      	adds	r1, r5, #1
 800791a:	f04f 0b00 	mov.w	fp, #0
 800791e:	7808      	ldrb	r0, [r1, #0]
 8007920:	f7ff ff80 	bl	8007824 <__hexdig_fun>
 8007924:	1e42      	subs	r2, r0, #1
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	2a18      	cmp	r2, #24
 800792a:	d82e      	bhi.n	800798a <__gethex+0x13a>
 800792c:	f1a0 0210 	sub.w	r2, r0, #16
 8007930:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007934:	f7ff ff76 	bl	8007824 <__hexdig_fun>
 8007938:	f100 3cff 	add.w	ip, r0, #4294967295
 800793c:	fa5f fc8c 	uxtb.w	ip, ip
 8007940:	f1bc 0f18 	cmp.w	ip, #24
 8007944:	d91d      	bls.n	8007982 <__gethex+0x132>
 8007946:	f1bb 0f00 	cmp.w	fp, #0
 800794a:	d000      	beq.n	800794e <__gethex+0xfe>
 800794c:	4252      	negs	r2, r2
 800794e:	4416      	add	r6, r2
 8007950:	f8ca 1000 	str.w	r1, [sl]
 8007954:	b1dc      	cbz	r4, 800798e <__gethex+0x13e>
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	bf14      	ite	ne
 800795c:	f04f 0800 	movne.w	r8, #0
 8007960:	f04f 0806 	moveq.w	r8, #6
 8007964:	4640      	mov	r0, r8
 8007966:	b005      	add	sp, #20
 8007968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796c:	4645      	mov	r5, r8
 800796e:	4626      	mov	r6, r4
 8007970:	2401      	movs	r4, #1
 8007972:	e7c7      	b.n	8007904 <__gethex+0xb4>
 8007974:	f04f 0b00 	mov.w	fp, #0
 8007978:	1ca9      	adds	r1, r5, #2
 800797a:	e7d0      	b.n	800791e <__gethex+0xce>
 800797c:	f04f 0b01 	mov.w	fp, #1
 8007980:	e7fa      	b.n	8007978 <__gethex+0x128>
 8007982:	230a      	movs	r3, #10
 8007984:	fb03 0002 	mla	r0, r3, r2, r0
 8007988:	e7d0      	b.n	800792c <__gethex+0xdc>
 800798a:	4629      	mov	r1, r5
 800798c:	e7e0      	b.n	8007950 <__gethex+0x100>
 800798e:	eba5 0308 	sub.w	r3, r5, r8
 8007992:	3b01      	subs	r3, #1
 8007994:	4621      	mov	r1, r4
 8007996:	2b07      	cmp	r3, #7
 8007998:	dc0a      	bgt.n	80079b0 <__gethex+0x160>
 800799a:	4648      	mov	r0, r9
 800799c:	f7fe f91e 	bl	8005bdc <_Balloc>
 80079a0:	4604      	mov	r4, r0
 80079a2:	b940      	cbnz	r0, 80079b6 <__gethex+0x166>
 80079a4:	4b61      	ldr	r3, [pc, #388]	; (8007b2c <__gethex+0x2dc>)
 80079a6:	4602      	mov	r2, r0
 80079a8:	21e4      	movs	r1, #228	; 0xe4
 80079aa:	4861      	ldr	r0, [pc, #388]	; (8007b30 <__gethex+0x2e0>)
 80079ac:	f7ff feb4 	bl	8007718 <__assert_func>
 80079b0:	3101      	adds	r1, #1
 80079b2:	105b      	asrs	r3, r3, #1
 80079b4:	e7ef      	b.n	8007996 <__gethex+0x146>
 80079b6:	f100 0a14 	add.w	sl, r0, #20
 80079ba:	2300      	movs	r3, #0
 80079bc:	495a      	ldr	r1, [pc, #360]	; (8007b28 <__gethex+0x2d8>)
 80079be:	f8cd a004 	str.w	sl, [sp, #4]
 80079c2:	469b      	mov	fp, r3
 80079c4:	45a8      	cmp	r8, r5
 80079c6:	d342      	bcc.n	8007a4e <__gethex+0x1fe>
 80079c8:	9801      	ldr	r0, [sp, #4]
 80079ca:	f840 bb04 	str.w	fp, [r0], #4
 80079ce:	eba0 000a 	sub.w	r0, r0, sl
 80079d2:	1080      	asrs	r0, r0, #2
 80079d4:	6120      	str	r0, [r4, #16]
 80079d6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80079da:	4658      	mov	r0, fp
 80079dc:	f7fe f9f0 	bl	8005dc0 <__hi0bits>
 80079e0:	683d      	ldr	r5, [r7, #0]
 80079e2:	eba8 0000 	sub.w	r0, r8, r0
 80079e6:	42a8      	cmp	r0, r5
 80079e8:	dd59      	ble.n	8007a9e <__gethex+0x24e>
 80079ea:	eba0 0805 	sub.w	r8, r0, r5
 80079ee:	4641      	mov	r1, r8
 80079f0:	4620      	mov	r0, r4
 80079f2:	f7fe fd7f 	bl	80064f4 <__any_on>
 80079f6:	4683      	mov	fp, r0
 80079f8:	b1b8      	cbz	r0, 8007a2a <__gethex+0x1da>
 80079fa:	f108 33ff 	add.w	r3, r8, #4294967295
 80079fe:	1159      	asrs	r1, r3, #5
 8007a00:	f003 021f 	and.w	r2, r3, #31
 8007a04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007a08:	f04f 0b01 	mov.w	fp, #1
 8007a0c:	fa0b f202 	lsl.w	r2, fp, r2
 8007a10:	420a      	tst	r2, r1
 8007a12:	d00a      	beq.n	8007a2a <__gethex+0x1da>
 8007a14:	455b      	cmp	r3, fp
 8007a16:	dd06      	ble.n	8007a26 <__gethex+0x1d6>
 8007a18:	f1a8 0102 	sub.w	r1, r8, #2
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f7fe fd69 	bl	80064f4 <__any_on>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	d138      	bne.n	8007a98 <__gethex+0x248>
 8007a26:	f04f 0b02 	mov.w	fp, #2
 8007a2a:	4641      	mov	r1, r8
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f7ff fea7 	bl	8007780 <rshift>
 8007a32:	4446      	add	r6, r8
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	42b3      	cmp	r3, r6
 8007a38:	da41      	bge.n	8007abe <__gethex+0x26e>
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4648      	mov	r0, r9
 8007a3e:	f7fe f90d 	bl	8005c5c <_Bfree>
 8007a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a44:	2300      	movs	r3, #0
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007a4c:	e78a      	b.n	8007964 <__gethex+0x114>
 8007a4e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007a52:	2a2e      	cmp	r2, #46	; 0x2e
 8007a54:	d014      	beq.n	8007a80 <__gethex+0x230>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d106      	bne.n	8007a68 <__gethex+0x218>
 8007a5a:	9b01      	ldr	r3, [sp, #4]
 8007a5c:	f843 bb04 	str.w	fp, [r3], #4
 8007a60:	f04f 0b00 	mov.w	fp, #0
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	465b      	mov	r3, fp
 8007a68:	7828      	ldrb	r0, [r5, #0]
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	f7ff feda 	bl	8007824 <__hexdig_fun>
 8007a70:	9b03      	ldr	r3, [sp, #12]
 8007a72:	f000 000f 	and.w	r0, r0, #15
 8007a76:	4098      	lsls	r0, r3
 8007a78:	ea4b 0b00 	orr.w	fp, fp, r0
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	e7a1      	b.n	80079c4 <__gethex+0x174>
 8007a80:	45a8      	cmp	r8, r5
 8007a82:	d8e8      	bhi.n	8007a56 <__gethex+0x206>
 8007a84:	2201      	movs	r2, #1
 8007a86:	4628      	mov	r0, r5
 8007a88:	9303      	str	r3, [sp, #12]
 8007a8a:	f7ff fe0b 	bl	80076a4 <strncmp>
 8007a8e:	4926      	ldr	r1, [pc, #152]	; (8007b28 <__gethex+0x2d8>)
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d1df      	bne.n	8007a56 <__gethex+0x206>
 8007a96:	e795      	b.n	80079c4 <__gethex+0x174>
 8007a98:	f04f 0b03 	mov.w	fp, #3
 8007a9c:	e7c5      	b.n	8007a2a <__gethex+0x1da>
 8007a9e:	da0b      	bge.n	8007ab8 <__gethex+0x268>
 8007aa0:	eba5 0800 	sub.w	r8, r5, r0
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4642      	mov	r2, r8
 8007aa8:	4648      	mov	r0, r9
 8007aaa:	f7fe faf1 	bl	8006090 <__lshift>
 8007aae:	eba6 0608 	sub.w	r6, r6, r8
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	f100 0a14 	add.w	sl, r0, #20
 8007ab8:	f04f 0b00 	mov.w	fp, #0
 8007abc:	e7ba      	b.n	8007a34 <__gethex+0x1e4>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	42b3      	cmp	r3, r6
 8007ac2:	dd73      	ble.n	8007bac <__gethex+0x35c>
 8007ac4:	1b9e      	subs	r6, r3, r6
 8007ac6:	42b5      	cmp	r5, r6
 8007ac8:	dc34      	bgt.n	8007b34 <__gethex+0x2e4>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d023      	beq.n	8007b18 <__gethex+0x2c8>
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d025      	beq.n	8007b20 <__gethex+0x2d0>
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d115      	bne.n	8007b04 <__gethex+0x2b4>
 8007ad8:	42b5      	cmp	r5, r6
 8007ada:	d113      	bne.n	8007b04 <__gethex+0x2b4>
 8007adc:	2d01      	cmp	r5, #1
 8007ade:	d10b      	bne.n	8007af8 <__gethex+0x2a8>
 8007ae0:	9a02      	ldr	r2, [sp, #8]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	f8ca 3000 	str.w	r3, [sl]
 8007aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007af4:	601c      	str	r4, [r3, #0]
 8007af6:	e735      	b.n	8007964 <__gethex+0x114>
 8007af8:	1e69      	subs	r1, r5, #1
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7fe fcfa 	bl	80064f4 <__any_on>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d1ed      	bne.n	8007ae0 <__gethex+0x290>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4648      	mov	r0, r9
 8007b08:	f7fe f8a8 	bl	8005c5c <_Bfree>
 8007b0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007b16:	e725      	b.n	8007964 <__gethex+0x114>
 8007b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f2      	bne.n	8007b04 <__gethex+0x2b4>
 8007b1e:	e7df      	b.n	8007ae0 <__gethex+0x290>
 8007b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1dc      	bne.n	8007ae0 <__gethex+0x290>
 8007b26:	e7ed      	b.n	8007b04 <__gethex+0x2b4>
 8007b28:	0800971c 	.word	0x0800971c
 8007b2c:	080095b5 	.word	0x080095b5
 8007b30:	080098c6 	.word	0x080098c6
 8007b34:	f106 38ff 	add.w	r8, r6, #4294967295
 8007b38:	f1bb 0f00 	cmp.w	fp, #0
 8007b3c:	d133      	bne.n	8007ba6 <__gethex+0x356>
 8007b3e:	f1b8 0f00 	cmp.w	r8, #0
 8007b42:	d004      	beq.n	8007b4e <__gethex+0x2fe>
 8007b44:	4641      	mov	r1, r8
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7fe fcd4 	bl	80064f4 <__any_on>
 8007b4c:	4683      	mov	fp, r0
 8007b4e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007b52:	2301      	movs	r3, #1
 8007b54:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007b58:	f008 081f 	and.w	r8, r8, #31
 8007b5c:	fa03 f308 	lsl.w	r3, r3, r8
 8007b60:	4213      	tst	r3, r2
 8007b62:	4631      	mov	r1, r6
 8007b64:	4620      	mov	r0, r4
 8007b66:	bf18      	it	ne
 8007b68:	f04b 0b02 	orrne.w	fp, fp, #2
 8007b6c:	1bad      	subs	r5, r5, r6
 8007b6e:	f7ff fe07 	bl	8007780 <rshift>
 8007b72:	687e      	ldr	r6, [r7, #4]
 8007b74:	f04f 0802 	mov.w	r8, #2
 8007b78:	f1bb 0f00 	cmp.w	fp, #0
 8007b7c:	d04a      	beq.n	8007c14 <__gethex+0x3c4>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d016      	beq.n	8007bb2 <__gethex+0x362>
 8007b84:	2b03      	cmp	r3, #3
 8007b86:	d018      	beq.n	8007bba <__gethex+0x36a>
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d109      	bne.n	8007ba0 <__gethex+0x350>
 8007b8c:	f01b 0f02 	tst.w	fp, #2
 8007b90:	d006      	beq.n	8007ba0 <__gethex+0x350>
 8007b92:	f8da 3000 	ldr.w	r3, [sl]
 8007b96:	ea4b 0b03 	orr.w	fp, fp, r3
 8007b9a:	f01b 0f01 	tst.w	fp, #1
 8007b9e:	d10f      	bne.n	8007bc0 <__gethex+0x370>
 8007ba0:	f048 0810 	orr.w	r8, r8, #16
 8007ba4:	e036      	b.n	8007c14 <__gethex+0x3c4>
 8007ba6:	f04f 0b01 	mov.w	fp, #1
 8007baa:	e7d0      	b.n	8007b4e <__gethex+0x2fe>
 8007bac:	f04f 0801 	mov.w	r8, #1
 8007bb0:	e7e2      	b.n	8007b78 <__gethex+0x328>
 8007bb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bb4:	f1c3 0301 	rsb	r3, r3, #1
 8007bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0ef      	beq.n	8007ba0 <__gethex+0x350>
 8007bc0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007bc4:	f104 0214 	add.w	r2, r4, #20
 8007bc8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4694      	mov	ip, r2
 8007bd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8007bda:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007bde:	d01e      	beq.n	8007c1e <__gethex+0x3ce>
 8007be0:	3101      	adds	r1, #1
 8007be2:	f8cc 1000 	str.w	r1, [ip]
 8007be6:	f1b8 0f02 	cmp.w	r8, #2
 8007bea:	f104 0214 	add.w	r2, r4, #20
 8007bee:	d13d      	bne.n	8007c6c <__gethex+0x41c>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	42ab      	cmp	r3, r5
 8007bf6:	d10b      	bne.n	8007c10 <__gethex+0x3c0>
 8007bf8:	1169      	asrs	r1, r5, #5
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f005 051f 	and.w	r5, r5, #31
 8007c00:	fa03 f505 	lsl.w	r5, r3, r5
 8007c04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c08:	421d      	tst	r5, r3
 8007c0a:	bf18      	it	ne
 8007c0c:	f04f 0801 	movne.w	r8, #1
 8007c10:	f048 0820 	orr.w	r8, r8, #32
 8007c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c16:	601c      	str	r4, [r3, #0]
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	601e      	str	r6, [r3, #0]
 8007c1c:	e6a2      	b.n	8007964 <__gethex+0x114>
 8007c1e:	4290      	cmp	r0, r2
 8007c20:	f842 3c04 	str.w	r3, [r2, #-4]
 8007c24:	d8d6      	bhi.n	8007bd4 <__gethex+0x384>
 8007c26:	68a2      	ldr	r2, [r4, #8]
 8007c28:	4593      	cmp	fp, r2
 8007c2a:	db17      	blt.n	8007c5c <__gethex+0x40c>
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	4648      	mov	r0, r9
 8007c30:	3101      	adds	r1, #1
 8007c32:	f7fd ffd3 	bl	8005bdc <_Balloc>
 8007c36:	4682      	mov	sl, r0
 8007c38:	b918      	cbnz	r0, 8007c42 <__gethex+0x3f2>
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <__gethex+0x458>)
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	2184      	movs	r1, #132	; 0x84
 8007c40:	e6b3      	b.n	80079aa <__gethex+0x15a>
 8007c42:	6922      	ldr	r2, [r4, #16]
 8007c44:	3202      	adds	r2, #2
 8007c46:	f104 010c 	add.w	r1, r4, #12
 8007c4a:	0092      	lsls	r2, r2, #2
 8007c4c:	300c      	adds	r0, #12
 8007c4e:	f7ff fd4b 	bl	80076e8 <memcpy>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4648      	mov	r0, r9
 8007c56:	f7fe f801 	bl	8005c5c <_Bfree>
 8007c5a:	4654      	mov	r4, sl
 8007c5c:	6922      	ldr	r2, [r4, #16]
 8007c5e:	1c51      	adds	r1, r2, #1
 8007c60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007c64:	6121      	str	r1, [r4, #16]
 8007c66:	2101      	movs	r1, #1
 8007c68:	6151      	str	r1, [r2, #20]
 8007c6a:	e7bc      	b.n	8007be6 <__gethex+0x396>
 8007c6c:	6921      	ldr	r1, [r4, #16]
 8007c6e:	4559      	cmp	r1, fp
 8007c70:	dd0b      	ble.n	8007c8a <__gethex+0x43a>
 8007c72:	2101      	movs	r1, #1
 8007c74:	4620      	mov	r0, r4
 8007c76:	f7ff fd83 	bl	8007780 <rshift>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	42b3      	cmp	r3, r6
 8007c80:	f6ff aedb 	blt.w	8007a3a <__gethex+0x1ea>
 8007c84:	f04f 0801 	mov.w	r8, #1
 8007c88:	e7c2      	b.n	8007c10 <__gethex+0x3c0>
 8007c8a:	f015 051f 	ands.w	r5, r5, #31
 8007c8e:	d0f9      	beq.n	8007c84 <__gethex+0x434>
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	441a      	add	r2, r3
 8007c94:	f1c5 0520 	rsb	r5, r5, #32
 8007c98:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007c9c:	f7fe f890 	bl	8005dc0 <__hi0bits>
 8007ca0:	42a8      	cmp	r0, r5
 8007ca2:	dbe6      	blt.n	8007c72 <__gethex+0x422>
 8007ca4:	e7ee      	b.n	8007c84 <__gethex+0x434>
 8007ca6:	bf00      	nop
 8007ca8:	080095b5 	.word	0x080095b5

08007cac <L_shift>:
 8007cac:	f1c2 0208 	rsb	r2, r2, #8
 8007cb0:	0092      	lsls	r2, r2, #2
 8007cb2:	b570      	push	{r4, r5, r6, lr}
 8007cb4:	f1c2 0620 	rsb	r6, r2, #32
 8007cb8:	6843      	ldr	r3, [r0, #4]
 8007cba:	6804      	ldr	r4, [r0, #0]
 8007cbc:	fa03 f506 	lsl.w	r5, r3, r6
 8007cc0:	432c      	orrs	r4, r5
 8007cc2:	40d3      	lsrs	r3, r2
 8007cc4:	6004      	str	r4, [r0, #0]
 8007cc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007cca:	4288      	cmp	r0, r1
 8007ccc:	d3f4      	bcc.n	8007cb8 <L_shift+0xc>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}

08007cd0 <__match>:
 8007cd0:	b530      	push	{r4, r5, lr}
 8007cd2:	6803      	ldr	r3, [r0, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cda:	b914      	cbnz	r4, 8007ce2 <__match+0x12>
 8007cdc:	6003      	str	r3, [r0, #0]
 8007cde:	2001      	movs	r0, #1
 8007ce0:	bd30      	pop	{r4, r5, pc}
 8007ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ce6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007cea:	2d19      	cmp	r5, #25
 8007cec:	bf98      	it	ls
 8007cee:	3220      	addls	r2, #32
 8007cf0:	42a2      	cmp	r2, r4
 8007cf2:	d0f0      	beq.n	8007cd6 <__match+0x6>
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	e7f3      	b.n	8007ce0 <__match+0x10>

08007cf8 <__hexnan>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	680b      	ldr	r3, [r1, #0]
 8007cfe:	6801      	ldr	r1, [r0, #0]
 8007d00:	115e      	asrs	r6, r3, #5
 8007d02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d06:	f013 031f 	ands.w	r3, r3, #31
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	bf18      	it	ne
 8007d0e:	3604      	addne	r6, #4
 8007d10:	2500      	movs	r5, #0
 8007d12:	1f37      	subs	r7, r6, #4
 8007d14:	4682      	mov	sl, r0
 8007d16:	4690      	mov	r8, r2
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d1e:	46b9      	mov	r9, r7
 8007d20:	463c      	mov	r4, r7
 8007d22:	9502      	str	r5, [sp, #8]
 8007d24:	46ab      	mov	fp, r5
 8007d26:	784a      	ldrb	r2, [r1, #1]
 8007d28:	1c4b      	adds	r3, r1, #1
 8007d2a:	9303      	str	r3, [sp, #12]
 8007d2c:	b342      	cbz	r2, 8007d80 <__hexnan+0x88>
 8007d2e:	4610      	mov	r0, r2
 8007d30:	9105      	str	r1, [sp, #20]
 8007d32:	9204      	str	r2, [sp, #16]
 8007d34:	f7ff fd76 	bl	8007824 <__hexdig_fun>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d14f      	bne.n	8007ddc <__hexnan+0xe4>
 8007d3c:	9a04      	ldr	r2, [sp, #16]
 8007d3e:	9905      	ldr	r1, [sp, #20]
 8007d40:	2a20      	cmp	r2, #32
 8007d42:	d818      	bhi.n	8007d76 <__hexnan+0x7e>
 8007d44:	9b02      	ldr	r3, [sp, #8]
 8007d46:	459b      	cmp	fp, r3
 8007d48:	dd13      	ble.n	8007d72 <__hexnan+0x7a>
 8007d4a:	454c      	cmp	r4, r9
 8007d4c:	d206      	bcs.n	8007d5c <__hexnan+0x64>
 8007d4e:	2d07      	cmp	r5, #7
 8007d50:	dc04      	bgt.n	8007d5c <__hexnan+0x64>
 8007d52:	462a      	mov	r2, r5
 8007d54:	4649      	mov	r1, r9
 8007d56:	4620      	mov	r0, r4
 8007d58:	f7ff ffa8 	bl	8007cac <L_shift>
 8007d5c:	4544      	cmp	r4, r8
 8007d5e:	d950      	bls.n	8007e02 <__hexnan+0x10a>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f1a4 0904 	sub.w	r9, r4, #4
 8007d66:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d6a:	f8cd b008 	str.w	fp, [sp, #8]
 8007d6e:	464c      	mov	r4, r9
 8007d70:	461d      	mov	r5, r3
 8007d72:	9903      	ldr	r1, [sp, #12]
 8007d74:	e7d7      	b.n	8007d26 <__hexnan+0x2e>
 8007d76:	2a29      	cmp	r2, #41	; 0x29
 8007d78:	d155      	bne.n	8007e26 <__hexnan+0x12e>
 8007d7a:	3102      	adds	r1, #2
 8007d7c:	f8ca 1000 	str.w	r1, [sl]
 8007d80:	f1bb 0f00 	cmp.w	fp, #0
 8007d84:	d04f      	beq.n	8007e26 <__hexnan+0x12e>
 8007d86:	454c      	cmp	r4, r9
 8007d88:	d206      	bcs.n	8007d98 <__hexnan+0xa0>
 8007d8a:	2d07      	cmp	r5, #7
 8007d8c:	dc04      	bgt.n	8007d98 <__hexnan+0xa0>
 8007d8e:	462a      	mov	r2, r5
 8007d90:	4649      	mov	r1, r9
 8007d92:	4620      	mov	r0, r4
 8007d94:	f7ff ff8a 	bl	8007cac <L_shift>
 8007d98:	4544      	cmp	r4, r8
 8007d9a:	d934      	bls.n	8007e06 <__hexnan+0x10e>
 8007d9c:	f1a8 0204 	sub.w	r2, r8, #4
 8007da0:	4623      	mov	r3, r4
 8007da2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007da6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007daa:	429f      	cmp	r7, r3
 8007dac:	d2f9      	bcs.n	8007da2 <__hexnan+0xaa>
 8007dae:	1b3b      	subs	r3, r7, r4
 8007db0:	f023 0303 	bic.w	r3, r3, #3
 8007db4:	3304      	adds	r3, #4
 8007db6:	3e03      	subs	r6, #3
 8007db8:	3401      	adds	r4, #1
 8007dba:	42a6      	cmp	r6, r4
 8007dbc:	bf38      	it	cc
 8007dbe:	2304      	movcc	r3, #4
 8007dc0:	4443      	add	r3, r8
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f843 2b04 	str.w	r2, [r3], #4
 8007dc8:	429f      	cmp	r7, r3
 8007dca:	d2fb      	bcs.n	8007dc4 <__hexnan+0xcc>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	b91b      	cbnz	r3, 8007dd8 <__hexnan+0xe0>
 8007dd0:	4547      	cmp	r7, r8
 8007dd2:	d126      	bne.n	8007e22 <__hexnan+0x12a>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	2005      	movs	r0, #5
 8007dda:	e025      	b.n	8007e28 <__hexnan+0x130>
 8007ddc:	3501      	adds	r5, #1
 8007dde:	2d08      	cmp	r5, #8
 8007de0:	f10b 0b01 	add.w	fp, fp, #1
 8007de4:	dd06      	ble.n	8007df4 <__hexnan+0xfc>
 8007de6:	4544      	cmp	r4, r8
 8007de8:	d9c3      	bls.n	8007d72 <__hexnan+0x7a>
 8007dea:	2300      	movs	r3, #0
 8007dec:	f844 3c04 	str.w	r3, [r4, #-4]
 8007df0:	2501      	movs	r5, #1
 8007df2:	3c04      	subs	r4, #4
 8007df4:	6822      	ldr	r2, [r4, #0]
 8007df6:	f000 000f 	and.w	r0, r0, #15
 8007dfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007dfe:	6020      	str	r0, [r4, #0]
 8007e00:	e7b7      	b.n	8007d72 <__hexnan+0x7a>
 8007e02:	2508      	movs	r5, #8
 8007e04:	e7b5      	b.n	8007d72 <__hexnan+0x7a>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0df      	beq.n	8007dcc <__hexnan+0xd4>
 8007e0c:	f1c3 0320 	rsb	r3, r3, #32
 8007e10:	f04f 32ff 	mov.w	r2, #4294967295
 8007e14:	40da      	lsrs	r2, r3
 8007e16:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	f846 3c04 	str.w	r3, [r6, #-4]
 8007e20:	e7d4      	b.n	8007dcc <__hexnan+0xd4>
 8007e22:	3f04      	subs	r7, #4
 8007e24:	e7d2      	b.n	8007dcc <__hexnan+0xd4>
 8007e26:	2004      	movs	r0, #4
 8007e28:	b007      	add	sp, #28
 8007e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e2e <__ascii_mbtowc>:
 8007e2e:	b082      	sub	sp, #8
 8007e30:	b901      	cbnz	r1, 8007e34 <__ascii_mbtowc+0x6>
 8007e32:	a901      	add	r1, sp, #4
 8007e34:	b142      	cbz	r2, 8007e48 <__ascii_mbtowc+0x1a>
 8007e36:	b14b      	cbz	r3, 8007e4c <__ascii_mbtowc+0x1e>
 8007e38:	7813      	ldrb	r3, [r2, #0]
 8007e3a:	600b      	str	r3, [r1, #0]
 8007e3c:	7812      	ldrb	r2, [r2, #0]
 8007e3e:	1e10      	subs	r0, r2, #0
 8007e40:	bf18      	it	ne
 8007e42:	2001      	movne	r0, #1
 8007e44:	b002      	add	sp, #8
 8007e46:	4770      	bx	lr
 8007e48:	4610      	mov	r0, r2
 8007e4a:	e7fb      	b.n	8007e44 <__ascii_mbtowc+0x16>
 8007e4c:	f06f 0001 	mvn.w	r0, #1
 8007e50:	e7f8      	b.n	8007e44 <__ascii_mbtowc+0x16>

08007e52 <_realloc_r>:
 8007e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	4680      	mov	r8, r0
 8007e58:	4614      	mov	r4, r2
 8007e5a:	460e      	mov	r6, r1
 8007e5c:	b921      	cbnz	r1, 8007e68 <_realloc_r+0x16>
 8007e5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e62:	4611      	mov	r1, r2
 8007e64:	f7fd be2e 	b.w	8005ac4 <_malloc_r>
 8007e68:	b92a      	cbnz	r2, 8007e76 <_realloc_r+0x24>
 8007e6a:	f7fd fdb7 	bl	80059dc <_free_r>
 8007e6e:	4625      	mov	r5, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e76:	f000 f842 	bl	8007efe <_malloc_usable_size_r>
 8007e7a:	4284      	cmp	r4, r0
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	d802      	bhi.n	8007e86 <_realloc_r+0x34>
 8007e80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e84:	d812      	bhi.n	8007eac <_realloc_r+0x5a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4640      	mov	r0, r8
 8007e8a:	f7fd fe1b 	bl	8005ac4 <_malloc_r>
 8007e8e:	4605      	mov	r5, r0
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d0ed      	beq.n	8007e70 <_realloc_r+0x1e>
 8007e94:	42bc      	cmp	r4, r7
 8007e96:	4622      	mov	r2, r4
 8007e98:	4631      	mov	r1, r6
 8007e9a:	bf28      	it	cs
 8007e9c:	463a      	movcs	r2, r7
 8007e9e:	f7ff fc23 	bl	80076e8 <memcpy>
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	f7fd fd99 	bl	80059dc <_free_r>
 8007eaa:	e7e1      	b.n	8007e70 <_realloc_r+0x1e>
 8007eac:	4635      	mov	r5, r6
 8007eae:	e7df      	b.n	8007e70 <_realloc_r+0x1e>

08007eb0 <__ascii_wctomb>:
 8007eb0:	b149      	cbz	r1, 8007ec6 <__ascii_wctomb+0x16>
 8007eb2:	2aff      	cmp	r2, #255	; 0xff
 8007eb4:	bf85      	ittet	hi
 8007eb6:	238a      	movhi	r3, #138	; 0x8a
 8007eb8:	6003      	strhi	r3, [r0, #0]
 8007eba:	700a      	strbls	r2, [r1, #0]
 8007ebc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ec0:	bf98      	it	ls
 8007ec2:	2001      	movls	r0, #1
 8007ec4:	4770      	bx	lr
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4770      	bx	lr
	...

08007ecc <fiprintf>:
 8007ecc:	b40e      	push	{r1, r2, r3}
 8007ece:	b503      	push	{r0, r1, lr}
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	ab03      	add	r3, sp, #12
 8007ed4:	4805      	ldr	r0, [pc, #20]	; (8007eec <fiprintf+0x20>)
 8007ed6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eda:	6800      	ldr	r0, [r0, #0]
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	f000 f83f 	bl	8007f60 <_vfiprintf_r>
 8007ee2:	b002      	add	sp, #8
 8007ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee8:	b003      	add	sp, #12
 8007eea:	4770      	bx	lr
 8007eec:	20000064 	.word	0x20000064

08007ef0 <abort>:
 8007ef0:	b508      	push	{r3, lr}
 8007ef2:	2006      	movs	r0, #6
 8007ef4:	f000 fa0c 	bl	8008310 <raise>
 8007ef8:	2001      	movs	r0, #1
 8007efa:	f7f9 fbcb 	bl	8001694 <_exit>

08007efe <_malloc_usable_size_r>:
 8007efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f02:	1f18      	subs	r0, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bfbc      	itt	lt
 8007f08:	580b      	ldrlt	r3, [r1, r0]
 8007f0a:	18c0      	addlt	r0, r0, r3
 8007f0c:	4770      	bx	lr

08007f0e <__sfputc_r>:
 8007f0e:	6893      	ldr	r3, [r2, #8]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	b410      	push	{r4}
 8007f16:	6093      	str	r3, [r2, #8]
 8007f18:	da08      	bge.n	8007f2c <__sfputc_r+0x1e>
 8007f1a:	6994      	ldr	r4, [r2, #24]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	db01      	blt.n	8007f24 <__sfputc_r+0x16>
 8007f20:	290a      	cmp	r1, #10
 8007f22:	d103      	bne.n	8007f2c <__sfputc_r+0x1e>
 8007f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f28:	f000 b934 	b.w	8008194 <__swbuf_r>
 8007f2c:	6813      	ldr	r3, [r2, #0]
 8007f2e:	1c58      	adds	r0, r3, #1
 8007f30:	6010      	str	r0, [r2, #0]
 8007f32:	7019      	strb	r1, [r3, #0]
 8007f34:	4608      	mov	r0, r1
 8007f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <__sfputs_r>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460f      	mov	r7, r1
 8007f42:	4614      	mov	r4, r2
 8007f44:	18d5      	adds	r5, r2, r3
 8007f46:	42ac      	cmp	r4, r5
 8007f48:	d101      	bne.n	8007f4e <__sfputs_r+0x12>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e007      	b.n	8007f5e <__sfputs_r+0x22>
 8007f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f52:	463a      	mov	r2, r7
 8007f54:	4630      	mov	r0, r6
 8007f56:	f7ff ffda 	bl	8007f0e <__sfputc_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d1f3      	bne.n	8007f46 <__sfputs_r+0xa>
 8007f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f60 <_vfiprintf_r>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	460d      	mov	r5, r1
 8007f66:	b09d      	sub	sp, #116	; 0x74
 8007f68:	4614      	mov	r4, r2
 8007f6a:	4698      	mov	r8, r3
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	b118      	cbz	r0, 8007f78 <_vfiprintf_r+0x18>
 8007f70:	6a03      	ldr	r3, [r0, #32]
 8007f72:	b90b      	cbnz	r3, 8007f78 <_vfiprintf_r+0x18>
 8007f74:	f7fc fd98 	bl	8004aa8 <__sinit>
 8007f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f7a:	07d9      	lsls	r1, r3, #31
 8007f7c:	d405      	bmi.n	8007f8a <_vfiprintf_r+0x2a>
 8007f7e:	89ab      	ldrh	r3, [r5, #12]
 8007f80:	059a      	lsls	r2, r3, #22
 8007f82:	d402      	bmi.n	8007f8a <_vfiprintf_r+0x2a>
 8007f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f86:	f7fc fea5 	bl	8004cd4 <__retarget_lock_acquire_recursive>
 8007f8a:	89ab      	ldrh	r3, [r5, #12]
 8007f8c:	071b      	lsls	r3, r3, #28
 8007f8e:	d501      	bpl.n	8007f94 <_vfiprintf_r+0x34>
 8007f90:	692b      	ldr	r3, [r5, #16]
 8007f92:	b99b      	cbnz	r3, 8007fbc <_vfiprintf_r+0x5c>
 8007f94:	4629      	mov	r1, r5
 8007f96:	4630      	mov	r0, r6
 8007f98:	f000 f93a 	bl	8008210 <__swsetup_r>
 8007f9c:	b170      	cbz	r0, 8007fbc <_vfiprintf_r+0x5c>
 8007f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa0:	07dc      	lsls	r4, r3, #31
 8007fa2:	d504      	bpl.n	8007fae <_vfiprintf_r+0x4e>
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	b01d      	add	sp, #116	; 0x74
 8007faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fae:	89ab      	ldrh	r3, [r5, #12]
 8007fb0:	0598      	lsls	r0, r3, #22
 8007fb2:	d4f7      	bmi.n	8007fa4 <_vfiprintf_r+0x44>
 8007fb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb6:	f7fc fe8e 	bl	8004cd6 <__retarget_lock_release_recursive>
 8007fba:	e7f3      	b.n	8007fa4 <_vfiprintf_r+0x44>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fca:	2330      	movs	r3, #48	; 0x30
 8007fcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008180 <_vfiprintf_r+0x220>
 8007fd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fd4:	f04f 0901 	mov.w	r9, #1
 8007fd8:	4623      	mov	r3, r4
 8007fda:	469a      	mov	sl, r3
 8007fdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe0:	b10a      	cbz	r2, 8007fe6 <_vfiprintf_r+0x86>
 8007fe2:	2a25      	cmp	r2, #37	; 0x25
 8007fe4:	d1f9      	bne.n	8007fda <_vfiprintf_r+0x7a>
 8007fe6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fea:	d00b      	beq.n	8008004 <_vfiprintf_r+0xa4>
 8007fec:	465b      	mov	r3, fp
 8007fee:	4622      	mov	r2, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ffa2 	bl	8007f3c <__sfputs_r>
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f000 80a9 	beq.w	8008150 <_vfiprintf_r+0x1f0>
 8007ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008000:	445a      	add	r2, fp
 8008002:	9209      	str	r2, [sp, #36]	; 0x24
 8008004:	f89a 3000 	ldrb.w	r3, [sl]
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80a1 	beq.w	8008150 <_vfiprintf_r+0x1f0>
 800800e:	2300      	movs	r3, #0
 8008010:	f04f 32ff 	mov.w	r2, #4294967295
 8008014:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008018:	f10a 0a01 	add.w	sl, sl, #1
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	9307      	str	r3, [sp, #28]
 8008020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008024:	931a      	str	r3, [sp, #104]	; 0x68
 8008026:	4654      	mov	r4, sl
 8008028:	2205      	movs	r2, #5
 800802a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802e:	4854      	ldr	r0, [pc, #336]	; (8008180 <_vfiprintf_r+0x220>)
 8008030:	f7f8 f8ce 	bl	80001d0 <memchr>
 8008034:	9a04      	ldr	r2, [sp, #16]
 8008036:	b9d8      	cbnz	r0, 8008070 <_vfiprintf_r+0x110>
 8008038:	06d1      	lsls	r1, r2, #27
 800803a:	bf44      	itt	mi
 800803c:	2320      	movmi	r3, #32
 800803e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008042:	0713      	lsls	r3, r2, #28
 8008044:	bf44      	itt	mi
 8008046:	232b      	movmi	r3, #43	; 0x2b
 8008048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804c:	f89a 3000 	ldrb.w	r3, [sl]
 8008050:	2b2a      	cmp	r3, #42	; 0x2a
 8008052:	d015      	beq.n	8008080 <_vfiprintf_r+0x120>
 8008054:	9a07      	ldr	r2, [sp, #28]
 8008056:	4654      	mov	r4, sl
 8008058:	2000      	movs	r0, #0
 800805a:	f04f 0c0a 	mov.w	ip, #10
 800805e:	4621      	mov	r1, r4
 8008060:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008064:	3b30      	subs	r3, #48	; 0x30
 8008066:	2b09      	cmp	r3, #9
 8008068:	d94d      	bls.n	8008106 <_vfiprintf_r+0x1a6>
 800806a:	b1b0      	cbz	r0, 800809a <_vfiprintf_r+0x13a>
 800806c:	9207      	str	r2, [sp, #28]
 800806e:	e014      	b.n	800809a <_vfiprintf_r+0x13a>
 8008070:	eba0 0308 	sub.w	r3, r0, r8
 8008074:	fa09 f303 	lsl.w	r3, r9, r3
 8008078:	4313      	orrs	r3, r2
 800807a:	9304      	str	r3, [sp, #16]
 800807c:	46a2      	mov	sl, r4
 800807e:	e7d2      	b.n	8008026 <_vfiprintf_r+0xc6>
 8008080:	9b03      	ldr	r3, [sp, #12]
 8008082:	1d19      	adds	r1, r3, #4
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	9103      	str	r1, [sp, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	bfbb      	ittet	lt
 800808c:	425b      	neglt	r3, r3
 800808e:	f042 0202 	orrlt.w	r2, r2, #2
 8008092:	9307      	strge	r3, [sp, #28]
 8008094:	9307      	strlt	r3, [sp, #28]
 8008096:	bfb8      	it	lt
 8008098:	9204      	strlt	r2, [sp, #16]
 800809a:	7823      	ldrb	r3, [r4, #0]
 800809c:	2b2e      	cmp	r3, #46	; 0x2e
 800809e:	d10c      	bne.n	80080ba <_vfiprintf_r+0x15a>
 80080a0:	7863      	ldrb	r3, [r4, #1]
 80080a2:	2b2a      	cmp	r3, #42	; 0x2a
 80080a4:	d134      	bne.n	8008110 <_vfiprintf_r+0x1b0>
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	1d1a      	adds	r2, r3, #4
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	9203      	str	r2, [sp, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfb8      	it	lt
 80080b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80080b6:	3402      	adds	r4, #2
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008190 <_vfiprintf_r+0x230>
 80080be:	7821      	ldrb	r1, [r4, #0]
 80080c0:	2203      	movs	r2, #3
 80080c2:	4650      	mov	r0, sl
 80080c4:	f7f8 f884 	bl	80001d0 <memchr>
 80080c8:	b138      	cbz	r0, 80080da <_vfiprintf_r+0x17a>
 80080ca:	9b04      	ldr	r3, [sp, #16]
 80080cc:	eba0 000a 	sub.w	r0, r0, sl
 80080d0:	2240      	movs	r2, #64	; 0x40
 80080d2:	4082      	lsls	r2, r0
 80080d4:	4313      	orrs	r3, r2
 80080d6:	3401      	adds	r4, #1
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080de:	4829      	ldr	r0, [pc, #164]	; (8008184 <_vfiprintf_r+0x224>)
 80080e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e4:	2206      	movs	r2, #6
 80080e6:	f7f8 f873 	bl	80001d0 <memchr>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	d03f      	beq.n	800816e <_vfiprintf_r+0x20e>
 80080ee:	4b26      	ldr	r3, [pc, #152]	; (8008188 <_vfiprintf_r+0x228>)
 80080f0:	bb1b      	cbnz	r3, 800813a <_vfiprintf_r+0x1da>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	3307      	adds	r3, #7
 80080f6:	f023 0307 	bic.w	r3, r3, #7
 80080fa:	3308      	adds	r3, #8
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008100:	443b      	add	r3, r7
 8008102:	9309      	str	r3, [sp, #36]	; 0x24
 8008104:	e768      	b.n	8007fd8 <_vfiprintf_r+0x78>
 8008106:	fb0c 3202 	mla	r2, ip, r2, r3
 800810a:	460c      	mov	r4, r1
 800810c:	2001      	movs	r0, #1
 800810e:	e7a6      	b.n	800805e <_vfiprintf_r+0xfe>
 8008110:	2300      	movs	r3, #0
 8008112:	3401      	adds	r4, #1
 8008114:	9305      	str	r3, [sp, #20]
 8008116:	4619      	mov	r1, r3
 8008118:	f04f 0c0a 	mov.w	ip, #10
 800811c:	4620      	mov	r0, r4
 800811e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008122:	3a30      	subs	r2, #48	; 0x30
 8008124:	2a09      	cmp	r2, #9
 8008126:	d903      	bls.n	8008130 <_vfiprintf_r+0x1d0>
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0c6      	beq.n	80080ba <_vfiprintf_r+0x15a>
 800812c:	9105      	str	r1, [sp, #20]
 800812e:	e7c4      	b.n	80080ba <_vfiprintf_r+0x15a>
 8008130:	fb0c 2101 	mla	r1, ip, r1, r2
 8008134:	4604      	mov	r4, r0
 8008136:	2301      	movs	r3, #1
 8008138:	e7f0      	b.n	800811c <_vfiprintf_r+0x1bc>
 800813a:	ab03      	add	r3, sp, #12
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	462a      	mov	r2, r5
 8008140:	4b12      	ldr	r3, [pc, #72]	; (800818c <_vfiprintf_r+0x22c>)
 8008142:	a904      	add	r1, sp, #16
 8008144:	4630      	mov	r0, r6
 8008146:	f7fb fe5f 	bl	8003e08 <_printf_float>
 800814a:	4607      	mov	r7, r0
 800814c:	1c78      	adds	r0, r7, #1
 800814e:	d1d6      	bne.n	80080fe <_vfiprintf_r+0x19e>
 8008150:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008152:	07d9      	lsls	r1, r3, #31
 8008154:	d405      	bmi.n	8008162 <_vfiprintf_r+0x202>
 8008156:	89ab      	ldrh	r3, [r5, #12]
 8008158:	059a      	lsls	r2, r3, #22
 800815a:	d402      	bmi.n	8008162 <_vfiprintf_r+0x202>
 800815c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800815e:	f7fc fdba 	bl	8004cd6 <__retarget_lock_release_recursive>
 8008162:	89ab      	ldrh	r3, [r5, #12]
 8008164:	065b      	lsls	r3, r3, #25
 8008166:	f53f af1d 	bmi.w	8007fa4 <_vfiprintf_r+0x44>
 800816a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816c:	e71c      	b.n	8007fa8 <_vfiprintf_r+0x48>
 800816e:	ab03      	add	r3, sp, #12
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	462a      	mov	r2, r5
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <_vfiprintf_r+0x22c>)
 8008176:	a904      	add	r1, sp, #16
 8008178:	4630      	mov	r0, r6
 800817a:	f7fc f8e9 	bl	8004350 <_printf_i>
 800817e:	e7e4      	b.n	800814a <_vfiprintf_r+0x1ea>
 8008180:	08009871 	.word	0x08009871
 8008184:	0800987b 	.word	0x0800987b
 8008188:	08003e09 	.word	0x08003e09
 800818c:	08007f3d 	.word	0x08007f3d
 8008190:	08009877 	.word	0x08009877

08008194 <__swbuf_r>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	460e      	mov	r6, r1
 8008198:	4614      	mov	r4, r2
 800819a:	4605      	mov	r5, r0
 800819c:	b118      	cbz	r0, 80081a6 <__swbuf_r+0x12>
 800819e:	6a03      	ldr	r3, [r0, #32]
 80081a0:	b90b      	cbnz	r3, 80081a6 <__swbuf_r+0x12>
 80081a2:	f7fc fc81 	bl	8004aa8 <__sinit>
 80081a6:	69a3      	ldr	r3, [r4, #24]
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	071a      	lsls	r2, r3, #28
 80081ae:	d525      	bpl.n	80081fc <__swbuf_r+0x68>
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	b31b      	cbz	r3, 80081fc <__swbuf_r+0x68>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	6922      	ldr	r2, [r4, #16]
 80081b8:	1a98      	subs	r0, r3, r2
 80081ba:	6963      	ldr	r3, [r4, #20]
 80081bc:	b2f6      	uxtb	r6, r6
 80081be:	4283      	cmp	r3, r0
 80081c0:	4637      	mov	r7, r6
 80081c2:	dc04      	bgt.n	80081ce <__swbuf_r+0x3a>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f7ff fa2a 	bl	8007620 <_fflush_r>
 80081cc:	b9e0      	cbnz	r0, 8008208 <__swbuf_r+0x74>
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	60a3      	str	r3, [r4, #8]
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	701e      	strb	r6, [r3, #0]
 80081dc:	6962      	ldr	r2, [r4, #20]
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d004      	beq.n	80081ee <__swbuf_r+0x5a>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	07db      	lsls	r3, r3, #31
 80081e8:	d506      	bpl.n	80081f8 <__swbuf_r+0x64>
 80081ea:	2e0a      	cmp	r6, #10
 80081ec:	d104      	bne.n	80081f8 <__swbuf_r+0x64>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f7ff fa15 	bl	8007620 <_fflush_r>
 80081f6:	b938      	cbnz	r0, 8008208 <__swbuf_r+0x74>
 80081f8:	4638      	mov	r0, r7
 80081fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 f806 	bl	8008210 <__swsetup_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	d0d5      	beq.n	80081b4 <__swbuf_r+0x20>
 8008208:	f04f 37ff 	mov.w	r7, #4294967295
 800820c:	e7f4      	b.n	80081f8 <__swbuf_r+0x64>
	...

08008210 <__swsetup_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4b2a      	ldr	r3, [pc, #168]	; (80082bc <__swsetup_r+0xac>)
 8008214:	4605      	mov	r5, r0
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	460c      	mov	r4, r1
 800821a:	b118      	cbz	r0, 8008224 <__swsetup_r+0x14>
 800821c:	6a03      	ldr	r3, [r0, #32]
 800821e:	b90b      	cbnz	r3, 8008224 <__swsetup_r+0x14>
 8008220:	f7fc fc42 	bl	8004aa8 <__sinit>
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800822a:	0718      	lsls	r0, r3, #28
 800822c:	d422      	bmi.n	8008274 <__swsetup_r+0x64>
 800822e:	06d9      	lsls	r1, r3, #27
 8008230:	d407      	bmi.n	8008242 <__swsetup_r+0x32>
 8008232:	2309      	movs	r3, #9
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800823a:	81a3      	strh	r3, [r4, #12]
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e034      	b.n	80082ac <__swsetup_r+0x9c>
 8008242:	0758      	lsls	r0, r3, #29
 8008244:	d512      	bpl.n	800826c <__swsetup_r+0x5c>
 8008246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008248:	b141      	cbz	r1, 800825c <__swsetup_r+0x4c>
 800824a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800824e:	4299      	cmp	r1, r3
 8008250:	d002      	beq.n	8008258 <__swsetup_r+0x48>
 8008252:	4628      	mov	r0, r5
 8008254:	f7fd fbc2 	bl	80059dc <_free_r>
 8008258:	2300      	movs	r3, #0
 800825a:	6363      	str	r3, [r4, #52]	; 0x34
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008262:	81a3      	strh	r3, [r4, #12]
 8008264:	2300      	movs	r3, #0
 8008266:	6063      	str	r3, [r4, #4]
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f043 0308 	orr.w	r3, r3, #8
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	b94b      	cbnz	r3, 800828c <__swsetup_r+0x7c>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800827e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008282:	d003      	beq.n	800828c <__swsetup_r+0x7c>
 8008284:	4621      	mov	r1, r4
 8008286:	4628      	mov	r0, r5
 8008288:	f000 f884 	bl	8008394 <__smakebuf_r>
 800828c:	89a0      	ldrh	r0, [r4, #12]
 800828e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008292:	f010 0301 	ands.w	r3, r0, #1
 8008296:	d00a      	beq.n	80082ae <__swsetup_r+0x9e>
 8008298:	2300      	movs	r3, #0
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	6963      	ldr	r3, [r4, #20]
 800829e:	425b      	negs	r3, r3
 80082a0:	61a3      	str	r3, [r4, #24]
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	b943      	cbnz	r3, 80082b8 <__swsetup_r+0xa8>
 80082a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082aa:	d1c4      	bne.n	8008236 <__swsetup_r+0x26>
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	0781      	lsls	r1, r0, #30
 80082b0:	bf58      	it	pl
 80082b2:	6963      	ldrpl	r3, [r4, #20]
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	e7f4      	b.n	80082a2 <__swsetup_r+0x92>
 80082b8:	2000      	movs	r0, #0
 80082ba:	e7f7      	b.n	80082ac <__swsetup_r+0x9c>
 80082bc:	20000064 	.word	0x20000064

080082c0 <_raise_r>:
 80082c0:	291f      	cmp	r1, #31
 80082c2:	b538      	push	{r3, r4, r5, lr}
 80082c4:	4604      	mov	r4, r0
 80082c6:	460d      	mov	r5, r1
 80082c8:	d904      	bls.n	80082d4 <_raise_r+0x14>
 80082ca:	2316      	movs	r3, #22
 80082cc:	6003      	str	r3, [r0, #0]
 80082ce:	f04f 30ff 	mov.w	r0, #4294967295
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80082d6:	b112      	cbz	r2, 80082de <_raise_r+0x1e>
 80082d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082dc:	b94b      	cbnz	r3, 80082f2 <_raise_r+0x32>
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f830 	bl	8008344 <_getpid_r>
 80082e4:	462a      	mov	r2, r5
 80082e6:	4601      	mov	r1, r0
 80082e8:	4620      	mov	r0, r4
 80082ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082ee:	f000 b817 	b.w	8008320 <_kill_r>
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d00a      	beq.n	800830c <_raise_r+0x4c>
 80082f6:	1c59      	adds	r1, r3, #1
 80082f8:	d103      	bne.n	8008302 <_raise_r+0x42>
 80082fa:	2316      	movs	r3, #22
 80082fc:	6003      	str	r3, [r0, #0]
 80082fe:	2001      	movs	r0, #1
 8008300:	e7e7      	b.n	80082d2 <_raise_r+0x12>
 8008302:	2400      	movs	r4, #0
 8008304:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008308:	4628      	mov	r0, r5
 800830a:	4798      	blx	r3
 800830c:	2000      	movs	r0, #0
 800830e:	e7e0      	b.n	80082d2 <_raise_r+0x12>

08008310 <raise>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <raise+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f7ff bfd3 	b.w	80082c0 <_raise_r>
 800831a:	bf00      	nop
 800831c:	20000064 	.word	0x20000064

08008320 <_kill_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	4d07      	ldr	r5, [pc, #28]	; (8008340 <_kill_r+0x20>)
 8008324:	2300      	movs	r3, #0
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	4611      	mov	r1, r2
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	f7f9 f9a1 	bl	8001674 <_kill>
 8008332:	1c43      	adds	r3, r0, #1
 8008334:	d102      	bne.n	800833c <_kill_r+0x1c>
 8008336:	682b      	ldr	r3, [r5, #0]
 8008338:	b103      	cbz	r3, 800833c <_kill_r+0x1c>
 800833a:	6023      	str	r3, [r4, #0]
 800833c:	bd38      	pop	{r3, r4, r5, pc}
 800833e:	bf00      	nop
 8008340:	20000d54 	.word	0x20000d54

08008344 <_getpid_r>:
 8008344:	f7f9 b98e 	b.w	8001664 <_getpid>

08008348 <__swhatbuf_r>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	460c      	mov	r4, r1
 800834c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008350:	2900      	cmp	r1, #0
 8008352:	b096      	sub	sp, #88	; 0x58
 8008354:	4615      	mov	r5, r2
 8008356:	461e      	mov	r6, r3
 8008358:	da0d      	bge.n	8008376 <__swhatbuf_r+0x2e>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008360:	f04f 0100 	mov.w	r1, #0
 8008364:	bf0c      	ite	eq
 8008366:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800836a:	2340      	movne	r3, #64	; 0x40
 800836c:	2000      	movs	r0, #0
 800836e:	6031      	str	r1, [r6, #0]
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	b016      	add	sp, #88	; 0x58
 8008374:	bd70      	pop	{r4, r5, r6, pc}
 8008376:	466a      	mov	r2, sp
 8008378:	f000 f848 	bl	800840c <_fstat_r>
 800837c:	2800      	cmp	r0, #0
 800837e:	dbec      	blt.n	800835a <__swhatbuf_r+0x12>
 8008380:	9901      	ldr	r1, [sp, #4]
 8008382:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008386:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800838a:	4259      	negs	r1, r3
 800838c:	4159      	adcs	r1, r3
 800838e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008392:	e7eb      	b.n	800836c <__swhatbuf_r+0x24>

08008394 <__smakebuf_r>:
 8008394:	898b      	ldrh	r3, [r1, #12]
 8008396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008398:	079d      	lsls	r5, r3, #30
 800839a:	4606      	mov	r6, r0
 800839c:	460c      	mov	r4, r1
 800839e:	d507      	bpl.n	80083b0 <__smakebuf_r+0x1c>
 80083a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	2301      	movs	r3, #1
 80083aa:	6163      	str	r3, [r4, #20]
 80083ac:	b002      	add	sp, #8
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
 80083b0:	ab01      	add	r3, sp, #4
 80083b2:	466a      	mov	r2, sp
 80083b4:	f7ff ffc8 	bl	8008348 <__swhatbuf_r>
 80083b8:	9900      	ldr	r1, [sp, #0]
 80083ba:	4605      	mov	r5, r0
 80083bc:	4630      	mov	r0, r6
 80083be:	f7fd fb81 	bl	8005ac4 <_malloc_r>
 80083c2:	b948      	cbnz	r0, 80083d8 <__smakebuf_r+0x44>
 80083c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c8:	059a      	lsls	r2, r3, #22
 80083ca:	d4ef      	bmi.n	80083ac <__smakebuf_r+0x18>
 80083cc:	f023 0303 	bic.w	r3, r3, #3
 80083d0:	f043 0302 	orr.w	r3, r3, #2
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	e7e3      	b.n	80083a0 <__smakebuf_r+0xc>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	6020      	str	r0, [r4, #0]
 80083dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	9b00      	ldr	r3, [sp, #0]
 80083e4:	6163      	str	r3, [r4, #20]
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	6120      	str	r0, [r4, #16]
 80083ea:	b15b      	cbz	r3, 8008404 <__smakebuf_r+0x70>
 80083ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 f81d 	bl	8008430 <_isatty_r>
 80083f6:	b128      	cbz	r0, 8008404 <__smakebuf_r+0x70>
 80083f8:	89a3      	ldrh	r3, [r4, #12]
 80083fa:	f023 0303 	bic.w	r3, r3, #3
 80083fe:	f043 0301 	orr.w	r3, r3, #1
 8008402:	81a3      	strh	r3, [r4, #12]
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	431d      	orrs	r5, r3
 8008408:	81a5      	strh	r5, [r4, #12]
 800840a:	e7cf      	b.n	80083ac <__smakebuf_r+0x18>

0800840c <_fstat_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_fstat_r+0x20>)
 8008410:	2300      	movs	r3, #0
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7f9 f98a 	bl	8001732 <_fstat>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_fstat_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_fstat_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000d54 	.word	0x20000d54

08008430 <_isatty_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d06      	ldr	r5, [pc, #24]	; (800844c <_isatty_r+0x1c>)
 8008434:	2300      	movs	r3, #0
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7f9 f989 	bl	8001752 <_isatty>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_isatty_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_isatty_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000d54 	.word	0x20000d54

08008450 <sin>:
 8008450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008452:	ec53 2b10 	vmov	r2, r3, d0
 8008456:	4828      	ldr	r0, [pc, #160]	; (80084f8 <sin+0xa8>)
 8008458:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800845c:	4281      	cmp	r1, r0
 800845e:	dc07      	bgt.n	8008470 <sin+0x20>
 8008460:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80084f0 <sin+0xa0>
 8008464:	2000      	movs	r0, #0
 8008466:	b005      	add	sp, #20
 8008468:	f85d eb04 	ldr.w	lr, [sp], #4
 800846c:	f000 b910 	b.w	8008690 <__kernel_sin>
 8008470:	4822      	ldr	r0, [pc, #136]	; (80084fc <sin+0xac>)
 8008472:	4281      	cmp	r1, r0
 8008474:	dd09      	ble.n	800848a <sin+0x3a>
 8008476:	ee10 0a10 	vmov	r0, s0
 800847a:	4619      	mov	r1, r3
 800847c:	f7f7 ff04 	bl	8000288 <__aeabi_dsub>
 8008480:	ec41 0b10 	vmov	d0, r0, r1
 8008484:	b005      	add	sp, #20
 8008486:	f85d fb04 	ldr.w	pc, [sp], #4
 800848a:	4668      	mov	r0, sp
 800848c:	f000 f9c0 	bl	8008810 <__ieee754_rem_pio2>
 8008490:	f000 0003 	and.w	r0, r0, #3
 8008494:	2801      	cmp	r0, #1
 8008496:	d00c      	beq.n	80084b2 <sin+0x62>
 8008498:	2802      	cmp	r0, #2
 800849a:	d011      	beq.n	80084c0 <sin+0x70>
 800849c:	b9f0      	cbnz	r0, 80084dc <sin+0x8c>
 800849e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084a2:	ed9d 0b00 	vldr	d0, [sp]
 80084a6:	2001      	movs	r0, #1
 80084a8:	f000 f8f2 	bl	8008690 <__kernel_sin>
 80084ac:	ec51 0b10 	vmov	r0, r1, d0
 80084b0:	e7e6      	b.n	8008480 <sin+0x30>
 80084b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084b6:	ed9d 0b00 	vldr	d0, [sp]
 80084ba:	f000 f821 	bl	8008500 <__kernel_cos>
 80084be:	e7f5      	b.n	80084ac <sin+0x5c>
 80084c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084c4:	ed9d 0b00 	vldr	d0, [sp]
 80084c8:	2001      	movs	r0, #1
 80084ca:	f000 f8e1 	bl	8008690 <__kernel_sin>
 80084ce:	ec53 2b10 	vmov	r2, r3, d0
 80084d2:	ee10 0a10 	vmov	r0, s0
 80084d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084da:	e7d1      	b.n	8008480 <sin+0x30>
 80084dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084e0:	ed9d 0b00 	vldr	d0, [sp]
 80084e4:	f000 f80c 	bl	8008500 <__kernel_cos>
 80084e8:	e7f1      	b.n	80084ce <sin+0x7e>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
	...
 80084f8:	3fe921fb 	.word	0x3fe921fb
 80084fc:	7fefffff 	.word	0x7fefffff

08008500 <__kernel_cos>:
 8008500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	ec57 6b10 	vmov	r6, r7, d0
 8008508:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800850c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008510:	ed8d 1b00 	vstr	d1, [sp]
 8008514:	da07      	bge.n	8008526 <__kernel_cos+0x26>
 8008516:	ee10 0a10 	vmov	r0, s0
 800851a:	4639      	mov	r1, r7
 800851c:	f7f8 fb1c 	bl	8000b58 <__aeabi_d2iz>
 8008520:	2800      	cmp	r0, #0
 8008522:	f000 8088 	beq.w	8008636 <__kernel_cos+0x136>
 8008526:	4632      	mov	r2, r6
 8008528:	463b      	mov	r3, r7
 800852a:	4630      	mov	r0, r6
 800852c:	4639      	mov	r1, r7
 800852e:	f7f8 f863 	bl	80005f8 <__aeabi_dmul>
 8008532:	4b51      	ldr	r3, [pc, #324]	; (8008678 <__kernel_cos+0x178>)
 8008534:	2200      	movs	r2, #0
 8008536:	4604      	mov	r4, r0
 8008538:	460d      	mov	r5, r1
 800853a:	f7f8 f85d 	bl	80005f8 <__aeabi_dmul>
 800853e:	a340      	add	r3, pc, #256	; (adr r3, 8008640 <__kernel_cos+0x140>)
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	4682      	mov	sl, r0
 8008546:	468b      	mov	fp, r1
 8008548:	4620      	mov	r0, r4
 800854a:	4629      	mov	r1, r5
 800854c:	f7f8 f854 	bl	80005f8 <__aeabi_dmul>
 8008550:	a33d      	add	r3, pc, #244	; (adr r3, 8008648 <__kernel_cos+0x148>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f7f7 fe99 	bl	800028c <__adddf3>
 800855a:	4622      	mov	r2, r4
 800855c:	462b      	mov	r3, r5
 800855e:	f7f8 f84b 	bl	80005f8 <__aeabi_dmul>
 8008562:	a33b      	add	r3, pc, #236	; (adr r3, 8008650 <__kernel_cos+0x150>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f7f7 fe8e 	bl	8000288 <__aeabi_dsub>
 800856c:	4622      	mov	r2, r4
 800856e:	462b      	mov	r3, r5
 8008570:	f7f8 f842 	bl	80005f8 <__aeabi_dmul>
 8008574:	a338      	add	r3, pc, #224	; (adr r3, 8008658 <__kernel_cos+0x158>)
 8008576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857a:	f7f7 fe87 	bl	800028c <__adddf3>
 800857e:	4622      	mov	r2, r4
 8008580:	462b      	mov	r3, r5
 8008582:	f7f8 f839 	bl	80005f8 <__aeabi_dmul>
 8008586:	a336      	add	r3, pc, #216	; (adr r3, 8008660 <__kernel_cos+0x160>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f7f7 fe7c 	bl	8000288 <__aeabi_dsub>
 8008590:	4622      	mov	r2, r4
 8008592:	462b      	mov	r3, r5
 8008594:	f7f8 f830 	bl	80005f8 <__aeabi_dmul>
 8008598:	a333      	add	r3, pc, #204	; (adr r3, 8008668 <__kernel_cos+0x168>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f7 fe75 	bl	800028c <__adddf3>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	4622      	mov	r2, r4
 80085ac:	462b      	mov	r3, r5
 80085ae:	f7f8 f823 	bl	80005f8 <__aeabi_dmul>
 80085b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085b6:	4604      	mov	r4, r0
 80085b8:	460d      	mov	r5, r1
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f8 f81b 	bl	80005f8 <__aeabi_dmul>
 80085c2:	460b      	mov	r3, r1
 80085c4:	4602      	mov	r2, r0
 80085c6:	4629      	mov	r1, r5
 80085c8:	4620      	mov	r0, r4
 80085ca:	f7f7 fe5d 	bl	8000288 <__aeabi_dsub>
 80085ce:	4b2b      	ldr	r3, [pc, #172]	; (800867c <__kernel_cos+0x17c>)
 80085d0:	4598      	cmp	r8, r3
 80085d2:	4606      	mov	r6, r0
 80085d4:	460f      	mov	r7, r1
 80085d6:	dc10      	bgt.n	80085fa <__kernel_cos+0xfa>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4650      	mov	r0, sl
 80085de:	4659      	mov	r1, fp
 80085e0:	f7f7 fe52 	bl	8000288 <__aeabi_dsub>
 80085e4:	460b      	mov	r3, r1
 80085e6:	4926      	ldr	r1, [pc, #152]	; (8008680 <__kernel_cos+0x180>)
 80085e8:	4602      	mov	r2, r0
 80085ea:	2000      	movs	r0, #0
 80085ec:	f7f7 fe4c 	bl	8000288 <__aeabi_dsub>
 80085f0:	ec41 0b10 	vmov	d0, r0, r1
 80085f4:	b003      	add	sp, #12
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	4b22      	ldr	r3, [pc, #136]	; (8008684 <__kernel_cos+0x184>)
 80085fc:	4920      	ldr	r1, [pc, #128]	; (8008680 <__kernel_cos+0x180>)
 80085fe:	4598      	cmp	r8, r3
 8008600:	bfcc      	ite	gt
 8008602:	4d21      	ldrgt	r5, [pc, #132]	; (8008688 <__kernel_cos+0x188>)
 8008604:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008608:	2400      	movs	r4, #0
 800860a:	4622      	mov	r2, r4
 800860c:	462b      	mov	r3, r5
 800860e:	2000      	movs	r0, #0
 8008610:	f7f7 fe3a 	bl	8000288 <__aeabi_dsub>
 8008614:	4622      	mov	r2, r4
 8008616:	4680      	mov	r8, r0
 8008618:	4689      	mov	r9, r1
 800861a:	462b      	mov	r3, r5
 800861c:	4650      	mov	r0, sl
 800861e:	4659      	mov	r1, fp
 8008620:	f7f7 fe32 	bl	8000288 <__aeabi_dsub>
 8008624:	4632      	mov	r2, r6
 8008626:	463b      	mov	r3, r7
 8008628:	f7f7 fe2e 	bl	8000288 <__aeabi_dsub>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	e7da      	b.n	80085ec <__kernel_cos+0xec>
 8008636:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008670 <__kernel_cos+0x170>
 800863a:	e7db      	b.n	80085f4 <__kernel_cos+0xf4>
 800863c:	f3af 8000 	nop.w
 8008640:	be8838d4 	.word	0xbe8838d4
 8008644:	bda8fae9 	.word	0xbda8fae9
 8008648:	bdb4b1c4 	.word	0xbdb4b1c4
 800864c:	3e21ee9e 	.word	0x3e21ee9e
 8008650:	809c52ad 	.word	0x809c52ad
 8008654:	3e927e4f 	.word	0x3e927e4f
 8008658:	19cb1590 	.word	0x19cb1590
 800865c:	3efa01a0 	.word	0x3efa01a0
 8008660:	16c15177 	.word	0x16c15177
 8008664:	3f56c16c 	.word	0x3f56c16c
 8008668:	5555554c 	.word	0x5555554c
 800866c:	3fa55555 	.word	0x3fa55555
 8008670:	00000000 	.word	0x00000000
 8008674:	3ff00000 	.word	0x3ff00000
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	3fd33332 	.word	0x3fd33332
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	3fe90000 	.word	0x3fe90000
 8008688:	3fd20000 	.word	0x3fd20000
 800868c:	00000000 	.word	0x00000000

08008690 <__kernel_sin>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ed2d 8b04 	vpush	{d8-d9}
 8008698:	eeb0 8a41 	vmov.f32	s16, s2
 800869c:	eef0 8a61 	vmov.f32	s17, s3
 80086a0:	ec55 4b10 	vmov	r4, r5, d0
 80086a4:	b083      	sub	sp, #12
 80086a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80086ae:	9001      	str	r0, [sp, #4]
 80086b0:	da06      	bge.n	80086c0 <__kernel_sin+0x30>
 80086b2:	ee10 0a10 	vmov	r0, s0
 80086b6:	4629      	mov	r1, r5
 80086b8:	f7f8 fa4e 	bl	8000b58 <__aeabi_d2iz>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d051      	beq.n	8008764 <__kernel_sin+0xd4>
 80086c0:	4622      	mov	r2, r4
 80086c2:	462b      	mov	r3, r5
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f7 ff96 	bl	80005f8 <__aeabi_dmul>
 80086cc:	4682      	mov	sl, r0
 80086ce:	468b      	mov	fp, r1
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4620      	mov	r0, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	f7f7 ff8e 	bl	80005f8 <__aeabi_dmul>
 80086dc:	a341      	add	r3, pc, #260	; (adr r3, 80087e4 <__kernel_sin+0x154>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	4680      	mov	r8, r0
 80086e4:	4689      	mov	r9, r1
 80086e6:	4650      	mov	r0, sl
 80086e8:	4659      	mov	r1, fp
 80086ea:	f7f7 ff85 	bl	80005f8 <__aeabi_dmul>
 80086ee:	a33f      	add	r3, pc, #252	; (adr r3, 80087ec <__kernel_sin+0x15c>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	4652      	mov	r2, sl
 80086fa:	465b      	mov	r3, fp
 80086fc:	f7f7 ff7c 	bl	80005f8 <__aeabi_dmul>
 8008700:	a33c      	add	r3, pc, #240	; (adr r3, 80087f4 <__kernel_sin+0x164>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f7f7 fdc1 	bl	800028c <__adddf3>
 800870a:	4652      	mov	r2, sl
 800870c:	465b      	mov	r3, fp
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	a33a      	add	r3, pc, #232	; (adr r3, 80087fc <__kernel_sin+0x16c>)
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	f7f7 fdb6 	bl	8000288 <__aeabi_dsub>
 800871c:	4652      	mov	r2, sl
 800871e:	465b      	mov	r3, fp
 8008720:	f7f7 ff6a 	bl	80005f8 <__aeabi_dmul>
 8008724:	a337      	add	r3, pc, #220	; (adr r3, 8008804 <__kernel_sin+0x174>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	4606      	mov	r6, r0
 8008732:	460f      	mov	r7, r1
 8008734:	b9eb      	cbnz	r3, 8008772 <__kernel_sin+0xe2>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	a325      	add	r3, pc, #148	; (adr r3, 80087d8 <__kernel_sin+0x148>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fd9e 	bl	8000288 <__aeabi_dsub>
 800874c:	4642      	mov	r2, r8
 800874e:	464b      	mov	r3, r9
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4620      	mov	r0, r4
 800875a:	4629      	mov	r1, r5
 800875c:	f7f7 fd96 	bl	800028c <__adddf3>
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	ec45 4b10 	vmov	d0, r4, r5
 8008768:	b003      	add	sp, #12
 800876a:	ecbd 8b04 	vpop	{d8-d9}
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	4b1b      	ldr	r3, [pc, #108]	; (80087e0 <__kernel_sin+0x150>)
 8008774:	ec51 0b18 	vmov	r0, r1, d8
 8008778:	2200      	movs	r2, #0
 800877a:	f7f7 ff3d 	bl	80005f8 <__aeabi_dmul>
 800877e:	4632      	mov	r2, r6
 8008780:	ec41 0b19 	vmov	d9, r0, r1
 8008784:	463b      	mov	r3, r7
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 ff35 	bl	80005f8 <__aeabi_dmul>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	ec51 0b19 	vmov	r0, r1, d9
 8008796:	f7f7 fd77 	bl	8000288 <__aeabi_dsub>
 800879a:	4652      	mov	r2, sl
 800879c:	465b      	mov	r3, fp
 800879e:	f7f7 ff2b 	bl	80005f8 <__aeabi_dmul>
 80087a2:	ec53 2b18 	vmov	r2, r3, d8
 80087a6:	f7f7 fd6f 	bl	8000288 <__aeabi_dsub>
 80087aa:	a30b      	add	r3, pc, #44	; (adr r3, 80087d8 <__kernel_sin+0x148>)
 80087ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	4640      	mov	r0, r8
 80087b6:	4649      	mov	r1, r9
 80087b8:	f7f7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80087bc:	4602      	mov	r2, r0
 80087be:	460b      	mov	r3, r1
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f7 fd62 	bl	800028c <__adddf3>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	4620      	mov	r0, r4
 80087ce:	4629      	mov	r1, r5
 80087d0:	f7f7 fd5a 	bl	8000288 <__aeabi_dsub>
 80087d4:	e7c4      	b.n	8008760 <__kernel_sin+0xd0>
 80087d6:	bf00      	nop
 80087d8:	55555549 	.word	0x55555549
 80087dc:	3fc55555 	.word	0x3fc55555
 80087e0:	3fe00000 	.word	0x3fe00000
 80087e4:	5acfd57c 	.word	0x5acfd57c
 80087e8:	3de5d93a 	.word	0x3de5d93a
 80087ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80087f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80087f4:	57b1fe7d 	.word	0x57b1fe7d
 80087f8:	3ec71de3 	.word	0x3ec71de3
 80087fc:	19c161d5 	.word	0x19c161d5
 8008800:	3f2a01a0 	.word	0x3f2a01a0
 8008804:	1110f8a6 	.word	0x1110f8a6
 8008808:	3f811111 	.word	0x3f811111
 800880c:	00000000 	.word	0x00000000

08008810 <__ieee754_rem_pio2>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	ed2d 8b02 	vpush	{d8}
 8008818:	ec55 4b10 	vmov	r4, r5, d0
 800881c:	4bca      	ldr	r3, [pc, #808]	; (8008b48 <__ieee754_rem_pio2+0x338>)
 800881e:	b08b      	sub	sp, #44	; 0x2c
 8008820:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008824:	4598      	cmp	r8, r3
 8008826:	4682      	mov	sl, r0
 8008828:	9502      	str	r5, [sp, #8]
 800882a:	dc08      	bgt.n	800883e <__ieee754_rem_pio2+0x2e>
 800882c:	2200      	movs	r2, #0
 800882e:	2300      	movs	r3, #0
 8008830:	ed80 0b00 	vstr	d0, [r0]
 8008834:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008838:	f04f 0b00 	mov.w	fp, #0
 800883c:	e028      	b.n	8008890 <__ieee754_rem_pio2+0x80>
 800883e:	4bc3      	ldr	r3, [pc, #780]	; (8008b4c <__ieee754_rem_pio2+0x33c>)
 8008840:	4598      	cmp	r8, r3
 8008842:	dc78      	bgt.n	8008936 <__ieee754_rem_pio2+0x126>
 8008844:	9b02      	ldr	r3, [sp, #8]
 8008846:	4ec2      	ldr	r6, [pc, #776]	; (8008b50 <__ieee754_rem_pio2+0x340>)
 8008848:	2b00      	cmp	r3, #0
 800884a:	ee10 0a10 	vmov	r0, s0
 800884e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x300>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	4629      	mov	r1, r5
 8008856:	dd39      	ble.n	80088cc <__ieee754_rem_pio2+0xbc>
 8008858:	f7f7 fd16 	bl	8000288 <__aeabi_dsub>
 800885c:	45b0      	cmp	r8, r6
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	d01b      	beq.n	800889c <__ieee754_rem_pio2+0x8c>
 8008864:	a3ac      	add	r3, pc, #688	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 8008866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886a:	f7f7 fd0d 	bl	8000288 <__aeabi_dsub>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	e9ca 2300 	strd	r2, r3, [sl]
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	f7f7 fd05 	bl	8000288 <__aeabi_dsub>
 800887e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800888c:	f04f 0b01 	mov.w	fp, #1
 8008890:	4658      	mov	r0, fp
 8008892:	b00b      	add	sp, #44	; 0x2c
 8008894:	ecbd 8b02 	vpop	{d8}
 8008898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x310>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fcf1 	bl	8000288 <__aeabi_dsub>
 80088a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	f7f7 fcea 	bl	8000288 <__aeabi_dsub>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	e9ca 2300 	strd	r2, r3, [sl]
 80088bc:	4620      	mov	r0, r4
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f7 fce2 	bl	8000288 <__aeabi_dsub>
 80088c4:	a398      	add	r3, pc, #608	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	e7db      	b.n	8008884 <__ieee754_rem_pio2+0x74>
 80088cc:	f7f7 fcde 	bl	800028c <__adddf3>
 80088d0:	45b0      	cmp	r8, r6
 80088d2:	4604      	mov	r4, r0
 80088d4:	460d      	mov	r5, r1
 80088d6:	d016      	beq.n	8008906 <__ieee754_rem_pio2+0xf6>
 80088d8:	a38f      	add	r3, pc, #572	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fcd5 	bl	800028c <__adddf3>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	e9ca 2300 	strd	r2, r3, [sl]
 80088ea:	4620      	mov	r0, r4
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f7 fccb 	bl	8000288 <__aeabi_dsub>
 80088f2:	a389      	add	r3, pc, #548	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 fcc8 	bl	800028c <__adddf3>
 80088fc:	f04f 3bff 	mov.w	fp, #4294967295
 8008900:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008904:	e7c4      	b.n	8008890 <__ieee754_rem_pio2+0x80>
 8008906:	a386      	add	r3, pc, #536	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x310>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f7f7 fcbe 	bl	800028c <__adddf3>
 8008910:	a385      	add	r3, pc, #532	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	4604      	mov	r4, r0
 8008918:	460d      	mov	r5, r1
 800891a:	f7f7 fcb7 	bl	800028c <__adddf3>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	e9ca 2300 	strd	r2, r3, [sl]
 8008926:	4620      	mov	r0, r4
 8008928:	4629      	mov	r1, r5
 800892a:	f7f7 fcad 	bl	8000288 <__aeabi_dsub>
 800892e:	a37e      	add	r3, pc, #504	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	e7e0      	b.n	80088f8 <__ieee754_rem_pio2+0xe8>
 8008936:	4b87      	ldr	r3, [pc, #540]	; (8008b54 <__ieee754_rem_pio2+0x344>)
 8008938:	4598      	cmp	r8, r3
 800893a:	f300 80d8 	bgt.w	8008aee <__ieee754_rem_pio2+0x2de>
 800893e:	f000 f96d 	bl	8008c1c <fabs>
 8008942:	ec55 4b10 	vmov	r4, r5, d0
 8008946:	ee10 0a10 	vmov	r0, s0
 800894a:	a379      	add	r3, pc, #484	; (adr r3, 8008b30 <__ieee754_rem_pio2+0x320>)
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	4629      	mov	r1, r5
 8008952:	f7f7 fe51 	bl	80005f8 <__aeabi_dmul>
 8008956:	4b80      	ldr	r3, [pc, #512]	; (8008b58 <__ieee754_rem_pio2+0x348>)
 8008958:	2200      	movs	r2, #0
 800895a:	f7f7 fc97 	bl	800028c <__adddf3>
 800895e:	f7f8 f8fb 	bl	8000b58 <__aeabi_d2iz>
 8008962:	4683      	mov	fp, r0
 8008964:	f7f7 fdde 	bl	8000524 <__aeabi_i2d>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	ec43 2b18 	vmov	d8, r2, r3
 8008970:	a367      	add	r3, pc, #412	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x300>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fe3f 	bl	80005f8 <__aeabi_dmul>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f7 fc81 	bl	8000288 <__aeabi_dsub>
 8008986:	a364      	add	r3, pc, #400	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x308>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	4606      	mov	r6, r0
 800898e:	460f      	mov	r7, r1
 8008990:	ec51 0b18 	vmov	r0, r1, d8
 8008994:	f7f7 fe30 	bl	80005f8 <__aeabi_dmul>
 8008998:	f1bb 0f1f 	cmp.w	fp, #31
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	dc0d      	bgt.n	80089be <__ieee754_rem_pio2+0x1ae>
 80089a2:	4b6e      	ldr	r3, [pc, #440]	; (8008b5c <__ieee754_rem_pio2+0x34c>)
 80089a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80089a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ac:	4543      	cmp	r3, r8
 80089ae:	d006      	beq.n	80089be <__ieee754_rem_pio2+0x1ae>
 80089b0:	4622      	mov	r2, r4
 80089b2:	462b      	mov	r3, r5
 80089b4:	4630      	mov	r0, r6
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f7 fc66 	bl	8000288 <__aeabi_dsub>
 80089bc:	e00e      	b.n	80089dc <__ieee754_rem_pio2+0x1cc>
 80089be:	462b      	mov	r3, r5
 80089c0:	4622      	mov	r2, r4
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 fc5f 	bl	8000288 <__aeabi_dsub>
 80089ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089ce:	9303      	str	r3, [sp, #12]
 80089d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80089d8:	2b10      	cmp	r3, #16
 80089da:	dc02      	bgt.n	80089e2 <__ieee754_rem_pio2+0x1d2>
 80089dc:	e9ca 0100 	strd	r0, r1, [sl]
 80089e0:	e039      	b.n	8008a56 <__ieee754_rem_pio2+0x246>
 80089e2:	a34f      	add	r3, pc, #316	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x310>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	ec51 0b18 	vmov	r0, r1, d8
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4630      	mov	r0, r6
 80089fa:	4639      	mov	r1, r7
 80089fc:	f7f7 fc44 	bl	8000288 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4680      	mov	r8, r0
 8008a06:	4689      	mov	r9, r1
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f7 fc3c 	bl	8000288 <__aeabi_dsub>
 8008a10:	4622      	mov	r2, r4
 8008a12:	462b      	mov	r3, r5
 8008a14:	f7f7 fc38 	bl	8000288 <__aeabi_dsub>
 8008a18:	a343      	add	r3, pc, #268	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x318>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	ec51 0b18 	vmov	r0, r1, d8
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	f7f7 fc2b 	bl	8000288 <__aeabi_dsub>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4604      	mov	r4, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	f7f7 fc23 	bl	8000288 <__aeabi_dsub>
 8008a42:	9a03      	ldr	r2, [sp, #12]
 8008a44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b31      	cmp	r3, #49	; 0x31
 8008a4c:	dc24      	bgt.n	8008a98 <__ieee754_rem_pio2+0x288>
 8008a4e:	e9ca 0100 	strd	r0, r1, [sl]
 8008a52:	4646      	mov	r6, r8
 8008a54:	464f      	mov	r7, r9
 8008a56:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4642      	mov	r2, r8
 8008a5e:	464b      	mov	r3, r9
 8008a60:	4639      	mov	r1, r7
 8008a62:	f7f7 fc11 	bl	8000288 <__aeabi_dsub>
 8008a66:	462b      	mov	r3, r5
 8008a68:	4622      	mov	r2, r4
 8008a6a:	f7f7 fc0d 	bl	8000288 <__aeabi_dsub>
 8008a6e:	9b02      	ldr	r3, [sp, #8]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a76:	f6bf af0b 	bge.w	8008890 <__ieee754_rem_pio2+0x80>
 8008a7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a7e:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a86:	f8ca 8000 	str.w	r8, [sl]
 8008a8a:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a8e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a92:	f1cb 0b00 	rsb	fp, fp, #0
 8008a96:	e6fb      	b.n	8008890 <__ieee754_rem_pio2+0x80>
 8008a98:	a327      	add	r3, pc, #156	; (adr r3, 8008b38 <__ieee754_rem_pio2+0x328>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	ec51 0b18 	vmov	r0, r1, d8
 8008aa2:	f7f7 fda9 	bl	80005f8 <__aeabi_dmul>
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	f7f7 fbe9 	bl	8000288 <__aeabi_dsub>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	f7f7 fbe1 	bl	8000288 <__aeabi_dsub>
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	462b      	mov	r3, r5
 8008aca:	f7f7 fbdd 	bl	8000288 <__aeabi_dsub>
 8008ace:	a31c      	add	r3, pc, #112	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x330>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	460d      	mov	r5, r1
 8008ad8:	ec51 0b18 	vmov	r0, r1, d8
 8008adc:	f7f7 fd8c 	bl	80005f8 <__aeabi_dmul>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f7f7 fbd0 	bl	8000288 <__aeabi_dsub>
 8008ae8:	4604      	mov	r4, r0
 8008aea:	460d      	mov	r5, r1
 8008aec:	e760      	b.n	80089b0 <__ieee754_rem_pio2+0x1a0>
 8008aee:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <__ieee754_rem_pio2+0x350>)
 8008af0:	4598      	cmp	r8, r3
 8008af2:	dd37      	ble.n	8008b64 <__ieee754_rem_pio2+0x354>
 8008af4:	ee10 2a10 	vmov	r2, s0
 8008af8:	462b      	mov	r3, r5
 8008afa:	4620      	mov	r0, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	f7f7 fbc3 	bl	8000288 <__aeabi_dsub>
 8008b02:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008b06:	e9ca 0100 	strd	r0, r1, [sl]
 8008b0a:	e695      	b.n	8008838 <__ieee754_rem_pio2+0x28>
 8008b0c:	f3af 8000 	nop.w
 8008b10:	54400000 	.word	0x54400000
 8008b14:	3ff921fb 	.word	0x3ff921fb
 8008b18:	1a626331 	.word	0x1a626331
 8008b1c:	3dd0b461 	.word	0x3dd0b461
 8008b20:	1a600000 	.word	0x1a600000
 8008b24:	3dd0b461 	.word	0x3dd0b461
 8008b28:	2e037073 	.word	0x2e037073
 8008b2c:	3ba3198a 	.word	0x3ba3198a
 8008b30:	6dc9c883 	.word	0x6dc9c883
 8008b34:	3fe45f30 	.word	0x3fe45f30
 8008b38:	2e000000 	.word	0x2e000000
 8008b3c:	3ba3198a 	.word	0x3ba3198a
 8008b40:	252049c1 	.word	0x252049c1
 8008b44:	397b839a 	.word	0x397b839a
 8008b48:	3fe921fb 	.word	0x3fe921fb
 8008b4c:	4002d97b 	.word	0x4002d97b
 8008b50:	3ff921fb 	.word	0x3ff921fb
 8008b54:	413921fb 	.word	0x413921fb
 8008b58:	3fe00000 	.word	0x3fe00000
 8008b5c:	08009928 	.word	0x08009928
 8008b60:	7fefffff 	.word	0x7fefffff
 8008b64:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008b68:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008b6c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008b70:	4620      	mov	r0, r4
 8008b72:	460d      	mov	r5, r1
 8008b74:	f7f7 fff0 	bl	8000b58 <__aeabi_d2iz>
 8008b78:	f7f7 fcd4 	bl	8000524 <__aeabi_i2d>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b88:	f7f7 fb7e 	bl	8000288 <__aeabi_dsub>
 8008b8c:	4b21      	ldr	r3, [pc, #132]	; (8008c14 <__ieee754_rem_pio2+0x404>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f7f7 fd32 	bl	80005f8 <__aeabi_dmul>
 8008b94:	460d      	mov	r5, r1
 8008b96:	4604      	mov	r4, r0
 8008b98:	f7f7 ffde 	bl	8000b58 <__aeabi_d2iz>
 8008b9c:	f7f7 fcc2 	bl	8000524 <__aeabi_i2d>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bac:	f7f7 fb6c 	bl	8000288 <__aeabi_dsub>
 8008bb0:	4b18      	ldr	r3, [pc, #96]	; (8008c14 <__ieee754_rem_pio2+0x404>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f7f7 fd20 	bl	80005f8 <__aeabi_dmul>
 8008bb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bbc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008bc0:	2703      	movs	r7, #3
 8008bc2:	2400      	movs	r4, #0
 8008bc4:	2500      	movs	r5, #0
 8008bc6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008bca:	4622      	mov	r2, r4
 8008bcc:	462b      	mov	r3, r5
 8008bce:	46b9      	mov	r9, r7
 8008bd0:	3f01      	subs	r7, #1
 8008bd2:	f7f7 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	d1f5      	bne.n	8008bc6 <__ieee754_rem_pio2+0x3b6>
 8008bda:	4b0f      	ldr	r3, [pc, #60]	; (8008c18 <__ieee754_rem_pio2+0x408>)
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	2302      	movs	r3, #2
 8008be0:	9300      	str	r3, [sp, #0]
 8008be2:	4632      	mov	r2, r6
 8008be4:	464b      	mov	r3, r9
 8008be6:	4651      	mov	r1, sl
 8008be8:	a804      	add	r0, sp, #16
 8008bea:	f000 f821 	bl	8008c30 <__kernel_rem_pio2>
 8008bee:	9b02      	ldr	r3, [sp, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	4683      	mov	fp, r0
 8008bf4:	f6bf ae4c 	bge.w	8008890 <__ieee754_rem_pio2+0x80>
 8008bf8:	e9da 2100 	ldrd	r2, r1, [sl]
 8008bfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c00:	e9ca 2300 	strd	r2, r3, [sl]
 8008c04:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008c08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c0c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008c10:	e73f      	b.n	8008a92 <__ieee754_rem_pio2+0x282>
 8008c12:	bf00      	nop
 8008c14:	41700000 	.word	0x41700000
 8008c18:	080099a8 	.word	0x080099a8

08008c1c <fabs>:
 8008c1c:	ec51 0b10 	vmov	r0, r1, d0
 8008c20:	ee10 2a10 	vmov	r2, s0
 8008c24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c28:	ec43 2b10 	vmov	d0, r2, r3
 8008c2c:	4770      	bx	lr
	...

08008c30 <__kernel_rem_pio2>:
 8008c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	ed2d 8b02 	vpush	{d8}
 8008c38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008c3c:	f112 0f14 	cmn.w	r2, #20
 8008c40:	9306      	str	r3, [sp, #24]
 8008c42:	9104      	str	r1, [sp, #16]
 8008c44:	4bc2      	ldr	r3, [pc, #776]	; (8008f50 <__kernel_rem_pio2+0x320>)
 8008c46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008c48:	9009      	str	r0, [sp, #36]	; 0x24
 8008c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	9b06      	ldr	r3, [sp, #24]
 8008c52:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c56:	bfa8      	it	ge
 8008c58:	1ed4      	subge	r4, r2, #3
 8008c5a:	9305      	str	r3, [sp, #20]
 8008c5c:	bfb2      	itee	lt
 8008c5e:	2400      	movlt	r4, #0
 8008c60:	2318      	movge	r3, #24
 8008c62:	fb94 f4f3 	sdivge	r4, r4, r3
 8008c66:	f06f 0317 	mvn.w	r3, #23
 8008c6a:	fb04 3303 	mla	r3, r4, r3, r3
 8008c6e:	eb03 0a02 	add.w	sl, r3, r2
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	9a05      	ldr	r2, [sp, #20]
 8008c76:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008f40 <__kernel_rem_pio2+0x310>
 8008c7a:	eb03 0802 	add.w	r8, r3, r2
 8008c7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008c80:	1aa7      	subs	r7, r4, r2
 8008c82:	ae20      	add	r6, sp, #128	; 0x80
 8008c84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008c88:	2500      	movs	r5, #0
 8008c8a:	4545      	cmp	r5, r8
 8008c8c:	dd13      	ble.n	8008cb6 <__kernel_rem_pio2+0x86>
 8008c8e:	9b06      	ldr	r3, [sp, #24]
 8008c90:	aa20      	add	r2, sp, #128	; 0x80
 8008c92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008c96:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008c9a:	f04f 0800 	mov.w	r8, #0
 8008c9e:	9b00      	ldr	r3, [sp, #0]
 8008ca0:	4598      	cmp	r8, r3
 8008ca2:	dc31      	bgt.n	8008d08 <__kernel_rem_pio2+0xd8>
 8008ca4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008f40 <__kernel_rem_pio2+0x310>
 8008ca8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008cac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008cb0:	462f      	mov	r7, r5
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	e01b      	b.n	8008cee <__kernel_rem_pio2+0xbe>
 8008cb6:	42ef      	cmn	r7, r5
 8008cb8:	d407      	bmi.n	8008cca <__kernel_rem_pio2+0x9a>
 8008cba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008cbe:	f7f7 fc31 	bl	8000524 <__aeabi_i2d>
 8008cc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008cc6:	3501      	adds	r5, #1
 8008cc8:	e7df      	b.n	8008c8a <__kernel_rem_pio2+0x5a>
 8008cca:	ec51 0b18 	vmov	r0, r1, d8
 8008cce:	e7f8      	b.n	8008cc2 <__kernel_rem_pio2+0x92>
 8008cd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008cd8:	f7f7 fc8e 	bl	80005f8 <__aeabi_dmul>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ce4:	f7f7 fad2 	bl	800028c <__adddf3>
 8008ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cec:	3601      	adds	r6, #1
 8008cee:	9b05      	ldr	r3, [sp, #20]
 8008cf0:	429e      	cmp	r6, r3
 8008cf2:	f1a7 0708 	sub.w	r7, r7, #8
 8008cf6:	ddeb      	ble.n	8008cd0 <__kernel_rem_pio2+0xa0>
 8008cf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cfc:	f108 0801 	add.w	r8, r8, #1
 8008d00:	ecab 7b02 	vstmia	fp!, {d7}
 8008d04:	3508      	adds	r5, #8
 8008d06:	e7ca      	b.n	8008c9e <__kernel_rem_pio2+0x6e>
 8008d08:	9b00      	ldr	r3, [sp, #0]
 8008d0a:	aa0c      	add	r2, sp, #48	; 0x30
 8008d0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d12:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008d14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d18:	9c00      	ldr	r4, [sp, #0]
 8008d1a:	930a      	str	r3, [sp, #40]	; 0x28
 8008d1c:	00e3      	lsls	r3, r4, #3
 8008d1e:	9308      	str	r3, [sp, #32]
 8008d20:	ab98      	add	r3, sp, #608	; 0x260
 8008d22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008d2a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008d2e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008d34:	46c3      	mov	fp, r8
 8008d36:	46a1      	mov	r9, r4
 8008d38:	f1b9 0f00 	cmp.w	r9, #0
 8008d3c:	f1a5 0508 	sub.w	r5, r5, #8
 8008d40:	dc77      	bgt.n	8008e32 <__kernel_rem_pio2+0x202>
 8008d42:	ec47 6b10 	vmov	d0, r6, r7
 8008d46:	4650      	mov	r0, sl
 8008d48:	f000 fac2 	bl	80092d0 <scalbn>
 8008d4c:	ec57 6b10 	vmov	r6, r7, d0
 8008d50:	2200      	movs	r2, #0
 8008d52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008d56:	ee10 0a10 	vmov	r0, s0
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fc4c 	bl	80005f8 <__aeabi_dmul>
 8008d60:	ec41 0b10 	vmov	d0, r0, r1
 8008d64:	f000 fb34 	bl	80093d0 <floor>
 8008d68:	4b7a      	ldr	r3, [pc, #488]	; (8008f54 <__kernel_rem_pio2+0x324>)
 8008d6a:	ec51 0b10 	vmov	r0, r1, d0
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f7f7 fc42 	bl	80005f8 <__aeabi_dmul>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fa84 	bl	8000288 <__aeabi_dsub>
 8008d80:	460f      	mov	r7, r1
 8008d82:	4606      	mov	r6, r0
 8008d84:	f7f7 fee8 	bl	8000b58 <__aeabi_d2iz>
 8008d88:	9002      	str	r0, [sp, #8]
 8008d8a:	f7f7 fbcb 	bl	8000524 <__aeabi_i2d>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4630      	mov	r0, r6
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f7 fa77 	bl	8000288 <__aeabi_dsub>
 8008d9a:	f1ba 0f00 	cmp.w	sl, #0
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460f      	mov	r7, r1
 8008da2:	dd6d      	ble.n	8008e80 <__kernel_rem_pio2+0x250>
 8008da4:	1e61      	subs	r1, r4, #1
 8008da6:	ab0c      	add	r3, sp, #48	; 0x30
 8008da8:	9d02      	ldr	r5, [sp, #8]
 8008daa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dae:	f1ca 0018 	rsb	r0, sl, #24
 8008db2:	fa43 f200 	asr.w	r2, r3, r0
 8008db6:	4415      	add	r5, r2
 8008db8:	4082      	lsls	r2, r0
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	aa0c      	add	r2, sp, #48	; 0x30
 8008dbe:	9502      	str	r5, [sp, #8]
 8008dc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008dc4:	f1ca 0217 	rsb	r2, sl, #23
 8008dc8:	fa43 fb02 	asr.w	fp, r3, r2
 8008dcc:	f1bb 0f00 	cmp.w	fp, #0
 8008dd0:	dd65      	ble.n	8008e9e <__kernel_rem_pio2+0x26e>
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	9302      	str	r3, [sp, #8]
 8008dda:	4615      	mov	r5, r2
 8008ddc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008de0:	4294      	cmp	r4, r2
 8008de2:	f300 809f 	bgt.w	8008f24 <__kernel_rem_pio2+0x2f4>
 8008de6:	f1ba 0f00 	cmp.w	sl, #0
 8008dea:	dd07      	ble.n	8008dfc <__kernel_rem_pio2+0x1cc>
 8008dec:	f1ba 0f01 	cmp.w	sl, #1
 8008df0:	f000 80c1 	beq.w	8008f76 <__kernel_rem_pio2+0x346>
 8008df4:	f1ba 0f02 	cmp.w	sl, #2
 8008df8:	f000 80c7 	beq.w	8008f8a <__kernel_rem_pio2+0x35a>
 8008dfc:	f1bb 0f02 	cmp.w	fp, #2
 8008e00:	d14d      	bne.n	8008e9e <__kernel_rem_pio2+0x26e>
 8008e02:	4632      	mov	r2, r6
 8008e04:	463b      	mov	r3, r7
 8008e06:	4954      	ldr	r1, [pc, #336]	; (8008f58 <__kernel_rem_pio2+0x328>)
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f7f7 fa3d 	bl	8000288 <__aeabi_dsub>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	460f      	mov	r7, r1
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	d043      	beq.n	8008e9e <__kernel_rem_pio2+0x26e>
 8008e16:	4650      	mov	r0, sl
 8008e18:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008f48 <__kernel_rem_pio2+0x318>
 8008e1c:	f000 fa58 	bl	80092d0 <scalbn>
 8008e20:	4630      	mov	r0, r6
 8008e22:	4639      	mov	r1, r7
 8008e24:	ec53 2b10 	vmov	r2, r3, d0
 8008e28:	f7f7 fa2e 	bl	8000288 <__aeabi_dsub>
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	460f      	mov	r7, r1
 8008e30:	e035      	b.n	8008e9e <__kernel_rem_pio2+0x26e>
 8008e32:	4b4a      	ldr	r3, [pc, #296]	; (8008f5c <__kernel_rem_pio2+0x32c>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	4630      	mov	r0, r6
 8008e38:	4639      	mov	r1, r7
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	f7f7 fe8b 	bl	8000b58 <__aeabi_d2iz>
 8008e42:	f7f7 fb6f 	bl	8000524 <__aeabi_i2d>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	ec43 2b18 	vmov	d8, r2, r3
 8008e4e:	4b44      	ldr	r3, [pc, #272]	; (8008f60 <__kernel_rem_pio2+0x330>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	f7f7 fbd1 	bl	80005f8 <__aeabi_dmul>
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	f7f7 fa13 	bl	8000288 <__aeabi_dsub>
 8008e62:	f7f7 fe79 	bl	8000b58 <__aeabi_d2iz>
 8008e66:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e6a:	f84b 0b04 	str.w	r0, [fp], #4
 8008e6e:	ec51 0b18 	vmov	r0, r1, d8
 8008e72:	f7f7 fa0b 	bl	800028c <__adddf3>
 8008e76:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	e75b      	b.n	8008d38 <__kernel_rem_pio2+0x108>
 8008e80:	d106      	bne.n	8008e90 <__kernel_rem_pio2+0x260>
 8008e82:	1e63      	subs	r3, r4, #1
 8008e84:	aa0c      	add	r2, sp, #48	; 0x30
 8008e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e8a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008e8e:	e79d      	b.n	8008dcc <__kernel_rem_pio2+0x19c>
 8008e90:	4b34      	ldr	r3, [pc, #208]	; (8008f64 <__kernel_rem_pio2+0x334>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	f7f7 fe36 	bl	8000b04 <__aeabi_dcmpge>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d140      	bne.n	8008f1e <__kernel_rem_pio2+0x2ee>
 8008e9c:	4683      	mov	fp, r0
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	f7f7 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	f000 80c1 	beq.w	8009032 <__kernel_rem_pio2+0x402>
 8008eb0:	1e65      	subs	r5, r4, #1
 8008eb2:	462b      	mov	r3, r5
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	9900      	ldr	r1, [sp, #0]
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	da6d      	bge.n	8008f98 <__kernel_rem_pio2+0x368>
 8008ebc:	2a00      	cmp	r2, #0
 8008ebe:	f000 808a 	beq.w	8008fd6 <__kernel_rem_pio2+0x3a6>
 8008ec2:	ab0c      	add	r3, sp, #48	; 0x30
 8008ec4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008ec8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80ae 	beq.w	800902e <__kernel_rem_pio2+0x3fe>
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008f48 <__kernel_rem_pio2+0x318>
 8008ed8:	f000 f9fa 	bl	80092d0 <scalbn>
 8008edc:	1c6b      	adds	r3, r5, #1
 8008ede:	00da      	lsls	r2, r3, #3
 8008ee0:	9205      	str	r2, [sp, #20]
 8008ee2:	ec57 6b10 	vmov	r6, r7, d0
 8008ee6:	aa70      	add	r2, sp, #448	; 0x1c0
 8008ee8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008f5c <__kernel_rem_pio2+0x32c>
 8008eec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008ef0:	462c      	mov	r4, r5
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	f280 80d4 	bge.w	80090a4 <__kernel_rem_pio2+0x474>
 8008efc:	462c      	mov	r4, r5
 8008efe:	2c00      	cmp	r4, #0
 8008f00:	f2c0 8102 	blt.w	8009108 <__kernel_rem_pio2+0x4d8>
 8008f04:	4b18      	ldr	r3, [pc, #96]	; (8008f68 <__kernel_rem_pio2+0x338>)
 8008f06:	461e      	mov	r6, r3
 8008f08:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f0a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008f0e:	1b2b      	subs	r3, r5, r4
 8008f10:	f04f 0900 	mov.w	r9, #0
 8008f14:	f04f 0a00 	mov.w	sl, #0
 8008f18:	2700      	movs	r7, #0
 8008f1a:	9306      	str	r3, [sp, #24]
 8008f1c:	e0e6      	b.n	80090ec <__kernel_rem_pio2+0x4bc>
 8008f1e:	f04f 0b02 	mov.w	fp, #2
 8008f22:	e756      	b.n	8008dd2 <__kernel_rem_pio2+0x1a2>
 8008f24:	f8d8 3000 	ldr.w	r3, [r8]
 8008f28:	bb05      	cbnz	r5, 8008f6c <__kernel_rem_pio2+0x33c>
 8008f2a:	b123      	cbz	r3, 8008f36 <__kernel_rem_pio2+0x306>
 8008f2c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008f30:	f8c8 3000 	str.w	r3, [r8]
 8008f34:	2301      	movs	r3, #1
 8008f36:	3201      	adds	r2, #1
 8008f38:	f108 0804 	add.w	r8, r8, #4
 8008f3c:	461d      	mov	r5, r3
 8008f3e:	e74f      	b.n	8008de0 <__kernel_rem_pio2+0x1b0>
	...
 8008f4c:	3ff00000 	.word	0x3ff00000
 8008f50:	08009af0 	.word	0x08009af0
 8008f54:	40200000 	.word	0x40200000
 8008f58:	3ff00000 	.word	0x3ff00000
 8008f5c:	3e700000 	.word	0x3e700000
 8008f60:	41700000 	.word	0x41700000
 8008f64:	3fe00000 	.word	0x3fe00000
 8008f68:	08009ab0 	.word	0x08009ab0
 8008f6c:	1acb      	subs	r3, r1, r3
 8008f6e:	f8c8 3000 	str.w	r3, [r8]
 8008f72:	462b      	mov	r3, r5
 8008f74:	e7df      	b.n	8008f36 <__kernel_rem_pio2+0x306>
 8008f76:	1e62      	subs	r2, r4, #1
 8008f78:	ab0c      	add	r3, sp, #48	; 0x30
 8008f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f82:	a90c      	add	r1, sp, #48	; 0x30
 8008f84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008f88:	e738      	b.n	8008dfc <__kernel_rem_pio2+0x1cc>
 8008f8a:	1e62      	subs	r2, r4, #1
 8008f8c:	ab0c      	add	r3, sp, #48	; 0x30
 8008f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f92:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f96:	e7f4      	b.n	8008f82 <__kernel_rem_pio2+0x352>
 8008f98:	a90c      	add	r1, sp, #48	; 0x30
 8008f9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	e788      	b.n	8008eb6 <__kernel_rem_pio2+0x286>
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d0fa      	beq.n	8008fa4 <__kernel_rem_pio2+0x374>
 8008fae:	9a08      	ldr	r2, [sp, #32]
 8008fb0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008fb4:	446a      	add	r2, sp
 8008fb6:	3a98      	subs	r2, #152	; 0x98
 8008fb8:	9208      	str	r2, [sp, #32]
 8008fba:	9a06      	ldr	r2, [sp, #24]
 8008fbc:	a920      	add	r1, sp, #128	; 0x80
 8008fbe:	18a2      	adds	r2, r4, r2
 8008fc0:	18e3      	adds	r3, r4, r3
 8008fc2:	f104 0801 	add.w	r8, r4, #1
 8008fc6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	9b02      	ldr	r3, [sp, #8]
 8008fce:	4543      	cmp	r3, r8
 8008fd0:	da04      	bge.n	8008fdc <__kernel_rem_pio2+0x3ac>
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	e6a2      	b.n	8008d1c <__kernel_rem_pio2+0xec>
 8008fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e7e4      	b.n	8008fa6 <__kernel_rem_pio2+0x376>
 8008fdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fde:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008fe2:	f7f7 fa9f 	bl	8000524 <__aeabi_i2d>
 8008fe6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fec:	46ab      	mov	fp, r5
 8008fee:	461c      	mov	r4, r3
 8008ff0:	f04f 0900 	mov.w	r9, #0
 8008ff4:	2600      	movs	r6, #0
 8008ff6:	2700      	movs	r7, #0
 8008ff8:	9b05      	ldr	r3, [sp, #20]
 8008ffa:	4599      	cmp	r9, r3
 8008ffc:	dd06      	ble.n	800900c <__kernel_rem_pio2+0x3dc>
 8008ffe:	9b08      	ldr	r3, [sp, #32]
 8009000:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009004:	f108 0801 	add.w	r8, r8, #1
 8009008:	9308      	str	r3, [sp, #32]
 800900a:	e7df      	b.n	8008fcc <__kernel_rem_pio2+0x39c>
 800900c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009010:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009014:	f7f7 faf0 	bl	80005f8 <__aeabi_dmul>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4630      	mov	r0, r6
 800901e:	4639      	mov	r1, r7
 8009020:	f7f7 f934 	bl	800028c <__adddf3>
 8009024:	f109 0901 	add.w	r9, r9, #1
 8009028:	4606      	mov	r6, r0
 800902a:	460f      	mov	r7, r1
 800902c:	e7e4      	b.n	8008ff8 <__kernel_rem_pio2+0x3c8>
 800902e:	3d01      	subs	r5, #1
 8009030:	e747      	b.n	8008ec2 <__kernel_rem_pio2+0x292>
 8009032:	ec47 6b10 	vmov	d0, r6, r7
 8009036:	f1ca 0000 	rsb	r0, sl, #0
 800903a:	f000 f949 	bl	80092d0 <scalbn>
 800903e:	ec57 6b10 	vmov	r6, r7, d0
 8009042:	4ba0      	ldr	r3, [pc, #640]	; (80092c4 <__kernel_rem_pio2+0x694>)
 8009044:	ee10 0a10 	vmov	r0, s0
 8009048:	2200      	movs	r2, #0
 800904a:	4639      	mov	r1, r7
 800904c:	f7f7 fd5a 	bl	8000b04 <__aeabi_dcmpge>
 8009050:	b1f8      	cbz	r0, 8009092 <__kernel_rem_pio2+0x462>
 8009052:	4b9d      	ldr	r3, [pc, #628]	; (80092c8 <__kernel_rem_pio2+0x698>)
 8009054:	2200      	movs	r2, #0
 8009056:	4630      	mov	r0, r6
 8009058:	4639      	mov	r1, r7
 800905a:	f7f7 facd 	bl	80005f8 <__aeabi_dmul>
 800905e:	f7f7 fd7b 	bl	8000b58 <__aeabi_d2iz>
 8009062:	4680      	mov	r8, r0
 8009064:	f7f7 fa5e 	bl	8000524 <__aeabi_i2d>
 8009068:	4b96      	ldr	r3, [pc, #600]	; (80092c4 <__kernel_rem_pio2+0x694>)
 800906a:	2200      	movs	r2, #0
 800906c:	f7f7 fac4 	bl	80005f8 <__aeabi_dmul>
 8009070:	460b      	mov	r3, r1
 8009072:	4602      	mov	r2, r0
 8009074:	4639      	mov	r1, r7
 8009076:	4630      	mov	r0, r6
 8009078:	f7f7 f906 	bl	8000288 <__aeabi_dsub>
 800907c:	f7f7 fd6c 	bl	8000b58 <__aeabi_d2iz>
 8009080:	1c65      	adds	r5, r4, #1
 8009082:	ab0c      	add	r3, sp, #48	; 0x30
 8009084:	f10a 0a18 	add.w	sl, sl, #24
 8009088:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800908c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009090:	e71f      	b.n	8008ed2 <__kernel_rem_pio2+0x2a2>
 8009092:	4630      	mov	r0, r6
 8009094:	4639      	mov	r1, r7
 8009096:	f7f7 fd5f 	bl	8000b58 <__aeabi_d2iz>
 800909a:	ab0c      	add	r3, sp, #48	; 0x30
 800909c:	4625      	mov	r5, r4
 800909e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80090a2:	e716      	b.n	8008ed2 <__kernel_rem_pio2+0x2a2>
 80090a4:	ab0c      	add	r3, sp, #48	; 0x30
 80090a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80090aa:	f7f7 fa3b 	bl	8000524 <__aeabi_i2d>
 80090ae:	4632      	mov	r2, r6
 80090b0:	463b      	mov	r3, r7
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	4642      	mov	r2, r8
 80090b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80090bc:	464b      	mov	r3, r9
 80090be:	4630      	mov	r0, r6
 80090c0:	4639      	mov	r1, r7
 80090c2:	f7f7 fa99 	bl	80005f8 <__aeabi_dmul>
 80090c6:	3c01      	subs	r4, #1
 80090c8:	4606      	mov	r6, r0
 80090ca:	460f      	mov	r7, r1
 80090cc:	e713      	b.n	8008ef6 <__kernel_rem_pio2+0x2c6>
 80090ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80090d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80090d6:	f7f7 fa8f 	bl	80005f8 <__aeabi_dmul>
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	4648      	mov	r0, r9
 80090e0:	4651      	mov	r1, sl
 80090e2:	f7f7 f8d3 	bl	800028c <__adddf3>
 80090e6:	3701      	adds	r7, #1
 80090e8:	4681      	mov	r9, r0
 80090ea:	468a      	mov	sl, r1
 80090ec:	9b00      	ldr	r3, [sp, #0]
 80090ee:	429f      	cmp	r7, r3
 80090f0:	dc02      	bgt.n	80090f8 <__kernel_rem_pio2+0x4c8>
 80090f2:	9b06      	ldr	r3, [sp, #24]
 80090f4:	429f      	cmp	r7, r3
 80090f6:	ddea      	ble.n	80090ce <__kernel_rem_pio2+0x49e>
 80090f8:	9a06      	ldr	r2, [sp, #24]
 80090fa:	ab48      	add	r3, sp, #288	; 0x120
 80090fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009100:	e9c6 9a00 	strd	r9, sl, [r6]
 8009104:	3c01      	subs	r4, #1
 8009106:	e6fa      	b.n	8008efe <__kernel_rem_pio2+0x2ce>
 8009108:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800910a:	2b02      	cmp	r3, #2
 800910c:	dc0b      	bgt.n	8009126 <__kernel_rem_pio2+0x4f6>
 800910e:	2b00      	cmp	r3, #0
 8009110:	dc39      	bgt.n	8009186 <__kernel_rem_pio2+0x556>
 8009112:	d05d      	beq.n	80091d0 <__kernel_rem_pio2+0x5a0>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	f003 0007 	and.w	r0, r3, #7
 800911a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800911e:	ecbd 8b02 	vpop	{d8}
 8009122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009126:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009128:	2b03      	cmp	r3, #3
 800912a:	d1f3      	bne.n	8009114 <__kernel_rem_pio2+0x4e4>
 800912c:	9b05      	ldr	r3, [sp, #20]
 800912e:	9500      	str	r5, [sp, #0]
 8009130:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009134:	eb0d 0403 	add.w	r4, sp, r3
 8009138:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800913c:	46a2      	mov	sl, r4
 800913e:	9b00      	ldr	r3, [sp, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f1aa 0a08 	sub.w	sl, sl, #8
 8009146:	dc69      	bgt.n	800921c <__kernel_rem_pio2+0x5ec>
 8009148:	46aa      	mov	sl, r5
 800914a:	f1ba 0f01 	cmp.w	sl, #1
 800914e:	f1a4 0408 	sub.w	r4, r4, #8
 8009152:	f300 8083 	bgt.w	800925c <__kernel_rem_pio2+0x62c>
 8009156:	9c05      	ldr	r4, [sp, #20]
 8009158:	ab48      	add	r3, sp, #288	; 0x120
 800915a:	441c      	add	r4, r3
 800915c:	2000      	movs	r0, #0
 800915e:	2100      	movs	r1, #0
 8009160:	2d01      	cmp	r5, #1
 8009162:	f300 809a 	bgt.w	800929a <__kernel_rem_pio2+0x66a>
 8009166:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800916a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800916e:	f1bb 0f00 	cmp.w	fp, #0
 8009172:	f040 8098 	bne.w	80092a6 <__kernel_rem_pio2+0x676>
 8009176:	9b04      	ldr	r3, [sp, #16]
 8009178:	e9c3 7800 	strd	r7, r8, [r3]
 800917c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009180:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009184:	e7c6      	b.n	8009114 <__kernel_rem_pio2+0x4e4>
 8009186:	9e05      	ldr	r6, [sp, #20]
 8009188:	ab48      	add	r3, sp, #288	; 0x120
 800918a:	441e      	add	r6, r3
 800918c:	462c      	mov	r4, r5
 800918e:	2000      	movs	r0, #0
 8009190:	2100      	movs	r1, #0
 8009192:	2c00      	cmp	r4, #0
 8009194:	da33      	bge.n	80091fe <__kernel_rem_pio2+0x5ce>
 8009196:	f1bb 0f00 	cmp.w	fp, #0
 800919a:	d036      	beq.n	800920a <__kernel_rem_pio2+0x5da>
 800919c:	4602      	mov	r2, r0
 800919e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091a2:	9c04      	ldr	r4, [sp, #16]
 80091a4:	e9c4 2300 	strd	r2, r3, [r4]
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80091b0:	f7f7 f86a 	bl	8000288 <__aeabi_dsub>
 80091b4:	ae4a      	add	r6, sp, #296	; 0x128
 80091b6:	2401      	movs	r4, #1
 80091b8:	42a5      	cmp	r5, r4
 80091ba:	da29      	bge.n	8009210 <__kernel_rem_pio2+0x5e0>
 80091bc:	f1bb 0f00 	cmp.w	fp, #0
 80091c0:	d002      	beq.n	80091c8 <__kernel_rem_pio2+0x598>
 80091c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091c6:	4619      	mov	r1, r3
 80091c8:	9b04      	ldr	r3, [sp, #16]
 80091ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80091ce:	e7a1      	b.n	8009114 <__kernel_rem_pio2+0x4e4>
 80091d0:	9c05      	ldr	r4, [sp, #20]
 80091d2:	ab48      	add	r3, sp, #288	; 0x120
 80091d4:	441c      	add	r4, r3
 80091d6:	2000      	movs	r0, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	2d00      	cmp	r5, #0
 80091dc:	da09      	bge.n	80091f2 <__kernel_rem_pio2+0x5c2>
 80091de:	f1bb 0f00 	cmp.w	fp, #0
 80091e2:	d002      	beq.n	80091ea <__kernel_rem_pio2+0x5ba>
 80091e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e8:	4619      	mov	r1, r3
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	e9c3 0100 	strd	r0, r1, [r3]
 80091f0:	e790      	b.n	8009114 <__kernel_rem_pio2+0x4e4>
 80091f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091f6:	f7f7 f849 	bl	800028c <__adddf3>
 80091fa:	3d01      	subs	r5, #1
 80091fc:	e7ed      	b.n	80091da <__kernel_rem_pio2+0x5aa>
 80091fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009202:	f7f7 f843 	bl	800028c <__adddf3>
 8009206:	3c01      	subs	r4, #1
 8009208:	e7c3      	b.n	8009192 <__kernel_rem_pio2+0x562>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	e7c8      	b.n	80091a2 <__kernel_rem_pio2+0x572>
 8009210:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009214:	f7f7 f83a 	bl	800028c <__adddf3>
 8009218:	3401      	adds	r4, #1
 800921a:	e7cd      	b.n	80091b8 <__kernel_rem_pio2+0x588>
 800921c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009220:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009224:	9b00      	ldr	r3, [sp, #0]
 8009226:	3b01      	subs	r3, #1
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	4632      	mov	r2, r6
 800922c:	463b      	mov	r3, r7
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f7 f82b 	bl	800028c <__adddf3>
 8009236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4640      	mov	r0, r8
 8009240:	4649      	mov	r1, r9
 8009242:	f7f7 f821 	bl	8000288 <__aeabi_dsub>
 8009246:	4632      	mov	r2, r6
 8009248:	463b      	mov	r3, r7
 800924a:	f7f7 f81f 	bl	800028c <__adddf3>
 800924e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009252:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009256:	ed8a 7b00 	vstr	d7, [sl]
 800925a:	e770      	b.n	800913e <__kernel_rem_pio2+0x50e>
 800925c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009260:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009264:	4640      	mov	r0, r8
 8009266:	4632      	mov	r2, r6
 8009268:	463b      	mov	r3, r7
 800926a:	4649      	mov	r1, r9
 800926c:	f7f7 f80e 	bl	800028c <__adddf3>
 8009270:	e9cd 0100 	strd	r0, r1, [sp]
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4640      	mov	r0, r8
 800927a:	4649      	mov	r1, r9
 800927c:	f7f7 f804 	bl	8000288 <__aeabi_dsub>
 8009280:	4632      	mov	r2, r6
 8009282:	463b      	mov	r3, r7
 8009284:	f7f7 f802 	bl	800028c <__adddf3>
 8009288:	ed9d 7b00 	vldr	d7, [sp]
 800928c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009290:	ed84 7b00 	vstr	d7, [r4]
 8009294:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009298:	e757      	b.n	800914a <__kernel_rem_pio2+0x51a>
 800929a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800929e:	f7f6 fff5 	bl	800028c <__adddf3>
 80092a2:	3d01      	subs	r5, #1
 80092a4:	e75c      	b.n	8009160 <__kernel_rem_pio2+0x530>
 80092a6:	9b04      	ldr	r3, [sp, #16]
 80092a8:	9a04      	ldr	r2, [sp, #16]
 80092aa:	601f      	str	r7, [r3, #0]
 80092ac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80092b0:	605c      	str	r4, [r3, #4]
 80092b2:	609d      	str	r5, [r3, #8]
 80092b4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80092b8:	60d3      	str	r3, [r2, #12]
 80092ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092be:	6110      	str	r0, [r2, #16]
 80092c0:	6153      	str	r3, [r2, #20]
 80092c2:	e727      	b.n	8009114 <__kernel_rem_pio2+0x4e4>
 80092c4:	41700000 	.word	0x41700000
 80092c8:	3e700000 	.word	0x3e700000
 80092cc:	00000000 	.word	0x00000000

080092d0 <scalbn>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	ec55 4b10 	vmov	r4, r5, d0
 80092d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80092da:	4606      	mov	r6, r0
 80092dc:	462b      	mov	r3, r5
 80092de:	b999      	cbnz	r1, 8009308 <scalbn+0x38>
 80092e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092e4:	4323      	orrs	r3, r4
 80092e6:	d03f      	beq.n	8009368 <scalbn+0x98>
 80092e8:	4b35      	ldr	r3, [pc, #212]	; (80093c0 <scalbn+0xf0>)
 80092ea:	4629      	mov	r1, r5
 80092ec:	ee10 0a10 	vmov	r0, s0
 80092f0:	2200      	movs	r2, #0
 80092f2:	f7f7 f981 	bl	80005f8 <__aeabi_dmul>
 80092f6:	4b33      	ldr	r3, [pc, #204]	; (80093c4 <scalbn+0xf4>)
 80092f8:	429e      	cmp	r6, r3
 80092fa:	4604      	mov	r4, r0
 80092fc:	460d      	mov	r5, r1
 80092fe:	da10      	bge.n	8009322 <scalbn+0x52>
 8009300:	a327      	add	r3, pc, #156	; (adr r3, 80093a0 <scalbn+0xd0>)
 8009302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009306:	e01f      	b.n	8009348 <scalbn+0x78>
 8009308:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800930c:	4291      	cmp	r1, r2
 800930e:	d10c      	bne.n	800932a <scalbn+0x5a>
 8009310:	ee10 2a10 	vmov	r2, s0
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f6 ffb8 	bl	800028c <__adddf3>
 800931c:	4604      	mov	r4, r0
 800931e:	460d      	mov	r5, r1
 8009320:	e022      	b.n	8009368 <scalbn+0x98>
 8009322:	460b      	mov	r3, r1
 8009324:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009328:	3936      	subs	r1, #54	; 0x36
 800932a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800932e:	4296      	cmp	r6, r2
 8009330:	dd0d      	ble.n	800934e <scalbn+0x7e>
 8009332:	2d00      	cmp	r5, #0
 8009334:	a11c      	add	r1, pc, #112	; (adr r1, 80093a8 <scalbn+0xd8>)
 8009336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800933a:	da02      	bge.n	8009342 <scalbn+0x72>
 800933c:	a11c      	add	r1, pc, #112	; (adr r1, 80093b0 <scalbn+0xe0>)
 800933e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009342:	a319      	add	r3, pc, #100	; (adr r3, 80093a8 <scalbn+0xd8>)
 8009344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009348:	f7f7 f956 	bl	80005f8 <__aeabi_dmul>
 800934c:	e7e6      	b.n	800931c <scalbn+0x4c>
 800934e:	1872      	adds	r2, r6, r1
 8009350:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009354:	428a      	cmp	r2, r1
 8009356:	dcec      	bgt.n	8009332 <scalbn+0x62>
 8009358:	2a00      	cmp	r2, #0
 800935a:	dd08      	ble.n	800936e <scalbn+0x9e>
 800935c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009360:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009364:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009368:	ec45 4b10 	vmov	d0, r4, r5
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009372:	da08      	bge.n	8009386 <scalbn+0xb6>
 8009374:	2d00      	cmp	r5, #0
 8009376:	a10a      	add	r1, pc, #40	; (adr r1, 80093a0 <scalbn+0xd0>)
 8009378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800937c:	dac0      	bge.n	8009300 <scalbn+0x30>
 800937e:	a10e      	add	r1, pc, #56	; (adr r1, 80093b8 <scalbn+0xe8>)
 8009380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009384:	e7bc      	b.n	8009300 <scalbn+0x30>
 8009386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800938a:	3236      	adds	r2, #54	; 0x36
 800938c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009390:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009394:	4620      	mov	r0, r4
 8009396:	4b0c      	ldr	r3, [pc, #48]	; (80093c8 <scalbn+0xf8>)
 8009398:	2200      	movs	r2, #0
 800939a:	e7d5      	b.n	8009348 <scalbn+0x78>
 800939c:	f3af 8000 	nop.w
 80093a0:	c2f8f359 	.word	0xc2f8f359
 80093a4:	01a56e1f 	.word	0x01a56e1f
 80093a8:	8800759c 	.word	0x8800759c
 80093ac:	7e37e43c 	.word	0x7e37e43c
 80093b0:	8800759c 	.word	0x8800759c
 80093b4:	fe37e43c 	.word	0xfe37e43c
 80093b8:	c2f8f359 	.word	0xc2f8f359
 80093bc:	81a56e1f 	.word	0x81a56e1f
 80093c0:	43500000 	.word	0x43500000
 80093c4:	ffff3cb0 	.word	0xffff3cb0
 80093c8:	3c900000 	.word	0x3c900000
 80093cc:	00000000 	.word	0x00000000

080093d0 <floor>:
 80093d0:	ec51 0b10 	vmov	r0, r1, d0
 80093d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80093e0:	2e13      	cmp	r6, #19
 80093e2:	ee10 5a10 	vmov	r5, s0
 80093e6:	ee10 8a10 	vmov	r8, s0
 80093ea:	460c      	mov	r4, r1
 80093ec:	dc31      	bgt.n	8009452 <floor+0x82>
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	da14      	bge.n	800941c <floor+0x4c>
 80093f2:	a333      	add	r3, pc, #204	; (adr r3, 80094c0 <floor+0xf0>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f7f6 ff48 	bl	800028c <__adddf3>
 80093fc:	2200      	movs	r2, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	f7f7 fb8a 	bl	8000b18 <__aeabi_dcmpgt>
 8009404:	b138      	cbz	r0, 8009416 <floor+0x46>
 8009406:	2c00      	cmp	r4, #0
 8009408:	da53      	bge.n	80094b2 <floor+0xe2>
 800940a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800940e:	4325      	orrs	r5, r4
 8009410:	d052      	beq.n	80094b8 <floor+0xe8>
 8009412:	4c2d      	ldr	r4, [pc, #180]	; (80094c8 <floor+0xf8>)
 8009414:	2500      	movs	r5, #0
 8009416:	4621      	mov	r1, r4
 8009418:	4628      	mov	r0, r5
 800941a:	e024      	b.n	8009466 <floor+0x96>
 800941c:	4f2b      	ldr	r7, [pc, #172]	; (80094cc <floor+0xfc>)
 800941e:	4137      	asrs	r7, r6
 8009420:	ea01 0307 	and.w	r3, r1, r7
 8009424:	4303      	orrs	r3, r0
 8009426:	d01e      	beq.n	8009466 <floor+0x96>
 8009428:	a325      	add	r3, pc, #148	; (adr r3, 80094c0 <floor+0xf0>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f6 ff2d 	bl	800028c <__adddf3>
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800943a:	2800      	cmp	r0, #0
 800943c:	d0eb      	beq.n	8009416 <floor+0x46>
 800943e:	2c00      	cmp	r4, #0
 8009440:	bfbe      	ittt	lt
 8009442:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009446:	4133      	asrlt	r3, r6
 8009448:	18e4      	addlt	r4, r4, r3
 800944a:	ea24 0407 	bic.w	r4, r4, r7
 800944e:	2500      	movs	r5, #0
 8009450:	e7e1      	b.n	8009416 <floor+0x46>
 8009452:	2e33      	cmp	r6, #51	; 0x33
 8009454:	dd0b      	ble.n	800946e <floor+0x9e>
 8009456:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800945a:	d104      	bne.n	8009466 <floor+0x96>
 800945c:	ee10 2a10 	vmov	r2, s0
 8009460:	460b      	mov	r3, r1
 8009462:	f7f6 ff13 	bl	800028c <__adddf3>
 8009466:	ec41 0b10 	vmov	d0, r0, r1
 800946a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009472:	f04f 37ff 	mov.w	r7, #4294967295
 8009476:	40df      	lsrs	r7, r3
 8009478:	4238      	tst	r0, r7
 800947a:	d0f4      	beq.n	8009466 <floor+0x96>
 800947c:	a310      	add	r3, pc, #64	; (adr r3, 80094c0 <floor+0xf0>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f7f6 ff03 	bl	800028c <__adddf3>
 8009486:	2200      	movs	r2, #0
 8009488:	2300      	movs	r3, #0
 800948a:	f7f7 fb45 	bl	8000b18 <__aeabi_dcmpgt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d0c1      	beq.n	8009416 <floor+0x46>
 8009492:	2c00      	cmp	r4, #0
 8009494:	da0a      	bge.n	80094ac <floor+0xdc>
 8009496:	2e14      	cmp	r6, #20
 8009498:	d101      	bne.n	800949e <floor+0xce>
 800949a:	3401      	adds	r4, #1
 800949c:	e006      	b.n	80094ac <floor+0xdc>
 800949e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80094a2:	2301      	movs	r3, #1
 80094a4:	40b3      	lsls	r3, r6
 80094a6:	441d      	add	r5, r3
 80094a8:	45a8      	cmp	r8, r5
 80094aa:	d8f6      	bhi.n	800949a <floor+0xca>
 80094ac:	ea25 0507 	bic.w	r5, r5, r7
 80094b0:	e7b1      	b.n	8009416 <floor+0x46>
 80094b2:	2500      	movs	r5, #0
 80094b4:	462c      	mov	r4, r5
 80094b6:	e7ae      	b.n	8009416 <floor+0x46>
 80094b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80094bc:	e7ab      	b.n	8009416 <floor+0x46>
 80094be:	bf00      	nop
 80094c0:	8800759c 	.word	0x8800759c
 80094c4:	7e37e43c 	.word	0x7e37e43c
 80094c8:	bff00000 	.word	0xbff00000
 80094cc:	000fffff 	.word	0x000fffff

080094d0 <_init>:
 80094d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d2:	bf00      	nop
 80094d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d6:	bc08      	pop	{r3}
 80094d8:	469e      	mov	lr, r3
 80094da:	4770      	bx	lr

080094dc <_fini>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	bf00      	nop
 80094e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094e2:	bc08      	pop	{r3}
 80094e4:	469e      	mov	lr, r3
 80094e6:	4770      	bx	lr
